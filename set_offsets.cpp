// Atribuições para CAnimFrameBlockAnim
// CAnimFrameBlockAnim Offsets
CAnimFrameBlockAnim.m_nStartFrame = findOffsetByName(j, "CAnimFrameBlockAnim", "m_nStartFrame");
CAnimFrameBlockAnim.m_nEndFrame = findOffsetByName(j, "CAnimFrameBlockAnim", "m_nEndFrame");
CAnimFrameBlockAnim.m_segmentIndexArray = findOffsetByName(j, "CAnimFrameBlockAnim", "m_segmentIndexArray");

// Atribuições para CSlowDownOnSlopesUpdateNode
// CSlowDownOnSlopesUpdateNode Offsets
CSlowDownOnSlopesUpdateNode.m_flSlowDownStrength = findOffsetByName(j, "CSlowDownOnSlopesUpdateNode", "m_flSlowDownStrength");

// Atribuições para COrientationWarpUpdateNode
// COrientationWarpUpdateNode Offsets
COrientationWarpUpdateNode.m_hFacingPositionParameter = findOffsetByName(j, "COrientationWarpUpdateNode", "m_hFacingPositionParameter");
COrientationWarpUpdateNode.m_turnDamping = findOffsetByName(j, "COrientationWarpUpdateNode", "m_turnDamping");

// Atribuições para CAnimParameterBase
// CAnimParameterBase Offsets
CAnimParameterBase.m_name = findOffsetByName(j, "CAnimParameterBase", "m_name");
CAnimParameterBase.m_sComment = findOffsetByName(j, "CAnimParameterBase", "m_sComment");
CAnimParameterBase.m_group = findOffsetByName(j, "CAnimParameterBase", "m_group");
CAnimParameterBase.m_id = findOffsetByName(j, "CAnimParameterBase", "m_id");
CAnimParameterBase.m_componentName = findOffsetByName(j, "CAnimParameterBase", "m_componentName");
CAnimParameterBase.m_bNetworkingRequested = findOffsetByName(j, "CAnimParameterBase", "m_bNetworkingRequested");
CAnimParameterBase.m_bIsReferenced = findOffsetByName(j, "CAnimParameterBase", "m_bIsReferenced");

// Atribuições para CSequenceFinishedAnimTag
// CSequenceFinishedAnimTag Offsets
CSequenceFinishedAnimTag.m_sequenceName = findOffsetByName(j, "CSequenceFinishedAnimTag", "m_sequenceName");

// Atribuições para CSceneObjectData
// CSceneObjectData Offsets
CSceneObjectData.m_vMinBounds = findOffsetByName(j, "CSceneObjectData", "m_vMinBounds");
CSceneObjectData.m_vMaxBounds = findOffsetByName(j, "CSceneObjectData", "m_vMaxBounds");
CSceneObjectData.m_drawCalls = findOffsetByName(j, "CSceneObjectData", "m_drawCalls");
CSceneObjectData.m_drawBounds = findOffsetByName(j, "CSceneObjectData", "m_drawBounds");
CSceneObjectData.m_meshlets = findOffsetByName(j, "CSceneObjectData", "m_meshlets");
CSceneObjectData.m_vTintColor = findOffsetByName(j, "CSceneObjectData", "m_vTintColor");

// Atribuições para CIntAnimParameter
// CIntAnimParameter Offsets
CIntAnimParameter.m_defaultValue = findOffsetByName(j, "CIntAnimParameter", "m_defaultValue");
CIntAnimParameter.m_minValue = findOffsetByName(j, "CIntAnimParameter", "m_minValue");
CIntAnimParameter.m_maxValue = findOffsetByName(j, "CIntAnimParameter", "m_maxValue");

// Atribuições para CNmParameterizedBlendNode__CDefinition
// CNmParameterizedBlendNode__CDefinition Offsets
CNmParameterizedBlendNode__CDefinition.m_sourceNodeIndices = findOffsetByName(j, "CNmParameterizedBlendNode__CDefinition", "m_sourceNodeIndices");
CNmParameterizedBlendNode__CDefinition.m_nInputParameterValueNodeIdx = findOffsetByName(j, "CNmParameterizedBlendNode__CDefinition", "m_nInputParameterValueNodeIdx");
CNmParameterizedBlendNode__CDefinition.m_bAllowLooping = findOffsetByName(j, "CNmParameterizedBlendNode__CDefinition", "m_bAllowLooping");

// Atribuições para CNmFrameSnapEvent
// CNmFrameSnapEvent Offsets
CNmFrameSnapEvent.m_frameSnapMode = findOffsetByName(j, "CNmFrameSnapEvent", "m_frameSnapMode");

// Atribuições para CAnimNodePath
// CAnimNodePath Offsets
CAnimNodePath.m_path = findOffsetByName(j, "CAnimNodePath", "m_path");
CAnimNodePath.m_nCount = findOffsetByName(j, "CAnimNodePath", "m_nCount");

// Atribuições para AnimNodeOutputID
// AnimNodeOutputID Offsets
AnimNodeOutputID.m_id = findOffsetByName(j, "AnimNodeOutputID", "m_id");

// Atribuições para CNmSyncTrack
// CNmSyncTrack Offsets
CNmSyncTrack.m_syncEvents = findOffsetByName(j, "CNmSyncTrack", "m_syncEvents");
CNmSyncTrack.m_nStartEventOffset = findOffsetByName(j, "CNmSyncTrack", "m_nStartEventOffset");

// Atribuições para CSeqBoneMaskList
// CSeqBoneMaskList Offsets
CSeqBoneMaskList.m_sName = findOffsetByName(j, "CSeqBoneMaskList", "m_sName");
CSeqBoneMaskList.m_nLocalBoneArray = findOffsetByName(j, "CSeqBoneMaskList", "m_nLocalBoneArray");
CSeqBoneMaskList.m_flBoneWeightArray = findOffsetByName(j, "CSeqBoneMaskList", "m_flBoneWeightArray");
CSeqBoneMaskList.m_flDefaultMorphCtrlWeight = findOffsetByName(j, "CSeqBoneMaskList", "m_flDefaultMorphCtrlWeight");
CSeqBoneMaskList.m_morphCtrlWeightArray = findOffsetByName(j, "CSeqBoneMaskList", "m_morphCtrlWeightArray");

// Atribuições para CAnimEncodedFrames
// CAnimEncodedFrames Offsets
CAnimEncodedFrames.m_fileName = findOffsetByName(j, "CAnimEncodedFrames", "m_fileName");
CAnimEncodedFrames.m_nFrames = findOffsetByName(j, "CAnimEncodedFrames", "m_nFrames");
CAnimEncodedFrames.m_nFramesPerBlock = findOffsetByName(j, "CAnimEncodedFrames", "m_nFramesPerBlock");
CAnimEncodedFrames.m_frameblockArray = findOffsetByName(j, "CAnimEncodedFrames", "m_frameblockArray");
CAnimEncodedFrames.m_usageDifferences = findOffsetByName(j, "CAnimEncodedFrames", "m_usageDifferences");

// Atribuições para SampleCode
// SampleCode Offsets
SampleCode.m_subCode = findOffsetByName(j, "SampleCode", "m_subCode");

// Atribuições para CCachedPose
// CCachedPose Offsets
CCachedPose.m_transforms = findOffsetByName(j, "CCachedPose", "m_transforms");
CCachedPose.m_morphWeights = findOffsetByName(j, "CCachedPose", "m_morphWeights");
CCachedPose.m_hSequence = findOffsetByName(j, "CCachedPose", "m_hSequence");
CCachedPose.m_flCycle = findOffsetByName(j, "CCachedPose", "m_flCycle");

// Atribuições para CNmTransitionEventConditionNode__CDefinition
// CNmTransitionEventConditionNode__CDefinition Offsets
CNmTransitionEventConditionNode__CDefinition.m_requireRuleID = findOffsetByName(j, "CNmTransitionEventConditionNode__CDefinition", "m_requireRuleID");
CNmTransitionEventConditionNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmTransitionEventConditionNode__CDefinition", "m_eventConditionRules");
CNmTransitionEventConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmTransitionEventConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmTransitionEventConditionNode__CDefinition.m_ruleCondition = findOffsetByName(j, "CNmTransitionEventConditionNode__CDefinition", "m_ruleCondition");

// Atribuições para CMotionGraphConfig
// CMotionGraphConfig Offsets
CMotionGraphConfig.m_paramValues = findOffsetByName(j, "CMotionGraphConfig", "m_paramValues");
CMotionGraphConfig.m_flDuration = findOffsetByName(j, "CMotionGraphConfig", "m_flDuration");
CMotionGraphConfig.m_nMotionIndex = findOffsetByName(j, "CMotionGraphConfig", "m_nMotionIndex");
CMotionGraphConfig.m_nSampleStart = findOffsetByName(j, "CMotionGraphConfig", "m_nSampleStart");
CMotionGraphConfig.m_nSampleCount = findOffsetByName(j, "CMotionGraphConfig", "m_nSampleCount");

// Atribuições para CMotionSearchNode
// CMotionSearchNode Offsets
CMotionSearchNode.m_children = findOffsetByName(j, "CMotionSearchNode", "m_children");
CMotionSearchNode.m_quantizer = findOffsetByName(j, "CMotionSearchNode", "m_quantizer");
CMotionSearchNode.m_sampleCodes = findOffsetByName(j, "CMotionSearchNode", "m_sampleCodes");
CMotionSearchNode.m_sampleIndices = findOffsetByName(j, "CMotionSearchNode", "m_sampleIndices");
CMotionSearchNode.m_selectableSamples = findOffsetByName(j, "CMotionSearchNode", "m_selectableSamples");

// Atribuições para CAnimActivity
// CAnimActivity Offsets
CAnimActivity.m_name = findOffsetByName(j, "CAnimActivity", "m_name");
CAnimActivity.m_nActivity = findOffsetByName(j, "CAnimActivity", "m_nActivity");
CAnimActivity.m_nFlags = findOffsetByName(j, "CAnimActivity", "m_nFlags");
CAnimActivity.m_nWeight = findOffsetByName(j, "CAnimActivity", "m_nWeight");

// Atribuições para CAnimScriptManager
// CAnimScriptManager Offsets
CAnimScriptManager.m_scriptInfo = findOffsetByName(j, "CAnimScriptManager", "m_scriptInfo");

// Atribuições para AnimationDecodeDebugDumpElement_t
// AnimationDecodeDebugDumpElement_t Offsets
AnimationDecodeDebugDumpElement_t.m_nEntityIndex = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_nEntityIndex");
AnimationDecodeDebugDumpElement_t.m_modelName = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_modelName");
AnimationDecodeDebugDumpElement_t.m_poseParams = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_poseParams");
AnimationDecodeDebugDumpElement_t.m_decodeOps = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_decodeOps");
AnimationDecodeDebugDumpElement_t.m_internalOps = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_internalOps");
AnimationDecodeDebugDumpElement_t.m_decodedAnims = findOffsetByName(j, "AnimationDecodeDebugDumpElement_t", "m_decodedAnims");

// Atribuições para ConfigIndex
// ConfigIndex Offsets
ConfigIndex.m_nGroup = findOffsetByName(j, "ConfigIndex", "m_nGroup");
ConfigIndex.m_nConfig = findOffsetByName(j, "ConfigIndex", "m_nConfig");

// Atribuições para VPhysXCollisionAttributes_t
// VPhysXCollisionAttributes_t Offsets
VPhysXCollisionAttributes_t.m_CollisionGroup = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_CollisionGroup");
VPhysXCollisionAttributes_t.m_InteractAs = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractAs");
VPhysXCollisionAttributes_t.m_InteractWith = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractWith");
VPhysXCollisionAttributes_t.m_InteractExclude = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractExclude");
VPhysXCollisionAttributes_t.m_CollisionGroupString = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_CollisionGroupString");
VPhysXCollisionAttributes_t.m_InteractAsStrings = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractAsStrings");
VPhysXCollisionAttributes_t.m_InteractWithStrings = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractWithStrings");
VPhysXCollisionAttributes_t.m_InteractExcludeStrings = findOffsetByName(j, "VPhysXCollisionAttributes_t", "m_InteractExcludeStrings");

// Atribuições para CSequenceUpdateNode
// CSequenceUpdateNode Offsets
CSequenceUpdateNode.m_hSequence = findOffsetByName(j, "CSequenceUpdateNode", "m_hSequence");
CSequenceUpdateNode.m_duration = findOffsetByName(j, "CSequenceUpdateNode", "m_duration");
CSequenceUpdateNode.m_paramSpans = findOffsetByName(j, "CSequenceUpdateNode", "m_paramSpans");
CSequenceUpdateNode.m_tags = findOffsetByName(j, "CSequenceUpdateNode", "m_tags");

// Atribuições para CNmPassthroughNode__CDefinition
// CNmPassthroughNode__CDefinition Offsets
CNmPassthroughNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmPassthroughNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CNmGraphDefinition__ExternalGraphSlot_t
// CNmGraphDefinition__ExternalGraphSlot_t Offsets
CNmGraphDefinition__ExternalGraphSlot_t.m_nNodeIdx = findOffsetByName(j, "CNmGraphDefinition__ExternalGraphSlot_t", "m_nNodeIdx");
CNmGraphDefinition__ExternalGraphSlot_t.m_slotID = findOffsetByName(j, "CNmGraphDefinition__ExternalGraphSlot_t", "m_slotID");

// Atribuições para CAimCameraUpdateNode
// CAimCameraUpdateNode Offsets
CAimCameraUpdateNode.m_hParameterPosition = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterPosition");
CAimCameraUpdateNode.m_hParameterOrientation = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterOrientation");
CAimCameraUpdateNode.m_hParameterSpineRotationWeight = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterSpineRotationWeight");
CAimCameraUpdateNode.m_hParameterPelvisOffset = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterPelvisOffset");
CAimCameraUpdateNode.m_hParameterUseIK = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterUseIK");
CAimCameraUpdateNode.m_hParameterCameraOnly = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterCameraOnly");
CAimCameraUpdateNode.m_hParameterWeaponDepenetrationDistance = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterWeaponDepenetrationDistance");
CAimCameraUpdateNode.m_hParameterWeaponDepenetrationDelta = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterWeaponDepenetrationDelta");
CAimCameraUpdateNode.m_hParameterCameraClearanceDistance = findOffsetByName(j, "CAimCameraUpdateNode", "m_hParameterCameraClearanceDistance");
CAimCameraUpdateNode.m_opFixedSettings = findOffsetByName(j, "CAimCameraUpdateNode", "m_opFixedSettings");

// Atribuições para CSeqSeqDescFlag
// CSeqSeqDescFlag Offsets
CSeqSeqDescFlag.m_bLooping = findOffsetByName(j, "CSeqSeqDescFlag", "m_bLooping");
CSeqSeqDescFlag.m_bSnap = findOffsetByName(j, "CSeqSeqDescFlag", "m_bSnap");
CSeqSeqDescFlag.m_bAutoplay = findOffsetByName(j, "CSeqSeqDescFlag", "m_bAutoplay");
CSeqSeqDescFlag.m_bPost = findOffsetByName(j, "CSeqSeqDescFlag", "m_bPost");
CSeqSeqDescFlag.m_bHidden = findOffsetByName(j, "CSeqSeqDescFlag", "m_bHidden");
CSeqSeqDescFlag.m_bMulti = findOffsetByName(j, "CSeqSeqDescFlag", "m_bMulti");
CSeqSeqDescFlag.m_bLegacyDelta = findOffsetByName(j, "CSeqSeqDescFlag", "m_bLegacyDelta");
CSeqSeqDescFlag.m_bLegacyWorldspace = findOffsetByName(j, "CSeqSeqDescFlag", "m_bLegacyWorldspace");
CSeqSeqDescFlag.m_bLegacyCyclepose = findOffsetByName(j, "CSeqSeqDescFlag", "m_bLegacyCyclepose");
CSeqSeqDescFlag.m_bLegacyRealtime = findOffsetByName(j, "CSeqSeqDescFlag", "m_bLegacyRealtime");
CSeqSeqDescFlag.m_bModelDoc = findOffsetByName(j, "CSeqSeqDescFlag", "m_bModelDoc");

// Atribuições para PermModelInfo_t
// PermModelInfo_t Offsets
PermModelInfo_t.m_nFlags = findOffsetByName(j, "PermModelInfo_t", "m_nFlags");
PermModelInfo_t.m_vHullMin = findOffsetByName(j, "PermModelInfo_t", "m_vHullMin");
PermModelInfo_t.m_vHullMax = findOffsetByName(j, "PermModelInfo_t", "m_vHullMax");
PermModelInfo_t.m_vViewMin = findOffsetByName(j, "PermModelInfo_t", "m_vViewMin");
PermModelInfo_t.m_vViewMax = findOffsetByName(j, "PermModelInfo_t", "m_vViewMax");
PermModelInfo_t.m_flMass = findOffsetByName(j, "PermModelInfo_t", "m_flMass");
PermModelInfo_t.m_vEyePosition = findOffsetByName(j, "PermModelInfo_t", "m_vEyePosition");
PermModelInfo_t.m_flMaxEyeDeflection = findOffsetByName(j, "PermModelInfo_t", "m_flMaxEyeDeflection");
PermModelInfo_t.m_sSurfaceProperty = findOffsetByName(j, "PermModelInfo_t", "m_sSurfaceProperty");
PermModelInfo_t.m_keyValueText = findOffsetByName(j, "PermModelInfo_t", "m_keyValueText");

// Atribuições para StanceInfo_t
// StanceInfo_t Offsets
StanceInfo_t.m_vPosition = findOffsetByName(j, "StanceInfo_t", "m_vPosition");
StanceInfo_t.m_flDirection = findOffsetByName(j, "StanceInfo_t", "m_flDirection");

// Atribuições para IKBoneNameAndIndex_t
// IKBoneNameAndIndex_t Offsets
IKBoneNameAndIndex_t.m_Name = findOffsetByName(j, "IKBoneNameAndIndex_t", "m_Name");

// Atribuições para CStanceScaleUpdateNode
// CStanceScaleUpdateNode Offsets
CStanceScaleUpdateNode.m_hParam = findOffsetByName(j, "CStanceScaleUpdateNode", "m_hParam");

// Atribuições para CNmBoneMaskBlendNode__CDefinition
// CNmBoneMaskBlendNode__CDefinition Offsets
CNmBoneMaskBlendNode__CDefinition.m_nSourceMaskNodeIdx = findOffsetByName(j, "CNmBoneMaskBlendNode__CDefinition", "m_nSourceMaskNodeIdx");
CNmBoneMaskBlendNode__CDefinition.m_nTargetMaskNodeIdx = findOffsetByName(j, "CNmBoneMaskBlendNode__CDefinition", "m_nTargetMaskNodeIdx");
CNmBoneMaskBlendNode__CDefinition.m_nBlendWeightValueNodeIdx = findOffsetByName(j, "CNmBoneMaskBlendNode__CDefinition", "m_nBlendWeightValueNodeIdx");

// Atribuições para CNmIDEventNode__CDefinition
// CNmIDEventNode__CDefinition Offsets
CNmIDEventNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmIDEventNode__CDefinition", "m_nSourceStateNodeIdx");
CNmIDEventNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmIDEventNode__CDefinition", "m_eventConditionRules");
CNmIDEventNode__CDefinition.m_defaultValue = findOffsetByName(j, "CNmIDEventNode__CDefinition", "m_defaultValue");

// Atribuições para HitReactFixedSettings_t
// HitReactFixedSettings_t Offsets
HitReactFixedSettings_t.m_nWeightListIndex = findOffsetByName(j, "HitReactFixedSettings_t", "m_nWeightListIndex");
HitReactFixedSettings_t.m_nEffectedBoneCount = findOffsetByName(j, "HitReactFixedSettings_t", "m_nEffectedBoneCount");
HitReactFixedSettings_t.m_flMaxImpactForce = findOffsetByName(j, "HitReactFixedSettings_t", "m_flMaxImpactForce");
HitReactFixedSettings_t.m_flMinImpactForce = findOffsetByName(j, "HitReactFixedSettings_t", "m_flMinImpactForce");
HitReactFixedSettings_t.m_flWhipImpactScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flWhipImpactScale");
HitReactFixedSettings_t.m_flCounterRotationScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flCounterRotationScale");
HitReactFixedSettings_t.m_flDistanceFadeScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flDistanceFadeScale");
HitReactFixedSettings_t.m_flPropagationScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flPropagationScale");
HitReactFixedSettings_t.m_flWhipDelay = findOffsetByName(j, "HitReactFixedSettings_t", "m_flWhipDelay");
HitReactFixedSettings_t.m_flSpringStrength = findOffsetByName(j, "HitReactFixedSettings_t", "m_flSpringStrength");
HitReactFixedSettings_t.m_flWhipSpringStrength = findOffsetByName(j, "HitReactFixedSettings_t", "m_flWhipSpringStrength");
HitReactFixedSettings_t.m_flMaxAngleRadians = findOffsetByName(j, "HitReactFixedSettings_t", "m_flMaxAngleRadians");
HitReactFixedSettings_t.m_nHipBoneIndex = findOffsetByName(j, "HitReactFixedSettings_t", "m_nHipBoneIndex");
HitReactFixedSettings_t.m_flHipBoneTranslationScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flHipBoneTranslationScale");
HitReactFixedSettings_t.m_flHipDipSpringStrength = findOffsetByName(j, "HitReactFixedSettings_t", "m_flHipDipSpringStrength");
HitReactFixedSettings_t.m_flHipDipImpactScale = findOffsetByName(j, "HitReactFixedSettings_t", "m_flHipDipImpactScale");
HitReactFixedSettings_t.m_flHipDipDelay = findOffsetByName(j, "HitReactFixedSettings_t", "m_flHipDipDelay");

// Atribuições para CAnimTagBase
// CAnimTagBase Offsets
CAnimTagBase.m_name = findOffsetByName(j, "CAnimTagBase", "m_name");
CAnimTagBase.m_sComment = findOffsetByName(j, "CAnimTagBase", "m_sComment");
CAnimTagBase.m_group = findOffsetByName(j, "CAnimTagBase", "m_group");
CAnimTagBase.m_tagID = findOffsetByName(j, "CAnimTagBase", "m_tagID");
CAnimTagBase.m_bIsReferenced = findOffsetByName(j, "CAnimTagBase", "m_bIsReferenced");

// Atribuições para CMotionGraph
// CMotionGraph Offsets
CMotionGraph.m_paramSpans = findOffsetByName(j, "CMotionGraph", "m_paramSpans");
CMotionGraph.m_tags = findOffsetByName(j, "CMotionGraph", "m_tags");
CMotionGraph.m_pRootNode = findOffsetByName(j, "CMotionGraph", "m_pRootNode");
CMotionGraph.m_nParameterCount = findOffsetByName(j, "CMotionGraph", "m_nParameterCount");
CMotionGraph.m_nConfigStartIndex = findOffsetByName(j, "CMotionGraph", "m_nConfigStartIndex");
CMotionGraph.m_nConfigCount = findOffsetByName(j, "CMotionGraph", "m_nConfigCount");
CMotionGraph.m_bLoop = findOffsetByName(j, "CMotionGraph", "m_bLoop");

// Atribuições para CNmVectorInfoNode__CDefinition
// CNmVectorInfoNode__CDefinition Offsets
CNmVectorInfoNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmVectorInfoNode__CDefinition", "m_nInputValueNodeIdx");
CNmVectorInfoNode__CDefinition.m_desiredInfo = findOffsetByName(j, "CNmVectorInfoNode__CDefinition", "m_desiredInfo");

// Atribuições para AnimationSnapshot_t
// AnimationSnapshot_t Offsets
AnimationSnapshot_t.m_nEntIndex = findOffsetByName(j, "AnimationSnapshot_t", "m_nEntIndex");
AnimationSnapshot_t.m_modelName = findOffsetByName(j, "AnimationSnapshot_t", "m_modelName");

// Atribuições para CSeqTransition
// CSeqTransition Offsets
CSeqTransition.m_flFadeInTime = findOffsetByName(j, "CSeqTransition", "m_flFadeInTime");
CSeqTransition.m_flFadeOutTime = findOffsetByName(j, "CSeqTransition", "m_flFadeOutTime");

// Atribuições para CNmVirtualParameterTargetNode__CDefinition
// CNmVirtualParameterTargetNode__CDefinition Offsets
CNmVirtualParameterTargetNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterTargetNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CAnimGraphDebugReplay
// CAnimGraphDebugReplay Offsets
CAnimGraphDebugReplay.m_animGraphFileName = findOffsetByName(j, "CAnimGraphDebugReplay", "m_animGraphFileName");
CAnimGraphDebugReplay.m_frameList = findOffsetByName(j, "CAnimGraphDebugReplay", "m_frameList");
CAnimGraphDebugReplay.m_startIndex = findOffsetByName(j, "CAnimGraphDebugReplay", "m_startIndex");
CAnimGraphDebugReplay.m_writeIndex = findOffsetByName(j, "CAnimGraphDebugReplay", "m_writeIndex");
CAnimGraphDebugReplay.m_frameCount = findOffsetByName(j, "CAnimGraphDebugReplay", "m_frameCount");

// Atribuições para CVectorAnimParameter
// CVectorAnimParameter Offsets
CVectorAnimParameter.m_defaultValue = findOffsetByName(j, "CVectorAnimParameter", "m_defaultValue");
CVectorAnimParameter.m_bInterpolate = findOffsetByName(j, "CVectorAnimParameter", "m_bInterpolate");

// Atribuições para CNmStateMachineNode__StateDefinition_t
// CNmStateMachineNode__StateDefinition_t Offsets
CNmStateMachineNode__StateDefinition_t.m_nStateNodeIdx = findOffsetByName(j, "CNmStateMachineNode__StateDefinition_t", "m_nStateNodeIdx");
CNmStateMachineNode__StateDefinition_t.m_nEntryConditionNodeIdx = findOffsetByName(j, "CNmStateMachineNode__StateDefinition_t", "m_nEntryConditionNodeIdx");
CNmStateMachineNode__StateDefinition_t.m_transitionDefinitions = findOffsetByName(j, "CNmStateMachineNode__StateDefinition_t", "m_transitionDefinitions");

// Atribuições para CStanceOverrideUpdateNode
// CStanceOverrideUpdateNode Offsets
CStanceOverrideUpdateNode.m_footStanceInfo = findOffsetByName(j, "CStanceOverrideUpdateNode", "m_footStanceInfo");
CStanceOverrideUpdateNode.m_pStanceSourceNode = findOffsetByName(j, "CStanceOverrideUpdateNode", "m_pStanceSourceNode");
CStanceOverrideUpdateNode.m_hParameter = findOffsetByName(j, "CStanceOverrideUpdateNode", "m_hParameter");
CStanceOverrideUpdateNode.m_eMode = findOffsetByName(j, "CStanceOverrideUpdateNode", "m_eMode");

// Atribuições para LookAtBone_t
// LookAtBone_t Offsets
LookAtBone_t.m_index = findOffsetByName(j, "LookAtBone_t", "m_index");
LookAtBone_t.m_weight = findOffsetByName(j, "LookAtBone_t", "m_weight");

// Atribuições para CNmTransitionNode__CDefinition
// CNmTransitionNode__CDefinition Offsets
CNmTransitionNode__CDefinition.m_nTargetStateNodeIdx = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_nTargetStateNodeIdx");
CNmTransitionNode__CDefinition.m_nDurationOverrideNodeIdx = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_nDurationOverrideNodeIdx");
CNmTransitionNode__CDefinition.m_syncEventOffsetOverrideNodeIdx = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_syncEventOffsetOverrideNodeIdx");
CNmTransitionNode__CDefinition.m_startBoneMaskNodeIdx = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_startBoneMaskNodeIdx");
CNmTransitionNode__CDefinition.m_flDuration = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_flDuration");
CNmTransitionNode__CDefinition.m_boneMaskBlendInTimePercentage = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_boneMaskBlendInTimePercentage");
CNmTransitionNode__CDefinition.m_syncEventOffset = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_syncEventOffset");
CNmTransitionNode__CDefinition.m_transitionOptions = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_transitionOptions");
CNmTransitionNode__CDefinition.m_targetSyncIDNodeIdx = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_targetSyncIDNodeIdx");
CNmTransitionNode__CDefinition.m_blendWeightEasing = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_blendWeightEasing");
CNmTransitionNode__CDefinition.m_rootMotionBlend = findOffsetByName(j, "CNmTransitionNode__CDefinition", "m_rootMotionBlend");

// Atribuições para CNmFloatEaseNode__CDefinition
// CNmFloatEaseNode__CDefinition Offsets
CNmFloatEaseNode__CDefinition.m_flEaseTime = findOffsetByName(j, "CNmFloatEaseNode__CDefinition", "m_flEaseTime");
CNmFloatEaseNode__CDefinition.m_flStartValue = findOffsetByName(j, "CNmFloatEaseNode__CDefinition", "m_flStartValue");
CNmFloatEaseNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatEaseNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatEaseNode__CDefinition.m_easingOp = findOffsetByName(j, "CNmFloatEaseNode__CDefinition", "m_easingOp");
CNmFloatEaseNode__CDefinition.m_bUseStartValue = findOffsetByName(j, "CNmFloatEaseNode__CDefinition", "m_bUseStartValue");

// Atribuições para CAnimEncodeDifference
// CAnimEncodeDifference Offsets
CAnimEncodeDifference.m_boneArray = findOffsetByName(j, "CAnimEncodeDifference", "m_boneArray");
CAnimEncodeDifference.m_morphArray = findOffsetByName(j, "CAnimEncodeDifference", "m_morphArray");
CAnimEncodeDifference.m_userArray = findOffsetByName(j, "CAnimEncodeDifference", "m_userArray");
CAnimEncodeDifference.m_bHasRotationBitArray = findOffsetByName(j, "CAnimEncodeDifference", "m_bHasRotationBitArray");
CAnimEncodeDifference.m_bHasMovementBitArray = findOffsetByName(j, "CAnimEncodeDifference", "m_bHasMovementBitArray");
CAnimEncodeDifference.m_bHasMorphBitArray = findOffsetByName(j, "CAnimEncodeDifference", "m_bHasMorphBitArray");
CAnimEncodeDifference.m_bHasUserBitArray = findOffsetByName(j, "CAnimEncodeDifference", "m_bHasUserBitArray");

// Atribuições para CNmTargetOffsetNode__CDefinition
// CNmTargetOffsetNode__CDefinition Offsets
CNmTargetOffsetNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmTargetOffsetNode__CDefinition", "m_nInputValueNodeIdx");
CNmTargetOffsetNode__CDefinition.m_bIsBoneSpaceOffset = findOffsetByName(j, "CNmTargetOffsetNode__CDefinition", "m_bIsBoneSpaceOffset");
CNmTargetOffsetNode__CDefinition.m_rotationOffset = findOffsetByName(j, "CNmTargetOffsetNode__CDefinition", "m_rotationOffset");
CNmTargetOffsetNode__CDefinition.m_translationOffset = findOffsetByName(j, "CNmTargetOffsetNode__CDefinition", "m_translationOffset");

// Atribuições para CMotionGraphUpdateNode
// CMotionGraphUpdateNode Offsets
CMotionGraphUpdateNode.m_pMotionGraph = findOffsetByName(j, "CMotionGraphUpdateNode", "m_pMotionGraph");

// Atribuições para CNmFloatAngleMathNode__CDefinition
// CNmFloatAngleMathNode__CDefinition Offsets
CNmFloatAngleMathNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatAngleMathNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatAngleMathNode__CDefinition.m_operation = findOffsetByName(j, "CNmFloatAngleMathNode__CDefinition", "m_operation");

// Atribuições para CAnimParamHandle
// CAnimParamHandle Offsets
CAnimParamHandle.m_type = findOffsetByName(j, "CAnimParamHandle", "m_type");
CAnimParamHandle.m_index = findOffsetByName(j, "CAnimParamHandle", "m_index");

// Atribuições para WeightList
// WeightList Offsets
WeightList.m_name = findOffsetByName(j, "WeightList", "m_name");
WeightList.m_weights = findOffsetByName(j, "WeightList", "m_weights");

// Atribuições para MotionIndex
// MotionIndex Offsets
MotionIndex.m_nGroup = findOffsetByName(j, "MotionIndex", "m_nGroup");
MotionIndex.m_nMotion = findOffsetByName(j, "MotionIndex", "m_nMotion");

// Atribuições para FollowAttachmentSettings_t
// FollowAttachmentSettings_t Offsets
FollowAttachmentSettings_t.m_attachment = findOffsetByName(j, "FollowAttachmentSettings_t", "m_attachment");
FollowAttachmentSettings_t.m_boneIndex = findOffsetByName(j, "FollowAttachmentSettings_t", "m_boneIndex");
FollowAttachmentSettings_t.m_bMatchTranslation = findOffsetByName(j, "FollowAttachmentSettings_t", "m_bMatchTranslation");
FollowAttachmentSettings_t.m_bMatchRotation = findOffsetByName(j, "FollowAttachmentSettings_t", "m_bMatchRotation");

// Atribuições para AnimNodeID
// AnimNodeID Offsets
AnimNodeID.m_id = findOffsetByName(j, "AnimNodeID", "m_id");

// Atribuições para CNmClipSelectorNode__CDefinition
// CNmClipSelectorNode__CDefinition Offsets
CNmClipSelectorNode__CDefinition.m_optionNodeIndices = findOffsetByName(j, "CNmClipSelectorNode__CDefinition", "m_optionNodeIndices");
CNmClipSelectorNode__CDefinition.m_conditionNodeIndices = findOffsetByName(j, "CNmClipSelectorNode__CDefinition", "m_conditionNodeIndices");

// Atribuições para CLookComponentUpdater
// CLookComponentUpdater Offsets
CLookComponentUpdater.m_hLookHeading = findOffsetByName(j, "CLookComponentUpdater", "m_hLookHeading");
CLookComponentUpdater.m_hLookHeadingVelocity = findOffsetByName(j, "CLookComponentUpdater", "m_hLookHeadingVelocity");
CLookComponentUpdater.m_hLookPitch = findOffsetByName(j, "CLookComponentUpdater", "m_hLookPitch");
CLookComponentUpdater.m_hLookDistance = findOffsetByName(j, "CLookComponentUpdater", "m_hLookDistance");
CLookComponentUpdater.m_hLookDirection = findOffsetByName(j, "CLookComponentUpdater", "m_hLookDirection");
CLookComponentUpdater.m_hLookTarget = findOffsetByName(j, "CLookComponentUpdater", "m_hLookTarget");
CLookComponentUpdater.m_hLookTargetWorldSpace = findOffsetByName(j, "CLookComponentUpdater", "m_hLookTargetWorldSpace");
CLookComponentUpdater.m_bNetworkLookTarget = findOffsetByName(j, "CLookComponentUpdater", "m_bNetworkLookTarget");

// Atribuições para CAnimGraphNetworkSettings
// CAnimGraphNetworkSettings Offsets
CAnimGraphNetworkSettings.m_bNetworkingEnabled = findOffsetByName(j, "CAnimGraphNetworkSettings", "m_bNetworkingEnabled");

// Atribuições para CSingleFrameUpdateNode
// CSingleFrameUpdateNode Offsets
CSingleFrameUpdateNode.m_actions = findOffsetByName(j, "CSingleFrameUpdateNode", "m_actions");
CSingleFrameUpdateNode.m_hPoseCacheHandle = findOffsetByName(j, "CSingleFrameUpdateNode", "m_hPoseCacheHandle");
CSingleFrameUpdateNode.m_hSequence = findOffsetByName(j, "CSingleFrameUpdateNode", "m_hSequence");
CSingleFrameUpdateNode.m_flCycle = findOffsetByName(j, "CSingleFrameUpdateNode", "m_flCycle");

// Atribuições para CModelConfigList
// CModelConfigList Offsets
CModelConfigList.m_bHideMaterialGroupInTools = findOffsetByName(j, "CModelConfigList", "m_bHideMaterialGroupInTools");
CModelConfigList.m_bHideRenderColorInTools = findOffsetByName(j, "CModelConfigList", "m_bHideRenderColorInTools");
CModelConfigList.m_Configs = findOffsetByName(j, "CModelConfigList", "m_Configs");

// Atribuições para CSeqAutoLayerFlag
// CSeqAutoLayerFlag Offsets
CSeqAutoLayerFlag.m_bPost = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bPost");
CSeqAutoLayerFlag.m_bSpline = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bSpline");
CSeqAutoLayerFlag.m_bXFade = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bXFade");
CSeqAutoLayerFlag.m_bNoBlend = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bNoBlend");
CSeqAutoLayerFlag.m_bLocal = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bLocal");
CSeqAutoLayerFlag.m_bPose = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bPose");
CSeqAutoLayerFlag.m_bFetchFrame = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bFetchFrame");
CSeqAutoLayerFlag.m_bSubtract = findOffsetByName(j, "CSeqAutoLayerFlag", "m_bSubtract");

// Atribuições para AnimStateID
// AnimStateID Offsets
AnimStateID.m_id = findOffsetByName(j, "AnimStateID", "m_id");

// Atribuições para CNmIDEventConditionNode__CDefinition
// CNmIDEventConditionNode__CDefinition Offsets
CNmIDEventConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmIDEventConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmIDEventConditionNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmIDEventConditionNode__CDefinition", "m_eventConditionRules");
CNmIDEventConditionNode__CDefinition.m_eventIDs = findOffsetByName(j, "CNmIDEventConditionNode__CDefinition", "m_eventIDs");

// Atribuições para ModelBoneFlexDriver_t
// ModelBoneFlexDriver_t Offsets
ModelBoneFlexDriver_t.m_boneName = findOffsetByName(j, "ModelBoneFlexDriver_t", "m_boneName");
ModelBoneFlexDriver_t.m_boneNameToken = findOffsetByName(j, "ModelBoneFlexDriver_t", "m_boneNameToken");
ModelBoneFlexDriver_t.m_controls = findOffsetByName(j, "ModelBoneFlexDriver_t", "m_controls");

// Atribuições para CMorphData
// CMorphData Offsets
CMorphData.m_name = findOffsetByName(j, "CMorphData", "m_name");
CMorphData.m_morphRectDatas = findOffsetByName(j, "CMorphData", "m_morphRectDatas");

// Atribuições para CFootPinningUpdateNode
// CFootPinningUpdateNode Offsets
CFootPinningUpdateNode.m_poseOpFixedData = findOffsetByName(j, "CFootPinningUpdateNode", "m_poseOpFixedData");
CFootPinningUpdateNode.m_eTimingSource = findOffsetByName(j, "CFootPinningUpdateNode", "m_eTimingSource");
CFootPinningUpdateNode.m_params = findOffsetByName(j, "CFootPinningUpdateNode", "m_params");
CFootPinningUpdateNode.m_bResetChild = findOffsetByName(j, "CFootPinningUpdateNode", "m_bResetChild");

// Atribuições para CSeqPoseSetting
// CSeqPoseSetting Offsets
CSeqPoseSetting.m_sPoseParameter = findOffsetByName(j, "CSeqPoseSetting", "m_sPoseParameter");
CSeqPoseSetting.m_sAttachment = findOffsetByName(j, "CSeqPoseSetting", "m_sAttachment");
CSeqPoseSetting.m_sReferenceSequence = findOffsetByName(j, "CSeqPoseSetting", "m_sReferenceSequence");
CSeqPoseSetting.m_flValue = findOffsetByName(j, "CSeqPoseSetting", "m_flValue");
CSeqPoseSetting.m_bX = findOffsetByName(j, "CSeqPoseSetting", "m_bX");
CSeqPoseSetting.m_bY = findOffsetByName(j, "CSeqPoseSetting", "m_bY");
CSeqPoseSetting.m_bZ = findOffsetByName(j, "CSeqPoseSetting", "m_bZ");
CSeqPoseSetting.m_eType = findOffsetByName(j, "CSeqPoseSetting", "m_eType");

// Atribuições para CNmVirtualParameterFloatNode__CDefinition
// CNmVirtualParameterFloatNode__CDefinition Offsets
CNmVirtualParameterFloatNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterFloatNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CAttachment
// CAttachment Offsets
CAttachment.m_name = findOffsetByName(j, "CAttachment", "m_name");
CAttachment.m_influenceNames = findOffsetByName(j, "CAttachment", "m_influenceNames");
CAttachment.m_vInfluenceRotations = findOffsetByName(j, "CAttachment", "m_vInfluenceRotations");
CAttachment.m_vInfluenceOffsets = findOffsetByName(j, "CAttachment", "m_vInfluenceOffsets");
CAttachment.m_influenceWeights = findOffsetByName(j, "CAttachment", "m_influenceWeights");
CAttachment.m_bInfluenceRootTransform = findOffsetByName(j, "CAttachment", "m_bInfluenceRootTransform");
CAttachment.m_nInfluences = findOffsetByName(j, "CAttachment", "m_nInfluences");
CAttachment.m_bIgnoreRotation = findOffsetByName(j, "CAttachment", "m_bIgnoreRotation");

// Atribuições para CSequenceUpdateNodeBase
// CSequenceUpdateNodeBase Offsets
CSequenceUpdateNodeBase.m_playbackSpeed = findOffsetByName(j, "CSequenceUpdateNodeBase", "m_playbackSpeed");
CSequenceUpdateNodeBase.m_bLoop = findOffsetByName(j, "CSequenceUpdateNodeBase", "m_bLoop");

// Atribuições para CDrawCullingData
// CDrawCullingData Offsets
CDrawCullingData.m_vConeApex = findOffsetByName(j, "CDrawCullingData", "m_vConeApex");
CDrawCullingData.m_ConeAxis = findOffsetByName(j, "CDrawCullingData", "m_ConeAxis");
CDrawCullingData.m_ConeCutoff = findOffsetByName(j, "CDrawCullingData", "m_ConeCutoff");

// Atribuições para VPhysXJoint_t
// VPhysXJoint_t Offsets
VPhysXJoint_t.m_nType = findOffsetByName(j, "VPhysXJoint_t", "m_nType");
VPhysXJoint_t.m_nBody1 = findOffsetByName(j, "VPhysXJoint_t", "m_nBody1");
VPhysXJoint_t.m_nBody2 = findOffsetByName(j, "VPhysXJoint_t", "m_nBody2");
VPhysXJoint_t.m_nFlags = findOffsetByName(j, "VPhysXJoint_t", "m_nFlags");
VPhysXJoint_t.m_Frame1 = findOffsetByName(j, "VPhysXJoint_t", "m_Frame1");
VPhysXJoint_t.m_Frame2 = findOffsetByName(j, "VPhysXJoint_t", "m_Frame2");
VPhysXJoint_t.m_bEnableCollision = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableCollision");
VPhysXJoint_t.m_bEnableLinearLimit = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableLinearLimit");
VPhysXJoint_t.m_LinearLimit = findOffsetByName(j, "VPhysXJoint_t", "m_LinearLimit");
VPhysXJoint_t.m_bEnableLinearMotor = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableLinearMotor");
VPhysXJoint_t.m_vLinearTargetVelocity = findOffsetByName(j, "VPhysXJoint_t", "m_vLinearTargetVelocity");
VPhysXJoint_t.m_flMaxForce = findOffsetByName(j, "VPhysXJoint_t", "m_flMaxForce");
VPhysXJoint_t.m_bEnableSwingLimit = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableSwingLimit");
VPhysXJoint_t.m_SwingLimit = findOffsetByName(j, "VPhysXJoint_t", "m_SwingLimit");
VPhysXJoint_t.m_bEnableTwistLimit = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableTwistLimit");
VPhysXJoint_t.m_TwistLimit = findOffsetByName(j, "VPhysXJoint_t", "m_TwistLimit");
VPhysXJoint_t.m_bEnableAngularMotor = findOffsetByName(j, "VPhysXJoint_t", "m_bEnableAngularMotor");
VPhysXJoint_t.m_vAngularTargetVelocity = findOffsetByName(j, "VPhysXJoint_t", "m_vAngularTargetVelocity");
VPhysXJoint_t.m_flMaxTorque = findOffsetByName(j, "VPhysXJoint_t", "m_flMaxTorque");
VPhysXJoint_t.m_flLinearFrequency = findOffsetByName(j, "VPhysXJoint_t", "m_flLinearFrequency");
VPhysXJoint_t.m_flLinearDampingRatio = findOffsetByName(j, "VPhysXJoint_t", "m_flLinearDampingRatio");
VPhysXJoint_t.m_flAngularFrequency = findOffsetByName(j, "VPhysXJoint_t", "m_flAngularFrequency");
VPhysXJoint_t.m_flAngularDampingRatio = findOffsetByName(j, "VPhysXJoint_t", "m_flAngularDampingRatio");
VPhysXJoint_t.m_flFriction = findOffsetByName(j, "VPhysXJoint_t", "m_flFriction");
VPhysXJoint_t.m_flElasticity = findOffsetByName(j, "VPhysXJoint_t", "m_flElasticity");
VPhysXJoint_t.m_flElasticDamping = findOffsetByName(j, "VPhysXJoint_t", "m_flElasticDamping");
VPhysXJoint_t.m_flPlasticity = findOffsetByName(j, "VPhysXJoint_t", "m_flPlasticity");

// Atribuições para CStateNodeTransitionData
// CStateNodeTransitionData Offsets
CStateNodeTransitionData.m_curve = findOffsetByName(j, "CStateNodeTransitionData", "m_curve");
CStateNodeTransitionData.m_blendDuration = findOffsetByName(j, "CStateNodeTransitionData", "m_blendDuration");
CStateNodeTransitionData.m_resetCycleValue = findOffsetByName(j, "CStateNodeTransitionData", "m_resetCycleValue");
CStateNodeTransitionData.m_bReset = findOffsetByName(j, "CStateNodeTransitionData", "m_bReset");
CStateNodeTransitionData.m_resetCycleOption = findOffsetByName(j, "CStateNodeTransitionData", "m_resetCycleOption");

// Atribuições para CTimeRemainingMetricEvaluator
// CTimeRemainingMetricEvaluator Offsets
CTimeRemainingMetricEvaluator.m_bMatchByTimeRemaining = findOffsetByName(j, "CTimeRemainingMetricEvaluator", "m_bMatchByTimeRemaining");
CTimeRemainingMetricEvaluator.m_flMaxTimeRemaining = findOffsetByName(j, "CTimeRemainingMetricEvaluator", "m_flMaxTimeRemaining");
CTimeRemainingMetricEvaluator.m_bFilterByTimeRemaining = findOffsetByName(j, "CTimeRemainingMetricEvaluator", "m_bFilterByTimeRemaining");
CTimeRemainingMetricEvaluator.m_flMinTimeRemaining = findOffsetByName(j, "CTimeRemainingMetricEvaluator", "m_flMinTimeRemaining");

// Atribuições para CModelConfigElement
// CModelConfigElement Offsets
CModelConfigElement.m_ElementName = findOffsetByName(j, "CModelConfigElement", "m_ElementName");
CModelConfigElement.m_NestedElements = findOffsetByName(j, "CModelConfigElement", "m_NestedElements");

// Atribuições para FootFixedSettings
// FootFixedSettings Offsets
FootFixedSettings.m_traceSettings = findOffsetByName(j, "FootFixedSettings", "m_traceSettings");
FootFixedSettings.m_vFootBaseBindPosePositionMS = findOffsetByName(j, "FootFixedSettings", "m_vFootBaseBindPosePositionMS");
FootFixedSettings.m_flFootBaseLength = findOffsetByName(j, "FootFixedSettings", "m_flFootBaseLength");
FootFixedSettings.m_flMaxRotationLeft = findOffsetByName(j, "FootFixedSettings", "m_flMaxRotationLeft");
FootFixedSettings.m_flMaxRotationRight = findOffsetByName(j, "FootFixedSettings", "m_flMaxRotationRight");
FootFixedSettings.m_footstepLandedTagIndex = findOffsetByName(j, "FootFixedSettings", "m_footstepLandedTagIndex");
FootFixedSettings.m_bEnableTracing = findOffsetByName(j, "FootFixedSettings", "m_bEnableTracing");
FootFixedSettings.m_flTraceAngleBlend = findOffsetByName(j, "FootFixedSettings", "m_flTraceAngleBlend");
FootFixedSettings.m_nDisableTagIndex = findOffsetByName(j, "FootFixedSettings", "m_nDisableTagIndex");
FootFixedSettings.m_nFootIndex = findOffsetByName(j, "FootFixedSettings", "m_nFootIndex");

// Atribuições para CModelConfig
// CModelConfig Offsets
CModelConfig.m_ConfigName = findOffsetByName(j, "CModelConfig", "m_ConfigName");
CModelConfig.m_Elements = findOffsetByName(j, "CModelConfig", "m_Elements");
CModelConfig.m_bTopLevel = findOffsetByName(j, "CModelConfig", "m_bTopLevel");

// Atribuições para AnimComponentID
// AnimComponentID Offsets
AnimComponentID.m_id = findOffsetByName(j, "AnimComponentID", "m_id");

// Atribuições para VPhysXAggregateData_t
// VPhysXAggregateData_t Offsets
VPhysXAggregateData_t.m_nFlags = findOffsetByName(j, "VPhysXAggregateData_t", "m_nFlags");
VPhysXAggregateData_t.m_nRefCounter = findOffsetByName(j, "VPhysXAggregateData_t", "m_nRefCounter");
VPhysXAggregateData_t.m_bonesHash = findOffsetByName(j, "VPhysXAggregateData_t", "m_bonesHash");
VPhysXAggregateData_t.m_boneNames = findOffsetByName(j, "VPhysXAggregateData_t", "m_boneNames");
VPhysXAggregateData_t.m_indexNames = findOffsetByName(j, "VPhysXAggregateData_t", "m_indexNames");
VPhysXAggregateData_t.m_indexHash = findOffsetByName(j, "VPhysXAggregateData_t", "m_indexHash");
VPhysXAggregateData_t.m_bindPose = findOffsetByName(j, "VPhysXAggregateData_t", "m_bindPose");
VPhysXAggregateData_t.m_parts = findOffsetByName(j, "VPhysXAggregateData_t", "m_parts");
VPhysXAggregateData_t.m_constraints2 = findOffsetByName(j, "VPhysXAggregateData_t", "m_constraints2");
VPhysXAggregateData_t.m_joints = findOffsetByName(j, "VPhysXAggregateData_t", "m_joints");
VPhysXAggregateData_t.m_pFeModel = findOffsetByName(j, "VPhysXAggregateData_t", "m_pFeModel");
VPhysXAggregateData_t.m_boneParents = findOffsetByName(j, "VPhysXAggregateData_t", "m_boneParents");
VPhysXAggregateData_t.m_surfacePropertyHashes = findOffsetByName(j, "VPhysXAggregateData_t", "m_surfacePropertyHashes");
VPhysXAggregateData_t.m_collisionAttributes = findOffsetByName(j, "VPhysXAggregateData_t", "m_collisionAttributes");
VPhysXAggregateData_t.m_debugPartNames = findOffsetByName(j, "VPhysXAggregateData_t", "m_debugPartNames");
VPhysXAggregateData_t.m_embeddedKeyvalues = findOffsetByName(j, "VPhysXAggregateData_t", "m_embeddedKeyvalues");

// Atribuições para CNmGraphDefinition
// CNmGraphDefinition Offsets
CNmGraphDefinition.m_persistentNodeIndices = findOffsetByName(j, "CNmGraphDefinition", "m_persistentNodeIndices");
CNmGraphDefinition.m_nRootNodeIdx = findOffsetByName(j, "CNmGraphDefinition", "m_nRootNodeIdx");
CNmGraphDefinition.m_controlParameterIDs = findOffsetByName(j, "CNmGraphDefinition", "m_controlParameterIDs");
CNmGraphDefinition.m_virtualParameterIDs = findOffsetByName(j, "CNmGraphDefinition", "m_virtualParameterIDs");
CNmGraphDefinition.m_virtualParameterNodeIndices = findOffsetByName(j, "CNmGraphDefinition", "m_virtualParameterNodeIndices");
CNmGraphDefinition.m_childGraphSlots = findOffsetByName(j, "CNmGraphDefinition", "m_childGraphSlots");
CNmGraphDefinition.m_externalGraphSlots = findOffsetByName(j, "CNmGraphDefinition", "m_externalGraphSlots");
CNmGraphDefinition.m_nodePaths = findOffsetByName(j, "CNmGraphDefinition", "m_nodePaths");
CNmGraphDefinition.m_runtimeVersionID = findOffsetByName(j, "CNmGraphDefinition", "m_runtimeVersionID");

// Atribuições para CNmSelectorNode__CDefinition
// CNmSelectorNode__CDefinition Offsets
CNmSelectorNode__CDefinition.m_optionNodeIndices = findOffsetByName(j, "CNmSelectorNode__CDefinition", "m_optionNodeIndices");
CNmSelectorNode__CDefinition.m_conditionNodeIndices = findOffsetByName(j, "CNmSelectorNode__CDefinition", "m_conditionNodeIndices");

// Atribuições para CAnimDemoCaptureSettings
// CAnimDemoCaptureSettings Offsets
CAnimDemoCaptureSettings.m_vecErrorRangeSplineRotation = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineRotation");
CAnimDemoCaptureSettings.m_vecErrorRangeSplineTranslation = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineTranslation");
CAnimDemoCaptureSettings.m_vecErrorRangeSplineScale = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineScale");
CAnimDemoCaptureSettings.m_flIkRotation_MaxSplineError = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxSplineError");
CAnimDemoCaptureSettings.m_flIkTranslation_MaxSplineError = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxSplineError");
CAnimDemoCaptureSettings.m_vecErrorRangeQuantizationRotation = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationRotation");
CAnimDemoCaptureSettings.m_vecErrorRangeQuantizationTranslation = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationTranslation");
CAnimDemoCaptureSettings.m_vecErrorRangeQuantizationScale = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationScale");
CAnimDemoCaptureSettings.m_flIkRotation_MaxQuantizationError = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxQuantizationError");
CAnimDemoCaptureSettings.m_flIkTranslation_MaxQuantizationError = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxQuantizationError");
CAnimDemoCaptureSettings.m_baseSequence = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_baseSequence");
CAnimDemoCaptureSettings.m_nBaseSequenceFrame = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_nBaseSequenceFrame");
CAnimDemoCaptureSettings.m_boneSelectionMode = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_boneSelectionMode");
CAnimDemoCaptureSettings.m_bones = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_bones");
CAnimDemoCaptureSettings.m_ikChains = findOffsetByName(j, "CAnimDemoCaptureSettings", "m_ikChains");

// Atribuições para IKDemoCaptureSettings_t
// IKDemoCaptureSettings_t Offsets
IKDemoCaptureSettings_t.m_parentBoneName = findOffsetByName(j, "IKDemoCaptureSettings_t", "m_parentBoneName");
IKDemoCaptureSettings_t.m_eMode = findOffsetByName(j, "IKDemoCaptureSettings_t", "m_eMode");
IKDemoCaptureSettings_t.m_ikChainName = findOffsetByName(j, "IKDemoCaptureSettings_t", "m_ikChainName");
IKDemoCaptureSettings_t.m_oneBoneStart = findOffsetByName(j, "IKDemoCaptureSettings_t", "m_oneBoneStart");
IKDemoCaptureSettings_t.m_oneBoneEnd = findOffsetByName(j, "IKDemoCaptureSettings_t", "m_oneBoneEnd");

// Atribuições para CSeqMultiFetchFlag
// CSeqMultiFetchFlag Offsets
CSeqMultiFetchFlag.m_bRealtime = findOffsetByName(j, "CSeqMultiFetchFlag", "m_bRealtime");
CSeqMultiFetchFlag.m_bCylepose = findOffsetByName(j, "CSeqMultiFetchFlag", "m_bCylepose");
CSeqMultiFetchFlag.m_b0D = findOffsetByName(j, "CSeqMultiFetchFlag", "m_b0D");
CSeqMultiFetchFlag.m_b1D = findOffsetByName(j, "CSeqMultiFetchFlag", "m_b1D");
CSeqMultiFetchFlag.m_b2D = findOffsetByName(j, "CSeqMultiFetchFlag", "m_b2D");
CSeqMultiFetchFlag.m_b2D_TRI = findOffsetByName(j, "CSeqMultiFetchFlag", "m_b2D_TRI");

// Atribuições para VPhysXRange_t
// VPhysXRange_t Offsets
VPhysXRange_t.m_flMin = findOffsetByName(j, "VPhysXRange_t", "m_flMin");
VPhysXRange_t.m_flMax = findOffsetByName(j, "VPhysXRange_t", "m_flMax");

// Atribuições para CStopAtGoalUpdateNode
// CStopAtGoalUpdateNode Offsets
CStopAtGoalUpdateNode.m_flOuterRadius = findOffsetByName(j, "CStopAtGoalUpdateNode", "m_flOuterRadius");
CStopAtGoalUpdateNode.m_flInnerRadius = findOffsetByName(j, "CStopAtGoalUpdateNode", "m_flInnerRadius");
CStopAtGoalUpdateNode.m_flMaxScale = findOffsetByName(j, "CStopAtGoalUpdateNode", "m_flMaxScale");
CStopAtGoalUpdateNode.m_flMinScale = findOffsetByName(j, "CStopAtGoalUpdateNode", "m_flMinScale");
CStopAtGoalUpdateNode.m_damping = findOffsetByName(j, "CStopAtGoalUpdateNode", "m_damping");

// Atribuições para CNmIDEventPercentageThroughNode__CDefinition
// CNmIDEventPercentageThroughNode__CDefinition Offsets
CNmIDEventPercentageThroughNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmIDEventPercentageThroughNode__CDefinition", "m_nSourceStateNodeIdx");
CNmIDEventPercentageThroughNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmIDEventPercentageThroughNode__CDefinition", "m_eventConditionRules");
CNmIDEventPercentageThroughNode__CDefinition.m_eventID = findOffsetByName(j, "CNmIDEventPercentageThroughNode__CDefinition", "m_eventID");

// Atribuições para CAnimBoneDifference
// CAnimBoneDifference Offsets
CAnimBoneDifference.m_name = findOffsetByName(j, "CAnimBoneDifference", "m_name");
CAnimBoneDifference.m_parent = findOffsetByName(j, "CAnimBoneDifference", "m_parent");
CAnimBoneDifference.m_posError = findOffsetByName(j, "CAnimBoneDifference", "m_posError");
CAnimBoneDifference.m_bHasRotation = findOffsetByName(j, "CAnimBoneDifference", "m_bHasRotation");
CAnimBoneDifference.m_bHasMovement = findOffsetByName(j, "CAnimBoneDifference", "m_bHasMovement");

// Atribuições para CNmCachedBoolNode__CDefinition
// CNmCachedBoolNode__CDefinition Offsets
CNmCachedBoolNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmCachedBoolNode__CDefinition", "m_nInputValueNodeIdx");
CNmCachedBoolNode__CDefinition.m_mode = findOffsetByName(j, "CNmCachedBoolNode__CDefinition", "m_mode");

// Atribuições para CActionComponentUpdater
// CActionComponentUpdater Offsets
CActionComponentUpdater.m_actions = findOffsetByName(j, "CActionComponentUpdater", "m_actions");

// Atribuições para CNmGraphDataSet
// CNmGraphDataSet Offsets
CNmGraphDataSet.m_variationID = findOffsetByName(j, "CNmGraphDataSet", "m_variationID");
CNmGraphDataSet.m_skeleton = findOffsetByName(j, "CNmGraphDataSet", "m_skeleton");
CNmGraphDataSet.m_resources = findOffsetByName(j, "CNmGraphDataSet", "m_resources");

// Atribuições para CDampedPathAnimMotorUpdater
// CDampedPathAnimMotorUpdater Offsets
CDampedPathAnimMotorUpdater.m_flAnticipationTime = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_flAnticipationTime");
CDampedPathAnimMotorUpdater.m_flMinSpeedScale = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_flMinSpeedScale");
CDampedPathAnimMotorUpdater.m_hAnticipationPosParam = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_hAnticipationPosParam");
CDampedPathAnimMotorUpdater.m_hAnticipationHeadingParam = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_hAnticipationHeadingParam");
CDampedPathAnimMotorUpdater.m_flSpringConstant = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_flSpringConstant");
CDampedPathAnimMotorUpdater.m_flMinSpringTension = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_flMinSpringTension");
CDampedPathAnimMotorUpdater.m_flMaxSpringTension = findOffsetByName(j, "CDampedPathAnimMotorUpdater", "m_flMaxSpringTension");

// Atribuições para CNmCachedFloatNode__CDefinition
// CNmCachedFloatNode__CDefinition Offsets
CNmCachedFloatNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmCachedFloatNode__CDefinition", "m_nInputValueNodeIdx");
CNmCachedFloatNode__CDefinition.m_mode = findOffsetByName(j, "CNmCachedFloatNode__CDefinition", "m_mode");

// Atribuições para CNmFloatSwitchNode__CDefinition
// CNmFloatSwitchNode__CDefinition Offsets
CNmFloatSwitchNode__CDefinition.m_nSwitchValueNodeIdx = findOffsetByName(j, "CNmFloatSwitchNode__CDefinition", "m_nSwitchValueNodeIdx");
CNmFloatSwitchNode__CDefinition.m_nTrueValueNodeIdx = findOffsetByName(j, "CNmFloatSwitchNode__CDefinition", "m_nTrueValueNodeIdx");
CNmFloatSwitchNode__CDefinition.m_nFalseValueNodeIdx = findOffsetByName(j, "CNmFloatSwitchNode__CDefinition", "m_nFalseValueNodeIdx");

// Atribuições para CModelConfigElement_SetMaterialGroupOnAttachedModels
// CModelConfigElement_SetMaterialGroupOnAttachedModels Offsets
CModelConfigElement_SetMaterialGroupOnAttachedModels.m_MaterialGroupName = findOffsetByName(j, "CModelConfigElement_SetMaterialGroupOnAttachedModels", "m_MaterialGroupName");

// Atribuições para CNmVirtualParameterBoneMaskNode__CDefinition
// CNmVirtualParameterBoneMaskNode__CDefinition Offsets
CNmVirtualParameterBoneMaskNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterBoneMaskNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CPathHelperUpdateNode
// CPathHelperUpdateNode Offsets
CPathHelperUpdateNode.m_flStoppingRadius = findOffsetByName(j, "CPathHelperUpdateNode", "m_flStoppingRadius");
CPathHelperUpdateNode.m_flStoppingSpeedScale = findOffsetByName(j, "CPathHelperUpdateNode", "m_flStoppingSpeedScale");

// Atribuições para MaterialGroup_t
// MaterialGroup_t Offsets
MaterialGroup_t.m_name = findOffsetByName(j, "MaterialGroup_t", "m_name");
MaterialGroup_t.m_materials = findOffsetByName(j, "MaterialGroup_t", "m_materials");

// Atribuições para CMorphBundleData
// CMorphBundleData Offsets
CMorphBundleData.m_flULeftSrc = findOffsetByName(j, "CMorphBundleData", "m_flULeftSrc");
CMorphBundleData.m_flVTopSrc = findOffsetByName(j, "CMorphBundleData", "m_flVTopSrc");
CMorphBundleData.m_offsets = findOffsetByName(j, "CMorphBundleData", "m_offsets");
CMorphBundleData.m_ranges = findOffsetByName(j, "CMorphBundleData", "m_ranges");

// Atribuições para CModelConfigElement_UserPick
// CModelConfigElement_UserPick Offsets
CModelConfigElement_UserPick.m_Choices = findOffsetByName(j, "CModelConfigElement_UserPick", "m_Choices");

// Atribuições para CSolveIKTargetHandle_t
// CSolveIKTargetHandle_t Offsets
CSolveIKTargetHandle_t.m_positionHandle = findOffsetByName(j, "CSolveIKTargetHandle_t", "m_positionHandle");
CSolveIKTargetHandle_t.m_orientationHandle = findOffsetByName(j, "CSolveIKTargetHandle_t", "m_orientationHandle");

// Atribuições para CFootAdjustmentUpdateNode
// CFootAdjustmentUpdateNode Offsets
CFootAdjustmentUpdateNode.m_clips = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_clips");
CFootAdjustmentUpdateNode.m_hBasePoseCacheHandle = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_hBasePoseCacheHandle");
CFootAdjustmentUpdateNode.m_facingTarget = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_facingTarget");
CFootAdjustmentUpdateNode.m_flTurnTimeMin = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_flTurnTimeMin");
CFootAdjustmentUpdateNode.m_flTurnTimeMax = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_flTurnTimeMax");
CFootAdjustmentUpdateNode.m_flStepHeightMax = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_flStepHeightMax");
CFootAdjustmentUpdateNode.m_flStepHeightMaxAngle = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_flStepHeightMaxAngle");
CFootAdjustmentUpdateNode.m_bResetChild = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_bResetChild");
CFootAdjustmentUpdateNode.m_bAnimationDriven = findOffsetByName(j, "CFootAdjustmentUpdateNode", "m_bAnimationDriven");

// Atribuições para CAimConstraint
// CAimConstraint Offsets
CAimConstraint.m_qAimOffset = findOffsetByName(j, "CAimConstraint", "m_qAimOffset");
CAimConstraint.m_nUpType = findOffsetByName(j, "CAimConstraint", "m_nUpType");

// Atribuições para CFootFallAnimTag
// CFootFallAnimTag Offsets
CFootFallAnimTag.m_foot = findOffsetByName(j, "CFootFallAnimTag", "m_foot");

// Atribuições para CMaterialDrawDescriptor
// CMaterialDrawDescriptor Offsets
CMaterialDrawDescriptor.m_flUvDensity = findOffsetByName(j, "CMaterialDrawDescriptor", "m_flUvDensity");
CMaterialDrawDescriptor.m_vTintColor = findOffsetByName(j, "CMaterialDrawDescriptor", "m_vTintColor");
CMaterialDrawDescriptor.m_flAlpha = findOffsetByName(j, "CMaterialDrawDescriptor", "m_flAlpha");
CMaterialDrawDescriptor.m_nNumMeshlets = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nNumMeshlets");
CMaterialDrawDescriptor.m_nFirstMeshlet = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nFirstMeshlet");
CMaterialDrawDescriptor.m_nPrimitiveType = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nPrimitiveType");
CMaterialDrawDescriptor.m_nBaseVertex = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nBaseVertex");
CMaterialDrawDescriptor.m_nVertexCount = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nVertexCount");
CMaterialDrawDescriptor.m_nStartIndex = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nStartIndex");
CMaterialDrawDescriptor.m_nIndexCount = findOffsetByName(j, "CMaterialDrawDescriptor", "m_nIndexCount");
CMaterialDrawDescriptor.m_indexBuffer = findOffsetByName(j, "CMaterialDrawDescriptor", "m_indexBuffer");
CMaterialDrawDescriptor.m_material = findOffsetByName(j, "CMaterialDrawDescriptor", "m_material");

// Atribuições para CNmSkeleton
// CNmSkeleton Offsets
CNmSkeleton.m_ID = findOffsetByName(j, "CNmSkeleton", "m_ID");
CNmSkeleton.m_boneIDs = findOffsetByName(j, "CNmSkeleton", "m_boneIDs");
CNmSkeleton.m_parentIndices = findOffsetByName(j, "CNmSkeleton", "m_parentIndices");
CNmSkeleton.m_parentSpaceReferencePose = findOffsetByName(j, "CNmSkeleton", "m_parentSpaceReferencePose");
CNmSkeleton.m_modelSpaceReferencePose = findOffsetByName(j, "CNmSkeleton", "m_modelSpaceReferencePose");
CNmSkeleton.m_numBonesToSampleAtLowLOD = findOffsetByName(j, "CNmSkeleton", "m_numBonesToSampleAtLowLOD");
CNmSkeleton.m_boneMasks = findOffsetByName(j, "CNmSkeleton", "m_boneMasks");

// Atribuições para CStepsRemainingMetricEvaluator
// CStepsRemainingMetricEvaluator Offsets
CStepsRemainingMetricEvaluator.m_footIndices = findOffsetByName(j, "CStepsRemainingMetricEvaluator", "m_footIndices");
CStepsRemainingMetricEvaluator.m_flMinStepsRemaining = findOffsetByName(j, "CStepsRemainingMetricEvaluator", "m_flMinStepsRemaining");

// Atribuições para CBodyGroupSetting
// CBodyGroupSetting Offsets
CBodyGroupSetting.m_BodyGroupName = findOffsetByName(j, "CBodyGroupSetting", "m_BodyGroupName");
CBodyGroupSetting.m_nBodyGroupOption = findOffsetByName(j, "CBodyGroupSetting", "m_nBodyGroupOption");

// Atribuições para CVectorQuantizer
// CVectorQuantizer Offsets
CVectorQuantizer.m_centroidVectors = findOffsetByName(j, "CVectorQuantizer", "m_centroidVectors");
CVectorQuantizer.m_nCentroids = findOffsetByName(j, "CVectorQuantizer", "m_nCentroids");
CVectorQuantizer.m_nDimensions = findOffsetByName(j, "CVectorQuantizer", "m_nDimensions");

// Atribuições para CNmVectorCreateNode__CDefinition
// CNmVectorCreateNode__CDefinition Offsets
CNmVectorCreateNode__CDefinition.m_inputVectorValueNodeIdx = findOffsetByName(j, "CNmVectorCreateNode__CDefinition", "m_inputVectorValueNodeIdx");
CNmVectorCreateNode__CDefinition.m_inputValueXNodeIdx = findOffsetByName(j, "CNmVectorCreateNode__CDefinition", "m_inputValueXNodeIdx");
CNmVectorCreateNode__CDefinition.m_inputValueYNodeIdx = findOffsetByName(j, "CNmVectorCreateNode__CDefinition", "m_inputValueYNodeIdx");
CNmVectorCreateNode__CDefinition.m_inputValueZNodeIdx = findOffsetByName(j, "CNmVectorCreateNode__CDefinition", "m_inputValueZNodeIdx");

// Atribuições para CNmStateNode__CDefinition
// CNmStateNode__CDefinition Offsets
CNmStateNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmStateNode__CDefinition", "m_nChildNodeIdx");
CNmStateNode__CDefinition.m_entryEvents = findOffsetByName(j, "CNmStateNode__CDefinition", "m_entryEvents");
CNmStateNode__CDefinition.m_executeEvents = findOffsetByName(j, "CNmStateNode__CDefinition", "m_executeEvents");
CNmStateNode__CDefinition.m_exitEvents = findOffsetByName(j, "CNmStateNode__CDefinition", "m_exitEvents");
CNmStateNode__CDefinition.m_timedRemainingEvents = findOffsetByName(j, "CNmStateNode__CDefinition", "m_timedRemainingEvents");
CNmStateNode__CDefinition.m_timedElapsedEvents = findOffsetByName(j, "CNmStateNode__CDefinition", "m_timedElapsedEvents");
CNmStateNode__CDefinition.m_nLayerWeightNodeIdx = findOffsetByName(j, "CNmStateNode__CDefinition", "m_nLayerWeightNodeIdx");
CNmStateNode__CDefinition.m_nLayerRootMotionWeightNodeIdx = findOffsetByName(j, "CNmStateNode__CDefinition", "m_nLayerRootMotionWeightNodeIdx");
CNmStateNode__CDefinition.m_nLayerBoneMaskNodeIdx = findOffsetByName(j, "CNmStateNode__CDefinition", "m_nLayerBoneMaskNodeIdx");
CNmStateNode__CDefinition.m_bIsOffState = findOffsetByName(j, "CNmStateNode__CDefinition", "m_bIsOffState");

// Atribuições para CNmBoneMaskSelectorNode__CDefinition
// CNmBoneMaskSelectorNode__CDefinition Offsets
CNmBoneMaskSelectorNode__CDefinition.m_defaultMaskNodeIdx = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_defaultMaskNodeIdx");
CNmBoneMaskSelectorNode__CDefinition.m_parameterValueNodeIdx = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_parameterValueNodeIdx");
CNmBoneMaskSelectorNode__CDefinition.m_switchDynamically = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_switchDynamically");
CNmBoneMaskSelectorNode__CDefinition.m_maskNodeIndices = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_maskNodeIndices");
CNmBoneMaskSelectorNode__CDefinition.m_parameterValues = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_parameterValues");
CNmBoneMaskSelectorNode__CDefinition.m_flBlendTimeSeconds = findOffsetByName(j, "CNmBoneMaskSelectorNode__CDefinition", "m_flBlendTimeSeconds");

// Atribuições para CNmVirtualParameterVectorNode__CDefinition
// CNmVirtualParameterVectorNode__CDefinition Offsets
CNmVirtualParameterVectorNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterVectorNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CFootCycleMetricEvaluator
// CFootCycleMetricEvaluator Offsets
CFootCycleMetricEvaluator.m_footIndices = findOffsetByName(j, "CFootCycleMetricEvaluator", "m_footIndices");

// Atribuições para CNmConstIDNode__CDefinition
// CNmConstIDNode__CDefinition Offsets
CNmConstIDNode__CDefinition.m_value = findOffsetByName(j, "CNmConstIDNode__CDefinition", "m_value");

// Atribuições para CHitBox
// CHitBox Offsets
CHitBox.m_name = findOffsetByName(j, "CHitBox", "m_name");
CHitBox.m_sSurfaceProperty = findOffsetByName(j, "CHitBox", "m_sSurfaceProperty");
CHitBox.m_sBoneName = findOffsetByName(j, "CHitBox", "m_sBoneName");
CHitBox.m_vMinBounds = findOffsetByName(j, "CHitBox", "m_vMinBounds");
CHitBox.m_vMaxBounds = findOffsetByName(j, "CHitBox", "m_vMaxBounds");
CHitBox.m_flShapeRadius = findOffsetByName(j, "CHitBox", "m_flShapeRadius");
CHitBox.m_nBoneNameHash = findOffsetByName(j, "CHitBox", "m_nBoneNameHash");
CHitBox.m_nGroupId = findOffsetByName(j, "CHitBox", "m_nGroupId");
CHitBox.m_nShapeType = findOffsetByName(j, "CHitBox", "m_nShapeType");
CHitBox.m_bTranslationOnly = findOffsetByName(j, "CHitBox", "m_bTranslationOnly");
CHitBox.m_CRC = findOffsetByName(j, "CHitBox", "m_CRC");
CHitBox.m_cRenderColor = findOffsetByName(j, "CHitBox", "m_cRenderColor");
CHitBox.m_nHitBoxIndex = findOffsetByName(j, "CHitBox", "m_nHitBoxIndex");

// Atribuições para CNmParameterizedSelectorNode__CDefinition
// CNmParameterizedSelectorNode__CDefinition Offsets
CNmParameterizedSelectorNode__CDefinition.m_optionNodeIndices = findOffsetByName(j, "CNmParameterizedSelectorNode__CDefinition", "m_optionNodeIndices");
CNmParameterizedSelectorNode__CDefinition.m_parameterNodeIdx = findOffsetByName(j, "CNmParameterizedSelectorNode__CDefinition", "m_parameterNodeIdx");

// Atribuições para ModelSkeletonData_t
// ModelSkeletonData_t Offsets
ModelSkeletonData_t.m_boneName = findOffsetByName(j, "ModelSkeletonData_t", "m_boneName");
ModelSkeletonData_t.m_nParent = findOffsetByName(j, "ModelSkeletonData_t", "m_nParent");
ModelSkeletonData_t.m_boneSphere = findOffsetByName(j, "ModelSkeletonData_t", "m_boneSphere");
ModelSkeletonData_t.m_nFlag = findOffsetByName(j, "ModelSkeletonData_t", "m_nFlag");
ModelSkeletonData_t.m_bonePosParent = findOffsetByName(j, "ModelSkeletonData_t", "m_bonePosParent");
ModelSkeletonData_t.m_boneRotParent = findOffsetByName(j, "ModelSkeletonData_t", "m_boneRotParent");
ModelSkeletonData_t.m_boneScaleParent = findOffsetByName(j, "ModelSkeletonData_t", "m_boneScaleParent");

// Atribuições para CNmEvent
// CNmEvent Offsets
CNmEvent.m_flStartTimeSeconds = findOffsetByName(j, "CNmEvent", "m_flStartTimeSeconds");
CNmEvent.m_flDurationSeconds = findOffsetByName(j, "CNmEvent", "m_flDurationSeconds");
CNmEvent.m_syncID = findOffsetByName(j, "CNmEvent", "m_syncID");

// Atribuições para NmCompressionSettings_t__QuantizationRange_t
// NmCompressionSettings_t__QuantizationRange_t Offsets
NmCompressionSettings_t__QuantizationRange_t.m_flRangeStart = findOffsetByName(j, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeStart");
NmCompressionSettings_t__QuantizationRange_t.m_flRangeLength = findOffsetByName(j, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeLength");

// Atribuições para TagSpan_t
// TagSpan_t Offsets
TagSpan_t.m_tagIndex = findOffsetByName(j, "TagSpan_t", "m_tagIndex");
TagSpan_t.m_startCycle = findOffsetByName(j, "TagSpan_t", "m_startCycle");
TagSpan_t.m_endCycle = findOffsetByName(j, "TagSpan_t", "m_endCycle");

// Atribuições para CNmConstTargetNode__CDefinition
// CNmConstTargetNode__CDefinition Offsets
CNmConstTargetNode__CDefinition.m_value = findOffsetByName(j, "CNmConstTargetNode__CDefinition", "m_value");

// Atribuições para PermModelDataAnimatedMaterialAttribute_t
// PermModelDataAnimatedMaterialAttribute_t Offsets
PermModelDataAnimatedMaterialAttribute_t.m_AttributeName = findOffsetByName(j, "PermModelDataAnimatedMaterialAttribute_t", "m_AttributeName");
PermModelDataAnimatedMaterialAttribute_t.m_nNumChannels = findOffsetByName(j, "PermModelDataAnimatedMaterialAttribute_t", "m_nNumChannels");

// Atribuições para CMotionDataSet
// CMotionDataSet Offsets
CMotionDataSet.m_groups = findOffsetByName(j, "CMotionDataSet", "m_groups");
CMotionDataSet.m_nDimensionCount = findOffsetByName(j, "CMotionDataSet", "m_nDimensionCount");

// Atribuições para CProductQuantizer
// CProductQuantizer Offsets
CProductQuantizer.m_subQuantizers = findOffsetByName(j, "CProductQuantizer", "m_subQuantizers");
CProductQuantizer.m_nDimensions = findOffsetByName(j, "CProductQuantizer", "m_nDimensions");

// Atribuições para CChoiceUpdateNode
// CChoiceUpdateNode Offsets
CChoiceUpdateNode.m_children = findOffsetByName(j, "CChoiceUpdateNode", "m_children");
CChoiceUpdateNode.m_weights = findOffsetByName(j, "CChoiceUpdateNode", "m_weights");
CChoiceUpdateNode.m_blendTimes = findOffsetByName(j, "CChoiceUpdateNode", "m_blendTimes");
CChoiceUpdateNode.m_choiceMethod = findOffsetByName(j, "CChoiceUpdateNode", "m_choiceMethod");
CChoiceUpdateNode.m_choiceChangeMethod = findOffsetByName(j, "CChoiceUpdateNode", "m_choiceChangeMethod");
CChoiceUpdateNode.m_blendMethod = findOffsetByName(j, "CChoiceUpdateNode", "m_blendMethod");
CChoiceUpdateNode.m_blendTime = findOffsetByName(j, "CChoiceUpdateNode", "m_blendTime");
CChoiceUpdateNode.m_bCrossFade = findOffsetByName(j, "CChoiceUpdateNode", "m_bCrossFade");
CChoiceUpdateNode.m_bResetChosen = findOffsetByName(j, "CChoiceUpdateNode", "m_bResetChosen");
CChoiceUpdateNode.m_bDontResetSameSelection = findOffsetByName(j, "CChoiceUpdateNode", "m_bDontResetSameSelection");

// Atribuições para SkeletonAnimCapture_t__Bone_t
// SkeletonAnimCapture_t__Bone_t Offsets
SkeletonAnimCapture_t__Bone_t.m_Name = findOffsetByName(j, "SkeletonAnimCapture_t__Bone_t", "m_Name");
SkeletonAnimCapture_t__Bone_t.m_BindPose = findOffsetByName(j, "SkeletonAnimCapture_t__Bone_t", "m_BindPose");
SkeletonAnimCapture_t__Bone_t.m_nParent = findOffsetByName(j, "SkeletonAnimCapture_t__Bone_t", "m_nParent");

// Atribuições para CExpressionActionUpdater
// CExpressionActionUpdater Offsets
CExpressionActionUpdater.m_hParam = findOffsetByName(j, "CExpressionActionUpdater", "m_hParam");
CExpressionActionUpdater.m_eParamType = findOffsetByName(j, "CExpressionActionUpdater", "m_eParamType");
CExpressionActionUpdater.m_hScript = findOffsetByName(j, "CExpressionActionUpdater", "m_hScript");

// Atribuições para CNmFloatMathNode__CDefinition
// CNmFloatMathNode__CDefinition Offsets
CNmFloatMathNode__CDefinition.m_nInputValueNodeIdxA = findOffsetByName(j, "CNmFloatMathNode__CDefinition", "m_nInputValueNodeIdxA");
CNmFloatMathNode__CDefinition.m_nInputValueNodeIdxB = findOffsetByName(j, "CNmFloatMathNode__CDefinition", "m_nInputValueNodeIdxB");
CNmFloatMathNode__CDefinition.m_bReturnAbsoluteResult = findOffsetByName(j, "CNmFloatMathNode__CDefinition", "m_bReturnAbsoluteResult");
CNmFloatMathNode__CDefinition.m_operator = findOffsetByName(j, "CNmFloatMathNode__CDefinition", "m_operator");
CNmFloatMathNode__CDefinition.m_flValueB = findOffsetByName(j, "CNmFloatMathNode__CDefinition", "m_flValueB");

// Atribuições para CAnimationGraphVisualizerLine
// CAnimationGraphVisualizerLine Offsets
CAnimationGraphVisualizerLine.m_vWsPositionStart = findOffsetByName(j, "CAnimationGraphVisualizerLine", "m_vWsPositionStart");
CAnimationGraphVisualizerLine.m_vWsPositionEnd = findOffsetByName(j, "CAnimationGraphVisualizerLine", "m_vWsPositionEnd");
CAnimationGraphVisualizerLine.m_Color = findOffsetByName(j, "CAnimationGraphVisualizerLine", "m_Color");

// Atribuições para CCycleControlUpdateNode
// CCycleControlUpdateNode Offsets
CCycleControlUpdateNode.m_valueSource = findOffsetByName(j, "CCycleControlUpdateNode", "m_valueSource");
CCycleControlUpdateNode.m_paramIndex = findOffsetByName(j, "CCycleControlUpdateNode", "m_paramIndex");

// Atribuições para CNmTargetInfoNode__CDefinition
// CNmTargetInfoNode__CDefinition Offsets
CNmTargetInfoNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmTargetInfoNode__CDefinition", "m_nInputValueNodeIdx");
CNmTargetInfoNode__CDefinition.m_infoType = findOffsetByName(j, "CNmTargetInfoNode__CDefinition", "m_infoType");
CNmTargetInfoNode__CDefinition.m_bIsWorldSpaceTarget = findOffsetByName(j, "CNmTargetInfoNode__CDefinition", "m_bIsWorldSpaceTarget");

// Atribuições para CDampedValueComponentUpdater
// CDampedValueComponentUpdater Offsets
CDampedValueComponentUpdater.m_items = findOffsetByName(j, "CDampedValueComponentUpdater", "m_items");

// Atribuições para CBaseConstraint
// CBaseConstraint Offsets
CBaseConstraint.m_name = findOffsetByName(j, "CBaseConstraint", "m_name");
CBaseConstraint.m_vUpVector = findOffsetByName(j, "CBaseConstraint", "m_vUpVector");
CBaseConstraint.m_slaves = findOffsetByName(j, "CBaseConstraint", "m_slaves");
CBaseConstraint.m_targets = findOffsetByName(j, "CBaseConstraint", "m_targets");

// Atribuições para BlendItem_t
// BlendItem_t Offsets
BlendItem_t.m_tags = findOffsetByName(j, "BlendItem_t", "m_tags");
BlendItem_t.m_pChild = findOffsetByName(j, "BlendItem_t", "m_pChild");
BlendItem_t.m_hSequence = findOffsetByName(j, "BlendItem_t", "m_hSequence");
BlendItem_t.m_vPos = findOffsetByName(j, "BlendItem_t", "m_vPos");
BlendItem_t.m_flDuration = findOffsetByName(j, "BlendItem_t", "m_flDuration");
BlendItem_t.m_bUseCustomDuration = findOffsetByName(j, "BlendItem_t", "m_bUseCustomDuration");

// Atribuições para CNmClipNode__CDefinition
// CNmClipNode__CDefinition Offsets
CNmClipNode__CDefinition.m_nPlayInReverseValueNodeIdx = findOffsetByName(j, "CNmClipNode__CDefinition", "m_nPlayInReverseValueNodeIdx");
CNmClipNode__CDefinition.m_nResetTimeValueNodeIdx = findOffsetByName(j, "CNmClipNode__CDefinition", "m_nResetTimeValueNodeIdx");
CNmClipNode__CDefinition.m_bSampleRootMotion = findOffsetByName(j, "CNmClipNode__CDefinition", "m_bSampleRootMotion");
CNmClipNode__CDefinition.m_bAllowLooping = findOffsetByName(j, "CNmClipNode__CDefinition", "m_bAllowLooping");
CNmClipNode__CDefinition.m_nDataSlotIdx = findOffsetByName(j, "CNmClipNode__CDefinition", "m_nDataSlotIdx");

// Atribuições para CNmBlend1DNode__CDefinition
// CNmBlend1DNode__CDefinition Offsets
CNmBlend1DNode__CDefinition.m_parameterization = findOffsetByName(j, "CNmBlend1DNode__CDefinition", "m_parameterization");

// Atribuições para CConcreteAnimParameter
// CConcreteAnimParameter Offsets
CConcreteAnimParameter.m_previewButton = findOffsetByName(j, "CConcreteAnimParameter", "m_previewButton");
CConcreteAnimParameter.m_eNetworkSetting = findOffsetByName(j, "CConcreteAnimParameter", "m_eNetworkSetting");
CConcreteAnimParameter.m_bUseMostRecentValue = findOffsetByName(j, "CConcreteAnimParameter", "m_bUseMostRecentValue");
CConcreteAnimParameter.m_bAutoReset = findOffsetByName(j, "CConcreteAnimParameter", "m_bAutoReset");
CConcreteAnimParameter.m_bGameWritable = findOffsetByName(j, "CConcreteAnimParameter", "m_bGameWritable");
CConcreteAnimParameter.m_bGraphWritable = findOffsetByName(j, "CConcreteAnimParameter", "m_bGraphWritable");

// Atribuições para CPairedSequenceUpdateNode
// CPairedSequenceUpdateNode Offsets
CPairedSequenceUpdateNode.m_sPairedSequenceRole = findOffsetByName(j, "CPairedSequenceUpdateNode", "m_sPairedSequenceRole");

// Atribuições para CModelConfigElement_RandomPick
// CModelConfigElement_RandomPick Offsets
CModelConfigElement_RandomPick.m_Choices = findOffsetByName(j, "CModelConfigElement_RandomPick", "m_Choices");
CModelConfigElement_RandomPick.m_ChoiceWeights = findOffsetByName(j, "CModelConfigElement_RandomPick", "m_ChoiceWeights");

// Atribuições para VPhysXConstraint2_t
// VPhysXConstraint2_t Offsets
VPhysXConstraint2_t.m_nFlags = findOffsetByName(j, "VPhysXConstraint2_t", "m_nFlags");
VPhysXConstraint2_t.m_nParent = findOffsetByName(j, "VPhysXConstraint2_t", "m_nParent");
VPhysXConstraint2_t.m_nChild = findOffsetByName(j, "VPhysXConstraint2_t", "m_nChild");
VPhysXConstraint2_t.m_params = findOffsetByName(j, "VPhysXConstraint2_t", "m_params");

// Atribuições para CConstraintTarget
// CConstraintTarget Offsets
CConstraintTarget.m_qOffset = findOffsetByName(j, "CConstraintTarget", "m_qOffset");
CConstraintTarget.m_vOffset = findOffsetByName(j, "CConstraintTarget", "m_vOffset");
CConstraintTarget.m_nBoneHash = findOffsetByName(j, "CConstraintTarget", "m_nBoneHash");
CConstraintTarget.m_sName = findOffsetByName(j, "CConstraintTarget", "m_sName");
CConstraintTarget.m_flWeight = findOffsetByName(j, "CConstraintTarget", "m_flWeight");
CConstraintTarget.m_bIsAttachment = findOffsetByName(j, "CConstraintTarget", "m_bIsAttachment");

// Atribuições para SkeletonAnimCapture_t
// SkeletonAnimCapture_t Offsets
SkeletonAnimCapture_t.m_nEntIndex = findOffsetByName(j, "SkeletonAnimCapture_t", "m_nEntIndex");
SkeletonAnimCapture_t.m_nEntParent = findOffsetByName(j, "SkeletonAnimCapture_t", "m_nEntParent");
SkeletonAnimCapture_t.m_ImportedCollision = findOffsetByName(j, "SkeletonAnimCapture_t", "m_ImportedCollision");
SkeletonAnimCapture_t.m_ModelName = findOffsetByName(j, "SkeletonAnimCapture_t", "m_ModelName");
SkeletonAnimCapture_t.m_CaptureName = findOffsetByName(j, "SkeletonAnimCapture_t", "m_CaptureName");
SkeletonAnimCapture_t.m_ModelBindPose = findOffsetByName(j, "SkeletonAnimCapture_t", "m_ModelBindPose");
SkeletonAnimCapture_t.m_FeModelInitPose = findOffsetByName(j, "SkeletonAnimCapture_t", "m_FeModelInitPose");
SkeletonAnimCapture_t.m_nFlexControllers = findOffsetByName(j, "SkeletonAnimCapture_t", "m_nFlexControllers");
SkeletonAnimCapture_t.m_bPredicted = findOffsetByName(j, "SkeletonAnimCapture_t", "m_bPredicted");
SkeletonAnimCapture_t.m_Frames = findOffsetByName(j, "SkeletonAnimCapture_t", "m_Frames");

// Atribuições para CAnimUser
// CAnimUser Offsets
CAnimUser.m_name = findOffsetByName(j, "CAnimUser", "m_name");
CAnimUser.m_nType = findOffsetByName(j, "CAnimUser", "m_nType");

// Atribuições para CRagdollComponentUpdater
// CRagdollComponentUpdater Offsets
CRagdollComponentUpdater.m_ragdollNodePaths = findOffsetByName(j, "CRagdollComponentUpdater", "m_ragdollNodePaths");
CRagdollComponentUpdater.m_boneIndices = findOffsetByName(j, "CRagdollComponentUpdater", "m_boneIndices");
CRagdollComponentUpdater.m_boneNames = findOffsetByName(j, "CRagdollComponentUpdater", "m_boneNames");
CRagdollComponentUpdater.m_weightLists = findOffsetByName(j, "CRagdollComponentUpdater", "m_weightLists");
CRagdollComponentUpdater.m_flSpringFrequencyMin = findOffsetByName(j, "CRagdollComponentUpdater", "m_flSpringFrequencyMin");
CRagdollComponentUpdater.m_flSpringFrequencyMax = findOffsetByName(j, "CRagdollComponentUpdater", "m_flSpringFrequencyMax");
CRagdollComponentUpdater.m_flMaxStretch = findOffsetByName(j, "CRagdollComponentUpdater", "m_flMaxStretch");
CRagdollComponentUpdater.m_bSolidCollisionAtZeroWeight = findOffsetByName(j, "CRagdollComponentUpdater", "m_bSolidCollisionAtZeroWeight");

// Atribuições para CFootDefinition
// CFootDefinition Offsets
CFootDefinition.m_name = findOffsetByName(j, "CFootDefinition", "m_name");
CFootDefinition.m_ankleBoneName = findOffsetByName(j, "CFootDefinition", "m_ankleBoneName");
CFootDefinition.m_toeBoneName = findOffsetByName(j, "CFootDefinition", "m_toeBoneName");
CFootDefinition.m_vBallOffset = findOffsetByName(j, "CFootDefinition", "m_vBallOffset");
CFootDefinition.m_vHeelOffset = findOffsetByName(j, "CFootDefinition", "m_vHeelOffset");
CFootDefinition.m_flFootLength = findOffsetByName(j, "CFootDefinition", "m_flFootLength");
CFootDefinition.m_flBindPoseDirectionMS = findOffsetByName(j, "CFootDefinition", "m_flBindPoseDirectionMS");
CFootDefinition.m_flTraceHeight = findOffsetByName(j, "CFootDefinition", "m_flTraceHeight");
CFootDefinition.m_flTraceRadius = findOffsetByName(j, "CFootDefinition", "m_flTraceRadius");

// Atribuições para CSeqSynthAnimDesc
// CSeqSynthAnimDesc Offsets
CSeqSynthAnimDesc.m_sName = findOffsetByName(j, "CSeqSynthAnimDesc", "m_sName");
CSeqSynthAnimDesc.m_flags = findOffsetByName(j, "CSeqSynthAnimDesc", "m_flags");
CSeqSynthAnimDesc.m_transition = findOffsetByName(j, "CSeqSynthAnimDesc", "m_transition");
CSeqSynthAnimDesc.m_nLocalBaseReference = findOffsetByName(j, "CSeqSynthAnimDesc", "m_nLocalBaseReference");
CSeqSynthAnimDesc.m_nLocalBoneMask = findOffsetByName(j, "CSeqSynthAnimDesc", "m_nLocalBoneMask");
CSeqSynthAnimDesc.m_activityArray = findOffsetByName(j, "CSeqSynthAnimDesc", "m_activityArray");

// Atribuições para CNmLayerBlendNode__LayerDefinition_t
// CNmLayerBlendNode__LayerDefinition_t Offsets
CNmLayerBlendNode__LayerDefinition_t.m_nInputNodeIdx = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_nInputNodeIdx");
CNmLayerBlendNode__LayerDefinition_t.m_nWeightValueNodeIdx = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_nWeightValueNodeIdx");
CNmLayerBlendNode__LayerDefinition_t.m_nBoneMaskValueNodeIdx = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_nBoneMaskValueNodeIdx");
CNmLayerBlendNode__LayerDefinition_t.m_nRootMotionWeightValueNodeIdx = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_nRootMotionWeightValueNodeIdx");
CNmLayerBlendNode__LayerDefinition_t.m_bIsSynchronized = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsSynchronized");
CNmLayerBlendNode__LayerDefinition_t.m_bIgnoreEvents = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_bIgnoreEvents");
CNmLayerBlendNode__LayerDefinition_t.m_bIsStateMachineLayer = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsStateMachineLayer");
CNmLayerBlendNode__LayerDefinition_t.m_blendMode = findOffsetByName(j, "CNmLayerBlendNode__LayerDefinition_t", "m_blendMode");

// Atribuições para CAnimComponentUpdater
// CAnimComponentUpdater Offsets
CAnimComponentUpdater.m_name = findOffsetByName(j, "CAnimComponentUpdater", "m_name");
CAnimComponentUpdater.m_id = findOffsetByName(j, "CAnimComponentUpdater", "m_id");
CAnimComponentUpdater.m_networkMode = findOffsetByName(j, "CAnimComponentUpdater", "m_networkMode");
CAnimComponentUpdater.m_bStartEnabled = findOffsetByName(j, "CAnimComponentUpdater", "m_bStartEnabled");

// Atribuições para CBlend2DUpdateNode
// CBlend2DUpdateNode Offsets
CBlend2DUpdateNode.m_items = findOffsetByName(j, "CBlend2DUpdateNode", "m_items");
CBlend2DUpdateNode.m_tags = findOffsetByName(j, "CBlend2DUpdateNode", "m_tags");
CBlend2DUpdateNode.m_paramSpans = findOffsetByName(j, "CBlend2DUpdateNode", "m_paramSpans");
CBlend2DUpdateNode.m_nodeItemIndices = findOffsetByName(j, "CBlend2DUpdateNode", "m_nodeItemIndices");
CBlend2DUpdateNode.m_damping = findOffsetByName(j, "CBlend2DUpdateNode", "m_damping");
CBlend2DUpdateNode.m_blendSourceX = findOffsetByName(j, "CBlend2DUpdateNode", "m_blendSourceX");
CBlend2DUpdateNode.m_paramX = findOffsetByName(j, "CBlend2DUpdateNode", "m_paramX");
CBlend2DUpdateNode.m_blendSourceY = findOffsetByName(j, "CBlend2DUpdateNode", "m_blendSourceY");
CBlend2DUpdateNode.m_paramY = findOffsetByName(j, "CBlend2DUpdateNode", "m_paramY");
CBlend2DUpdateNode.m_eBlendMode = findOffsetByName(j, "CBlend2DUpdateNode", "m_eBlendMode");
CBlend2DUpdateNode.m_playbackSpeed = findOffsetByName(j, "CBlend2DUpdateNode", "m_playbackSpeed");
CBlend2DUpdateNode.m_bLoop = findOffsetByName(j, "CBlend2DUpdateNode", "m_bLoop");
CBlend2DUpdateNode.m_bLockBlendOnReset = findOffsetByName(j, "CBlend2DUpdateNode", "m_bLockBlendOnReset");
CBlend2DUpdateNode.m_bLockWhenWaning = findOffsetByName(j, "CBlend2DUpdateNode", "m_bLockWhenWaning");
CBlend2DUpdateNode.m_bAnimEventsAndTagsOnMostWeightedOnly = findOffsetByName(j, "CBlend2DUpdateNode", "m_bAnimEventsAndTagsOnMostWeightedOnly");

// Atribuições para PermModelExtPart_t
// PermModelExtPart_t Offsets
PermModelExtPart_t.m_Transform = findOffsetByName(j, "PermModelExtPart_t", "m_Transform");
PermModelExtPart_t.m_Name = findOffsetByName(j, "PermModelExtPart_t", "m_Name");
PermModelExtPart_t.m_nParent = findOffsetByName(j, "PermModelExtPart_t", "m_nParent");
PermModelExtPart_t.m_refModel = findOffsetByName(j, "PermModelExtPart_t", "m_refModel");

// Atribuições para CNmCachedIDNode__CDefinition
// CNmCachedIDNode__CDefinition Offsets
CNmCachedIDNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmCachedIDNode__CDefinition", "m_nInputValueNodeIdx");
CNmCachedIDNode__CDefinition.m_mode = findOffsetByName(j, "CNmCachedIDNode__CDefinition", "m_mode");

// Atribuições para CLeanMatrixUpdateNode
// CLeanMatrixUpdateNode Offsets
CLeanMatrixUpdateNode.m_frameCorners = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_frameCorners");
CLeanMatrixUpdateNode.m_poses = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_poses");
CLeanMatrixUpdateNode.m_damping = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_damping");
CLeanMatrixUpdateNode.m_blendSource = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_blendSource");
CLeanMatrixUpdateNode.m_paramIndex = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_paramIndex");
CLeanMatrixUpdateNode.m_verticalAxis = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_verticalAxis");
CLeanMatrixUpdateNode.m_horizontalAxis = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_horizontalAxis");
CLeanMatrixUpdateNode.m_hSequence = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_hSequence");
CLeanMatrixUpdateNode.m_flMaxValue = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_flMaxValue");
CLeanMatrixUpdateNode.m_nSequenceMaxFrame = findOffsetByName(j, "CLeanMatrixUpdateNode", "m_nSequenceMaxFrame");

// Atribuições para CSymbolAnimParameter
// CSymbolAnimParameter Offsets
CSymbolAnimParameter.m_defaultValue = findOffsetByName(j, "CSymbolAnimParameter", "m_defaultValue");

// Atribuições para CNmStateMachineNode__TransitionDefinition_t
// CNmStateMachineNode__TransitionDefinition_t Offsets
CNmStateMachineNode__TransitionDefinition_t.m_nTargetStateIdx = findOffsetByName(j, "CNmStateMachineNode__TransitionDefinition_t", "m_nTargetStateIdx");
CNmStateMachineNode__TransitionDefinition_t.m_nConditionNodeIdx = findOffsetByName(j, "CNmStateMachineNode__TransitionDefinition_t", "m_nConditionNodeIdx");
CNmStateMachineNode__TransitionDefinition_t.m_nTransitionNodeIdx = findOffsetByName(j, "CNmStateMachineNode__TransitionDefinition_t", "m_nTransitionNodeIdx");
CNmStateMachineNode__TransitionDefinition_t.m_bCanBeForced = findOffsetByName(j, "CNmStateMachineNode__TransitionDefinition_t", "m_bCanBeForced");

// Atribuições para CNmFloatSelectorNode__CDefinition
// CNmFloatSelectorNode__CDefinition Offsets
CNmFloatSelectorNode__CDefinition.m_conditionNodeIndices = findOffsetByName(j, "CNmFloatSelectorNode__CDefinition", "m_conditionNodeIndices");
CNmFloatSelectorNode__CDefinition.m_values = findOffsetByName(j, "CNmFloatSelectorNode__CDefinition", "m_values");
CNmFloatSelectorNode__CDefinition.m_flDefaultValue = findOffsetByName(j, "CNmFloatSelectorNode__CDefinition", "m_flDefaultValue");
CNmFloatSelectorNode__CDefinition.m_flEaseTime = findOffsetByName(j, "CNmFloatSelectorNode__CDefinition", "m_flEaseTime");
CNmFloatSelectorNode__CDefinition.m_easingOp = findOffsetByName(j, "CNmFloatSelectorNode__CDefinition", "m_easingOp");

// Atribuições para CTargetSelectorUpdateNode
// CTargetSelectorUpdateNode Offsets
CTargetSelectorUpdateNode.m_children = findOffsetByName(j, "CTargetSelectorUpdateNode", "m_children");
CTargetSelectorUpdateNode.m_hPositionParameter = findOffsetByName(j, "CTargetSelectorUpdateNode", "m_hPositionParameter");
CTargetSelectorUpdateNode.m_hFacePositionParameter = findOffsetByName(j, "CTargetSelectorUpdateNode", "m_hFacePositionParameter");

// Atribuições para CHitBoxSetList
// CHitBoxSetList Offsets
CHitBoxSetList.m_HitBoxSets = findOffsetByName(j, "CHitBoxSetList", "m_HitBoxSets");

// Atribuições para MotionDBIndex
// MotionDBIndex Offsets
MotionDBIndex.m_nIndex = findOffsetByName(j, "MotionDBIndex", "m_nIndex");

// Atribuições para CDirectPlaybackTagData
// CDirectPlaybackTagData Offsets
CDirectPlaybackTagData.m_sequenceName = findOffsetByName(j, "CDirectPlaybackTagData", "m_sequenceName");
CDirectPlaybackTagData.m_tags = findOffsetByName(j, "CDirectPlaybackTagData", "m_tags");

// Atribuições para CNmFloatRemapNode__RemapRange_t
// CNmFloatRemapNode__RemapRange_t Offsets
CNmFloatRemapNode__RemapRange_t.m_flBegin = findOffsetByName(j, "CNmFloatRemapNode__RemapRange_t", "m_flBegin");
CNmFloatRemapNode__RemapRange_t.m_flEnd = findOffsetByName(j, "CNmFloatRemapNode__RemapRange_t", "m_flEnd");

// Atribuições para CNmCurrentSyncEventIDNode__CDefinition
// CNmCurrentSyncEventIDNode__CDefinition Offsets
CNmCurrentSyncEventIDNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmCurrentSyncEventIDNode__CDefinition", "m_nSourceStateNodeIdx");

// Atribuições para CNmStateCompletedConditionNode__CDefinition
// CNmStateCompletedConditionNode__CDefinition Offsets
CNmStateCompletedConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmStateCompletedConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmStateCompletedConditionNode__CDefinition.m_nTransitionDurationOverrideNodeIdx = findOffsetByName(j, "CNmStateCompletedConditionNode__CDefinition", "m_nTransitionDurationOverrideNodeIdx");
CNmStateCompletedConditionNode__CDefinition.m_flTransitionDurationSeconds = findOffsetByName(j, "CNmStateCompletedConditionNode__CDefinition", "m_flTransitionDurationSeconds");

// Atribuições para CNmTargetWarpEvent
// CNmTargetWarpEvent Offsets
CNmTargetWarpEvent.m_rule = findOffsetByName(j, "CNmTargetWarpEvent", "m_rule");
CNmTargetWarpEvent.m_algorithm = findOffsetByName(j, "CNmTargetWarpEvent", "m_algorithm");

// Atribuições para CParamSpanUpdater
// CParamSpanUpdater Offsets
CParamSpanUpdater.m_spans = findOffsetByName(j, "CParamSpanUpdater", "m_spans");

// Atribuições para CParticleAnimTag
// CParticleAnimTag Offsets
CParticleAnimTag.m_hParticleSystem = findOffsetByName(j, "CParticleAnimTag", "m_hParticleSystem");
CParticleAnimTag.m_particleSystemName = findOffsetByName(j, "CParticleAnimTag", "m_particleSystemName");
CParticleAnimTag.m_configName = findOffsetByName(j, "CParticleAnimTag", "m_configName");
CParticleAnimTag.m_bDetachFromOwner = findOffsetByName(j, "CParticleAnimTag", "m_bDetachFromOwner");
CParticleAnimTag.m_bStopWhenTagEnds = findOffsetByName(j, "CParticleAnimTag", "m_bStopWhenTagEnds");
CParticleAnimTag.m_bTagEndStopIsInstant = findOffsetByName(j, "CParticleAnimTag", "m_bTagEndStopIsInstant");
CParticleAnimTag.m_attachmentName = findOffsetByName(j, "CParticleAnimTag", "m_attachmentName");
CParticleAnimTag.m_attachmentType = findOffsetByName(j, "CParticleAnimTag", "m_attachmentType");
CParticleAnimTag.m_attachmentCP1Name = findOffsetByName(j, "CParticleAnimTag", "m_attachmentCP1Name");
CParticleAnimTag.m_attachmentCP1Type = findOffsetByName(j, "CParticleAnimTag", "m_attachmentCP1Type");

// Atribuições para CCycleBase
// CCycleBase Offsets
CCycleBase.m_flCycle = findOffsetByName(j, "CCycleBase", "m_flCycle");

// Atribuições para FollowTargetOpFixedSettings_t
// FollowTargetOpFixedSettings_t Offsets
FollowTargetOpFixedSettings_t.m_boneIndex = findOffsetByName(j, "FollowTargetOpFixedSettings_t", "m_boneIndex");
FollowTargetOpFixedSettings_t.m_bBoneTarget = findOffsetByName(j, "FollowTargetOpFixedSettings_t", "m_bBoneTarget");
FollowTargetOpFixedSettings_t.m_boneTargetIndex = findOffsetByName(j, "FollowTargetOpFixedSettings_t", "m_boneTargetIndex");
FollowTargetOpFixedSettings_t.m_bWorldCoodinateTarget = findOffsetByName(j, "FollowTargetOpFixedSettings_t", "m_bWorldCoodinateTarget");
FollowTargetOpFixedSettings_t.m_bMatchTargetOrientation = findOffsetByName(j, "FollowTargetOpFixedSettings_t", "m_bMatchTargetOrientation");

// Atribuições para CNmRootMotionEvent
// CNmRootMotionEvent Offsets
CNmRootMotionEvent.m_flBlendTimeSeconds = findOffsetByName(j, "CNmRootMotionEvent", "m_flBlendTimeSeconds");

// Atribuições para AnimationSnapshotBase_t
// AnimationSnapshotBase_t Offsets
AnimationSnapshotBase_t.m_flRealTime = findOffsetByName(j, "AnimationSnapshotBase_t", "m_flRealTime");
AnimationSnapshotBase_t.m_rootToWorld = findOffsetByName(j, "AnimationSnapshotBase_t", "m_rootToWorld");
AnimationSnapshotBase_t.m_bBonesInWorldSpace = findOffsetByName(j, "AnimationSnapshotBase_t", "m_bBonesInWorldSpace");
AnimationSnapshotBase_t.m_boneSetupMask = findOffsetByName(j, "AnimationSnapshotBase_t", "m_boneSetupMask");
AnimationSnapshotBase_t.m_boneTransforms = findOffsetByName(j, "AnimationSnapshotBase_t", "m_boneTransforms");
AnimationSnapshotBase_t.m_flexControllers = findOffsetByName(j, "AnimationSnapshotBase_t", "m_flexControllers");
AnimationSnapshotBase_t.m_SnapshotType = findOffsetByName(j, "AnimationSnapshotBase_t", "m_SnapshotType");
AnimationSnapshotBase_t.m_bHasDecodeDump = findOffsetByName(j, "AnimationSnapshotBase_t", "m_bHasDecodeDump");
AnimationSnapshotBase_t.m_DecodeDump = findOffsetByName(j, "AnimationSnapshotBase_t", "m_DecodeDump");

// Atribuições para CEmitTagActionUpdater
// CEmitTagActionUpdater Offsets
CEmitTagActionUpdater.m_nTagIndex = findOffsetByName(j, "CEmitTagActionUpdater", "m_nTagIndex");
CEmitTagActionUpdater.m_bIsZeroDuration = findOffsetByName(j, "CEmitTagActionUpdater", "m_bIsZeroDuration");

// Atribuições para DynamicMeshDeformParams_t
// DynamicMeshDeformParams_t Offsets
DynamicMeshDeformParams_t.m_flTensionCompressScale = findOffsetByName(j, "DynamicMeshDeformParams_t", "m_flTensionCompressScale");
DynamicMeshDeformParams_t.m_flTensionStretchScale = findOffsetByName(j, "DynamicMeshDeformParams_t", "m_flTensionStretchScale");
DynamicMeshDeformParams_t.m_bRecomputeSmoothNormalsAfterAnimation = findOffsetByName(j, "DynamicMeshDeformParams_t", "m_bRecomputeSmoothNormalsAfterAnimation");
DynamicMeshDeformParams_t.m_bComputeDynamicMeshTensionAfterAnimation = findOffsetByName(j, "DynamicMeshDeformParams_t", "m_bComputeDynamicMeshTensionAfterAnimation");
DynamicMeshDeformParams_t.m_bSmoothNormalsAcrossUvSeams = findOffsetByName(j, "DynamicMeshDeformParams_t", "m_bSmoothNormalsAcrossUvSeams");

// Atribuições para CNmTimeConditionNode__CDefinition
// CNmTimeConditionNode__CDefinition Offsets
CNmTimeConditionNode__CDefinition.m_sourceStateNodeIdx = findOffsetByName(j, "CNmTimeConditionNode__CDefinition", "m_sourceStateNodeIdx");
CNmTimeConditionNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmTimeConditionNode__CDefinition", "m_nInputValueNodeIdx");
CNmTimeConditionNode__CDefinition.m_flComparand = findOffsetByName(j, "CNmTimeConditionNode__CDefinition", "m_flComparand");
CNmTimeConditionNode__CDefinition.m_type = findOffsetByName(j, "CNmTimeConditionNode__CDefinition", "m_type");
CNmTimeConditionNode__CDefinition.m_operator = findOffsetByName(j, "CNmTimeConditionNode__CDefinition", "m_operator");

// Atribuições para CNmSyncEventIndexConditionNode__CDefinition
// CNmSyncEventIndexConditionNode__CDefinition Offsets
CNmSyncEventIndexConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmSyncEventIndexConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmSyncEventIndexConditionNode__CDefinition.m_triggerMode = findOffsetByName(j, "CNmSyncEventIndexConditionNode__CDefinition", "m_triggerMode");
CNmSyncEventIndexConditionNode__CDefinition.m_syncEventIdx = findOffsetByName(j, "CNmSyncEventIndexConditionNode__CDefinition", "m_syncEventIdx");

// Atribuições para CAnimStateMachineUpdater
// CAnimStateMachineUpdater Offsets
CAnimStateMachineUpdater.m_states = findOffsetByName(j, "CAnimStateMachineUpdater", "m_states");
CAnimStateMachineUpdater.m_transitions = findOffsetByName(j, "CAnimStateMachineUpdater", "m_transitions");
CAnimStateMachineUpdater.m_startStateIndex = findOffsetByName(j, "CAnimStateMachineUpdater", "m_startStateIndex");

// Atribuições para CUnaryUpdateNode
// CUnaryUpdateNode Offsets
CUnaryUpdateNode.m_pChildNode = findOffsetByName(j, "CUnaryUpdateNode", "m_pChildNode");

// Atribuições para CNmIDToFloatNode__CDefinition
// CNmIDToFloatNode__CDefinition Offsets
CNmIDToFloatNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmIDToFloatNode__CDefinition", "m_nInputValueNodeIdx");
CNmIDToFloatNode__CDefinition.m_defaultValue = findOffsetByName(j, "CNmIDToFloatNode__CDefinition", "m_defaultValue");
CNmIDToFloatNode__CDefinition.m_IDs = findOffsetByName(j, "CNmIDToFloatNode__CDefinition", "m_IDs");
CNmIDToFloatNode__CDefinition.m_values = findOffsetByName(j, "CNmIDToFloatNode__CDefinition", "m_values");

// Atribuições para CCompressorGroup
// CCompressorGroup Offsets
CCompressorGroup.m_nTotalElementCount = findOffsetByName(j, "CCompressorGroup", "m_nTotalElementCount");
CCompressorGroup.m_szChannelClass = findOffsetByName(j, "CCompressorGroup", "m_szChannelClass");
CCompressorGroup.m_szVariableName = findOffsetByName(j, "CCompressorGroup", "m_szVariableName");
CCompressorGroup.m_nType = findOffsetByName(j, "CCompressorGroup", "m_nType");
CCompressorGroup.m_nFlags = findOffsetByName(j, "CCompressorGroup", "m_nFlags");
CCompressorGroup.m_szGrouping = findOffsetByName(j, "CCompressorGroup", "m_szGrouping");
CCompressorGroup.m_nCompressorIndex = findOffsetByName(j, "CCompressorGroup", "m_nCompressorIndex");
CCompressorGroup.m_szElementNames = findOffsetByName(j, "CCompressorGroup", "m_szElementNames");
CCompressorGroup.m_nElementUniqueID = findOffsetByName(j, "CCompressorGroup", "m_nElementUniqueID");
CCompressorGroup.m_nElementMask = findOffsetByName(j, "CCompressorGroup", "m_nElementMask");
CCompressorGroup.m_vectorCompressor = findOffsetByName(j, "CCompressorGroup", "m_vectorCompressor");
CCompressorGroup.m_quaternionCompressor = findOffsetByName(j, "CCompressorGroup", "m_quaternionCompressor");
CCompressorGroup.m_intCompressor = findOffsetByName(j, "CCompressorGroup", "m_intCompressor");
CCompressorGroup.m_boolCompressor = findOffsetByName(j, "CCompressorGroup", "m_boolCompressor");
CCompressorGroup.m_colorCompressor = findOffsetByName(j, "CCompressorGroup", "m_colorCompressor");
CCompressorGroup.m_vector2DCompressor = findOffsetByName(j, "CCompressorGroup", "m_vector2DCompressor");
CCompressorGroup.m_vector4DCompressor = findOffsetByName(j, "CCompressorGroup", "m_vector4DCompressor");

// Atribuições para CSelectorUpdateNode
// CSelectorUpdateNode Offsets
CSelectorUpdateNode.m_children = findOffsetByName(j, "CSelectorUpdateNode", "m_children");
CSelectorUpdateNode.m_tags = findOffsetByName(j, "CSelectorUpdateNode", "m_tags");
CSelectorUpdateNode.m_blendCurve = findOffsetByName(j, "CSelectorUpdateNode", "m_blendCurve");
CSelectorUpdateNode.m_flBlendTime = findOffsetByName(j, "CSelectorUpdateNode", "m_flBlendTime");
CSelectorUpdateNode.m_hParameter = findOffsetByName(j, "CSelectorUpdateNode", "m_hParameter");
CSelectorUpdateNode.m_nTagIndex = findOffsetByName(j, "CSelectorUpdateNode", "m_nTagIndex");
CSelectorUpdateNode.m_eTagBehavior = findOffsetByName(j, "CSelectorUpdateNode", "m_eTagBehavior");
CSelectorUpdateNode.m_bResetOnChange = findOffsetByName(j, "CSelectorUpdateNode", "m_bResetOnChange");
CSelectorUpdateNode.m_bLockWhenWaning = findOffsetByName(j, "CSelectorUpdateNode", "m_bLockWhenWaning");
CSelectorUpdateNode.m_bSyncCyclesOnChange = findOffsetByName(j, "CSelectorUpdateNode", "m_bSyncCyclesOnChange");

// Atribuições para NmPercent_t
// NmPercent_t Offsets
NmPercent_t.m_flValue = findOffsetByName(j, "NmPercent_t", "m_flValue");

// Atribuições para CStateMachineComponentUpdater
// CStateMachineComponentUpdater Offsets
CStateMachineComponentUpdater.m_stateMachine = findOffsetByName(j, "CStateMachineComponentUpdater", "m_stateMachine");

// Atribuições para CAnimUpdateNodeRef
// CAnimUpdateNodeRef Offsets
CAnimUpdateNodeRef.m_nodeIndex = findOffsetByName(j, "CAnimUpdateNodeRef", "m_nodeIndex");

// Atribuições para CPhysSurfaceProperties
// CPhysSurfaceProperties Offsets
CPhysSurfaceProperties.m_name = findOffsetByName(j, "CPhysSurfaceProperties", "m_name");
CPhysSurfaceProperties.m_nameHash = findOffsetByName(j, "CPhysSurfaceProperties", "m_nameHash");
CPhysSurfaceProperties.m_baseNameHash = findOffsetByName(j, "CPhysSurfaceProperties", "m_baseNameHash");
CPhysSurfaceProperties.m_bHidden = findOffsetByName(j, "CPhysSurfaceProperties", "m_bHidden");
CPhysSurfaceProperties.m_description = findOffsetByName(j, "CPhysSurfaceProperties", "m_description");
CPhysSurfaceProperties.m_physics = findOffsetByName(j, "CPhysSurfaceProperties", "m_physics");
CPhysSurfaceProperties.m_audioSounds = findOffsetByName(j, "CPhysSurfaceProperties", "m_audioSounds");
CPhysSurfaceProperties.m_audioParams = findOffsetByName(j, "CPhysSurfaceProperties", "m_audioParams");

// Atribuições para CNmFloatAbsNode__CDefinition
// CNmFloatAbsNode__CDefinition Offsets
CNmFloatAbsNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatAbsNode__CDefinition", "m_nInputValueNodeIdx");

// Atribuições para CSeqPoseParamDesc
// CSeqPoseParamDesc Offsets
CSeqPoseParamDesc.m_sName = findOffsetByName(j, "CSeqPoseParamDesc", "m_sName");
CSeqPoseParamDesc.m_flStart = findOffsetByName(j, "CSeqPoseParamDesc", "m_flStart");
CSeqPoseParamDesc.m_flEnd = findOffsetByName(j, "CSeqPoseParamDesc", "m_flEnd");
CSeqPoseParamDesc.m_flLoop = findOffsetByName(j, "CSeqPoseParamDesc", "m_flLoop");
CSeqPoseParamDesc.m_bLooping = findOffsetByName(j, "CSeqPoseParamDesc", "m_bLooping");

// Atribuições para CModelConfigElement_SetBodygroup
// CModelConfigElement_SetBodygroup Offsets
CModelConfigElement_SetBodygroup.m_GroupName = findOffsetByName(j, "CModelConfigElement_SetBodygroup", "m_GroupName");
CModelConfigElement_SetBodygroup.m_nChoice = findOffsetByName(j, "CModelConfigElement_SetBodygroup", "m_nChoice");

// Atribuições para CAnimMovement
// CAnimMovement Offsets
CAnimMovement.endframe = findOffsetByName(j, "CAnimMovement", "endframe");
CAnimMovement.motionflags = findOffsetByName(j, "CAnimMovement", "motionflags");
CAnimMovement.v0 = findOffsetByName(j, "CAnimMovement", "v0");
CAnimMovement.v1 = findOffsetByName(j, "CAnimMovement", "v1");
CAnimMovement.angle = findOffsetByName(j, "CAnimMovement", "angle");
CAnimMovement.vector = findOffsetByName(j, "CAnimMovement", "vector");
CAnimMovement.position = findOffsetByName(j, "CAnimMovement", "position");

// Atribuições para FootStepTrigger
// FootStepTrigger Offsets
FootStepTrigger.m_tags = findOffsetByName(j, "FootStepTrigger", "m_tags");
FootStepTrigger.m_nFootIndex = findOffsetByName(j, "FootStepTrigger", "m_nFootIndex");
FootStepTrigger.m_triggerPhase = findOffsetByName(j, "FootStepTrigger", "m_triggerPhase");

// Atribuições para CNmSyncTrack__EventMarker_t
// CNmSyncTrack__EventMarker_t Offsets
CNmSyncTrack__EventMarker_t.m_startTime = findOffsetByName(j, "CNmSyncTrack__EventMarker_t", "m_startTime");
CNmSyncTrack__EventMarker_t.m_ID = findOffsetByName(j, "CNmSyncTrack__EventMarker_t", "m_ID");

// Atribuições para CPathMetricEvaluator
// CPathMetricEvaluator Offsets
CPathMetricEvaluator.m_pathTimeSamples = findOffsetByName(j, "CPathMetricEvaluator", "m_pathTimeSamples");
CPathMetricEvaluator.m_flDistance = findOffsetByName(j, "CPathMetricEvaluator", "m_flDistance");
CPathMetricEvaluator.m_bExtrapolateMovement = findOffsetByName(j, "CPathMetricEvaluator", "m_bExtrapolateMovement");
CPathMetricEvaluator.m_flMinExtrapolationSpeed = findOffsetByName(j, "CPathMetricEvaluator", "m_flMinExtrapolationSpeed");

// Atribuições para CFootLockUpdateNode
// CFootLockUpdateNode Offsets
CFootLockUpdateNode.m_opFixedSettings = findOffsetByName(j, "CFootLockUpdateNode", "m_opFixedSettings");
CFootLockUpdateNode.m_footSettings = findOffsetByName(j, "CFootLockUpdateNode", "m_footSettings");
CFootLockUpdateNode.m_hipShiftDamping = findOffsetByName(j, "CFootLockUpdateNode", "m_hipShiftDamping");
CFootLockUpdateNode.m_rootHeightDamping = findOffsetByName(j, "CFootLockUpdateNode", "m_rootHeightDamping");
CFootLockUpdateNode.m_flStrideCurveScale = findOffsetByName(j, "CFootLockUpdateNode", "m_flStrideCurveScale");
CFootLockUpdateNode.m_flStrideCurveLimitScale = findOffsetByName(j, "CFootLockUpdateNode", "m_flStrideCurveLimitScale");
CFootLockUpdateNode.m_flStepHeightIncreaseScale = findOffsetByName(j, "CFootLockUpdateNode", "m_flStepHeightIncreaseScale");
CFootLockUpdateNode.m_flStepHeightDecreaseScale = findOffsetByName(j, "CFootLockUpdateNode", "m_flStepHeightDecreaseScale");
CFootLockUpdateNode.m_flHipShiftScale = findOffsetByName(j, "CFootLockUpdateNode", "m_flHipShiftScale");
CFootLockUpdateNode.m_flBlendTime = findOffsetByName(j, "CFootLockUpdateNode", "m_flBlendTime");
CFootLockUpdateNode.m_flMaxRootHeightOffset = findOffsetByName(j, "CFootLockUpdateNode", "m_flMaxRootHeightOffset");
CFootLockUpdateNode.m_flMinRootHeightOffset = findOffsetByName(j, "CFootLockUpdateNode", "m_flMinRootHeightOffset");
CFootLockUpdateNode.m_flTiltPlanePitchSpringStrength = findOffsetByName(j, "CFootLockUpdateNode", "m_flTiltPlanePitchSpringStrength");
CFootLockUpdateNode.m_flTiltPlaneRollSpringStrength = findOffsetByName(j, "CFootLockUpdateNode", "m_flTiltPlaneRollSpringStrength");
CFootLockUpdateNode.m_bApplyFootRotationLimits = findOffsetByName(j, "CFootLockUpdateNode", "m_bApplyFootRotationLimits");
CFootLockUpdateNode.m_bApplyHipShift = findOffsetByName(j, "CFootLockUpdateNode", "m_bApplyHipShift");
CFootLockUpdateNode.m_bModulateStepHeight = findOffsetByName(j, "CFootLockUpdateNode", "m_bModulateStepHeight");
CFootLockUpdateNode.m_bResetChild = findOffsetByName(j, "CFootLockUpdateNode", "m_bResetChild");
CFootLockUpdateNode.m_bEnableVerticalCurvedPaths = findOffsetByName(j, "CFootLockUpdateNode", "m_bEnableVerticalCurvedPaths");
CFootLockUpdateNode.m_bEnableRootHeightDamping = findOffsetByName(j, "CFootLockUpdateNode", "m_bEnableRootHeightDamping");

// Atribuições para JiggleBoneSettings_t
// JiggleBoneSettings_t Offsets
JiggleBoneSettings_t.m_nBoneIndex = findOffsetByName(j, "JiggleBoneSettings_t", "m_nBoneIndex");
JiggleBoneSettings_t.m_flSpringStrength = findOffsetByName(j, "JiggleBoneSettings_t", "m_flSpringStrength");
JiggleBoneSettings_t.m_flMaxTimeStep = findOffsetByName(j, "JiggleBoneSettings_t", "m_flMaxTimeStep");
JiggleBoneSettings_t.m_flDamping = findOffsetByName(j, "JiggleBoneSettings_t", "m_flDamping");
JiggleBoneSettings_t.m_vBoundsMaxLS = findOffsetByName(j, "JiggleBoneSettings_t", "m_vBoundsMaxLS");
JiggleBoneSettings_t.m_vBoundsMinLS = findOffsetByName(j, "JiggleBoneSettings_t", "m_vBoundsMinLS");
JiggleBoneSettings_t.m_eSimSpace = findOffsetByName(j, "JiggleBoneSettings_t", "m_eSimSpace");

// Atribuições para CJumpHelperUpdateNode
// CJumpHelperUpdateNode Offsets
CJumpHelperUpdateNode.m_hTargetParam = findOffsetByName(j, "CJumpHelperUpdateNode", "m_hTargetParam");
CJumpHelperUpdateNode.m_flOriginalJumpMovement = findOffsetByName(j, "CJumpHelperUpdateNode", "m_flOriginalJumpMovement");
CJumpHelperUpdateNode.m_flOriginalJumpDuration = findOffsetByName(j, "CJumpHelperUpdateNode", "m_flOriginalJumpDuration");
CJumpHelperUpdateNode.m_flJumpStartCycle = findOffsetByName(j, "CJumpHelperUpdateNode", "m_flJumpStartCycle");
CJumpHelperUpdateNode.m_flJumpEndCycle = findOffsetByName(j, "CJumpHelperUpdateNode", "m_flJumpEndCycle");
CJumpHelperUpdateNode.m_eCorrectionMethod = findOffsetByName(j, "CJumpHelperUpdateNode", "m_eCorrectionMethod");
CJumpHelperUpdateNode.m_bTranslationAxis = findOffsetByName(j, "CJumpHelperUpdateNode", "m_bTranslationAxis");
CJumpHelperUpdateNode.m_bScaleSpeed = findOffsetByName(j, "CJumpHelperUpdateNode", "m_bScaleSpeed");

// Atribuições para FootLockPoseOpFixedSettings
// FootLockPoseOpFixedSettings Offsets
FootLockPoseOpFixedSettings.m_footInfo = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_footInfo");
FootLockPoseOpFixedSettings.m_hipDampingSettings = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_hipDampingSettings");
FootLockPoseOpFixedSettings.m_nHipBoneIndex = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_nHipBoneIndex");
FootLockPoseOpFixedSettings.m_ikSolverType = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_ikSolverType");
FootLockPoseOpFixedSettings.m_bApplyTilt = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bApplyTilt");
FootLockPoseOpFixedSettings.m_bApplyHipDrop = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bApplyHipDrop");
FootLockPoseOpFixedSettings.m_bAlwaysUseFallbackHinge = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bAlwaysUseFallbackHinge");
FootLockPoseOpFixedSettings.m_bApplyFootRotationLimits = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bApplyFootRotationLimits");
FootLockPoseOpFixedSettings.m_bApplyLegTwistLimits = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bApplyLegTwistLimits");
FootLockPoseOpFixedSettings.m_flMaxFootHeight = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flMaxFootHeight");
FootLockPoseOpFixedSettings.m_flExtensionScale = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flExtensionScale");
FootLockPoseOpFixedSettings.m_flMaxLegTwist = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flMaxLegTwist");
FootLockPoseOpFixedSettings.m_bEnableLockBreaking = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bEnableLockBreaking");
FootLockPoseOpFixedSettings.m_flLockBreakTolerance = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flLockBreakTolerance");
FootLockPoseOpFixedSettings.m_flLockBlendTime = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flLockBlendTime");
FootLockPoseOpFixedSettings.m_bEnableStretching = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_bEnableStretching");
FootLockPoseOpFixedSettings.m_flMaxStretchAmount = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flMaxStretchAmount");
FootLockPoseOpFixedSettings.m_flStretchExtensionScale = findOffsetByName(j, "FootLockPoseOpFixedSettings", "m_flStretchExtensionScale");

// Atribuições para CBoneVelocityMetricEvaluator
// CBoneVelocityMetricEvaluator Offsets
CBoneVelocityMetricEvaluator.m_nBoneIndex = findOffsetByName(j, "CBoneVelocityMetricEvaluator", "m_nBoneIndex");

// Atribuições para CModelConfigElement_RandomColor
// CModelConfigElement_RandomColor Offsets
CModelConfigElement_RandomColor.m_Gradient = findOffsetByName(j, "CModelConfigElement_RandomColor", "m_Gradient");

// Atribuições para CFootMotion
// CFootMotion Offsets
CFootMotion.m_strides = findOffsetByName(j, "CFootMotion", "m_strides");
CFootMotion.m_name = findOffsetByName(j, "CFootMotion", "m_name");
CFootMotion.m_bAdditive = findOffsetByName(j, "CFootMotion", "m_bAdditive");

// Atribuições para CJiggleBoneUpdateNode
// CJiggleBoneUpdateNode Offsets
CJiggleBoneUpdateNode.m_opFixedData = findOffsetByName(j, "CJiggleBoneUpdateNode", "m_opFixedData");

// Atribuições para CNmConstVectorNode__CDefinition
// CNmConstVectorNode__CDefinition Offsets
CNmConstVectorNode__CDefinition.m_value = findOffsetByName(j, "CNmConstVectorNode__CDefinition", "m_value");

// Atribuições para MoodAnimation_t
// MoodAnimation_t Offsets
MoodAnimation_t.m_sName = findOffsetByName(j, "MoodAnimation_t", "m_sName");
MoodAnimation_t.m_flWeight = findOffsetByName(j, "MoodAnimation_t", "m_flWeight");

// Atribuições para CLODComponentUpdater
// CLODComponentUpdater Offsets
CLODComponentUpdater.m_nServerLOD = findOffsetByName(j, "CLODComponentUpdater", "m_nServerLOD");

// Atribuições para CNmIsTargetSetNode__CDefinition
// CNmIsTargetSetNode__CDefinition Offsets
CNmIsTargetSetNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmIsTargetSetNode__CDefinition", "m_nInputValueNodeIdx");

// Atribuições para CAnimDataChannelDesc
// CAnimDataChannelDesc Offsets
CAnimDataChannelDesc.m_szChannelClass = findOffsetByName(j, "CAnimDataChannelDesc", "m_szChannelClass");
CAnimDataChannelDesc.m_szVariableName = findOffsetByName(j, "CAnimDataChannelDesc", "m_szVariableName");
CAnimDataChannelDesc.m_nFlags = findOffsetByName(j, "CAnimDataChannelDesc", "m_nFlags");
CAnimDataChannelDesc.m_nType = findOffsetByName(j, "CAnimDataChannelDesc", "m_nType");
CAnimDataChannelDesc.m_szGrouping = findOffsetByName(j, "CAnimDataChannelDesc", "m_szGrouping");
CAnimDataChannelDesc.m_szDescription = findOffsetByName(j, "CAnimDataChannelDesc", "m_szDescription");
CAnimDataChannelDesc.m_szElementNameArray = findOffsetByName(j, "CAnimDataChannelDesc", "m_szElementNameArray");
CAnimDataChannelDesc.m_nElementIndexArray = findOffsetByName(j, "CAnimDataChannelDesc", "m_nElementIndexArray");
CAnimDataChannelDesc.m_nElementMaskArray = findOffsetByName(j, "CAnimDataChannelDesc", "m_nElementMaskArray");

// Atribuições para CMorphRectData
// CMorphRectData Offsets
CMorphRectData.m_nXLeftDst = findOffsetByName(j, "CMorphRectData", "m_nXLeftDst");
CMorphRectData.m_nYTopDst = findOffsetByName(j, "CMorphRectData", "m_nYTopDst");
CMorphRectData.m_flUWidthSrc = findOffsetByName(j, "CMorphRectData", "m_flUWidthSrc");
CMorphRectData.m_flVHeightSrc = findOffsetByName(j, "CMorphRectData", "m_flVHeightSrc");
CMorphRectData.m_bundleDatas = findOffsetByName(j, "CMorphRectData", "m_bundleDatas");

// Atribuições para CAnimFoot
// CAnimFoot Offsets
CAnimFoot.m_name = findOffsetByName(j, "CAnimFoot", "m_name");
CAnimFoot.m_vBallOffset = findOffsetByName(j, "CAnimFoot", "m_vBallOffset");
CAnimFoot.m_vHeelOffset = findOffsetByName(j, "CAnimFoot", "m_vHeelOffset");
CAnimFoot.m_ankleBoneIndex = findOffsetByName(j, "CAnimFoot", "m_ankleBoneIndex");
CAnimFoot.m_toeBoneIndex = findOffsetByName(j, "CAnimFoot", "m_toeBoneIndex");

// Atribuições para CNmBoneMask
// CNmBoneMask Offsets
CNmBoneMask.m_ID = findOffsetByName(j, "CNmBoneMask", "m_ID");
CNmBoneMask.m_weightInfo = findOffsetByName(j, "CNmBoneMask", "m_weightInfo");
CNmBoneMask.m_weights = findOffsetByName(j, "CNmBoneMask", "m_weights");

// Atribuições para CNmCachedVectorNode__CDefinition
// CNmCachedVectorNode__CDefinition Offsets
CNmCachedVectorNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmCachedVectorNode__CDefinition", "m_nInputValueNodeIdx");
CNmCachedVectorNode__CDefinition.m_mode = findOffsetByName(j, "CNmCachedVectorNode__CDefinition", "m_mode");

// Atribuições para CNmStateNode__TimedEvent_t
// CNmStateNode__TimedEvent_t Offsets
CNmStateNode__TimedEvent_t.m_ID = findOffsetByName(j, "CNmStateNode__TimedEvent_t", "m_ID");
CNmStateNode__TimedEvent_t.m_flTimeValueSeconds = findOffsetByName(j, "CNmStateNode__TimedEvent_t", "m_flTimeValueSeconds");

// Atribuições para CFootPositionMetricEvaluator
// CFootPositionMetricEvaluator Offsets
CFootPositionMetricEvaluator.m_footIndices = findOffsetByName(j, "CFootPositionMetricEvaluator", "m_footIndices");
CFootPositionMetricEvaluator.m_bIgnoreSlope = findOffsetByName(j, "CFootPositionMetricEvaluator", "m_bIgnoreSlope");

// Atribuições para HSequence
// HSequence Offsets
HSequence.m_Value = findOffsetByName(j, "HSequence", "m_Value");

// Atribuições para CDampedValueUpdateItem
// CDampedValueUpdateItem Offsets
CDampedValueUpdateItem.m_damping = findOffsetByName(j, "CDampedValueUpdateItem", "m_damping");
CDampedValueUpdateItem.m_hParamIn = findOffsetByName(j, "CDampedValueUpdateItem", "m_hParamIn");
CDampedValueUpdateItem.m_hParamOut = findOffsetByName(j, "CDampedValueUpdateItem", "m_hParamOut");

// Atribuições para CAnimLocalHierarchy
// CAnimLocalHierarchy Offsets
CAnimLocalHierarchy.m_sBone = findOffsetByName(j, "CAnimLocalHierarchy", "m_sBone");
CAnimLocalHierarchy.m_sNewParent = findOffsetByName(j, "CAnimLocalHierarchy", "m_sNewParent");
CAnimLocalHierarchy.m_nStartFrame = findOffsetByName(j, "CAnimLocalHierarchy", "m_nStartFrame");
CAnimLocalHierarchy.m_nPeakFrame = findOffsetByName(j, "CAnimLocalHierarchy", "m_nPeakFrame");
CAnimLocalHierarchy.m_nTailFrame = findOffsetByName(j, "CAnimLocalHierarchy", "m_nTailFrame");
CAnimLocalHierarchy.m_nEndFrame = findOffsetByName(j, "CAnimLocalHierarchy", "m_nEndFrame");

// Atribuições para CBlendUpdateNode
// CBlendUpdateNode Offsets
CBlendUpdateNode.m_children = findOffsetByName(j, "CBlendUpdateNode", "m_children");
CBlendUpdateNode.m_sortedOrder = findOffsetByName(j, "CBlendUpdateNode", "m_sortedOrder");
CBlendUpdateNode.m_targetValues = findOffsetByName(j, "CBlendUpdateNode", "m_targetValues");
CBlendUpdateNode.m_blendValueSource = findOffsetByName(j, "CBlendUpdateNode", "m_blendValueSource");
CBlendUpdateNode.m_paramIndex = findOffsetByName(j, "CBlendUpdateNode", "m_paramIndex");
CBlendUpdateNode.m_damping = findOffsetByName(j, "CBlendUpdateNode", "m_damping");
CBlendUpdateNode.m_blendKeyType = findOffsetByName(j, "CBlendUpdateNode", "m_blendKeyType");
CBlendUpdateNode.m_bLockBlendOnReset = findOffsetByName(j, "CBlendUpdateNode", "m_bLockBlendOnReset");
CBlendUpdateNode.m_bSyncCycles = findOffsetByName(j, "CBlendUpdateNode", "m_bSyncCycles");
CBlendUpdateNode.m_bLoop = findOffsetByName(j, "CBlendUpdateNode", "m_bLoop");
CBlendUpdateNode.m_bLockWhenWaning = findOffsetByName(j, "CBlendUpdateNode", "m_bLockWhenWaning");

// Atribuições para CQuaternionAnimParameter
// CQuaternionAnimParameter Offsets
CQuaternionAnimParameter.m_defaultValue = findOffsetByName(j, "CQuaternionAnimParameter", "m_defaultValue");
CQuaternionAnimParameter.m_bInterpolate = findOffsetByName(j, "CQuaternionAnimParameter", "m_bInterpolate");

// Atribuições para PermModelData_t
// PermModelData_t Offsets
PermModelData_t.m_name = findOffsetByName(j, "PermModelData_t", "m_name");
PermModelData_t.m_modelInfo = findOffsetByName(j, "PermModelData_t", "m_modelInfo");
PermModelData_t.m_ExtParts = findOffsetByName(j, "PermModelData_t", "m_ExtParts");
PermModelData_t.m_refMeshes = findOffsetByName(j, "PermModelData_t", "m_refMeshes");
PermModelData_t.m_refMeshGroupMasks = findOffsetByName(j, "PermModelData_t", "m_refMeshGroupMasks");
PermModelData_t.m_refPhysGroupMasks = findOffsetByName(j, "PermModelData_t", "m_refPhysGroupMasks");
PermModelData_t.m_refLODGroupMasks = findOffsetByName(j, "PermModelData_t", "m_refLODGroupMasks");
PermModelData_t.m_lodGroupSwitchDistances = findOffsetByName(j, "PermModelData_t", "m_lodGroupSwitchDistances");
PermModelData_t.m_refPhysicsData = findOffsetByName(j, "PermModelData_t", "m_refPhysicsData");
PermModelData_t.m_refPhysicsHitboxData = findOffsetByName(j, "PermModelData_t", "m_refPhysicsHitboxData");
PermModelData_t.m_refAnimGroups = findOffsetByName(j, "PermModelData_t", "m_refAnimGroups");
PermModelData_t.m_refSequenceGroups = findOffsetByName(j, "PermModelData_t", "m_refSequenceGroups");
PermModelData_t.m_meshGroups = findOffsetByName(j, "PermModelData_t", "m_meshGroups");
PermModelData_t.m_materialGroups = findOffsetByName(j, "PermModelData_t", "m_materialGroups");
PermModelData_t.m_nDefaultMeshGroupMask = findOffsetByName(j, "PermModelData_t", "m_nDefaultMeshGroupMask");
PermModelData_t.m_modelSkeleton = findOffsetByName(j, "PermModelData_t", "m_modelSkeleton");
PermModelData_t.m_remappingTable = findOffsetByName(j, "PermModelData_t", "m_remappingTable");
PermModelData_t.m_remappingTableStarts = findOffsetByName(j, "PermModelData_t", "m_remappingTableStarts");
PermModelData_t.m_boneFlexDrivers = findOffsetByName(j, "PermModelData_t", "m_boneFlexDrivers");
PermModelData_t.m_pModelConfigList = findOffsetByName(j, "PermModelData_t", "m_pModelConfigList");
PermModelData_t.m_BodyGroupsHiddenInTools = findOffsetByName(j, "PermModelData_t", "m_BodyGroupsHiddenInTools");
PermModelData_t.m_refAnimIncludeModels = findOffsetByName(j, "PermModelData_t", "m_refAnimIncludeModels");
PermModelData_t.m_AnimatedMaterialAttributes = findOffsetByName(j, "PermModelData_t", "m_AnimatedMaterialAttributes");

// Atribuições para CSequenceGroupData
// CSequenceGroupData Offsets
CSequenceGroupData.m_sName = findOffsetByName(j, "CSequenceGroupData", "m_sName");
CSequenceGroupData.m_nFlags = findOffsetByName(j, "CSequenceGroupData", "m_nFlags");
CSequenceGroupData.m_localSequenceNameArray = findOffsetByName(j, "CSequenceGroupData", "m_localSequenceNameArray");
CSequenceGroupData.m_localS1SeqDescArray = findOffsetByName(j, "CSequenceGroupData", "m_localS1SeqDescArray");
CSequenceGroupData.m_localMultiSeqDescArray = findOffsetByName(j, "CSequenceGroupData", "m_localMultiSeqDescArray");
CSequenceGroupData.m_localSynthAnimDescArray = findOffsetByName(j, "CSequenceGroupData", "m_localSynthAnimDescArray");
CSequenceGroupData.m_localCmdSeqDescArray = findOffsetByName(j, "CSequenceGroupData", "m_localCmdSeqDescArray");
CSequenceGroupData.m_localBoneMaskArray = findOffsetByName(j, "CSequenceGroupData", "m_localBoneMaskArray");
CSequenceGroupData.m_localScaleSetArray = findOffsetByName(j, "CSequenceGroupData", "m_localScaleSetArray");
CSequenceGroupData.m_localBoneNameArray = findOffsetByName(j, "CSequenceGroupData", "m_localBoneNameArray");
CSequenceGroupData.m_localNodeName = findOffsetByName(j, "CSequenceGroupData", "m_localNodeName");
CSequenceGroupData.m_localPoseParamArray = findOffsetByName(j, "CSequenceGroupData", "m_localPoseParamArray");
CSequenceGroupData.m_keyValues = findOffsetByName(j, "CSequenceGroupData", "m_keyValues");
CSequenceGroupData.m_localIKAutoplayLockArray = findOffsetByName(j, "CSequenceGroupData", "m_localIKAutoplayLockArray");

// Atribuições para CStateMachineUpdateNode
// CStateMachineUpdateNode Offsets
CStateMachineUpdateNode.m_stateMachine = findOffsetByName(j, "CStateMachineUpdateNode", "m_stateMachine");
CStateMachineUpdateNode.m_stateData = findOffsetByName(j, "CStateMachineUpdateNode", "m_stateData");
CStateMachineUpdateNode.m_transitionData = findOffsetByName(j, "CStateMachineUpdateNode", "m_transitionData");
CStateMachineUpdateNode.m_bBlockWaningTags = findOffsetByName(j, "CStateMachineUpdateNode", "m_bBlockWaningTags");
CStateMachineUpdateNode.m_bLockStateWhenWaning = findOffsetByName(j, "CStateMachineUpdateNode", "m_bLockStateWhenWaning");

// Atribuições para CAimMatrixUpdateNode
// CAimMatrixUpdateNode Offsets
CAimMatrixUpdateNode.m_opFixedSettings = findOffsetByName(j, "CAimMatrixUpdateNode", "m_opFixedSettings");
CAimMatrixUpdateNode.m_target = findOffsetByName(j, "CAimMatrixUpdateNode", "m_target");
CAimMatrixUpdateNode.m_paramIndex = findOffsetByName(j, "CAimMatrixUpdateNode", "m_paramIndex");
CAimMatrixUpdateNode.m_hSequence = findOffsetByName(j, "CAimMatrixUpdateNode", "m_hSequence");
CAimMatrixUpdateNode.m_bResetChild = findOffsetByName(j, "CAimMatrixUpdateNode", "m_bResetChild");
CAimMatrixUpdateNode.m_bLockWhenWaning = findOffsetByName(j, "CAimMatrixUpdateNode", "m_bLockWhenWaning");

// Atribuições para SkeletonAnimCapture_t__Frame_t
// SkeletonAnimCapture_t__Frame_t Offsets
SkeletonAnimCapture_t__Frame_t.m_flTime = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_flTime");
SkeletonAnimCapture_t__Frame_t.m_Stamp = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_Stamp");
SkeletonAnimCapture_t__Frame_t.m_Transform = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_Transform");
SkeletonAnimCapture_t__Frame_t.m_bTeleport = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_bTeleport");
SkeletonAnimCapture_t__Frame_t.m_CompositeBones = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_CompositeBones");
SkeletonAnimCapture_t__Frame_t.m_SimStateBones = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_SimStateBones");
SkeletonAnimCapture_t__Frame_t.m_FeModelAnims = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_FeModelAnims");
SkeletonAnimCapture_t__Frame_t.m_FeModelPos = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_FeModelPos");
SkeletonAnimCapture_t__Frame_t.m_FlexControllerWeights = findOffsetByName(j, "SkeletonAnimCapture_t__Frame_t", "m_FlexControllerWeights");

// Atribuições para CModelConfigElement_Command
// CModelConfigElement_Command Offsets
CModelConfigElement_Command.m_Command = findOffsetByName(j, "CModelConfigElement_Command", "m_Command");
CModelConfigElement_Command.m_Args = findOffsetByName(j, "CModelConfigElement_Command", "m_Args");

// Atribuições para CAnimEventDefinition
// CAnimEventDefinition Offsets
CAnimEventDefinition.m_nFrame = findOffsetByName(j, "CAnimEventDefinition", "m_nFrame");
CAnimEventDefinition.m_nEndFrame = findOffsetByName(j, "CAnimEventDefinition", "m_nEndFrame");
CAnimEventDefinition.m_flCycle = findOffsetByName(j, "CAnimEventDefinition", "m_flCycle");
CAnimEventDefinition.m_flDuration = findOffsetByName(j, "CAnimEventDefinition", "m_flDuration");
CAnimEventDefinition.m_EventData = findOffsetByName(j, "CAnimEventDefinition", "m_EventData");
CAnimEventDefinition.m_sLegacyOptions = findOffsetByName(j, "CAnimEventDefinition", "m_sLegacyOptions");
CAnimEventDefinition.m_sEventName = findOffsetByName(j, "CAnimEventDefinition", "m_sEventName");

// Atribuições para CNmRootMotionData
// CNmRootMotionData Offsets
CNmRootMotionData.m_transforms = findOffsetByName(j, "CNmRootMotionData", "m_transforms");
CNmRootMotionData.m_nNumFrames = findOffsetByName(j, "CNmRootMotionData", "m_nNumFrames");
CNmRootMotionData.m_flAverageLinearVelocity = findOffsetByName(j, "CNmRootMotionData", "m_flAverageLinearVelocity");
CNmRootMotionData.m_flAverageAngularVelocityRadians = findOffsetByName(j, "CNmRootMotionData", "m_flAverageAngularVelocityRadians");
CNmRootMotionData.m_totalDelta = findOffsetByName(j, "CNmRootMotionData", "m_totalDelta");

// Atribuições para AnimScriptHandle
// AnimScriptHandle Offsets
AnimScriptHandle.m_id = findOffsetByName(j, "AnimScriptHandle", "m_id");

// Atribuições para CFlexOp
// CFlexOp Offsets
CFlexOp.m_OpCode = findOffsetByName(j, "CFlexOp", "m_OpCode");
CFlexOp.m_Data = findOffsetByName(j, "CFlexOp", "m_Data");

// Atribuições para CHitReactUpdateNode
// CHitReactUpdateNode Offsets
CHitReactUpdateNode.m_opFixedSettings = findOffsetByName(j, "CHitReactUpdateNode", "m_opFixedSettings");
CHitReactUpdateNode.m_triggerParam = findOffsetByName(j, "CHitReactUpdateNode", "m_triggerParam");
CHitReactUpdateNode.m_hitBoneParam = findOffsetByName(j, "CHitReactUpdateNode", "m_hitBoneParam");
CHitReactUpdateNode.m_hitOffsetParam = findOffsetByName(j, "CHitReactUpdateNode", "m_hitOffsetParam");
CHitReactUpdateNode.m_hitDirectionParam = findOffsetByName(j, "CHitReactUpdateNode", "m_hitDirectionParam");
CHitReactUpdateNode.m_hitStrengthParam = findOffsetByName(j, "CHitReactUpdateNode", "m_hitStrengthParam");
CHitReactUpdateNode.m_flMinDelayBetweenHits = findOffsetByName(j, "CHitReactUpdateNode", "m_flMinDelayBetweenHits");
CHitReactUpdateNode.m_bResetChild = findOffsetByName(j, "CHitReactUpdateNode", "m_bResetChild");

// Atribuições para CLookAtUpdateNode
// CLookAtUpdateNode Offsets
CLookAtUpdateNode.m_opFixedSettings = findOffsetByName(j, "CLookAtUpdateNode", "m_opFixedSettings");
CLookAtUpdateNode.m_target = findOffsetByName(j, "CLookAtUpdateNode", "m_target");
CLookAtUpdateNode.m_paramIndex = findOffsetByName(j, "CLookAtUpdateNode", "m_paramIndex");
CLookAtUpdateNode.m_weightParamIndex = findOffsetByName(j, "CLookAtUpdateNode", "m_weightParamIndex");
CLookAtUpdateNode.m_bResetChild = findOffsetByName(j, "CLookAtUpdateNode", "m_bResetChild");
CLookAtUpdateNode.m_bLockWhenWaning = findOffsetByName(j, "CLookAtUpdateNode", "m_bLockWhenWaning");

// Atribuições para CAnimBone
// CAnimBone Offsets
CAnimBone.m_name = findOffsetByName(j, "CAnimBone", "m_name");
CAnimBone.m_parent = findOffsetByName(j, "CAnimBone", "m_parent");
CAnimBone.m_pos = findOffsetByName(j, "CAnimBone", "m_pos");
CAnimBone.m_quat = findOffsetByName(j, "CAnimBone", "m_quat");
CAnimBone.m_scale = findOffsetByName(j, "CAnimBone", "m_scale");
CAnimBone.m_qAlignment = findOffsetByName(j, "CAnimBone", "m_qAlignment");
CAnimBone.m_flags = findOffsetByName(j, "CAnimBone", "m_flags");

// Atribuições para CAnimParameterManagerUpdater
// CAnimParameterManagerUpdater Offsets
CAnimParameterManagerUpdater.m_parameters = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_parameters");
CAnimParameterManagerUpdater.m_idToIndexMap = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_idToIndexMap");
CAnimParameterManagerUpdater.m_nameToIndexMap = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_nameToIndexMap");
CAnimParameterManagerUpdater.m_indexToHandle = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_indexToHandle");
CAnimParameterManagerUpdater.m_autoResetParams = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_autoResetParams");
CAnimParameterManagerUpdater.m_autoResetMap = findOffsetByName(j, "CAnimParameterManagerUpdater", "m_autoResetMap");

// Atribuições para BoneDemoCaptureSettings_t
// BoneDemoCaptureSettings_t Offsets
BoneDemoCaptureSettings_t.m_boneName = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_boneName");
BoneDemoCaptureSettings_t.m_flErrorSplineRotationMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorSplineRotationMax");
BoneDemoCaptureSettings_t.m_flErrorSplineTranslationMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorSplineTranslationMax");
BoneDemoCaptureSettings_t.m_flErrorSplineScaleMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorSplineScaleMax");
BoneDemoCaptureSettings_t.m_flErrorQuantizationRotationMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationRotationMax");
BoneDemoCaptureSettings_t.m_flErrorQuantizationTranslationMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationTranslationMax");
BoneDemoCaptureSettings_t.m_flErrorQuantizationScaleMax = findOffsetByName(j, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationScaleMax");

// Atribuições para CBoneConstraintPoseSpaceMorph__Input_t
// CBoneConstraintPoseSpaceMorph__Input_t Offsets
CBoneConstraintPoseSpaceMorph__Input_t.m_inputValue = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph__Input_t", "m_inputValue");
CBoneConstraintPoseSpaceMorph__Input_t.m_outputWeightList = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph__Input_t", "m_outputWeightList");

// Atribuições para MoodAnimationLayer_t
// MoodAnimationLayer_t Offsets
MoodAnimationLayer_t.m_sName = findOffsetByName(j, "MoodAnimationLayer_t", "m_sName");
MoodAnimationLayer_t.m_bActiveListening = findOffsetByName(j, "MoodAnimationLayer_t", "m_bActiveListening");
MoodAnimationLayer_t.m_bActiveTalking = findOffsetByName(j, "MoodAnimationLayer_t", "m_bActiveTalking");
MoodAnimationLayer_t.m_layerAnimations = findOffsetByName(j, "MoodAnimationLayer_t", "m_layerAnimations");
MoodAnimationLayer_t.m_flIntensity = findOffsetByName(j, "MoodAnimationLayer_t", "m_flIntensity");
MoodAnimationLayer_t.m_flDurationScale = findOffsetByName(j, "MoodAnimationLayer_t", "m_flDurationScale");
MoodAnimationLayer_t.m_bScaleWithInts = findOffsetByName(j, "MoodAnimationLayer_t", "m_bScaleWithInts");
MoodAnimationLayer_t.m_flNextStart = findOffsetByName(j, "MoodAnimationLayer_t", "m_flNextStart");
MoodAnimationLayer_t.m_flStartOffset = findOffsetByName(j, "MoodAnimationLayer_t", "m_flStartOffset");
MoodAnimationLayer_t.m_flEndOffset = findOffsetByName(j, "MoodAnimationLayer_t", "m_flEndOffset");
MoodAnimationLayer_t.m_flFadeIn = findOffsetByName(j, "MoodAnimationLayer_t", "m_flFadeIn");
MoodAnimationLayer_t.m_flFadeOut = findOffsetByName(j, "MoodAnimationLayer_t", "m_flFadeOut");

// Atribuições para CSpeedScaleUpdateNode
// CSpeedScaleUpdateNode Offsets
CSpeedScaleUpdateNode.m_paramIndex = findOffsetByName(j, "CSpeedScaleUpdateNode", "m_paramIndex");

// Atribuições para CSequenceTagSpans
// CSequenceTagSpans Offsets
CSequenceTagSpans.m_sSequenceName = findOffsetByName(j, "CSequenceTagSpans", "m_sSequenceName");
CSequenceTagSpans.m_tags = findOffsetByName(j, "CSequenceTagSpans", "m_tags");

// Atribuições para CNmGraphDefinition__ChildGraphSlot_t
// CNmGraphDefinition__ChildGraphSlot_t Offsets
CNmGraphDefinition__ChildGraphSlot_t.m_nNodeIdx = findOffsetByName(j, "CNmGraphDefinition__ChildGraphSlot_t", "m_nNodeIdx");
CNmGraphDefinition__ChildGraphSlot_t.m_dataSlotIdx = findOffsetByName(j, "CNmGraphDefinition__ChildGraphSlot_t", "m_dataSlotIdx");

// Atribuições para CModelConfigElement_SetBodygroupOnAttachedModels
// CModelConfigElement_SetBodygroupOnAttachedModels Offsets
CModelConfigElement_SetBodygroupOnAttachedModels.m_GroupName = findOffsetByName(j, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_GroupName");
CModelConfigElement_SetBodygroupOnAttachedModels.m_nChoice = findOffsetByName(j, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_nChoice");

// Atribuições para CAnimReplayFrame
// CAnimReplayFrame Offsets
CAnimReplayFrame.m_inputDataBlocks = findOffsetByName(j, "CAnimReplayFrame", "m_inputDataBlocks");
CAnimReplayFrame.m_instanceData = findOffsetByName(j, "CAnimReplayFrame", "m_instanceData");
CAnimReplayFrame.m_startingLocalToWorldTransform = findOffsetByName(j, "CAnimReplayFrame", "m_startingLocalToWorldTransform");
CAnimReplayFrame.m_localToWorldTransform = findOffsetByName(j, "CAnimReplayFrame", "m_localToWorldTransform");
CAnimReplayFrame.m_timeStamp = findOffsetByName(j, "CAnimReplayFrame", "m_timeStamp");

// Atribuições para CNmTransitionEvent
// CNmTransitionEvent Offsets
CNmTransitionEvent.m_rule = findOffsetByName(j, "CNmTransitionEvent", "m_rule");
CNmTransitionEvent.m_ID = findOffsetByName(j, "CNmTransitionEvent", "m_ID");

// Atribuições para CNmIKRig
// CNmIKRig Offsets
CNmIKRig.m_skeleton = findOffsetByName(j, "CNmIKRig", "m_skeleton");

// Atribuições para CPathAnimMotorUpdaterBase
// CPathAnimMotorUpdaterBase Offsets
CPathAnimMotorUpdaterBase.m_bLockToPath = findOffsetByName(j, "CPathAnimMotorUpdaterBase", "m_bLockToPath");

// Atribuições para CNmFootstepEventPercentageThroughNode__CDefinition
// CNmFootstepEventPercentageThroughNode__CDefinition Offsets
CNmFootstepEventPercentageThroughNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmFootstepEventPercentageThroughNode__CDefinition", "m_nSourceStateNodeIdx");
CNmFootstepEventPercentageThroughNode__CDefinition.m_phaseCondition = findOffsetByName(j, "CNmFootstepEventPercentageThroughNode__CDefinition", "m_phaseCondition");
CNmFootstepEventPercentageThroughNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmFootstepEventPercentageThroughNode__CDefinition", "m_eventConditionRules");

// Atribuições para AimCameraOpFixedSettings_t
// AimCameraOpFixedSettings_t Offsets
AimCameraOpFixedSettings_t.m_nChainIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nChainIndex");
AimCameraOpFixedSettings_t.m_nCameraJointIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nCameraJointIndex");
AimCameraOpFixedSettings_t.m_nPelvisJointIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nPelvisJointIndex");
AimCameraOpFixedSettings_t.m_nClavicleLeftJointIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nClavicleLeftJointIndex");
AimCameraOpFixedSettings_t.m_nClavicleRightJointIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nClavicleRightJointIndex");
AimCameraOpFixedSettings_t.m_nDepenetrationJointIndex = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_nDepenetrationJointIndex");
AimCameraOpFixedSettings_t.m_propJoints = findOffsetByName(j, "AimCameraOpFixedSettings_t", "m_propJoints");

// Atribuições para SkeletonAnimCapture_t__Camera_t
// SkeletonAnimCapture_t__Camera_t Offsets
SkeletonAnimCapture_t__Camera_t.m_tmCamera = findOffsetByName(j, "SkeletonAnimCapture_t__Camera_t", "m_tmCamera");
SkeletonAnimCapture_t__Camera_t.m_flTime = findOffsetByName(j, "SkeletonAnimCapture_t__Camera_t", "m_flTime");

// Atribuições para CFollowAttachmentUpdateNode
// CFollowAttachmentUpdateNode Offsets
CFollowAttachmentUpdateNode.m_opFixedData = findOffsetByName(j, "CFollowAttachmentUpdateNode", "m_opFixedData");

// Atribuições para CMovementComponentUpdater
// CMovementComponentUpdater Offsets
CMovementComponentUpdater.m_motors = findOffsetByName(j, "CMovementComponentUpdater", "m_motors");
CMovementComponentUpdater.m_facingDamping = findOffsetByName(j, "CMovementComponentUpdater", "m_facingDamping");
CMovementComponentUpdater.m_nDefaultMotorIndex = findOffsetByName(j, "CMovementComponentUpdater", "m_nDefaultMotorIndex");
CMovementComponentUpdater.m_flDefaultRunSpeed = findOffsetByName(j, "CMovementComponentUpdater", "m_flDefaultRunSpeed");
CMovementComponentUpdater.m_bMoveVarsDisabled = findOffsetByName(j, "CMovementComponentUpdater", "m_bMoveVarsDisabled");
CMovementComponentUpdater.m_bNetworkPath = findOffsetByName(j, "CMovementComponentUpdater", "m_bNetworkPath");
CMovementComponentUpdater.m_bNetworkFacing = findOffsetByName(j, "CMovementComponentUpdater", "m_bNetworkFacing");
CMovementComponentUpdater.m_paramHandles = findOffsetByName(j, "CMovementComponentUpdater", "m_paramHandles");

// Atribuições para CModelConfigElement_SetMaterialGroup
// CModelConfigElement_SetMaterialGroup Offsets
CModelConfigElement_SetMaterialGroup.m_MaterialGroupName = findOffsetByName(j, "CModelConfigElement_SetMaterialGroup", "m_MaterialGroupName");

// Atribuições para CFutureFacingMetricEvaluator
// CFutureFacingMetricEvaluator Offsets
CFutureFacingMetricEvaluator.m_flDistance = findOffsetByName(j, "CFutureFacingMetricEvaluator", "m_flDistance");
CFutureFacingMetricEvaluator.m_flTime = findOffsetByName(j, "CFutureFacingMetricEvaluator", "m_flTime");

// Atribuições para NmCompressionSettings_t
// NmCompressionSettings_t Offsets
NmCompressionSettings_t.m_translationRangeX = findOffsetByName(j, "NmCompressionSettings_t", "m_translationRangeX");
NmCompressionSettings_t.m_translationRangeY = findOffsetByName(j, "NmCompressionSettings_t", "m_translationRangeY");
NmCompressionSettings_t.m_translationRangeZ = findOffsetByName(j, "NmCompressionSettings_t", "m_translationRangeZ");
NmCompressionSettings_t.m_scaleRange = findOffsetByName(j, "NmCompressionSettings_t", "m_scaleRange");
NmCompressionSettings_t.m_constantRotation = findOffsetByName(j, "NmCompressionSettings_t", "m_constantRotation");
NmCompressionSettings_t.m_bIsRotationStatic = findOffsetByName(j, "NmCompressionSettings_t", "m_bIsRotationStatic");
NmCompressionSettings_t.m_bIsTranslationStatic = findOffsetByName(j, "NmCompressionSettings_t", "m_bIsTranslationStatic");
NmCompressionSettings_t.m_bIsScaleStatic = findOffsetByName(j, "NmCompressionSettings_t", "m_bIsScaleStatic");

// Atribuições para CAddUpdateNode
// CAddUpdateNode Offsets
CAddUpdateNode.m_footMotionTiming = findOffsetByName(j, "CAddUpdateNode", "m_footMotionTiming");
CAddUpdateNode.m_bApplyToFootMotion = findOffsetByName(j, "CAddUpdateNode", "m_bApplyToFootMotion");
CAddUpdateNode.m_bApplyChannelsSeparately = findOffsetByName(j, "CAddUpdateNode", "m_bApplyChannelsSeparately");
CAddUpdateNode.m_bUseModelSpace = findOffsetByName(j, "CAddUpdateNode", "m_bUseModelSpace");
CAddUpdateNode.m_bApplyScale = findOffsetByName(j, "CAddUpdateNode", "m_bApplyScale");

// Atribuições para CAnimEnum
// CAnimEnum Offsets
CAnimEnum.m_value = findOffsetByName(j, "CAnimEnum", "m_value");

// Atribuições para CDemoSettingsComponentUpdater
// CDemoSettingsComponentUpdater Offsets
CDemoSettingsComponentUpdater.m_settings = findOffsetByName(j, "CDemoSettingsComponentUpdater", "m_settings");

// Atribuições para CAnimDecoder
// CAnimDecoder Offsets
CAnimDecoder.m_szName = findOffsetByName(j, "CAnimDecoder", "m_szName");
CAnimDecoder.m_nVersion = findOffsetByName(j, "CAnimDecoder", "m_nVersion");
CAnimDecoder.m_nType = findOffsetByName(j, "CAnimDecoder", "m_nType");

// Atribuições para CNmCachedTargetNode__CDefinition
// CNmCachedTargetNode__CDefinition Offsets
CNmCachedTargetNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmCachedTargetNode__CDefinition", "m_nInputValueNodeIdx");
CNmCachedTargetNode__CDefinition.m_mode = findOffsetByName(j, "CNmCachedTargetNode__CDefinition", "m_mode");

// Atribuições para CNmConstBoolNode__CDefinition
// CNmConstBoolNode__CDefinition Offsets
CNmConstBoolNode__CDefinition.m_bValue = findOffsetByName(j, "CNmConstBoolNode__CDefinition", "m_bValue");

// Atribuições para CNmBitFlags
// CNmBitFlags Offsets
CNmBitFlags.m_flags = findOffsetByName(j, "CNmBitFlags", "m_flags");

// Atribuições para CFootStride
// CFootStride Offsets
CFootStride.m_definition = findOffsetByName(j, "CFootStride", "m_definition");
CFootStride.m_trajectories = findOffsetByName(j, "CFootStride", "m_trajectories");

// Atribuições para CNmLegacyEvent
// CNmLegacyEvent Offsets
CNmLegacyEvent.m_animEventClassName = findOffsetByName(j, "CNmLegacyEvent", "m_animEventClassName");
CNmLegacyEvent.m_KV = findOffsetByName(j, "CNmLegacyEvent", "m_KV");

// Atribuições para CStateNodeStateData
// CStateNodeStateData Offsets
CStateNodeStateData.m_pChild = findOffsetByName(j, "CStateNodeStateData", "m_pChild");
CStateNodeStateData.m_bExclusiveRootMotion = findOffsetByName(j, "CStateNodeStateData", "m_bExclusiveRootMotion");
CStateNodeStateData.m_bExclusiveRootMotionFirstFrame = findOffsetByName(j, "CStateNodeStateData", "m_bExclusiveRootMotionFirstFrame");

// Atribuições para CFootstepLandedAnimTag
// CFootstepLandedAnimTag Offsets
CFootstepLandedAnimTag.m_FootstepType = findOffsetByName(j, "CFootstepLandedAnimTag", "m_FootstepType");
CFootstepLandedAnimTag.m_OverrideSoundName = findOffsetByName(j, "CFootstepLandedAnimTag", "m_OverrideSoundName");
CFootstepLandedAnimTag.m_DebugAnimSourceString = findOffsetByName(j, "CFootstepLandedAnimTag", "m_DebugAnimSourceString");
CFootstepLandedAnimTag.m_BoneName = findOffsetByName(j, "CFootstepLandedAnimTag", "m_BoneName");

// Atribuições para CEnumAnimParameter
// CEnumAnimParameter Offsets
CEnumAnimParameter.m_defaultValue = findOffsetByName(j, "CEnumAnimParameter", "m_defaultValue");
CEnumAnimParameter.m_enumOptions = findOffsetByName(j, "CEnumAnimParameter", "m_enumOptions");
CEnumAnimParameter.m_vecEnumReferenced = findOffsetByName(j, "CEnumAnimParameter", "m_vecEnumReferenced");

// Atribuições para CHandshakeAnimTagBase
// CHandshakeAnimTagBase Offsets
CHandshakeAnimTagBase.m_bIsDisableTag = findOffsetByName(j, "CHandshakeAnimTagBase", "m_bIsDisableTag");

// Atribuições para AnimTagID
// AnimTagID Offsets
AnimTagID.m_id = findOffsetByName(j, "AnimTagID", "m_id");

// Atribuições para CAnimFrameSegment
// CAnimFrameSegment Offsets
CAnimFrameSegment.m_nUniqueFrameIndex = findOffsetByName(j, "CAnimFrameSegment", "m_nUniqueFrameIndex");
CAnimFrameSegment.m_nLocalElementMasks = findOffsetByName(j, "CAnimFrameSegment", "m_nLocalElementMasks");
CAnimFrameSegment.m_nLocalChannel = findOffsetByName(j, "CAnimFrameSegment", "m_nLocalChannel");
CAnimFrameSegment.m_container = findOffsetByName(j, "CAnimFrameSegment", "m_container");

// Atribuições para CSlopeComponentUpdater
// CSlopeComponentUpdater Offsets
CSlopeComponentUpdater.m_flTraceDistance = findOffsetByName(j, "CSlopeComponentUpdater", "m_flTraceDistance");
CSlopeComponentUpdater.m_hSlopeAngle = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeAngle");
CSlopeComponentUpdater.m_hSlopeAngleFront = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeAngleFront");
CSlopeComponentUpdater.m_hSlopeAngleSide = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeAngleSide");
CSlopeComponentUpdater.m_hSlopeHeading = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeHeading");
CSlopeComponentUpdater.m_hSlopeNormal = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeNormal");
CSlopeComponentUpdater.m_hSlopeNormal_WorldSpace = findOffsetByName(j, "CSlopeComponentUpdater", "m_hSlopeNormal_WorldSpace");

// Atribuições para CAnimInputDamping
// CAnimInputDamping Offsets
CAnimInputDamping.m_speedFunction = findOffsetByName(j, "CAnimInputDamping", "m_speedFunction");
CAnimInputDamping.m_fSpeedScale = findOffsetByName(j, "CAnimInputDamping", "m_fSpeedScale");

// Atribuições para CHitBoxSet
// CHitBoxSet Offsets
CHitBoxSet.m_name = findOffsetByName(j, "CHitBoxSet", "m_name");
CHitBoxSet.m_nNameHash = findOffsetByName(j, "CHitBoxSet", "m_nNameHash");
CHitBoxSet.m_HitBoxes = findOffsetByName(j, "CHitBoxSet", "m_HitBoxes");
CHitBoxSet.m_SourceFilename = findOffsetByName(j, "CHitBoxSet", "m_SourceFilename");

// Atribuições para ChainToSolveData_t
// ChainToSolveData_t Offsets
ChainToSolveData_t.m_nChainIndex = findOffsetByName(j, "ChainToSolveData_t", "m_nChainIndex");
ChainToSolveData_t.m_SolverSettings = findOffsetByName(j, "ChainToSolveData_t", "m_SolverSettings");
ChainToSolveData_t.m_TargetSettings = findOffsetByName(j, "ChainToSolveData_t", "m_TargetSettings");
ChainToSolveData_t.m_DebugSetting = findOffsetByName(j, "ChainToSolveData_t", "m_DebugSetting");
ChainToSolveData_t.m_flDebugNormalizedValue = findOffsetByName(j, "ChainToSolveData_t", "m_flDebugNormalizedValue");
ChainToSolveData_t.m_vDebugOffset = findOffsetByName(j, "ChainToSolveData_t", "m_vDebugOffset");

// Atribuições para CConstraintSlave
// CConstraintSlave Offsets
CConstraintSlave.m_qBaseOrientation = findOffsetByName(j, "CConstraintSlave", "m_qBaseOrientation");
CConstraintSlave.m_vBasePosition = findOffsetByName(j, "CConstraintSlave", "m_vBasePosition");
CConstraintSlave.m_nBoneHash = findOffsetByName(j, "CConstraintSlave", "m_nBoneHash");
CConstraintSlave.m_flWeight = findOffsetByName(j, "CConstraintSlave", "m_flWeight");
CConstraintSlave.m_sName = findOffsetByName(j, "CConstraintSlave", "m_sName");

// Atribuições para CFootCycleDefinition
// CFootCycleDefinition Offsets
CFootCycleDefinition.m_vStancePositionMS = findOffsetByName(j, "CFootCycleDefinition", "m_vStancePositionMS");
CFootCycleDefinition.m_vMidpointPositionMS = findOffsetByName(j, "CFootCycleDefinition", "m_vMidpointPositionMS");
CFootCycleDefinition.m_flStanceDirectionMS = findOffsetByName(j, "CFootCycleDefinition", "m_flStanceDirectionMS");
CFootCycleDefinition.m_vToStrideStartPos = findOffsetByName(j, "CFootCycleDefinition", "m_vToStrideStartPos");
CFootCycleDefinition.m_stanceCycle = findOffsetByName(j, "CFootCycleDefinition", "m_stanceCycle");
CFootCycleDefinition.m_footLiftCycle = findOffsetByName(j, "CFootCycleDefinition", "m_footLiftCycle");
CFootCycleDefinition.m_footOffCycle = findOffsetByName(j, "CFootCycleDefinition", "m_footOffCycle");
CFootCycleDefinition.m_footStrikeCycle = findOffsetByName(j, "CFootCycleDefinition", "m_footStrikeCycle");
CFootCycleDefinition.m_footLandCycle = findOffsetByName(j, "CFootCycleDefinition", "m_footLandCycle");

// Atribuições para CVirtualAnimParameter
// CVirtualAnimParameter Offsets
CVirtualAnimParameter.m_expressionString = findOffsetByName(j, "CVirtualAnimParameter", "m_expressionString");
CVirtualAnimParameter.m_eParamType = findOffsetByName(j, "CVirtualAnimParameter", "m_eParamType");

// Atribuições para CMotionMetricEvaluator
// CMotionMetricEvaluator Offsets
CMotionMetricEvaluator.m_means = findOffsetByName(j, "CMotionMetricEvaluator", "m_means");
CMotionMetricEvaluator.m_standardDeviations = findOffsetByName(j, "CMotionMetricEvaluator", "m_standardDeviations");
CMotionMetricEvaluator.m_flWeight = findOffsetByName(j, "CMotionMetricEvaluator", "m_flWeight");
CMotionMetricEvaluator.m_nDimensionStartIndex = findOffsetByName(j, "CMotionMetricEvaluator", "m_nDimensionStartIndex");

// Atribuições para CFutureVelocityMetricEvaluator
// CFutureVelocityMetricEvaluator Offsets
CFutureVelocityMetricEvaluator.m_flDistance = findOffsetByName(j, "CFutureVelocityMetricEvaluator", "m_flDistance");
CFutureVelocityMetricEvaluator.m_flStoppingDistance = findOffsetByName(j, "CFutureVelocityMetricEvaluator", "m_flStoppingDistance");
CFutureVelocityMetricEvaluator.m_flTargetSpeed = findOffsetByName(j, "CFutureVelocityMetricEvaluator", "m_flTargetSpeed");
CFutureVelocityMetricEvaluator.m_eMode = findOffsetByName(j, "CFutureVelocityMetricEvaluator", "m_eMode");

// Atribuições para CAnimUpdateNodeBase
// CAnimUpdateNodeBase Offsets
CAnimUpdateNodeBase.m_nodePath = findOffsetByName(j, "CAnimUpdateNodeBase", "m_nodePath");
CAnimUpdateNodeBase.m_networkMode = findOffsetByName(j, "CAnimUpdateNodeBase", "m_networkMode");
CAnimUpdateNodeBase.m_name = findOffsetByName(j, "CAnimUpdateNodeBase", "m_name");

// Atribuições para CSetParameterActionUpdater
// CSetParameterActionUpdater Offsets
CSetParameterActionUpdater.m_hParam = findOffsetByName(j, "CSetParameterActionUpdater", "m_hParam");
CSetParameterActionUpdater.m_value = findOffsetByName(j, "CSetParameterActionUpdater", "m_value");

// Atribuições para CNmFixedWeightBoneMaskNode__CDefinition
// CNmFixedWeightBoneMaskNode__CDefinition Offsets
CNmFixedWeightBoneMaskNode__CDefinition.m_flBoneWeight = findOffsetByName(j, "CNmFixedWeightBoneMaskNode__CDefinition", "m_flBoneWeight");

// Atribuições para CNmGraphVariation
// CNmGraphVariation Offsets
CNmGraphVariation.m_graphDefinition = findOffsetByName(j, "CNmGraphVariation", "m_graphDefinition");
CNmGraphVariation.m_dataSet = findOffsetByName(j, "CNmGraphVariation", "m_dataSet");

// Atribuições para SkeletonAnimCapture_t__FrameStamp_t
// SkeletonAnimCapture_t__FrameStamp_t Offsets
SkeletonAnimCapture_t__FrameStamp_t.m_flTime = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_flTime");
SkeletonAnimCapture_t__FrameStamp_t.m_flEntitySimTime = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_flEntitySimTime");
SkeletonAnimCapture_t__FrameStamp_t.m_bTeleportTick = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_bTeleportTick");
SkeletonAnimCapture_t__FrameStamp_t.m_bPredicted = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_bPredicted");
SkeletonAnimCapture_t__FrameStamp_t.m_flCurTime = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_flCurTime");
SkeletonAnimCapture_t__FrameStamp_t.m_flRealTime = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_flRealTime");
SkeletonAnimCapture_t__FrameStamp_t.m_nFrameCount = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_nFrameCount");
SkeletonAnimCapture_t__FrameStamp_t.m_nTickCount = findOffsetByName(j, "SkeletonAnimCapture_t__FrameStamp_t", "m_nTickCount");

// Atribuições para CBonePositionMetricEvaluator
// CBonePositionMetricEvaluator Offsets
CBonePositionMetricEvaluator.m_nBoneIndex = findOffsetByName(j, "CBonePositionMetricEvaluator", "m_nBoneIndex");

// Atribuições para CRenderBufferBinding
// CRenderBufferBinding Offsets
CRenderBufferBinding.m_hBuffer = findOffsetByName(j, "CRenderBufferBinding", "m_hBuffer");
CRenderBufferBinding.m_nBindOffsetBytes = findOffsetByName(j, "CRenderBufferBinding", "m_nBindOffsetBytes");

// Atribuições para CNmParameterizedBlendNode__Parameterization_t
// CNmParameterizedBlendNode__Parameterization_t Offsets
CNmParameterizedBlendNode__Parameterization_t.m_blendRanges = findOffsetByName(j, "CNmParameterizedBlendNode__Parameterization_t", "m_blendRanges");
CNmParameterizedBlendNode__Parameterization_t.m_parameterRange = findOffsetByName(j, "CNmParameterizedBlendNode__Parameterization_t", "m_parameterRange");

// Atribuições para CNmNotNode__CDefinition
// CNmNotNode__CDefinition Offsets
CNmNotNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmNotNode__CDefinition", "m_nInputValueNodeIdx");

// Atribuições para CMeshletDescriptor
// CMeshletDescriptor Offsets
CMeshletDescriptor.m_PackedAABB = findOffsetByName(j, "CMeshletDescriptor", "m_PackedAABB");
CMeshletDescriptor.m_CullingData = findOffsetByName(j, "CMeshletDescriptor", "m_CullingData");

// Atribuições para CMorphSetData
// CMorphSetData Offsets
CMorphSetData.m_nWidth = findOffsetByName(j, "CMorphSetData", "m_nWidth");
CMorphSetData.m_nHeight = findOffsetByName(j, "CMorphSetData", "m_nHeight");
CMorphSetData.m_bundleTypes = findOffsetByName(j, "CMorphSetData", "m_bundleTypes");
CMorphSetData.m_morphDatas = findOffsetByName(j, "CMorphSetData", "m_morphDatas");
CMorphSetData.m_pTextureAtlas = findOffsetByName(j, "CMorphSetData", "m_pTextureAtlas");
CMorphSetData.m_FlexDesc = findOffsetByName(j, "CMorphSetData", "m_FlexDesc");
CMorphSetData.m_FlexControllers = findOffsetByName(j, "CMorphSetData", "m_FlexControllers");
CMorphSetData.m_FlexRules = findOffsetByName(j, "CMorphSetData", "m_FlexRules");

// Atribuições para CNmAndNode__CDefinition
// CNmAndNode__CDefinition Offsets
CNmAndNode__CDefinition.m_conditionNodeIndices = findOffsetByName(j, "CNmAndNode__CDefinition", "m_conditionNodeIndices");

// Atribuições para CMorphConstraint
// CMorphConstraint Offsets
CMorphConstraint.m_sTargetMorph = findOffsetByName(j, "CMorphConstraint", "m_sTargetMorph");
CMorphConstraint.m_nSlaveChannel = findOffsetByName(j, "CMorphConstraint", "m_nSlaveChannel");
CMorphConstraint.m_flMin = findOffsetByName(j, "CMorphConstraint", "m_flMin");
CMorphConstraint.m_flMax = findOffsetByName(j, "CMorphConstraint", "m_flMax");

// Atribuições para CClothSettingsAnimTag
// CClothSettingsAnimTag Offsets
CClothSettingsAnimTag.m_flStiffness = findOffsetByName(j, "CClothSettingsAnimTag", "m_flStiffness");
CClothSettingsAnimTag.m_flEaseIn = findOffsetByName(j, "CClothSettingsAnimTag", "m_flEaseIn");
CClothSettingsAnimTag.m_flEaseOut = findOffsetByName(j, "CClothSettingsAnimTag", "m_flEaseOut");
CClothSettingsAnimTag.m_nVertexSet = findOffsetByName(j, "CClothSettingsAnimTag", "m_nVertexSet");

// Atribuições para CAnimDesc_Flag
// CAnimDesc_Flag Offsets
CAnimDesc_Flag.m_bLooping = findOffsetByName(j, "CAnimDesc_Flag", "m_bLooping");
CAnimDesc_Flag.m_bAllZeros = findOffsetByName(j, "CAnimDesc_Flag", "m_bAllZeros");
CAnimDesc_Flag.m_bHidden = findOffsetByName(j, "CAnimDesc_Flag", "m_bHidden");
CAnimDesc_Flag.m_bDelta = findOffsetByName(j, "CAnimDesc_Flag", "m_bDelta");
CAnimDesc_Flag.m_bLegacyWorldspace = findOffsetByName(j, "CAnimDesc_Flag", "m_bLegacyWorldspace");
CAnimDesc_Flag.m_bModelDoc = findOffsetByName(j, "CAnimDesc_Flag", "m_bModelDoc");
CAnimDesc_Flag.m_bImplicitSeqIgnoreDelta = findOffsetByName(j, "CAnimDesc_Flag", "m_bImplicitSeqIgnoreDelta");
CAnimDesc_Flag.m_bAnimGraphAdditive = findOffsetByName(j, "CAnimDesc_Flag", "m_bAnimGraphAdditive");

// Atribuições para CNmBlend2DNode__CDefinition
// CNmBlend2DNode__CDefinition Offsets
CNmBlend2DNode__CDefinition.m_sourceNodeIndices = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_sourceNodeIndices");
CNmBlend2DNode__CDefinition.m_nInputParameterNodeIdx0 = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_nInputParameterNodeIdx0");
CNmBlend2DNode__CDefinition.m_nInputParameterNodeIdx1 = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_nInputParameterNodeIdx1");
CNmBlend2DNode__CDefinition.m_values = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_values");
CNmBlend2DNode__CDefinition.m_indices = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_indices");
CNmBlend2DNode__CDefinition.m_hullIndices = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_hullIndices");
CNmBlend2DNode__CDefinition.m_bAllowLooping = findOffsetByName(j, "CNmBlend2DNode__CDefinition", "m_bAllowLooping");

// Atribuições para CBlendCurve
// CBlendCurve Offsets
CBlendCurve.m_flControlPoint1 = findOffsetByName(j, "CBlendCurve", "m_flControlPoint1");
CBlendCurve.m_flControlPoint2 = findOffsetByName(j, "CBlendCurve", "m_flControlPoint2");

// Atribuições para CNmGraphNode__CDefinition
// CNmGraphNode__CDefinition Offsets
CNmGraphNode__CDefinition.m_nNodeIdx = findOffsetByName(j, "CNmGraphNode__CDefinition", "m_nNodeIdx");

// Atribuições para CAnimationGraphVisualizerSphere
// CAnimationGraphVisualizerSphere Offsets
CAnimationGraphVisualizerSphere.m_vWsPosition = findOffsetByName(j, "CAnimationGraphVisualizerSphere", "m_vWsPosition");
CAnimationGraphVisualizerSphere.m_flRadius = findOffsetByName(j, "CAnimationGraphVisualizerSphere", "m_flRadius");
CAnimationGraphVisualizerSphere.m_Color = findOffsetByName(j, "CAnimationGraphVisualizerSphere", "m_Color");

// Atribuições para CAnimUserDifference
// CAnimUserDifference Offsets
CAnimUserDifference.m_name = findOffsetByName(j, "CAnimUserDifference", "m_name");
CAnimUserDifference.m_nType = findOffsetByName(j, "CAnimUserDifference", "m_nType");

// Atribuições para CTransitionUpdateData
// CTransitionUpdateData Offsets
CTransitionUpdateData.m_srcStateIndex = findOffsetByName(j, "CTransitionUpdateData", "m_srcStateIndex");
CTransitionUpdateData.m_destStateIndex = findOffsetByName(j, "CTransitionUpdateData", "m_destStateIndex");
CTransitionUpdateData.m_nHandshakeMaskToDisableFirst = findOffsetByName(j, "CTransitionUpdateData", "m_nHandshakeMaskToDisableFirst");
CTransitionUpdateData.m_bDisabled = findOffsetByName(j, "CTransitionUpdateData", "m_bDisabled");

// Atribuições para CBoneConstraintPoseSpaceBone__Input_t
// CBoneConstraintPoseSpaceBone__Input_t Offsets
CBoneConstraintPoseSpaceBone__Input_t.m_inputValue = findOffsetByName(j, "CBoneConstraintPoseSpaceBone__Input_t", "m_inputValue");
CBoneConstraintPoseSpaceBone__Input_t.m_outputTransformList = findOffsetByName(j, "CBoneConstraintPoseSpaceBone__Input_t", "m_outputTransformList");

// Atribuições para CSeqMultiFetch
// CSeqMultiFetch Offsets
CSeqMultiFetch.m_flags = findOffsetByName(j, "CSeqMultiFetch", "m_flags");
CSeqMultiFetch.m_localReferenceArray = findOffsetByName(j, "CSeqMultiFetch", "m_localReferenceArray");
CSeqMultiFetch.m_nGroupSize = findOffsetByName(j, "CSeqMultiFetch", "m_nGroupSize");
CSeqMultiFetch.m_nLocalPose = findOffsetByName(j, "CSeqMultiFetch", "m_nLocalPose");
CSeqMultiFetch.m_poseKeyArray0 = findOffsetByName(j, "CSeqMultiFetch", "m_poseKeyArray0");
CSeqMultiFetch.m_poseKeyArray1 = findOffsetByName(j, "CSeqMultiFetch", "m_poseKeyArray1");
CSeqMultiFetch.m_nLocalCyclePoseParameter = findOffsetByName(j, "CSeqMultiFetch", "m_nLocalCyclePoseParameter");
CSeqMultiFetch.m_bCalculatePoseParameters = findOffsetByName(j, "CSeqMultiFetch", "m_bCalculatePoseParameters");
CSeqMultiFetch.m_bFixedBlendWeight = findOffsetByName(j, "CSeqMultiFetch", "m_bFixedBlendWeight");
CSeqMultiFetch.m_flFixedBlendWeightVals = findOffsetByName(j, "CSeqMultiFetch", "m_flFixedBlendWeightVals");

// Atribuições para CPhysSurfacePropertiesSoundNames
// CPhysSurfacePropertiesSoundNames Offsets
CPhysSurfacePropertiesSoundNames.m_impactSoft = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_impactSoft");
CPhysSurfacePropertiesSoundNames.m_impactHard = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_impactHard");
CPhysSurfacePropertiesSoundNames.m_scrapeSmooth = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_scrapeSmooth");
CPhysSurfacePropertiesSoundNames.m_scrapeRough = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_scrapeRough");
CPhysSurfacePropertiesSoundNames.m_bulletImpact = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_bulletImpact");
CPhysSurfacePropertiesSoundNames.m_rolling = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_rolling");
CPhysSurfacePropertiesSoundNames.m_break = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_break");
CPhysSurfacePropertiesSoundNames.m_strain = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_strain");
CPhysSurfacePropertiesSoundNames.m_meleeImpact = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_meleeImpact");
CPhysSurfacePropertiesSoundNames.m_pushOff = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_pushOff");
CPhysSurfacePropertiesSoundNames.m_skidStop = findOffsetByName(j, "CPhysSurfacePropertiesSoundNames", "m_skidStop");

// Atribuições para CAudioAnimTag
// CAudioAnimTag Offsets
CAudioAnimTag.m_clipName = findOffsetByName(j, "CAudioAnimTag", "m_clipName");
CAudioAnimTag.m_attachmentName = findOffsetByName(j, "CAudioAnimTag", "m_attachmentName");
CAudioAnimTag.m_flVolume = findOffsetByName(j, "CAudioAnimTag", "m_flVolume");
CAudioAnimTag.m_bStopWhenTagEnds = findOffsetByName(j, "CAudioAnimTag", "m_bStopWhenTagEnds");
CAudioAnimTag.m_bStopWhenGraphEnds = findOffsetByName(j, "CAudioAnimTag", "m_bStopWhenGraphEnds");
CAudioAnimTag.m_bPlayOnServer = findOffsetByName(j, "CAudioAnimTag", "m_bPlayOnServer");
CAudioAnimTag.m_bPlayOnClient = findOffsetByName(j, "CAudioAnimTag", "m_bPlayOnClient");

// Atribuições para CTurnHelperUpdateNode
// CTurnHelperUpdateNode Offsets
CTurnHelperUpdateNode.m_facingTarget = findOffsetByName(j, "CTurnHelperUpdateNode", "m_facingTarget");
CTurnHelperUpdateNode.m_turnStartTimeOffset = findOffsetByName(j, "CTurnHelperUpdateNode", "m_turnStartTimeOffset");
CTurnHelperUpdateNode.m_turnDuration = findOffsetByName(j, "CTurnHelperUpdateNode", "m_turnDuration");
CTurnHelperUpdateNode.m_bMatchChildDuration = findOffsetByName(j, "CTurnHelperUpdateNode", "m_bMatchChildDuration");
CTurnHelperUpdateNode.m_manualTurnOffset = findOffsetByName(j, "CTurnHelperUpdateNode", "m_manualTurnOffset");
CTurnHelperUpdateNode.m_bUseManualTurnOffset = findOffsetByName(j, "CTurnHelperUpdateNode", "m_bUseManualTurnOffset");

// Atribuições para CAnimationGroup
// CAnimationGroup Offsets
CAnimationGroup.m_nFlags = findOffsetByName(j, "CAnimationGroup", "m_nFlags");
CAnimationGroup.m_name = findOffsetByName(j, "CAnimationGroup", "m_name");
CAnimationGroup.m_localHAnimArray_Handle = findOffsetByName(j, "CAnimationGroup", "m_localHAnimArray_Handle");
CAnimationGroup.m_includedGroupArray_Handle = findOffsetByName(j, "CAnimationGroup", "m_includedGroupArray_Handle");
CAnimationGroup.m_directHSeqGroup_Handle = findOffsetByName(j, "CAnimationGroup", "m_directHSeqGroup_Handle");
CAnimationGroup.m_decodeKey = findOffsetByName(j, "CAnimationGroup", "m_decodeKey");
CAnimationGroup.m_szScripts = findOffsetByName(j, "CAnimationGroup", "m_szScripts");
CAnimationGroup.m_AdditionalExtRefs = findOffsetByName(j, "CAnimationGroup", "m_AdditionalExtRefs");

// Atribuições para NmSyncTrackTime_t
// NmSyncTrackTime_t Offsets
NmSyncTrackTime_t.m_nEventIdx = findOffsetByName(j, "NmSyncTrackTime_t", "m_nEventIdx");
NmSyncTrackTime_t.m_percentageThrough = findOffsetByName(j, "NmSyncTrackTime_t", "m_percentageThrough");

// Atribuições para CNmClip
// CNmClip Offsets
CNmClip.m_skeleton = findOffsetByName(j, "CNmClip", "m_skeleton");
CNmClip.m_nNumFrames = findOffsetByName(j, "CNmClip", "m_nNumFrames");
CNmClip.m_flDuration = findOffsetByName(j, "CNmClip", "m_flDuration");
CNmClip.m_compressedPoseData = findOffsetByName(j, "CNmClip", "m_compressedPoseData");
CNmClip.m_trackCompressionSettings = findOffsetByName(j, "CNmClip", "m_trackCompressionSettings");
CNmClip.m_compressedPoseOffsets = findOffsetByName(j, "CNmClip", "m_compressedPoseOffsets");
CNmClip.m_syncTrack = findOffsetByName(j, "CNmClip", "m_syncTrack");
CNmClip.m_rootMotion = findOffsetByName(j, "CNmClip", "m_rootMotion");
CNmClip.m_bIsAdditive = findOffsetByName(j, "CNmClip", "m_bIsAdditive");

// Atribuições para CToggleComponentActionUpdater
// CToggleComponentActionUpdater Offsets
CToggleComponentActionUpdater.m_componentID = findOffsetByName(j, "CToggleComponentActionUpdater", "m_componentID");
CToggleComponentActionUpdater.m_bSetEnabled = findOffsetByName(j, "CToggleComponentActionUpdater", "m_bSetEnabled");

// Atribuições para CNmSpeedScaleBaseNode__CDefinition
// CNmSpeedScaleBaseNode__CDefinition Offsets
CNmSpeedScaleBaseNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmSpeedScaleBaseNode__CDefinition", "m_nInputValueNodeIdx");
CNmSpeedScaleBaseNode__CDefinition.m_flDefaultInputValue = findOffsetByName(j, "CNmSpeedScaleBaseNode__CDefinition", "m_flDefaultInputValue");

// Atribuições para CAnimationGraphVisualizerPrimitiveBase
// CAnimationGraphVisualizerPrimitiveBase Offsets
CAnimationGraphVisualizerPrimitiveBase.m_Type = findOffsetByName(j, "CAnimationGraphVisualizerPrimitiveBase", "m_Type");
CAnimationGraphVisualizerPrimitiveBase.m_OwningAnimNodePaths = findOffsetByName(j, "CAnimationGraphVisualizerPrimitiveBase", "m_OwningAnimNodePaths");
CAnimationGraphVisualizerPrimitiveBase.m_nOwningAnimNodePathCount = findOffsetByName(j, "CAnimationGraphVisualizerPrimitiveBase", "m_nOwningAnimNodePathCount");

// Atribuições para NmSyncTrackTimeRange_t
// NmSyncTrackTimeRange_t Offsets
NmSyncTrackTimeRange_t.m_startTime = findOffsetByName(j, "NmSyncTrackTimeRange_t", "m_startTime");
NmSyncTrackTimeRange_t.m_endTime = findOffsetByName(j, "NmSyncTrackTimeRange_t", "m_endTime");

// Atribuições para CAnimationGraphVisualizerText
// CAnimationGraphVisualizerText Offsets
CAnimationGraphVisualizerText.m_vWsPosition = findOffsetByName(j, "CAnimationGraphVisualizerText", "m_vWsPosition");
CAnimationGraphVisualizerText.m_Color = findOffsetByName(j, "CAnimationGraphVisualizerText", "m_Color");
CAnimationGraphVisualizerText.m_Text = findOffsetByName(j, "CAnimationGraphVisualizerText", "m_Text");

// Atribuições para CFootTrajectory
// CFootTrajectory Offsets
CFootTrajectory.m_vOffset = findOffsetByName(j, "CFootTrajectory", "m_vOffset");
CFootTrajectory.m_flRotationOffset = findOffsetByName(j, "CFootTrajectory", "m_flRotationOffset");
CFootTrajectory.m_flProgression = findOffsetByName(j, "CFootTrajectory", "m_flProgression");

// Atribuições para CMotionMatchingUpdateNode
// CMotionMatchingUpdateNode Offsets
CMotionMatchingUpdateNode.m_dataSet = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_dataSet");
CMotionMatchingUpdateNode.m_metrics = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_metrics");
CMotionMatchingUpdateNode.m_weights = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_weights");
CMotionMatchingUpdateNode.m_bSearchEveryTick = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bSearchEveryTick");
CMotionMatchingUpdateNode.m_flSearchInterval = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flSearchInterval");
CMotionMatchingUpdateNode.m_bSearchWhenClipEnds = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bSearchWhenClipEnds");
CMotionMatchingUpdateNode.m_bSearchWhenGoalChanges = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bSearchWhenGoalChanges");
CMotionMatchingUpdateNode.m_blendCurve = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_blendCurve");
CMotionMatchingUpdateNode.m_flSampleRate = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flSampleRate");
CMotionMatchingUpdateNode.m_flBlendTime = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flBlendTime");
CMotionMatchingUpdateNode.m_bLockClipWhenWaning = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bLockClipWhenWaning");
CMotionMatchingUpdateNode.m_flSelectionThreshold = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flSelectionThreshold");
CMotionMatchingUpdateNode.m_flReselectionTimeWindow = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flReselectionTimeWindow");
CMotionMatchingUpdateNode.m_bEnableRotationCorrection = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bEnableRotationCorrection");
CMotionMatchingUpdateNode.m_bGoalAssist = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bGoalAssist");
CMotionMatchingUpdateNode.m_flGoalAssistDistance = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flGoalAssistDistance");
CMotionMatchingUpdateNode.m_flGoalAssistTolerance = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flGoalAssistTolerance");
CMotionMatchingUpdateNode.m_distanceScale_Damping = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_distanceScale_Damping");
CMotionMatchingUpdateNode.m_flDistanceScale_OuterRadius = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flDistanceScale_OuterRadius");
CMotionMatchingUpdateNode.m_flDistanceScale_InnerRadius = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flDistanceScale_InnerRadius");
CMotionMatchingUpdateNode.m_flDistanceScale_MaxScale = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flDistanceScale_MaxScale");
CMotionMatchingUpdateNode.m_flDistanceScale_MinScale = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_flDistanceScale_MinScale");
CMotionMatchingUpdateNode.m_bEnableDistanceScaling = findOffsetByName(j, "CMotionMatchingUpdateNode", "m_bEnableDistanceScaling");

// Atribuições para CSeqS1SeqDesc
// CSeqS1SeqDesc Offsets
CSeqS1SeqDesc.m_sName = findOffsetByName(j, "CSeqS1SeqDesc", "m_sName");
CSeqS1SeqDesc.m_flags = findOffsetByName(j, "CSeqS1SeqDesc", "m_flags");
CSeqS1SeqDesc.m_fetch = findOffsetByName(j, "CSeqS1SeqDesc", "m_fetch");
CSeqS1SeqDesc.m_nLocalWeightlist = findOffsetByName(j, "CSeqS1SeqDesc", "m_nLocalWeightlist");
CSeqS1SeqDesc.m_autoLayerArray = findOffsetByName(j, "CSeqS1SeqDesc", "m_autoLayerArray");
CSeqS1SeqDesc.m_IKLockArray = findOffsetByName(j, "CSeqS1SeqDesc", "m_IKLockArray");
CSeqS1SeqDesc.m_transition = findOffsetByName(j, "CSeqS1SeqDesc", "m_transition");
CSeqS1SeqDesc.m_SequenceKeys = findOffsetByName(j, "CSeqS1SeqDesc", "m_SequenceKeys");
CSeqS1SeqDesc.m_LegacyKeyValueText = findOffsetByName(j, "CSeqS1SeqDesc", "m_LegacyKeyValueText");
CSeqS1SeqDesc.m_activityArray = findOffsetByName(j, "CSeqS1SeqDesc", "m_activityArray");
CSeqS1SeqDesc.m_footMotion = findOffsetByName(j, "CSeqS1SeqDesc", "m_footMotion");

// Atribuições para CFlexController
// CFlexController Offsets
CFlexController.m_szName = findOffsetByName(j, "CFlexController", "m_szName");
CFlexController.m_szType = findOffsetByName(j, "CFlexController", "m_szType");
CFlexController.min = findOffsetByName(j, "CFlexController", "min");
CFlexController.max = findOffsetByName(j, "CFlexController", "max");

// Atribuições para SkeletonDemoDb_t
// SkeletonDemoDb_t Offsets
SkeletonDemoDb_t.m_AnimCaptures = findOffsetByName(j, "SkeletonDemoDb_t", "m_AnimCaptures");
SkeletonDemoDb_t.m_CameraTrack = findOffsetByName(j, "SkeletonDemoDb_t", "m_CameraTrack");
SkeletonDemoDb_t.m_flRecordingTime = findOffsetByName(j, "SkeletonDemoDb_t", "m_flRecordingTime");

// Atribuições para CNmStateEventConditionNode__CDefinition
// CNmStateEventConditionNode__CDefinition Offsets
CNmStateEventConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmStateEventConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmStateEventConditionNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmStateEventConditionNode__CDefinition", "m_eventConditionRules");
CNmStateEventConditionNode__CDefinition.m_conditions = findOffsetByName(j, "CNmStateEventConditionNode__CDefinition", "m_conditions");

// Atribuições para CNmFloatRangeComparisonNode__CDefinition
// CNmFloatRangeComparisonNode__CDefinition Offsets
CNmFloatRangeComparisonNode__CDefinition.m_range = findOffsetByName(j, "CNmFloatRangeComparisonNode__CDefinition", "m_range");
CNmFloatRangeComparisonNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatRangeComparisonNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatRangeComparisonNode__CDefinition.m_bIsInclusiveCheck = findOffsetByName(j, "CNmFloatRangeComparisonNode__CDefinition", "m_bIsInclusiveCheck");

// Atribuições para CMotionNodeSequence
// CMotionNodeSequence Offsets
CMotionNodeSequence.m_tags = findOffsetByName(j, "CMotionNodeSequence", "m_tags");
CMotionNodeSequence.m_hSequence = findOffsetByName(j, "CMotionNodeSequence", "m_hSequence");
CMotionNodeSequence.m_flPlaybackSpeed = findOffsetByName(j, "CMotionNodeSequence", "m_flPlaybackSpeed");

// Atribuições para CFlexDesc
// CFlexDesc Offsets
CFlexDesc.m_szFacs = findOffsetByName(j, "CFlexDesc", "m_szFacs");

// Atribuições para CRenderMesh
// CRenderMesh Offsets
CRenderMesh.m_sceneObjects = findOffsetByName(j, "CRenderMesh", "m_sceneObjects");
CRenderMesh.m_constraints = findOffsetByName(j, "CRenderMesh", "m_constraints");
CRenderMesh.m_skeleton = findOffsetByName(j, "CRenderMesh", "m_skeleton");
CRenderMesh.m_meshDeformParams = findOffsetByName(j, "CRenderMesh", "m_meshDeformParams");
CRenderMesh.m_pGroomData = findOffsetByName(j, "CRenderMesh", "m_pGroomData");

// Atribuições para CAnimSkeleton
// CAnimSkeleton Offsets
CAnimSkeleton.m_localSpaceTransforms = findOffsetByName(j, "CAnimSkeleton", "m_localSpaceTransforms");
CAnimSkeleton.m_modelSpaceTransforms = findOffsetByName(j, "CAnimSkeleton", "m_modelSpaceTransforms");
CAnimSkeleton.m_boneNames = findOffsetByName(j, "CAnimSkeleton", "m_boneNames");
CAnimSkeleton.m_children = findOffsetByName(j, "CAnimSkeleton", "m_children");
CAnimSkeleton.m_parents = findOffsetByName(j, "CAnimSkeleton", "m_parents");
CAnimSkeleton.m_feet = findOffsetByName(j, "CAnimSkeleton", "m_feet");
CAnimSkeleton.m_morphNames = findOffsetByName(j, "CAnimSkeleton", "m_morphNames");
CAnimSkeleton.m_lodBoneCounts = findOffsetByName(j, "CAnimSkeleton", "m_lodBoneCounts");

// Atribuições para VPhysics2ShapeDef_t
// VPhysics2ShapeDef_t Offsets
VPhysics2ShapeDef_t.m_spheres = findOffsetByName(j, "VPhysics2ShapeDef_t", "m_spheres");
VPhysics2ShapeDef_t.m_capsules = findOffsetByName(j, "VPhysics2ShapeDef_t", "m_capsules");
VPhysics2ShapeDef_t.m_hulls = findOffsetByName(j, "VPhysics2ShapeDef_t", "m_hulls");
VPhysics2ShapeDef_t.m_meshes = findOffsetByName(j, "VPhysics2ShapeDef_t", "m_meshes");
VPhysics2ShapeDef_t.m_CollisionAttributeIndices = findOffsetByName(j, "VPhysics2ShapeDef_t", "m_CollisionAttributeIndices");

// Atribuições para CNmFloatCurveNode__CDefinition
// CNmFloatCurveNode__CDefinition Offsets
CNmFloatCurveNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatCurveNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatCurveNode__CDefinition.m_curve = findOffsetByName(j, "CNmFloatCurveNode__CDefinition", "m_curve");

// Atribuições para CAnimationGraphVisualizerAxis
// CAnimationGraphVisualizerAxis Offsets
CAnimationGraphVisualizerAxis.m_xWsTransform = findOffsetByName(j, "CAnimationGraphVisualizerAxis", "m_xWsTransform");
CAnimationGraphVisualizerAxis.m_flAxisSize = findOffsetByName(j, "CAnimationGraphVisualizerAxis", "m_flAxisSize");

// Atribuições para CTwistConstraint
// CTwistConstraint Offsets
CTwistConstraint.m_bInverse = findOffsetByName(j, "CTwistConstraint", "m_bInverse");
CTwistConstraint.m_qParentBindRotation = findOffsetByName(j, "CTwistConstraint", "m_qParentBindRotation");
CTwistConstraint.m_qChildBindRotation = findOffsetByName(j, "CTwistConstraint", "m_qChildBindRotation");

// Atribuições para ModelBoneFlexDriverControl_t
// ModelBoneFlexDriverControl_t Offsets
ModelBoneFlexDriverControl_t.m_nBoneComponent = findOffsetByName(j, "ModelBoneFlexDriverControl_t", "m_nBoneComponent");
ModelBoneFlexDriverControl_t.m_flexController = findOffsetByName(j, "ModelBoneFlexDriverControl_t", "m_flexController");
ModelBoneFlexDriverControl_t.m_flexControllerToken = findOffsetByName(j, "ModelBoneFlexDriverControl_t", "m_flexControllerToken");
ModelBoneFlexDriverControl_t.m_flMin = findOffsetByName(j, "ModelBoneFlexDriverControl_t", "m_flMin");
ModelBoneFlexDriverControl_t.m_flMax = findOffsetByName(j, "ModelBoneFlexDriverControl_t", "m_flMax");

// Atribuições para CSeqCmdLayer
// CSeqCmdLayer Offsets
CSeqCmdLayer.m_cmd = findOffsetByName(j, "CSeqCmdLayer", "m_cmd");
CSeqCmdLayer.m_nLocalReference = findOffsetByName(j, "CSeqCmdLayer", "m_nLocalReference");
CSeqCmdLayer.m_nLocalBonemask = findOffsetByName(j, "CSeqCmdLayer", "m_nLocalBonemask");
CSeqCmdLayer.m_nDstResult = findOffsetByName(j, "CSeqCmdLayer", "m_nDstResult");
CSeqCmdLayer.m_nSrcResult = findOffsetByName(j, "CSeqCmdLayer", "m_nSrcResult");
CSeqCmdLayer.m_bSpline = findOffsetByName(j, "CSeqCmdLayer", "m_bSpline");
CSeqCmdLayer.m_flVar1 = findOffsetByName(j, "CSeqCmdLayer", "m_flVar1");
CSeqCmdLayer.m_flVar2 = findOffsetByName(j, "CSeqCmdLayer", "m_flVar2");
CSeqCmdLayer.m_nLineNumber = findOffsetByName(j, "CSeqCmdLayer", "m_nLineNumber");

// Atribuições para FootPinningPoseOpFixedData_t
// FootPinningPoseOpFixedData_t Offsets
FootPinningPoseOpFixedData_t.m_footInfo = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_footInfo");
FootPinningPoseOpFixedData_t.m_flBlendTime = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_flBlendTime");
FootPinningPoseOpFixedData_t.m_flLockBreakDistance = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_flLockBreakDistance");
FootPinningPoseOpFixedData_t.m_flMaxLegTwist = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_flMaxLegTwist");
FootPinningPoseOpFixedData_t.m_nHipBoneIndex = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_nHipBoneIndex");
FootPinningPoseOpFixedData_t.m_bApplyLegTwistLimits = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_bApplyLegTwistLimits");
FootPinningPoseOpFixedData_t.m_bApplyFootRotationLimits = findOffsetByName(j, "FootPinningPoseOpFixedData_t", "m_bApplyFootRotationLimits");

// Atribuições para RenderSkeletonBone_t
// RenderSkeletonBone_t Offsets
RenderSkeletonBone_t.m_boneName = findOffsetByName(j, "RenderSkeletonBone_t", "m_boneName");
RenderSkeletonBone_t.m_parentName = findOffsetByName(j, "RenderSkeletonBone_t", "m_parentName");
RenderSkeletonBone_t.m_invBindPose = findOffsetByName(j, "RenderSkeletonBone_t", "m_invBindPose");
RenderSkeletonBone_t.m_bbox = findOffsetByName(j, "RenderSkeletonBone_t", "m_bbox");
RenderSkeletonBone_t.m_flSphereRadius = findOffsetByName(j, "RenderSkeletonBone_t", "m_flSphereRadius");

// Atribuições para CDistanceRemainingMetricEvaluator
// CDistanceRemainingMetricEvaluator Offsets
CDistanceRemainingMetricEvaluator.m_flMaxDistance = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_flMaxDistance");
CDistanceRemainingMetricEvaluator.m_flMinDistance = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_flMinDistance");
CDistanceRemainingMetricEvaluator.m_flStartGoalFilterDistance = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_flStartGoalFilterDistance");
CDistanceRemainingMetricEvaluator.m_flMaxGoalOvershootScale = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_flMaxGoalOvershootScale");
CDistanceRemainingMetricEvaluator.m_bFilterFixedMinDistance = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_bFilterFixedMinDistance");
CDistanceRemainingMetricEvaluator.m_bFilterGoalDistance = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalDistance");
CDistanceRemainingMetricEvaluator.m_bFilterGoalOvershoot = findOffsetByName(j, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalOvershoot");

// Atribuições para CDirectPlaybackUpdateNode
// CDirectPlaybackUpdateNode Offsets
CDirectPlaybackUpdateNode.m_bFinishEarly = findOffsetByName(j, "CDirectPlaybackUpdateNode", "m_bFinishEarly");
CDirectPlaybackUpdateNode.m_bResetOnFinish = findOffsetByName(j, "CDirectPlaybackUpdateNode", "m_bResetOnFinish");
CDirectPlaybackUpdateNode.m_allTags = findOffsetByName(j, "CDirectPlaybackUpdateNode", "m_allTags");

// Atribuições para CNmIDEvent
// CNmIDEvent Offsets
CNmIDEvent.m_ID = findOffsetByName(j, "CNmIDEvent", "m_ID");

// Atribuições para CFlexRule
// CFlexRule Offsets
CFlexRule.m_nFlex = findOffsetByName(j, "CFlexRule", "m_nFlex");
CFlexRule.m_FlexOps = findOffsetByName(j, "CFlexRule", "m_FlexOps");

// Atribuições para ScriptInfo_t
// ScriptInfo_t Offsets
ScriptInfo_t.m_code = findOffsetByName(j, "ScriptInfo_t", "m_code");
ScriptInfo_t.m_paramsModified = findOffsetByName(j, "ScriptInfo_t", "m_paramsModified");
ScriptInfo_t.m_proxyReadParams = findOffsetByName(j, "ScriptInfo_t", "m_proxyReadParams");
ScriptInfo_t.m_proxyWriteParams = findOffsetByName(j, "ScriptInfo_t", "m_proxyWriteParams");
ScriptInfo_t.m_eScriptType = findOffsetByName(j, "ScriptInfo_t", "m_eScriptType");

// Atribuições para CRenderGroom
// CRenderGroom Offsets
CRenderGroom.m_hairs = findOffsetByName(j, "CRenderGroom", "m_hairs");
CRenderGroom.m_hairPositionOffsets = findOffsetByName(j, "CRenderGroom", "m_hairPositionOffsets");
CRenderGroom.m_hSimParamsMat = findOffsetByName(j, "CRenderGroom", "m_hSimParamsMat");
CRenderGroom.m_nSegmentsPerHairStrand = findOffsetByName(j, "CRenderGroom", "m_nSegmentsPerHairStrand");
CRenderGroom.m_nGuideHairCount = findOffsetByName(j, "CRenderGroom", "m_nGuideHairCount");
CRenderGroom.m_nHairCount = findOffsetByName(j, "CRenderGroom", "m_nHairCount");
CRenderGroom.m_nGroomGroupID = findOffsetByName(j, "CRenderGroom", "m_nGroomGroupID");
CRenderGroom.m_nAttachBoneIdx = findOffsetByName(j, "CRenderGroom", "m_nAttachBoneIdx");
CRenderGroom.m_nAttachMeshIdx = findOffsetByName(j, "CRenderGroom", "m_nAttachMeshIdx");
CRenderGroom.m_nAttachMeshDrawCallIdx = findOffsetByName(j, "CRenderGroom", "m_nAttachMeshDrawCallIdx");
CRenderGroom.m_bEnableSimulation = findOffsetByName(j, "CRenderGroom", "m_bEnableSimulation");

// Atribuições para CNmParameterizedClipSelectorNode__CDefinition
// CNmParameterizedClipSelectorNode__CDefinition Offsets
CNmParameterizedClipSelectorNode__CDefinition.m_optionNodeIndices = findOffsetByName(j, "CNmParameterizedClipSelectorNode__CDefinition", "m_optionNodeIndices");
CNmParameterizedClipSelectorNode__CDefinition.m_parameterNodeIdx = findOffsetByName(j, "CNmParameterizedClipSelectorNode__CDefinition", "m_parameterNodeIdx");

// Atribuições para CTiltTwistConstraint
// CTiltTwistConstraint Offsets
CTiltTwistConstraint.m_nTargetAxis = findOffsetByName(j, "CTiltTwistConstraint", "m_nTargetAxis");
CTiltTwistConstraint.m_nSlaveAxis = findOffsetByName(j, "CTiltTwistConstraint", "m_nSlaveAxis");

// Atribuições para CVPhysXSurfacePropertiesList
// CVPhysXSurfacePropertiesList Offsets
CVPhysXSurfacePropertiesList.m_surfacePropertiesList = findOffsetByName(j, "CVPhysXSurfacePropertiesList", "m_surfacePropertiesList");

// Atribuições para RenderHairStrandInfo_t
// RenderHairStrandInfo_t Offsets
RenderHairStrandInfo_t.m_nGuideHairIndices_nSurfaceTriIndex = findOffsetByName(j, "RenderHairStrandInfo_t", "m_nGuideHairIndices_nSurfaceTriIndex");
RenderHairStrandInfo_t.m_vGuideBary_vBaseBary = findOffsetByName(j, "RenderHairStrandInfo_t", "m_vGuideBary_vBaseBary");
RenderHairStrandInfo_t.m_vRootOffset_flLengthScale = findOffsetByName(j, "RenderHairStrandInfo_t", "m_vRootOffset_flLengthScale");
RenderHairStrandInfo_t.m_nPackedBaseUv = findOffsetByName(j, "RenderHairStrandInfo_t", "m_nPackedBaseUv");
RenderHairStrandInfo_t.m_nPackedSurfaceNormalOs = findOffsetByName(j, "RenderHairStrandInfo_t", "m_nPackedSurfaceNormalOs");
RenderHairStrandInfo_t.m_nPackedSurfaceTangentOs = findOffsetByName(j, "RenderHairStrandInfo_t", "m_nPackedSurfaceTangentOs");

// Atribuições para CCycleControlClipUpdateNode
// CCycleControlClipUpdateNode Offsets
CCycleControlClipUpdateNode.m_tags = findOffsetByName(j, "CCycleControlClipUpdateNode", "m_tags");
CCycleControlClipUpdateNode.m_hSequence = findOffsetByName(j, "CCycleControlClipUpdateNode", "m_hSequence");
CCycleControlClipUpdateNode.m_duration = findOffsetByName(j, "CCycleControlClipUpdateNode", "m_duration");
CCycleControlClipUpdateNode.m_valueSource = findOffsetByName(j, "CCycleControlClipUpdateNode", "m_valueSource");
CCycleControlClipUpdateNode.m_paramIndex = findOffsetByName(j, "CCycleControlClipUpdateNode", "m_paramIndex");

// Atribuições para CNmTargetPointNode__CDefinition
// CNmTargetPointNode__CDefinition Offsets
CNmTargetPointNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmTargetPointNode__CDefinition", "m_nInputValueNodeIdx");
CNmTargetPointNode__CDefinition.m_bIsWorldSpaceTarget = findOffsetByName(j, "CNmTargetPointNode__CDefinition", "m_bIsWorldSpaceTarget");

// Atribuições para CStaticPoseCache
// CStaticPoseCache Offsets
CStaticPoseCache.m_poses = findOffsetByName(j, "CStaticPoseCache", "m_poses");
CStaticPoseCache.m_nBoneCount = findOffsetByName(j, "CStaticPoseCache", "m_nBoneCount");
CStaticPoseCache.m_nMorphCount = findOffsetByName(j, "CStaticPoseCache", "m_nMorphCount");

// Atribuições para LookAtOpFixedSettings_t
// LookAtOpFixedSettings_t Offsets
LookAtOpFixedSettings_t.m_attachment = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_attachment");
LookAtOpFixedSettings_t.m_damping = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_damping");
LookAtOpFixedSettings_t.m_bones = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_bones");
LookAtOpFixedSettings_t.m_flYawLimit = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_flYawLimit");
LookAtOpFixedSettings_t.m_flPitchLimit = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_flPitchLimit");
LookAtOpFixedSettings_t.m_flHysteresisInnerAngle = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_flHysteresisInnerAngle");
LookAtOpFixedSettings_t.m_flHysteresisOuterAngle = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_flHysteresisOuterAngle");
LookAtOpFixedSettings_t.m_bRotateYawForward = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_bRotateYawForward");
LookAtOpFixedSettings_t.m_bMaintainUpDirection = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_bMaintainUpDirection");
LookAtOpFixedSettings_t.m_bTargetIsPosition = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_bTargetIsPosition");
LookAtOpFixedSettings_t.m_bUseHysteresis = findOffsetByName(j, "LookAtOpFixedSettings_t", "m_bUseHysteresis");

// Atribuições para CAnimGraphSettingsManager
// CAnimGraphSettingsManager Offsets
CAnimGraphSettingsManager.m_settingsGroups = findOffsetByName(j, "CAnimGraphSettingsManager", "m_settingsGroups");

// Atribuições para CAnimGraphModelBinding
// CAnimGraphModelBinding Offsets
CAnimGraphModelBinding.m_modelName = findOffsetByName(j, "CAnimGraphModelBinding", "m_modelName");
CAnimGraphModelBinding.m_pSharedData = findOffsetByName(j, "CAnimGraphModelBinding", "m_pSharedData");

// Atribuições para CBoneConstraintPoseSpaceBone
// CBoneConstraintPoseSpaceBone Offsets
CBoneConstraintPoseSpaceBone.m_inputList = findOffsetByName(j, "CBoneConstraintPoseSpaceBone", "m_inputList");

// Atribuições para MotionBlendItem
// MotionBlendItem Offsets
MotionBlendItem.m_pChild = findOffsetByName(j, "MotionBlendItem", "m_pChild");
MotionBlendItem.m_flKeyValue = findOffsetByName(j, "MotionBlendItem", "m_flKeyValue");

// Atribuições para CBoneConstraintPoseSpaceMorph
// CBoneConstraintPoseSpaceMorph Offsets
CBoneConstraintPoseSpaceMorph.m_sBoneName = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph", "m_sBoneName");
CBoneConstraintPoseSpaceMorph.m_sAttachmentName = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph", "m_sAttachmentName");
CBoneConstraintPoseSpaceMorph.m_outputMorph = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph", "m_outputMorph");
CBoneConstraintPoseSpaceMorph.m_inputList = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph", "m_inputList");
CBoneConstraintPoseSpaceMorph.m_bClamp = findOffsetByName(j, "CBoneConstraintPoseSpaceMorph", "m_bClamp");

// Atribuições para CFloatAnimParameter
// CFloatAnimParameter Offsets
CFloatAnimParameter.m_fDefaultValue = findOffsetByName(j, "CFloatAnimParameter", "m_fDefaultValue");
CFloatAnimParameter.m_fMinValue = findOffsetByName(j, "CFloatAnimParameter", "m_fMinValue");
CFloatAnimParameter.m_fMaxValue = findOffsetByName(j, "CFloatAnimParameter", "m_fMaxValue");
CFloatAnimParameter.m_bInterpolate = findOffsetByName(j, "CFloatAnimParameter", "m_bInterpolate");

// Atribuições para CStateActionUpdater
// CStateActionUpdater Offsets
CStateActionUpdater.m_pAction = findOffsetByName(j, "CStateActionUpdater", "m_pAction");
CStateActionUpdater.m_eBehavior = findOffsetByName(j, "CStateActionUpdater", "m_eBehavior");

// Atribuições para CPlayerInputAnimMotorUpdater
// CPlayerInputAnimMotorUpdater Offsets
CPlayerInputAnimMotorUpdater.m_sampleTimes = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_sampleTimes");
CPlayerInputAnimMotorUpdater.m_flSpringConstant = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_flSpringConstant");
CPlayerInputAnimMotorUpdater.m_flAnticipationDistance = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_flAnticipationDistance");
CPlayerInputAnimMotorUpdater.m_hAnticipationPosParam = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_hAnticipationPosParam");
CPlayerInputAnimMotorUpdater.m_hAnticipationHeadingParam = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_hAnticipationHeadingParam");
CPlayerInputAnimMotorUpdater.m_bUseAcceleration = findOffsetByName(j, "CPlayerInputAnimMotorUpdater", "m_bUseAcceleration");

// Atribuições para CRenderSkeleton
// CRenderSkeleton Offsets
CRenderSkeleton.m_bones = findOffsetByName(j, "CRenderSkeleton", "m_bones");
CRenderSkeleton.m_boneParents = findOffsetByName(j, "CRenderSkeleton", "m_boneParents");
CRenderSkeleton.m_nBoneWeightCount = findOffsetByName(j, "CRenderSkeleton", "m_nBoneWeightCount");

// Atribuições para CSeqIKLock
// CSeqIKLock Offsets
CSeqIKLock.m_flPosWeight = findOffsetByName(j, "CSeqIKLock", "m_flPosWeight");
CSeqIKLock.m_flAngleWeight = findOffsetByName(j, "CSeqIKLock", "m_flAngleWeight");
CSeqIKLock.m_nLocalBone = findOffsetByName(j, "CSeqIKLock", "m_nLocalBone");
CSeqIKLock.m_bBonesOrientedAlongPositiveX = findOffsetByName(j, "CSeqIKLock", "m_bBonesOrientedAlongPositiveX");

// Atribuições para CAnimParamHandleMap
// CAnimParamHandleMap Offsets
CAnimParamHandleMap.m_list = findOffsetByName(j, "CAnimParamHandleMap", "m_list");

// Atribuições para CNmFloatClampNode__CDefinition
// CNmFloatClampNode__CDefinition Offsets
CNmFloatClampNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatClampNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatClampNode__CDefinition.m_clampRange = findOffsetByName(j, "CNmFloatClampNode__CDefinition", "m_clampRange");

// Atribuições para CAnimDesc
// CAnimDesc Offsets
CAnimDesc.m_name = findOffsetByName(j, "CAnimDesc", "m_name");
CAnimDesc.m_flags = findOffsetByName(j, "CAnimDesc", "m_flags");
CAnimDesc.fps = findOffsetByName(j, "CAnimDesc", "fps");
CAnimDesc.m_Data = findOffsetByName(j, "CAnimDesc", "m_Data");
CAnimDesc.m_movementArray = findOffsetByName(j, "CAnimDesc", "m_movementArray");
CAnimDesc.m_xInitialOffset = findOffsetByName(j, "CAnimDesc", "m_xInitialOffset");
CAnimDesc.m_eventArray = findOffsetByName(j, "CAnimDesc", "m_eventArray");
CAnimDesc.m_activityArray = findOffsetByName(j, "CAnimDesc", "m_activityArray");
CAnimDesc.m_hierarchyArray = findOffsetByName(j, "CAnimDesc", "m_hierarchyArray");
CAnimDesc.framestalltime = findOffsetByName(j, "CAnimDesc", "framestalltime");
CAnimDesc.m_vecRootMin = findOffsetByName(j, "CAnimDesc", "m_vecRootMin");
CAnimDesc.m_vecRootMax = findOffsetByName(j, "CAnimDesc", "m_vecRootMax");
CAnimDesc.m_vecBoneWorldMin = findOffsetByName(j, "CAnimDesc", "m_vecBoneWorldMin");
CAnimDesc.m_vecBoneWorldMax = findOffsetByName(j, "CAnimDesc", "m_vecBoneWorldMax");
CAnimDesc.m_sequenceParams = findOffsetByName(j, "CAnimDesc", "m_sequenceParams");

// Atribuições para CNmRootMotionOverrideNode__CDefinition
// CNmRootMotionOverrideNode__CDefinition Offsets
CNmRootMotionOverrideNode__CDefinition.m_desiredMovingVelocityNodeIdx = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_desiredMovingVelocityNodeIdx");
CNmRootMotionOverrideNode__CDefinition.m_desiredFacingDirectionNodeIdx = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_desiredFacingDirectionNodeIdx");
CNmRootMotionOverrideNode__CDefinition.m_linearVelocityLimitNodeIdx = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_linearVelocityLimitNodeIdx");
CNmRootMotionOverrideNode__CDefinition.m_angularVelocityLimitNodeIdx = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_angularVelocityLimitNodeIdx");
CNmRootMotionOverrideNode__CDefinition.m_maxLinearVelocity = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_maxLinearVelocity");
CNmRootMotionOverrideNode__CDefinition.m_maxAngularVelocityRadians = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_maxAngularVelocityRadians");
CNmRootMotionOverrideNode__CDefinition.m_overrideFlags = findOffsetByName(j, "CNmRootMotionOverrideNode__CDefinition", "m_overrideFlags");

// Atribuições para CNmTargetWarpNode__CDefinition
// CNmTargetWarpNode__CDefinition Offsets
CNmTargetWarpNode__CDefinition.m_nClipReferenceNodeIdx = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_nClipReferenceNodeIdx");
CNmTargetWarpNode__CDefinition.m_nTargetValueNodeIdx = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_nTargetValueNodeIdx");
CNmTargetWarpNode__CDefinition.m_samplingMode = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_samplingMode");
CNmTargetWarpNode__CDefinition.m_bAllowTargetUpdate = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_bAllowTargetUpdate");
CNmTargetWarpNode__CDefinition.m_flSamplingPositionErrorThresholdSq = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_flSamplingPositionErrorThresholdSq");
CNmTargetWarpNode__CDefinition.m_flMaxTangentLength = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_flMaxTangentLength");
CNmTargetWarpNode__CDefinition.m_flLerpFallbackDistanceThreshold = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_flLerpFallbackDistanceThreshold");
CNmTargetWarpNode__CDefinition.m_flTargetUpdateDistanceThreshold = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_flTargetUpdateDistanceThreshold");
CNmTargetWarpNode__CDefinition.m_flTargetUpdateAngleThresholdRadians = findOffsetByName(j, "CNmTargetWarpNode__CDefinition", "m_flTargetUpdateAngleThresholdRadians");

// Atribuições para CPhysSurfacePropertiesPhysics
// CPhysSurfacePropertiesPhysics Offsets
CPhysSurfacePropertiesPhysics.m_friction = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_friction");
CPhysSurfacePropertiesPhysics.m_elasticity = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_elasticity");
CPhysSurfacePropertiesPhysics.m_density = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_density");
CPhysSurfacePropertiesPhysics.m_thickness = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_thickness");
CPhysSurfacePropertiesPhysics.m_softContactFrequency = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_softContactFrequency");
CPhysSurfacePropertiesPhysics.m_softContactDampingRatio = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_softContactDampingRatio");
CPhysSurfacePropertiesPhysics.m_wheelDrag = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_wheelDrag");
CPhysSurfacePropertiesPhysics.m_heatConductivity = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_heatConductivity");
CPhysSurfacePropertiesPhysics.m_flashpoint = findOffsetByName(j, "CPhysSurfacePropertiesPhysics", "m_flashpoint");

// Atribuições para CAnimationGraphVisualizerPie
// CAnimationGraphVisualizerPie Offsets
CAnimationGraphVisualizerPie.m_vWsCenter = findOffsetByName(j, "CAnimationGraphVisualizerPie", "m_vWsCenter");
CAnimationGraphVisualizerPie.m_vWsStart = findOffsetByName(j, "CAnimationGraphVisualizerPie", "m_vWsStart");
CAnimationGraphVisualizerPie.m_vWsEnd = findOffsetByName(j, "CAnimationGraphVisualizerPie", "m_vWsEnd");
CAnimationGraphVisualizerPie.m_Color = findOffsetByName(j, "CAnimationGraphVisualizerPie", "m_Color");

// Atribuições para CBoneConstraintDotToMorph
// CBoneConstraintDotToMorph Offsets
CBoneConstraintDotToMorph.m_sBoneName = findOffsetByName(j, "CBoneConstraintDotToMorph", "m_sBoneName");
CBoneConstraintDotToMorph.m_sTargetBoneName = findOffsetByName(j, "CBoneConstraintDotToMorph", "m_sTargetBoneName");
CBoneConstraintDotToMorph.m_sMorphChannelName = findOffsetByName(j, "CBoneConstraintDotToMorph", "m_sMorphChannelName");
CBoneConstraintDotToMorph.m_flRemap = findOffsetByName(j, "CBoneConstraintDotToMorph", "m_flRemap");

// Atribuições para TraceSettings_t
// TraceSettings_t Offsets
TraceSettings_t.m_flTraceHeight = findOffsetByName(j, "TraceSettings_t", "m_flTraceHeight");
TraceSettings_t.m_flTraceRadius = findOffsetByName(j, "TraceSettings_t", "m_flTraceRadius");

// Atribuições para ParamSpanSample_t
// ParamSpanSample_t Offsets
ParamSpanSample_t.m_value = findOffsetByName(j, "ParamSpanSample_t", "m_value");
ParamSpanSample_t.m_flCycle = findOffsetByName(j, "ParamSpanSample_t", "m_flCycle");

// Atribuições para VPhysXConstraintParams_t
// VPhysXConstraintParams_t Offsets
VPhysXConstraintParams_t.m_nType = findOffsetByName(j, "VPhysXConstraintParams_t", "m_nType");
VPhysXConstraintParams_t.m_nTranslateMotion = findOffsetByName(j, "VPhysXConstraintParams_t", "m_nTranslateMotion");
VPhysXConstraintParams_t.m_nRotateMotion = findOffsetByName(j, "VPhysXConstraintParams_t", "m_nRotateMotion");
VPhysXConstraintParams_t.m_nFlags = findOffsetByName(j, "VPhysXConstraintParams_t", "m_nFlags");
VPhysXConstraintParams_t.m_anchor = findOffsetByName(j, "VPhysXConstraintParams_t", "m_anchor");
VPhysXConstraintParams_t.m_axes = findOffsetByName(j, "VPhysXConstraintParams_t", "m_axes");
VPhysXConstraintParams_t.m_maxForce = findOffsetByName(j, "VPhysXConstraintParams_t", "m_maxForce");
VPhysXConstraintParams_t.m_maxTorque = findOffsetByName(j, "VPhysXConstraintParams_t", "m_maxTorque");
VPhysXConstraintParams_t.m_linearLimitValue = findOffsetByName(j, "VPhysXConstraintParams_t", "m_linearLimitValue");
VPhysXConstraintParams_t.m_linearLimitRestitution = findOffsetByName(j, "VPhysXConstraintParams_t", "m_linearLimitRestitution");
VPhysXConstraintParams_t.m_linearLimitSpring = findOffsetByName(j, "VPhysXConstraintParams_t", "m_linearLimitSpring");
VPhysXConstraintParams_t.m_linearLimitDamping = findOffsetByName(j, "VPhysXConstraintParams_t", "m_linearLimitDamping");
VPhysXConstraintParams_t.m_twistLowLimitValue = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistLowLimitValue");
VPhysXConstraintParams_t.m_twistLowLimitRestitution = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistLowLimitRestitution");
VPhysXConstraintParams_t.m_twistLowLimitSpring = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistLowLimitSpring");
VPhysXConstraintParams_t.m_twistLowLimitDamping = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistLowLimitDamping");
VPhysXConstraintParams_t.m_twistHighLimitValue = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistHighLimitValue");
VPhysXConstraintParams_t.m_twistHighLimitRestitution = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistHighLimitRestitution");
VPhysXConstraintParams_t.m_twistHighLimitSpring = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistHighLimitSpring");
VPhysXConstraintParams_t.m_twistHighLimitDamping = findOffsetByName(j, "VPhysXConstraintParams_t", "m_twistHighLimitDamping");
VPhysXConstraintParams_t.m_swing1LimitValue = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing1LimitValue");
VPhysXConstraintParams_t.m_swing1LimitRestitution = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing1LimitRestitution");
VPhysXConstraintParams_t.m_swing1LimitSpring = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing1LimitSpring");
VPhysXConstraintParams_t.m_swing1LimitDamping = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing1LimitDamping");
VPhysXConstraintParams_t.m_swing2LimitValue = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing2LimitValue");
VPhysXConstraintParams_t.m_swing2LimitRestitution = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing2LimitRestitution");
VPhysXConstraintParams_t.m_swing2LimitSpring = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing2LimitSpring");
VPhysXConstraintParams_t.m_swing2LimitDamping = findOffsetByName(j, "VPhysXConstraintParams_t", "m_swing2LimitDamping");
VPhysXConstraintParams_t.m_goalPosition = findOffsetByName(j, "VPhysXConstraintParams_t", "m_goalPosition");
VPhysXConstraintParams_t.m_goalOrientation = findOffsetByName(j, "VPhysXConstraintParams_t", "m_goalOrientation");
VPhysXConstraintParams_t.m_goalAngularVelocity = findOffsetByName(j, "VPhysXConstraintParams_t", "m_goalAngularVelocity");
VPhysXConstraintParams_t.m_driveSpringX = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringX");
VPhysXConstraintParams_t.m_driveSpringY = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringY");
VPhysXConstraintParams_t.m_driveSpringZ = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringZ");
VPhysXConstraintParams_t.m_driveDampingX = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingX");
VPhysXConstraintParams_t.m_driveDampingY = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingY");
VPhysXConstraintParams_t.m_driveDampingZ = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingZ");
VPhysXConstraintParams_t.m_driveSpringTwist = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringTwist");
VPhysXConstraintParams_t.m_driveSpringSwing = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringSwing");
VPhysXConstraintParams_t.m_driveSpringSlerp = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveSpringSlerp");
VPhysXConstraintParams_t.m_driveDampingTwist = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingTwist");
VPhysXConstraintParams_t.m_driveDampingSwing = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingSwing");
VPhysXConstraintParams_t.m_driveDampingSlerp = findOffsetByName(j, "VPhysXConstraintParams_t", "m_driveDampingSlerp");
VPhysXConstraintParams_t.m_solverIterationCount = findOffsetByName(j, "VPhysXConstraintParams_t", "m_solverIterationCount");
VPhysXConstraintParams_t.m_projectionLinearTolerance = findOffsetByName(j, "VPhysXConstraintParams_t", "m_projectionLinearTolerance");
VPhysXConstraintParams_t.m_projectionAngularTolerance = findOffsetByName(j, "VPhysXConstraintParams_t", "m_projectionAngularTolerance");

// Atribuições para CNmFloatComparisonNode__CDefinition
// CNmFloatComparisonNode__CDefinition Offsets
CNmFloatComparisonNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatComparisonNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatComparisonNode__CDefinition.m_nComparandValueNodeIdx = findOffsetByName(j, "CNmFloatComparisonNode__CDefinition", "m_nComparandValueNodeIdx");
CNmFloatComparisonNode__CDefinition.m_comparison = findOffsetByName(j, "CNmFloatComparisonNode__CDefinition", "m_comparison");
CNmFloatComparisonNode__CDefinition.m_flEpsilon = findOffsetByName(j, "CNmFloatComparisonNode__CDefinition", "m_flEpsilon");
CNmFloatComparisonNode__CDefinition.m_flComparisonValue = findOffsetByName(j, "CNmFloatComparisonNode__CDefinition", "m_flComparisonValue");

// Atribuições para CStateUpdateData
// CStateUpdateData Offsets
CStateUpdateData.m_name = findOffsetByName(j, "CStateUpdateData", "m_name");
CStateUpdateData.m_hScript = findOffsetByName(j, "CStateUpdateData", "m_hScript");
CStateUpdateData.m_transitionIndices = findOffsetByName(j, "CStateUpdateData", "m_transitionIndices");
CStateUpdateData.m_actions = findOffsetByName(j, "CStateUpdateData", "m_actions");
CStateUpdateData.m_stateID = findOffsetByName(j, "CStateUpdateData", "m_stateID");
CStateUpdateData.m_bIsStartState = findOffsetByName(j, "CStateUpdateData", "m_bIsStartState");
CStateUpdateData.m_bIsEndState = findOffsetByName(j, "CStateUpdateData", "m_bIsEndState");
CStateUpdateData.m_bIsPassthrough = findOffsetByName(j, "CStateUpdateData", "m_bIsPassthrough");

// Atribuições para CMoverUpdateNode
// CMoverUpdateNode Offsets
CMoverUpdateNode.m_damping = findOffsetByName(j, "CMoverUpdateNode", "m_damping");
CMoverUpdateNode.m_facingTarget = findOffsetByName(j, "CMoverUpdateNode", "m_facingTarget");
CMoverUpdateNode.m_hMoveVecParam = findOffsetByName(j, "CMoverUpdateNode", "m_hMoveVecParam");
CMoverUpdateNode.m_hMoveHeadingParam = findOffsetByName(j, "CMoverUpdateNode", "m_hMoveHeadingParam");
CMoverUpdateNode.m_hTurnToFaceParam = findOffsetByName(j, "CMoverUpdateNode", "m_hTurnToFaceParam");
CMoverUpdateNode.m_flTurnToFaceOffset = findOffsetByName(j, "CMoverUpdateNode", "m_flTurnToFaceOffset");
CMoverUpdateNode.m_flTurnToFaceLimit = findOffsetByName(j, "CMoverUpdateNode", "m_flTurnToFaceLimit");
CMoverUpdateNode.m_bAdditive = findOffsetByName(j, "CMoverUpdateNode", "m_bAdditive");
CMoverUpdateNode.m_bApplyMovement = findOffsetByName(j, "CMoverUpdateNode", "m_bApplyMovement");
CMoverUpdateNode.m_bOrientMovement = findOffsetByName(j, "CMoverUpdateNode", "m_bOrientMovement");
CMoverUpdateNode.m_bApplyRotation = findOffsetByName(j, "CMoverUpdateNode", "m_bApplyRotation");
CMoverUpdateNode.m_bLimitOnly = findOffsetByName(j, "CMoverUpdateNode", "m_bLimitOnly");

// Atribuições para CNmLayerBlendNode__CDefinition
// CNmLayerBlendNode__CDefinition Offsets
CNmLayerBlendNode__CDefinition.m_nBaseNodeIdx = findOffsetByName(j, "CNmLayerBlendNode__CDefinition", "m_nBaseNodeIdx");
CNmLayerBlendNode__CDefinition.m_bOnlySampleBaseRootMotion = findOffsetByName(j, "CNmLayerBlendNode__CDefinition", "m_bOnlySampleBaseRootMotion");
CNmLayerBlendNode__CDefinition.m_layerDefinition = findOffsetByName(j, "CNmLayerBlendNode__CDefinition", "m_layerDefinition");

// Atribuições para CAnimMotorUpdaterBase
// CAnimMotorUpdaterBase Offsets
CAnimMotorUpdaterBase.m_name = findOffsetByName(j, "CAnimMotorUpdaterBase", "m_name");
CAnimMotorUpdaterBase.m_bDefault = findOffsetByName(j, "CAnimMotorUpdaterBase", "m_bDefault");

// Atribuições para JiggleBoneSettingsList_t
// JiggleBoneSettingsList_t Offsets
JiggleBoneSettingsList_t.m_boneSettings = findOffsetByName(j, "JiggleBoneSettingsList_t", "m_boneSettings");

// Atribuições para CSubtractUpdateNode
// CSubtractUpdateNode Offsets
CSubtractUpdateNode.m_footMotionTiming = findOffsetByName(j, "CSubtractUpdateNode", "m_footMotionTiming");
CSubtractUpdateNode.m_bApplyToFootMotion = findOffsetByName(j, "CSubtractUpdateNode", "m_bApplyToFootMotion");
CSubtractUpdateNode.m_bApplyChannelsSeparately = findOffsetByName(j, "CSubtractUpdateNode", "m_bApplyChannelsSeparately");
CSubtractUpdateNode.m_bUseModelSpace = findOffsetByName(j, "CSubtractUpdateNode", "m_bUseModelSpace");

// Atribuições para CNmFloatRemapNode__CDefinition
// CNmFloatRemapNode__CDefinition Offsets
CNmFloatRemapNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmFloatRemapNode__CDefinition", "m_nInputValueNodeIdx");
CNmFloatRemapNode__CDefinition.m_inputRange = findOffsetByName(j, "CNmFloatRemapNode__CDefinition", "m_inputRange");
CNmFloatRemapNode__CDefinition.m_outputRange = findOffsetByName(j, "CNmFloatRemapNode__CDefinition", "m_outputRange");

// Atribuições para CPoseHandle
// CPoseHandle Offsets
CPoseHandle.m_nIndex = findOffsetByName(j, "CPoseHandle", "m_nIndex");
CPoseHandle.m_eType = findOffsetByName(j, "CPoseHandle", "m_eType");

// Atribuições para CNmFootstepEventIDNode__CDefinition
// CNmFootstepEventIDNode__CDefinition Offsets
CNmFootstepEventIDNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmFootstepEventIDNode__CDefinition", "m_nSourceStateNodeIdx");
CNmFootstepEventIDNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmFootstepEventIDNode__CDefinition", "m_eventConditionRules");

// Atribuições para CSolveIKChainUpdateNode
// CSolveIKChainUpdateNode Offsets
CSolveIKChainUpdateNode.m_targetHandles = findOffsetByName(j, "CSolveIKChainUpdateNode", "m_targetHandles");
CSolveIKChainUpdateNode.m_opFixedData = findOffsetByName(j, "CSolveIKChainUpdateNode", "m_opFixedData");

// Atribuições para CNmOrNode__CDefinition
// CNmOrNode__CDefinition Offsets
CNmOrNode__CDefinition.m_conditionNodeIndices = findOffsetByName(j, "CNmOrNode__CDefinition", "m_conditionNodeIndices");

// Atribuições para CSeqCmdSeqDesc
// CSeqCmdSeqDesc Offsets
CSeqCmdSeqDesc.m_sName = findOffsetByName(j, "CSeqCmdSeqDesc", "m_sName");
CSeqCmdSeqDesc.m_flags = findOffsetByName(j, "CSeqCmdSeqDesc", "m_flags");
CSeqCmdSeqDesc.m_transition = findOffsetByName(j, "CSeqCmdSeqDesc", "m_transition");
CSeqCmdSeqDesc.m_nFrameRangeSequence = findOffsetByName(j, "CSeqCmdSeqDesc", "m_nFrameRangeSequence");
CSeqCmdSeqDesc.m_nFrameCount = findOffsetByName(j, "CSeqCmdSeqDesc", "m_nFrameCount");
CSeqCmdSeqDesc.m_flFPS = findOffsetByName(j, "CSeqCmdSeqDesc", "m_flFPS");
CSeqCmdSeqDesc.m_nSubCycles = findOffsetByName(j, "CSeqCmdSeqDesc", "m_nSubCycles");
CSeqCmdSeqDesc.m_numLocalResults = findOffsetByName(j, "CSeqCmdSeqDesc", "m_numLocalResults");
CSeqCmdSeqDesc.m_cmdLayerArray = findOffsetByName(j, "CSeqCmdSeqDesc", "m_cmdLayerArray");
CSeqCmdSeqDesc.m_eventArray = findOffsetByName(j, "CSeqCmdSeqDesc", "m_eventArray");
CSeqCmdSeqDesc.m_activityArray = findOffsetByName(j, "CSeqCmdSeqDesc", "m_activityArray");
CSeqCmdSeqDesc.m_poseSettingArray = findOffsetByName(j, "CSeqCmdSeqDesc", "m_poseSettingArray");

// Atribuições para CBoneMaskUpdateNode
// CBoneMaskUpdateNode Offsets
CBoneMaskUpdateNode.m_nWeightListIndex = findOffsetByName(j, "CBoneMaskUpdateNode", "m_nWeightListIndex");
CBoneMaskUpdateNode.m_flRootMotionBlend = findOffsetByName(j, "CBoneMaskUpdateNode", "m_flRootMotionBlend");
CBoneMaskUpdateNode.m_blendSpace = findOffsetByName(j, "CBoneMaskUpdateNode", "m_blendSpace");
CBoneMaskUpdateNode.m_footMotionTiming = findOffsetByName(j, "CBoneMaskUpdateNode", "m_footMotionTiming");
CBoneMaskUpdateNode.m_bUseBlendScale = findOffsetByName(j, "CBoneMaskUpdateNode", "m_bUseBlendScale");
CBoneMaskUpdateNode.m_blendValueSource = findOffsetByName(j, "CBoneMaskUpdateNode", "m_blendValueSource");
CBoneMaskUpdateNode.m_hBlendParameter = findOffsetByName(j, "CBoneMaskUpdateNode", "m_hBlendParameter");

// Atribuições para SolveIKChainPoseOpFixedSettings_t
// SolveIKChainPoseOpFixedSettings_t Offsets
SolveIKChainPoseOpFixedSettings_t.m_ChainsToSolveData = findOffsetByName(j, "SolveIKChainPoseOpFixedSettings_t", "m_ChainsToSolveData");

// Atribuições para TwoBoneIKSettings_t
// TwoBoneIKSettings_t Offsets
TwoBoneIKSettings_t.m_endEffectorType = findOffsetByName(j, "TwoBoneIKSettings_t", "m_endEffectorType");
TwoBoneIKSettings_t.m_endEffectorAttachment = findOffsetByName(j, "TwoBoneIKSettings_t", "m_endEffectorAttachment");
TwoBoneIKSettings_t.m_targetType = findOffsetByName(j, "TwoBoneIKSettings_t", "m_targetType");
TwoBoneIKSettings_t.m_targetAttachment = findOffsetByName(j, "TwoBoneIKSettings_t", "m_targetAttachment");
TwoBoneIKSettings_t.m_targetBoneIndex = findOffsetByName(j, "TwoBoneIKSettings_t", "m_targetBoneIndex");
TwoBoneIKSettings_t.m_hPositionParam = findOffsetByName(j, "TwoBoneIKSettings_t", "m_hPositionParam");
TwoBoneIKSettings_t.m_hRotationParam = findOffsetByName(j, "TwoBoneIKSettings_t", "m_hRotationParam");
TwoBoneIKSettings_t.m_bAlwaysUseFallbackHinge = findOffsetByName(j, "TwoBoneIKSettings_t", "m_bAlwaysUseFallbackHinge");
TwoBoneIKSettings_t.m_vLsFallbackHingeAxis = findOffsetByName(j, "TwoBoneIKSettings_t", "m_vLsFallbackHingeAxis");
TwoBoneIKSettings_t.m_nFixedBoneIndex = findOffsetByName(j, "TwoBoneIKSettings_t", "m_nFixedBoneIndex");
TwoBoneIKSettings_t.m_nMiddleBoneIndex = findOffsetByName(j, "TwoBoneIKSettings_t", "m_nMiddleBoneIndex");
TwoBoneIKSettings_t.m_nEndBoneIndex = findOffsetByName(j, "TwoBoneIKSettings_t", "m_nEndBoneIndex");
TwoBoneIKSettings_t.m_bMatchTargetOrientation = findOffsetByName(j, "TwoBoneIKSettings_t", "m_bMatchTargetOrientation");
TwoBoneIKSettings_t.m_bConstrainTwist = findOffsetByName(j, "TwoBoneIKSettings_t", "m_bConstrainTwist");
TwoBoneIKSettings_t.m_flMaxTwist = findOffsetByName(j, "TwoBoneIKSettings_t", "m_flMaxTwist");

// Atribuições para CAnimUpdateSharedData
// CAnimUpdateSharedData Offsets
CAnimUpdateSharedData.m_nodes = findOffsetByName(j, "CAnimUpdateSharedData", "m_nodes");
CAnimUpdateSharedData.m_nodeIndexMap = findOffsetByName(j, "CAnimUpdateSharedData", "m_nodeIndexMap");
CAnimUpdateSharedData.m_components = findOffsetByName(j, "CAnimUpdateSharedData", "m_components");
CAnimUpdateSharedData.m_pParamListUpdater = findOffsetByName(j, "CAnimUpdateSharedData", "m_pParamListUpdater");
CAnimUpdateSharedData.m_pTagManagerUpdater = findOffsetByName(j, "CAnimUpdateSharedData", "m_pTagManagerUpdater");
CAnimUpdateSharedData.m_scriptManager = findOffsetByName(j, "CAnimUpdateSharedData", "m_scriptManager");
CAnimUpdateSharedData.m_settings = findOffsetByName(j, "CAnimUpdateSharedData", "m_settings");
CAnimUpdateSharedData.m_pStaticPoseCache = findOffsetByName(j, "CAnimUpdateSharedData", "m_pStaticPoseCache");
CAnimUpdateSharedData.m_pSkeleton = findOffsetByName(j, "CAnimUpdateSharedData", "m_pSkeleton");
CAnimUpdateSharedData.m_rootNodePath = findOffsetByName(j, "CAnimUpdateSharedData", "m_rootNodePath");

// Atribuições para CAnimAttachment
// CAnimAttachment Offsets
CAnimAttachment.m_influenceRotations = findOffsetByName(j, "CAnimAttachment", "m_influenceRotations");
CAnimAttachment.m_influenceOffsets = findOffsetByName(j, "CAnimAttachment", "m_influenceOffsets");
CAnimAttachment.m_influenceIndices = findOffsetByName(j, "CAnimAttachment", "m_influenceIndices");
CAnimAttachment.m_influenceWeights = findOffsetByName(j, "CAnimAttachment", "m_influenceWeights");
CAnimAttachment.m_numInfluences = findOffsetByName(j, "CAnimAttachment", "m_numInfluences");

// Atribuições para CFootTrajectories
// CFootTrajectories Offsets
CFootTrajectories.m_trajectories = findOffsetByName(j, "CFootTrajectories", "m_trajectories");

// Atribuições para CNmIDComparisonNode__CDefinition
// CNmIDComparisonNode__CDefinition Offsets
CNmIDComparisonNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmIDComparisonNode__CDefinition", "m_nInputValueNodeIdx");
CNmIDComparisonNode__CDefinition.m_comparison = findOffsetByName(j, "CNmIDComparisonNode__CDefinition", "m_comparison");
CNmIDComparisonNode__CDefinition.m_comparisionIDs = findOffsetByName(j, "CNmIDComparisonNode__CDefinition", "m_comparisionIDs");

// Atribuições para CNmConstFloatNode__CDefinition
// CNmConstFloatNode__CDefinition Offsets
CNmConstFloatNode__CDefinition.m_flValue = findOffsetByName(j, "CNmConstFloatNode__CDefinition", "m_flValue");

// Atribuições para CBoolAnimParameter
// CBoolAnimParameter Offsets
CBoolAnimParameter.m_bDefaultValue = findOffsetByName(j, "CBoolAnimParameter", "m_bDefaultValue");

// Atribuições para CRagdollAnimTag
// CRagdollAnimTag Offsets
CRagdollAnimTag.m_nPoseControl = findOffsetByName(j, "CRagdollAnimTag", "m_nPoseControl");
CRagdollAnimTag.m_flFrequency = findOffsetByName(j, "CRagdollAnimTag", "m_flFrequency");
CRagdollAnimTag.m_flDampingRatio = findOffsetByName(j, "CRagdollAnimTag", "m_flDampingRatio");
CRagdollAnimTag.m_flDecayDuration = findOffsetByName(j, "CRagdollAnimTag", "m_flDecayDuration");
CRagdollAnimTag.m_flDecayBias = findOffsetByName(j, "CRagdollAnimTag", "m_flDecayBias");
CRagdollAnimTag.m_bDestroy = findOffsetByName(j, "CRagdollAnimTag", "m_bDestroy");

// Atribuições para CMotionNode
// CMotionNode Offsets
CMotionNode.m_name = findOffsetByName(j, "CMotionNode", "m_name");
CMotionNode.m_id = findOffsetByName(j, "CMotionNode", "m_id");

// Atribuições para CNmStateMachineNode__CDefinition
// CNmStateMachineNode__CDefinition Offsets
CNmStateMachineNode__CDefinition.m_stateDefinitions = findOffsetByName(j, "CNmStateMachineNode__CDefinition", "m_stateDefinitions");
CNmStateMachineNode__CDefinition.m_nDefaultStateIndex = findOffsetByName(j, "CNmStateMachineNode__CDefinition", "m_nDefaultStateIndex");

// Atribuições para CBodyGroupAnimTag
// CBodyGroupAnimTag Offsets
CBodyGroupAnimTag.m_nPriority = findOffsetByName(j, "CBodyGroupAnimTag", "m_nPriority");
CBodyGroupAnimTag.m_bodyGroupSettings = findOffsetByName(j, "CBodyGroupAnimTag", "m_bodyGroupSettings");

// Atribuições para CNmOrientationWarpNode__CDefinition
// CNmOrientationWarpNode__CDefinition Offsets
CNmOrientationWarpNode__CDefinition.m_nClipReferenceNodeIdx = findOffsetByName(j, "CNmOrientationWarpNode__CDefinition", "m_nClipReferenceNodeIdx");
CNmOrientationWarpNode__CDefinition.m_nTargetValueNodeIdx = findOffsetByName(j, "CNmOrientationWarpNode__CDefinition", "m_nTargetValueNodeIdx");
CNmOrientationWarpNode__CDefinition.m_bIsOffsetNode = findOffsetByName(j, "CNmOrientationWarpNode__CDefinition", "m_bIsOffsetNode");
CNmOrientationWarpNode__CDefinition.m_bIsOffsetRelativeToCharacter = findOffsetByName(j, "CNmOrientationWarpNode__CDefinition", "m_bIsOffsetRelativeToCharacter");
CNmOrientationWarpNode__CDefinition.m_samplingMode = findOffsetByName(j, "CNmOrientationWarpNode__CDefinition", "m_samplingMode");

// Atribuições para AnimParamID
// AnimParamID Offsets
AnimParamID.m_id = findOffsetByName(j, "AnimParamID", "m_id");

// Atribuições para CNmBoneMaskNode__CDefinition
// CNmBoneMaskNode__CDefinition Offsets
CNmBoneMaskNode__CDefinition.m_boneMaskID = findOffsetByName(j, "CNmBoneMaskNode__CDefinition", "m_boneMaskID");

// Atribuições para CNmChildGraphNode__CDefinition
// CNmChildGraphNode__CDefinition Offsets
CNmChildGraphNode__CDefinition.m_nChildGraphIdx = findOffsetByName(j, "CNmChildGraphNode__CDefinition", "m_nChildGraphIdx");

// Atribuições para AnimationDecodeDebugDump_t
// AnimationDecodeDebugDump_t Offsets
AnimationDecodeDebugDump_t.m_processingType = findOffsetByName(j, "AnimationDecodeDebugDump_t", "m_processingType");
AnimationDecodeDebugDump_t.m_elems = findOffsetByName(j, "AnimationDecodeDebugDump_t", "m_elems");

// Atribuições para CNmVirtualParameterIDNode__CDefinition
// CNmVirtualParameterIDNode__CDefinition Offsets
CNmVirtualParameterIDNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterIDNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CSeqScaleSet
// CSeqScaleSet Offsets
CSeqScaleSet.m_sName = findOffsetByName(j, "CSeqScaleSet", "m_sName");
CSeqScaleSet.m_bRootOffset = findOffsetByName(j, "CSeqScaleSet", "m_bRootOffset");
CSeqScaleSet.m_vRootOffset = findOffsetByName(j, "CSeqScaleSet", "m_vRootOffset");
CSeqScaleSet.m_nLocalBoneArray = findOffsetByName(j, "CSeqScaleSet", "m_nLocalBoneArray");
CSeqScaleSet.m_flBoneScaleArray = findOffsetByName(j, "CSeqScaleSet", "m_flBoneScaleArray");

// Atribuições para CDirectionalBlendUpdateNode
// CDirectionalBlendUpdateNode Offsets
CDirectionalBlendUpdateNode.m_hSequences = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_hSequences");
CDirectionalBlendUpdateNode.m_damping = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_damping");
CDirectionalBlendUpdateNode.m_blendValueSource = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_blendValueSource");
CDirectionalBlendUpdateNode.m_paramIndex = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_paramIndex");
CDirectionalBlendUpdateNode.m_playbackSpeed = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_playbackSpeed");
CDirectionalBlendUpdateNode.m_duration = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_duration");
CDirectionalBlendUpdateNode.m_bLoop = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_bLoop");
CDirectionalBlendUpdateNode.m_bLockBlendOnReset = findOffsetByName(j, "CDirectionalBlendUpdateNode", "m_bLockBlendOnReset");

// Atribuições para ParamSpan_t
// ParamSpan_t Offsets
ParamSpan_t.m_samples = findOffsetByName(j, "ParamSpan_t", "m_samples");
ParamSpan_t.m_hParam = findOffsetByName(j, "ParamSpan_t", "m_hParam");
ParamSpan_t.m_eParamType = findOffsetByName(j, "ParamSpan_t", "m_eParamType");
ParamSpan_t.m_flStartCycle = findOffsetByName(j, "ParamSpan_t", "m_flStartCycle");
ParamSpan_t.m_flEndCycle = findOffsetByName(j, "ParamSpan_t", "m_flEndCycle");

// Atribuições para CFootStepTriggerUpdateNode
// CFootStepTriggerUpdateNode Offsets
CFootStepTriggerUpdateNode.m_triggers = findOffsetByName(j, "CFootStepTriggerUpdateNode", "m_triggers");
CFootStepTriggerUpdateNode.m_flTolerance = findOffsetByName(j, "CFootStepTriggerUpdateNode", "m_flTolerance");

// Atribuições para IKTargetSettings_t
// IKTargetSettings_t Offsets
IKTargetSettings_t.m_TargetSource = findOffsetByName(j, "IKTargetSettings_t", "m_TargetSource");
IKTargetSettings_t.m_Bone = findOffsetByName(j, "IKTargetSettings_t", "m_Bone");
IKTargetSettings_t.m_AnimgraphParameterNamePosition = findOffsetByName(j, "IKTargetSettings_t", "m_AnimgraphParameterNamePosition");
IKTargetSettings_t.m_AnimgraphParameterNameOrientation = findOffsetByName(j, "IKTargetSettings_t", "m_AnimgraphParameterNameOrientation");
IKTargetSettings_t.m_TargetCoordSystem = findOffsetByName(j, "IKTargetSettings_t", "m_TargetCoordSystem");

// Atribuições para CNmCurrentSyncEventIndexNode__CDefinition
// CNmCurrentSyncEventIndexNode__CDefinition Offsets
CNmCurrentSyncEventIndexNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmCurrentSyncEventIndexNode__CDefinition", "m_nSourceStateNodeIdx");

// Atribuições para CModelConfigElement_SetRenderColor
// CModelConfigElement_SetRenderColor Offsets
CModelConfigElement_SetRenderColor.m_Color = findOffsetByName(j, "CModelConfigElement_SetRenderColor", "m_Color");

// Atribuições para CNmAnimationPoseNode__CDefinition
// CNmAnimationPoseNode__CDefinition Offsets
CNmAnimationPoseNode__CDefinition.m_nPoseTimeValueNodeIdx = findOffsetByName(j, "CNmAnimationPoseNode__CDefinition", "m_nPoseTimeValueNodeIdx");
CNmAnimationPoseNode__CDefinition.m_nDataSlotIdx = findOffsetByName(j, "CNmAnimationPoseNode__CDefinition", "m_nDataSlotIdx");
CNmAnimationPoseNode__CDefinition.m_inputTimeRemapRange = findOffsetByName(j, "CNmAnimationPoseNode__CDefinition", "m_inputTimeRemapRange");
CNmAnimationPoseNode__CDefinition.m_flUserSpecifiedTime = findOffsetByName(j, "CNmAnimationPoseNode__CDefinition", "m_flUserSpecifiedTime");
CNmAnimationPoseNode__CDefinition.m_bUseFramesAsInput = findOffsetByName(j, "CNmAnimationPoseNode__CDefinition", "m_bUseFramesAsInput");

// Atribuições para CMotionSearchDB
// CMotionSearchDB Offsets
CMotionSearchDB.m_rootNode = findOffsetByName(j, "CMotionSearchDB", "m_rootNode");
CMotionSearchDB.m_residualQuantizer = findOffsetByName(j, "CMotionSearchDB", "m_residualQuantizer");
CMotionSearchDB.m_codeIndices = findOffsetByName(j, "CMotionSearchDB", "m_codeIndices");

// Atribuições para CMotionNodeBlend1D
// CMotionNodeBlend1D Offsets
CMotionNodeBlend1D.m_blendItems = findOffsetByName(j, "CMotionNodeBlend1D", "m_blendItems");
CMotionNodeBlend1D.m_nParamIndex = findOffsetByName(j, "CMotionNodeBlend1D", "m_nParamIndex");

// Atribuições para SkeletonBoneBounds_t
// SkeletonBoneBounds_t Offsets
SkeletonBoneBounds_t.m_vecCenter = findOffsetByName(j, "SkeletonBoneBounds_t", "m_vecCenter");
SkeletonBoneBounds_t.m_vecSize = findOffsetByName(j, "SkeletonBoneBounds_t", "m_vecSize");

// Atribuições para CTwoBoneIKUpdateNode
// CTwoBoneIKUpdateNode Offsets
CTwoBoneIKUpdateNode.m_opFixedData = findOffsetByName(j, "CTwoBoneIKUpdateNode", "m_opFixedData");

// Atribuições para VPhysXBodyPart_t
// VPhysXBodyPart_t Offsets
VPhysXBodyPart_t.m_nFlags = findOffsetByName(j, "VPhysXBodyPart_t", "m_nFlags");
VPhysXBodyPart_t.m_flMass = findOffsetByName(j, "VPhysXBodyPart_t", "m_flMass");
VPhysXBodyPart_t.m_rnShape = findOffsetByName(j, "VPhysXBodyPart_t", "m_rnShape");
VPhysXBodyPart_t.m_nCollisionAttributeIndex = findOffsetByName(j, "VPhysXBodyPart_t", "m_nCollisionAttributeIndex");
VPhysXBodyPart_t.m_nReserved = findOffsetByName(j, "VPhysXBodyPart_t", "m_nReserved");
VPhysXBodyPart_t.m_flInertiaScale = findOffsetByName(j, "VPhysXBodyPart_t", "m_flInertiaScale");
VPhysXBodyPart_t.m_flLinearDamping = findOffsetByName(j, "VPhysXBodyPart_t", "m_flLinearDamping");
VPhysXBodyPart_t.m_flAngularDamping = findOffsetByName(j, "VPhysXBodyPart_t", "m_flAngularDamping");
VPhysXBodyPart_t.m_bOverrideMassCenter = findOffsetByName(j, "VPhysXBodyPart_t", "m_bOverrideMassCenter");
VPhysXBodyPart_t.m_vMassCenterOverride = findOffsetByName(j, "VPhysXBodyPart_t", "m_vMassCenterOverride");

// Atribuições para CFollowPathUpdateNode
// CFollowPathUpdateNode Offsets
CFollowPathUpdateNode.m_flBlendOutTime = findOffsetByName(j, "CFollowPathUpdateNode", "m_flBlendOutTime");
CFollowPathUpdateNode.m_bBlockNonPathMovement = findOffsetByName(j, "CFollowPathUpdateNode", "m_bBlockNonPathMovement");
CFollowPathUpdateNode.m_bStopFeetAtGoal = findOffsetByName(j, "CFollowPathUpdateNode", "m_bStopFeetAtGoal");
CFollowPathUpdateNode.m_bScaleSpeed = findOffsetByName(j, "CFollowPathUpdateNode", "m_bScaleSpeed");
CFollowPathUpdateNode.m_flScale = findOffsetByName(j, "CFollowPathUpdateNode", "m_flScale");
CFollowPathUpdateNode.m_flMinAngle = findOffsetByName(j, "CFollowPathUpdateNode", "m_flMinAngle");
CFollowPathUpdateNode.m_flMaxAngle = findOffsetByName(j, "CFollowPathUpdateNode", "m_flMaxAngle");
CFollowPathUpdateNode.m_flSpeedScaleBlending = findOffsetByName(j, "CFollowPathUpdateNode", "m_flSpeedScaleBlending");
CFollowPathUpdateNode.m_turnDamping = findOffsetByName(j, "CFollowPathUpdateNode", "m_turnDamping");
CFollowPathUpdateNode.m_facingTarget = findOffsetByName(j, "CFollowPathUpdateNode", "m_facingTarget");
CFollowPathUpdateNode.m_hParam = findOffsetByName(j, "CFollowPathUpdateNode", "m_hParam");
CFollowPathUpdateNode.m_flTurnToFaceOffset = findOffsetByName(j, "CFollowPathUpdateNode", "m_flTurnToFaceOffset");
CFollowPathUpdateNode.m_bTurnToFace = findOffsetByName(j, "CFollowPathUpdateNode", "m_bTurnToFace");

// Atribuições para AimMatrixOpFixedSettings_t
// AimMatrixOpFixedSettings_t Offsets
AimMatrixOpFixedSettings_t.m_attachment = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_attachment");
AimMatrixOpFixedSettings_t.m_damping = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_damping");
AimMatrixOpFixedSettings_t.m_poseCacheHandles = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_poseCacheHandles");
AimMatrixOpFixedSettings_t.m_eBlendMode = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_eBlendMode");
AimMatrixOpFixedSettings_t.m_flMaxYawAngle = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_flMaxYawAngle");
AimMatrixOpFixedSettings_t.m_flMaxPitchAngle = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_flMaxPitchAngle");
AimMatrixOpFixedSettings_t.m_nSequenceMaxFrame = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_nSequenceMaxFrame");
AimMatrixOpFixedSettings_t.m_nBoneMaskIndex = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_nBoneMaskIndex");
AimMatrixOpFixedSettings_t.m_bTargetIsPosition = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_bTargetIsPosition");
AimMatrixOpFixedSettings_t.m_bUseBiasAndClamp = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_bUseBiasAndClamp");
AimMatrixOpFixedSettings_t.m_flBiasAndClampYawOffset = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampYawOffset");
AimMatrixOpFixedSettings_t.m_flBiasAndClampPitchOffset = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampPitchOffset");
AimMatrixOpFixedSettings_t.m_biasAndClampBlendCurve = findOffsetByName(j, "AimMatrixOpFixedSettings_t", "m_biasAndClampBlendCurve");

// Atribuições para CAnimScriptComponentUpdater
// CAnimScriptComponentUpdater Offsets
CAnimScriptComponentUpdater.m_hScript = findOffsetByName(j, "CAnimScriptComponentUpdater", "m_hScript");

// Atribuições para CRagdollUpdateNode
// CRagdollUpdateNode Offsets
CRagdollUpdateNode.m_nWeightListIndex = findOffsetByName(j, "CRagdollUpdateNode", "m_nWeightListIndex");
CRagdollUpdateNode.m_poseControlMethod = findOffsetByName(j, "CRagdollUpdateNode", "m_poseControlMethod");

// Atribuições para CNmStateEventConditionNode__Condition_t
// CNmStateEventConditionNode__Condition_t Offsets
CNmStateEventConditionNode__Condition_t.m_eventID = findOffsetByName(j, "CNmStateEventConditionNode__Condition_t", "m_eventID");
CNmStateEventConditionNode__Condition_t.m_eventTypeCondition = findOffsetByName(j, "CNmStateEventConditionNode__Condition_t", "m_eventTypeCondition");

// Atribuições para CMaterialAttributeAnimTag
// CMaterialAttributeAnimTag Offsets
CMaterialAttributeAnimTag.m_AttributeName = findOffsetByName(j, "CMaterialAttributeAnimTag", "m_AttributeName");
CMaterialAttributeAnimTag.m_AttributeType = findOffsetByName(j, "CMaterialAttributeAnimTag", "m_AttributeType");
CMaterialAttributeAnimTag.m_flValue = findOffsetByName(j, "CMaterialAttributeAnimTag", "m_flValue");
CMaterialAttributeAnimTag.m_Color = findOffsetByName(j, "CMaterialAttributeAnimTag", "m_Color");

// Atribuições para CNmFootEventConditionNode__CDefinition
// CNmFootEventConditionNode__CDefinition Offsets
CNmFootEventConditionNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmFootEventConditionNode__CDefinition", "m_nSourceStateNodeIdx");
CNmFootEventConditionNode__CDefinition.m_phaseCondition = findOffsetByName(j, "CNmFootEventConditionNode__CDefinition", "m_phaseCondition");
CNmFootEventConditionNode__CDefinition.m_eventConditionRules = findOffsetByName(j, "CNmFootEventConditionNode__CDefinition", "m_eventConditionRules");

// Atribuições para CNmFootEvent
// CNmFootEvent Offsets
CNmFootEvent.m_phase = findOffsetByName(j, "CNmFootEvent", "m_phase");

// Atribuições para CPhysSurfacePropertiesAudio
// CPhysSurfacePropertiesAudio Offsets
CPhysSurfacePropertiesAudio.m_reflectivity = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_reflectivity");
CPhysSurfacePropertiesAudio.m_hardnessFactor = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_hardnessFactor");
CPhysSurfacePropertiesAudio.m_roughnessFactor = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_roughnessFactor");
CPhysSurfacePropertiesAudio.m_roughThreshold = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_roughThreshold");
CPhysSurfacePropertiesAudio.m_hardThreshold = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_hardThreshold");
CPhysSurfacePropertiesAudio.m_hardVelocityThreshold = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_hardVelocityThreshold");
CPhysSurfacePropertiesAudio.m_flStaticImpactVolume = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_flStaticImpactVolume");
CPhysSurfacePropertiesAudio.m_flOcclusionFactor = findOffsetByName(j, "CPhysSurfacePropertiesAudio", "m_flOcclusionFactor");

// Atribuições para CSeqAutoLayer
// CSeqAutoLayer Offsets
CSeqAutoLayer.m_nLocalReference = findOffsetByName(j, "CSeqAutoLayer", "m_nLocalReference");
CSeqAutoLayer.m_nLocalPose = findOffsetByName(j, "CSeqAutoLayer", "m_nLocalPose");
CSeqAutoLayer.m_flags = findOffsetByName(j, "CSeqAutoLayer", "m_flags");
CSeqAutoLayer.m_start = findOffsetByName(j, "CSeqAutoLayer", "m_start");
CSeqAutoLayer.m_peak = findOffsetByName(j, "CSeqAutoLayer", "m_peak");
CSeqAutoLayer.m_tail = findOffsetByName(j, "CSeqAutoLayer", "m_tail");
CSeqAutoLayer.m_end = findOffsetByName(j, "CSeqAutoLayer", "m_end");

// Atribuições para CNmCurrentSyncEventPercentageThroughNode__CDefinition
// CNmCurrentSyncEventPercentageThroughNode__CDefinition Offsets
CNmCurrentSyncEventPercentageThroughNode__CDefinition.m_nSourceStateNodeIdx = findOffsetByName(j, "CNmCurrentSyncEventPercentageThroughNode__CDefinition", "m_nSourceStateNodeIdx");

// Atribuições para PhysSoftbodyDesc_t
// PhysSoftbodyDesc_t Offsets
PhysSoftbodyDesc_t.m_ParticleBoneHash = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_ParticleBoneHash");
PhysSoftbodyDesc_t.m_Particles = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_Particles");
PhysSoftbodyDesc_t.m_Springs = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_Springs");
PhysSoftbodyDesc_t.m_Capsules = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_Capsules");
PhysSoftbodyDesc_t.m_InitPose = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_InitPose");
PhysSoftbodyDesc_t.m_ParticleBoneName = findOffsetByName(j, "PhysSoftbodyDesc_t", "m_ParticleBoneName");

// Atribuições para CAnimSequenceParams
// CAnimSequenceParams Offsets
CAnimSequenceParams.m_flFadeInTime = findOffsetByName(j, "CAnimSequenceParams", "m_flFadeInTime");
CAnimSequenceParams.m_flFadeOutTime = findOffsetByName(j, "CAnimSequenceParams", "m_flFadeOutTime");

// Atribuições para CTargetWarpUpdateNode
// CTargetWarpUpdateNode Offsets
CTargetWarpUpdateNode.m_hPositionParameter = findOffsetByName(j, "CTargetWarpUpdateNode", "m_hPositionParameter");
CTargetWarpUpdateNode.m_hFacePositionParameter = findOffsetByName(j, "CTargetWarpUpdateNode", "m_hFacePositionParameter");

// Atribuições para CNmVirtualParameterBoolNode__CDefinition
// CNmVirtualParameterBoolNode__CDefinition Offsets
CNmVirtualParameterBoolNode__CDefinition.m_nChildNodeIdx = findOffsetByName(j, "CNmVirtualParameterBoolNode__CDefinition", "m_nChildNodeIdx");

// Atribuições para CFollowTargetUpdateNode
// CFollowTargetUpdateNode Offsets
CFollowTargetUpdateNode.m_opFixedData = findOffsetByName(j, "CFollowTargetUpdateNode", "m_opFixedData");
CFollowTargetUpdateNode.m_hParameterPosition = findOffsetByName(j, "CFollowTargetUpdateNode", "m_hParameterPosition");
CFollowTargetUpdateNode.m_hParameterOrientation = findOffsetByName(j, "CFollowTargetUpdateNode", "m_hParameterOrientation");

// Atribuições para CCPPScriptComponentUpdater
// CCPPScriptComponentUpdater Offsets
CCPPScriptComponentUpdater.m_scriptsToRun = findOffsetByName(j, "CCPPScriptComponentUpdater", "m_scriptsToRun");

// Atribuições para CAnimData
// CAnimData Offsets
CAnimData.m_name = findOffsetByName(j, "CAnimData", "m_name");
CAnimData.m_animArray = findOffsetByName(j, "CAnimData", "m_animArray");
CAnimData.m_decoderArray = findOffsetByName(j, "CAnimData", "m_decoderArray");
CAnimData.m_nMaxUniqueFrameIndex = findOffsetByName(j, "CAnimData", "m_nMaxUniqueFrameIndex");
CAnimData.m_segmentArray = findOffsetByName(j, "CAnimData", "m_segmentArray");

// Atribuições para IKSolverSettings_t
// IKSolverSettings_t Offsets
IKSolverSettings_t.m_SolverType = findOffsetByName(j, "IKSolverSettings_t", "m_SolverType");
IKSolverSettings_t.m_nNumIterations = findOffsetByName(j, "IKSolverSettings_t", "m_nNumIterations");
IKSolverSettings_t.m_EndEffectorRotationFixUpMode = findOffsetByName(j, "IKSolverSettings_t", "m_EndEffectorRotationFixUpMode");

// Atribuições para CBinaryUpdateNode
// CBinaryUpdateNode Offsets
CBinaryUpdateNode.m_pChild1 = findOffsetByName(j, "CBinaryUpdateNode", "m_pChild1");
CBinaryUpdateNode.m_pChild2 = findOffsetByName(j, "CBinaryUpdateNode", "m_pChild2");
CBinaryUpdateNode.m_timingBehavior = findOffsetByName(j, "CBinaryUpdateNode", "m_timingBehavior");
CBinaryUpdateNode.m_flTimingBlend = findOffsetByName(j, "CBinaryUpdateNode", "m_flTimingBlend");
CBinaryUpdateNode.m_bResetChild1 = findOffsetByName(j, "CBinaryUpdateNode", "m_bResetChild1");
CBinaryUpdateNode.m_bResetChild2 = findOffsetByName(j, "CBinaryUpdateNode", "m_bResetChild2");

// Atribuições para CNmParameterizedBlendNode__BlendRange_t
// CNmParameterizedBlendNode__BlendRange_t Offsets
CNmParameterizedBlendNode__BlendRange_t.m_nInputIdx0 = findOffsetByName(j, "CNmParameterizedBlendNode__BlendRange_t", "m_nInputIdx0");
CNmParameterizedBlendNode__BlendRange_t.m_nInputIdx1 = findOffsetByName(j, "CNmParameterizedBlendNode__BlendRange_t", "m_nInputIdx1");
CNmParameterizedBlendNode__BlendRange_t.m_parameterValueRange = findOffsetByName(j, "CNmParameterizedBlendNode__BlendRange_t", "m_parameterValueRange");

// Atribuições para CAnimKeyData
// CAnimKeyData Offsets
CAnimKeyData.m_name = findOffsetByName(j, "CAnimKeyData", "m_name");
CAnimKeyData.m_boneArray = findOffsetByName(j, "CAnimKeyData", "m_boneArray");
CAnimKeyData.m_userArray = findOffsetByName(j, "CAnimKeyData", "m_userArray");
CAnimKeyData.m_morphArray = findOffsetByName(j, "CAnimKeyData", "m_morphArray");
CAnimKeyData.m_nChannelElements = findOffsetByName(j, "CAnimKeyData", "m_nChannelElements");
CAnimKeyData.m_dataChannelArray = findOffsetByName(j, "CAnimKeyData", "m_dataChannelArray");

// Atribuições para AttachmentHandle_t
// AttachmentHandle_t Offsets
AttachmentHandle_t.m_Value = findOffsetByName(j, "AttachmentHandle_t", "m_Value");

// Atribuições para CAnimMorphDifference
// CAnimMorphDifference Offsets
CAnimMorphDifference.m_name = findOffsetByName(j, "CAnimMorphDifference", "m_name");

// Atribuições para FootFixedData_t
// FootFixedData_t Offsets
FootFixedData_t.m_vToeOffset = findOffsetByName(j, "FootFixedData_t", "m_vToeOffset");
FootFixedData_t.m_vHeelOffset = findOffsetByName(j, "FootFixedData_t", "m_vHeelOffset");
FootFixedData_t.m_nTargetBoneIndex = findOffsetByName(j, "FootFixedData_t", "m_nTargetBoneIndex");
FootFixedData_t.m_nAnkleBoneIndex = findOffsetByName(j, "FootFixedData_t", "m_nAnkleBoneIndex");
FootFixedData_t.m_nIKAnchorBoneIndex = findOffsetByName(j, "FootFixedData_t", "m_nIKAnchorBoneIndex");
FootFixedData_t.m_ikChainIndex = findOffsetByName(j, "FootFixedData_t", "m_ikChainIndex");
FootFixedData_t.m_flMaxIKLength = findOffsetByName(j, "FootFixedData_t", "m_flMaxIKLength");
FootFixedData_t.m_nFootIndex = findOffsetByName(j, "FootFixedData_t", "m_nFootIndex");
FootFixedData_t.m_nTagIndex = findOffsetByName(j, "FootFixedData_t", "m_nTagIndex");
FootFixedData_t.m_flMaxRotationLeft = findOffsetByName(j, "FootFixedData_t", "m_flMaxRotationLeft");
FootFixedData_t.m_flMaxRotationRight = findOffsetByName(j, "FootFixedData_t", "m_flMaxRotationRight");

// Atribuições para CMotionGraphGroup
// CMotionGraphGroup Offsets
CMotionGraphGroup.m_searchDB = findOffsetByName(j, "CMotionGraphGroup", "m_searchDB");
CMotionGraphGroup.m_motionGraphs = findOffsetByName(j, "CMotionGraphGroup", "m_motionGraphs");
CMotionGraphGroup.m_motionGraphConfigs = findOffsetByName(j, "CMotionGraphGroup", "m_motionGraphConfigs");
CMotionGraphGroup.m_sampleToConfig = findOffsetByName(j, "CMotionGraphGroup", "m_sampleToConfig");
CMotionGraphGroup.m_hIsActiveScript = findOffsetByName(j, "CMotionGraphGroup", "m_hIsActiveScript");

// Atribuições para CNmVectorNegateNode__CDefinition
// CNmVectorNegateNode__CDefinition Offsets
CNmVectorNegateNode__CDefinition.m_nInputValueNodeIdx = findOffsetByName(j, "CNmVectorNegateNode__CDefinition", "m_nInputValueNodeIdx");

// Atribuições para CNmSyncTrack__Event_t
// CNmSyncTrack__Event_t Offsets
CNmSyncTrack__Event_t.m_ID = findOffsetByName(j, "CNmSyncTrack__Event_t", "m_ID");
CNmSyncTrack__Event_t.m_startTime = findOffsetByName(j, "CNmSyncTrack__Event_t", "m_startTime");
CNmSyncTrack__Event_t.m_duration = findOffsetByName(j, "CNmSyncTrack__Event_t", "m_duration");

// Atribuições para CNmTarget
// CNmTarget Offsets
CNmTarget.m_transform = findOffsetByName(j, "CNmTarget", "m_transform");
CNmTarget.m_boneID = findOffsetByName(j, "CNmTarget", "m_boneID");
CNmTarget.m_bIsBoneTarget = findOffsetByName(j, "CNmTarget", "m_bIsBoneTarget");
CNmTarget.m_bIsUsingBoneSpaceOffsets = findOffsetByName(j, "CNmTarget", "m_bIsUsingBoneSpaceOffsets");
CNmTarget.m_bHasOffsets = findOffsetByName(j, "CNmTarget", "m_bHasOffsets");
CNmTarget.m_bIsSet = findOffsetByName(j, "CNmTarget", "m_bIsSet");

// Atribuições para CWayPointHelperUpdateNode
// CWayPointHelperUpdateNode Offsets
CWayPointHelperUpdateNode.m_flStartCycle = findOffsetByName(j, "CWayPointHelperUpdateNode", "m_flStartCycle");
CWayPointHelperUpdateNode.m_flEndCycle = findOffsetByName(j, "CWayPointHelperUpdateNode", "m_flEndCycle");
CWayPointHelperUpdateNode.m_bOnlyGoals = findOffsetByName(j, "CWayPointHelperUpdateNode", "m_bOnlyGoals");
CWayPointHelperUpdateNode.m_bPreventOvershoot = findOffsetByName(j, "CWayPointHelperUpdateNode", "m_bPreventOvershoot");
CWayPointHelperUpdateNode.m_bPreventUndershoot = findOffsetByName(j, "CWayPointHelperUpdateNode", "m_bPreventUndershoot");

// Atribuições para CMoodVData
// CMoodVData Offsets
CMoodVData.m_sModelName = findOffsetByName(j, "CMoodVData", "m_sModelName");
CMoodVData.m_nMoodType = findOffsetByName(j, "CMoodVData", "m_nMoodType");
CMoodVData.m_animationLayers = findOffsetByName(j, "CMoodVData", "m_animationLayers");

// Atribuições para CModelConfigElement_AttachedModel
// CModelConfigElement_AttachedModel Offsets
CModelConfigElement_AttachedModel.m_InstanceName = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_InstanceName");
CModelConfigElement_AttachedModel.m_EntityClass = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_EntityClass");
CModelConfigElement_AttachedModel.m_hModel = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_hModel");
CModelConfigElement_AttachedModel.m_vOffset = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_vOffset");
CModelConfigElement_AttachedModel.m_aAngOffset = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_aAngOffset");
CModelConfigElement_AttachedModel.m_AttachmentName = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_AttachmentName");
CModelConfigElement_AttachedModel.m_LocalAttachmentOffsetName = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_LocalAttachmentOffsetName");
CModelConfigElement_AttachedModel.m_AttachmentType = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_AttachmentType");
CModelConfigElement_AttachedModel.m_bBoneMergeFlex = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_bBoneMergeFlex");
CModelConfigElement_AttachedModel.m_bUserSpecifiedColor = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedColor");
CModelConfigElement_AttachedModel.m_bUserSpecifiedMaterialGroup = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedMaterialGroup");
CModelConfigElement_AttachedModel.m_bAcceptParentMaterialDrivenDecals = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_bAcceptParentMaterialDrivenDecals");
CModelConfigElement_AttachedModel.m_BodygroupOnOtherModels = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_BodygroupOnOtherModels");
CModelConfigElement_AttachedModel.m_MaterialGroupOnOtherModels = findOffsetByName(j, "CModelConfigElement_AttachedModel", "m_MaterialGroupOnOtherModels");

// Atribuições para CAnimTagManagerUpdater
// CAnimTagManagerUpdater Offsets
CAnimTagManagerUpdater.m_tags = findOffsetByName(j, "CAnimTagManagerUpdater", "m_tags");

// Atribuições para buttons
// buttons Offsets
buttons.attack = findOffsetByName(j, "buttons", "attack");
buttons.attack2 = findOffsetByName(j, "buttons", "attack2");
buttons.back = findOffsetByName(j, "buttons", "back");
buttons.duck = findOffsetByName(j, "buttons", "duck");
buttons.forward = findOffsetByName(j, "buttons", "forward");
buttons.jump = findOffsetByName(j, "buttons", "jump");
buttons.left = findOffsetByName(j, "buttons", "left");
buttons.lookatweapon = findOffsetByName(j, "buttons", "lookatweapon");
buttons.reload = findOffsetByName(j, "buttons", "reload");
buttons.right = findOffsetByName(j, "buttons", "right");
buttons.showscores = findOffsetByName(j, "buttons", "showscores");
buttons.sprint = findOffsetByName(j, "buttons", "sprint");
buttons.turnleft = findOffsetByName(j, "buttons", "turnleft");
buttons.turnright = findOffsetByName(j, "buttons", "turnright");
buttons.use = findOffsetByName(j, "buttons", "use");
buttons.zoom = findOffsetByName(j, "buttons", "zoom");

// Atribuições para CCSPlayer_MovementServices
// CCSPlayer_MovementServices Offsets
CCSPlayer_MovementServices.m_vecLadderNormal = findOffsetByName(j, "CCSPlayer_MovementServices", "m_vecLadderNormal");
CCSPlayer_MovementServices.m_nLadderSurfacePropIndex = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex");
CCSPlayer_MovementServices.m_flDuckAmount = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flDuckAmount");
CCSPlayer_MovementServices.m_flDuckSpeed = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flDuckSpeed");
CCSPlayer_MovementServices.m_bDuckOverride = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bDuckOverride");
CCSPlayer_MovementServices.m_bDesiresDuck = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bDesiresDuck");
CCSPlayer_MovementServices.m_flDuckOffset = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flDuckOffset");
CCSPlayer_MovementServices.m_nDuckTimeMsecs = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs");
CCSPlayer_MovementServices.m_nDuckJumpTimeMsecs = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs");
CCSPlayer_MovementServices.m_nJumpTimeMsecs = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs");
CCSPlayer_MovementServices.m_flLastDuckTime = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flLastDuckTime");
CCSPlayer_MovementServices.m_vecLastPositionAtFullCrouchSpeed = findOffsetByName(j, "CCSPlayer_MovementServices", "m_vecLastPositionAtFullCrouchSpeed");
CCSPlayer_MovementServices.m_duckUntilOnGround = findOffsetByName(j, "CCSPlayer_MovementServices", "m_duckUntilOnGround");
CCSPlayer_MovementServices.m_bHasWalkMovedSinceLastJump = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bHasWalkMovedSinceLastJump");
CCSPlayer_MovementServices.m_bInStuckTest = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bInStuckTest");
CCSPlayer_MovementServices.m_flStuckCheckTime = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flStuckCheckTime");
CCSPlayer_MovementServices.m_nTraceCount = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nTraceCount");
CCSPlayer_MovementServices.m_StuckLast = findOffsetByName(j, "CCSPlayer_MovementServices", "m_StuckLast");
CCSPlayer_MovementServices.m_bSpeedCropped = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bSpeedCropped");
CCSPlayer_MovementServices.m_flGroundMoveEfficiency = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flGroundMoveEfficiency");
CCSPlayer_MovementServices.m_nOldWaterLevel = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nOldWaterLevel");
CCSPlayer_MovementServices.m_flWaterEntryTime = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flWaterEntryTime");
CCSPlayer_MovementServices.m_vecForward = findOffsetByName(j, "CCSPlayer_MovementServices", "m_vecForward");
CCSPlayer_MovementServices.m_vecLeft = findOffsetByName(j, "CCSPlayer_MovementServices", "m_vecLeft");
CCSPlayer_MovementServices.m_vecUp = findOffsetByName(j, "CCSPlayer_MovementServices", "m_vecUp");
CCSPlayer_MovementServices.m_nGameCodeHasMovedPlayerAfterCommand = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nGameCodeHasMovedPlayerAfterCommand");
CCSPlayer_MovementServices.m_bOldJumpPressed = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bOldJumpPressed");
CCSPlayer_MovementServices.m_flJumpPressedTime = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flJumpPressedTime");
CCSPlayer_MovementServices.m_fStashGrenadeParameterWhen = findOffsetByName(j, "CCSPlayer_MovementServices", "m_fStashGrenadeParameterWhen");
CCSPlayer_MovementServices.m_nButtonDownMaskPrev = findOffsetByName(j, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev");
CCSPlayer_MovementServices.m_flOffsetTickCompleteTime = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime");
CCSPlayer_MovementServices.m_flOffsetTickStashedSpeed = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed");
CCSPlayer_MovementServices.m_flStamina = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flStamina");
CCSPlayer_MovementServices.m_flHeightAtJumpStart = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flHeightAtJumpStart");
CCSPlayer_MovementServices.m_flMaxJumpHeightThisJump = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flMaxJumpHeightThisJump");
CCSPlayer_MovementServices.m_flMaxJumpHeightLastJump = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flMaxJumpHeightLastJump");
CCSPlayer_MovementServices.m_flStaminaAtJumpStart = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flStaminaAtJumpStart");
CCSPlayer_MovementServices.m_flAccumulatedJumpError = findOffsetByName(j, "CCSPlayer_MovementServices", "m_flAccumulatedJumpError");
CCSPlayer_MovementServices.m_bMadeFootstepNoise = findOffsetByName(j, "CCSPlayer_MovementServices", "m_bMadeFootstepNoise");
CCSPlayer_MovementServices.m_iFootsteps = findOffsetByName(j, "CCSPlayer_MovementServices", "m_iFootsteps");

// Atribuições para sky3dparams_t
// sky3dparams_t Offsets
sky3dparams_t.scale = findOffsetByName(j, "sky3dparams_t", "scale");
sky3dparams_t.origin = findOffsetByName(j, "sky3dparams_t", "origin");
sky3dparams_t.bClip3DSkyBoxNearToWorldFar = findOffsetByName(j, "sky3dparams_t", "bClip3DSkyBoxNearToWorldFar");
sky3dparams_t.flClip3DSkyBoxNearToWorldFarOffset = findOffsetByName(j, "sky3dparams_t", "flClip3DSkyBoxNearToWorldFarOffset");
sky3dparams_t.fog = findOffsetByName(j, "sky3dparams_t", "fog");
sky3dparams_t.m_nWorldGroupID = findOffsetByName(j, "sky3dparams_t", "m_nWorldGroupID");

// Atribuições para C_Item
// C_Item Offsets
C_Item.m_pReticleHintTextName = findOffsetByName(j, "C_Item", "m_pReticleHintTextName");

// Atribuições para C_SoundEventPathCornerEntity
// C_SoundEventPathCornerEntity Offsets
C_SoundEventPathCornerEntity.m_vecCornerPairsNetworked = findOffsetByName(j, "C_SoundEventPathCornerEntity", "m_vecCornerPairsNetworked");

// Atribuições para C_CSGameRules
// C_CSGameRules Offsets
C_CSGameRules.m_bFreezePeriod = findOffsetByName(j, "C_CSGameRules", "m_bFreezePeriod");
C_CSGameRules.m_bWarmupPeriod = findOffsetByName(j, "C_CSGameRules", "m_bWarmupPeriod");
C_CSGameRules.m_fWarmupPeriodEnd = findOffsetByName(j, "C_CSGameRules", "m_fWarmupPeriodEnd");
C_CSGameRules.m_fWarmupPeriodStart = findOffsetByName(j, "C_CSGameRules", "m_fWarmupPeriodStart");
C_CSGameRules.m_bServerPaused = findOffsetByName(j, "C_CSGameRules", "m_bServerPaused");
C_CSGameRules.m_bTerroristTimeOutActive = findOffsetByName(j, "C_CSGameRules", "m_bTerroristTimeOutActive");
C_CSGameRules.m_bCTTimeOutActive = findOffsetByName(j, "C_CSGameRules", "m_bCTTimeOutActive");
C_CSGameRules.m_flTerroristTimeOutRemaining = findOffsetByName(j, "C_CSGameRules", "m_flTerroristTimeOutRemaining");
C_CSGameRules.m_flCTTimeOutRemaining = findOffsetByName(j, "C_CSGameRules", "m_flCTTimeOutRemaining");
C_CSGameRules.m_nTerroristTimeOuts = findOffsetByName(j, "C_CSGameRules", "m_nTerroristTimeOuts");
C_CSGameRules.m_nCTTimeOuts = findOffsetByName(j, "C_CSGameRules", "m_nCTTimeOuts");
C_CSGameRules.m_bTechnicalTimeOut = findOffsetByName(j, "C_CSGameRules", "m_bTechnicalTimeOut");
C_CSGameRules.m_bMatchWaitingForResume = findOffsetByName(j, "C_CSGameRules", "m_bMatchWaitingForResume");
C_CSGameRules.m_iRoundTime = findOffsetByName(j, "C_CSGameRules", "m_iRoundTime");
C_CSGameRules.m_fMatchStartTime = findOffsetByName(j, "C_CSGameRules", "m_fMatchStartTime");
C_CSGameRules.m_fRoundStartTime = findOffsetByName(j, "C_CSGameRules", "m_fRoundStartTime");
C_CSGameRules.m_flRestartRoundTime = findOffsetByName(j, "C_CSGameRules", "m_flRestartRoundTime");
C_CSGameRules.m_bGameRestart = findOffsetByName(j, "C_CSGameRules", "m_bGameRestart");
C_CSGameRules.m_flGameStartTime = findOffsetByName(j, "C_CSGameRules", "m_flGameStartTime");
C_CSGameRules.m_timeUntilNextPhaseStarts = findOffsetByName(j, "C_CSGameRules", "m_timeUntilNextPhaseStarts");
C_CSGameRules.m_gamePhase = findOffsetByName(j, "C_CSGameRules", "m_gamePhase");
C_CSGameRules.m_totalRoundsPlayed = findOffsetByName(j, "C_CSGameRules", "m_totalRoundsPlayed");
C_CSGameRules.m_nRoundsPlayedThisPhase = findOffsetByName(j, "C_CSGameRules", "m_nRoundsPlayedThisPhase");
C_CSGameRules.m_nOvertimePlaying = findOffsetByName(j, "C_CSGameRules", "m_nOvertimePlaying");
C_CSGameRules.m_iHostagesRemaining = findOffsetByName(j, "C_CSGameRules", "m_iHostagesRemaining");
C_CSGameRules.m_bAnyHostageReached = findOffsetByName(j, "C_CSGameRules", "m_bAnyHostageReached");
C_CSGameRules.m_bMapHasBombTarget = findOffsetByName(j, "C_CSGameRules", "m_bMapHasBombTarget");
C_CSGameRules.m_bMapHasRescueZone = findOffsetByName(j, "C_CSGameRules", "m_bMapHasRescueZone");
C_CSGameRules.m_bMapHasBuyZone = findOffsetByName(j, "C_CSGameRules", "m_bMapHasBuyZone");
C_CSGameRules.m_bIsQueuedMatchmaking = findOffsetByName(j, "C_CSGameRules", "m_bIsQueuedMatchmaking");
C_CSGameRules.m_nQueuedMatchmakingMode = findOffsetByName(j, "C_CSGameRules", "m_nQueuedMatchmakingMode");
C_CSGameRules.m_bIsValveDS = findOffsetByName(j, "C_CSGameRules", "m_bIsValveDS");
C_CSGameRules.m_bLogoMap = findOffsetByName(j, "C_CSGameRules", "m_bLogoMap");
C_CSGameRules.m_bPlayAllStepSoundsOnServer = findOffsetByName(j, "C_CSGameRules", "m_bPlayAllStepSoundsOnServer");
C_CSGameRules.m_iSpectatorSlotCount = findOffsetByName(j, "C_CSGameRules", "m_iSpectatorSlotCount");
C_CSGameRules.m_MatchDevice = findOffsetByName(j, "C_CSGameRules", "m_MatchDevice");
C_CSGameRules.m_bHasMatchStarted = findOffsetByName(j, "C_CSGameRules", "m_bHasMatchStarted");
C_CSGameRules.m_nNextMapInMapgroup = findOffsetByName(j, "C_CSGameRules", "m_nNextMapInMapgroup");
C_CSGameRules.m_szTournamentEventName = findOffsetByName(j, "C_CSGameRules", "m_szTournamentEventName");
C_CSGameRules.m_szTournamentEventStage = findOffsetByName(j, "C_CSGameRules", "m_szTournamentEventStage");
C_CSGameRules.m_szMatchStatTxt = findOffsetByName(j, "C_CSGameRules", "m_szMatchStatTxt");
C_CSGameRules.m_szTournamentPredictionsTxt = findOffsetByName(j, "C_CSGameRules", "m_szTournamentPredictionsTxt");
C_CSGameRules.m_nTournamentPredictionsPct = findOffsetByName(j, "C_CSGameRules", "m_nTournamentPredictionsPct");
C_CSGameRules.m_flCMMItemDropRevealStartTime = findOffsetByName(j, "C_CSGameRules", "m_flCMMItemDropRevealStartTime");
C_CSGameRules.m_flCMMItemDropRevealEndTime = findOffsetByName(j, "C_CSGameRules", "m_flCMMItemDropRevealEndTime");
C_CSGameRules.m_bIsDroppingItems = findOffsetByName(j, "C_CSGameRules", "m_bIsDroppingItems");
C_CSGameRules.m_bIsQuestEligible = findOffsetByName(j, "C_CSGameRules", "m_bIsQuestEligible");
C_CSGameRules.m_bIsHltvActive = findOffsetByName(j, "C_CSGameRules", "m_bIsHltvActive");
C_CSGameRules.m_arrProhibitedItemIndices = findOffsetByName(j, "C_CSGameRules", "m_arrProhibitedItemIndices");
C_CSGameRules.m_arrTournamentActiveCasterAccounts = findOffsetByName(j, "C_CSGameRules", "m_arrTournamentActiveCasterAccounts");
C_CSGameRules.m_numBestOfMaps = findOffsetByName(j, "C_CSGameRules", "m_numBestOfMaps");
C_CSGameRules.m_nHalloweenMaskListSeed = findOffsetByName(j, "C_CSGameRules", "m_nHalloweenMaskListSeed");
C_CSGameRules.m_bBombDropped = findOffsetByName(j, "C_CSGameRules", "m_bBombDropped");
C_CSGameRules.m_bBombPlanted = findOffsetByName(j, "C_CSGameRules", "m_bBombPlanted");
C_CSGameRules.m_iRoundWinStatus = findOffsetByName(j, "C_CSGameRules", "m_iRoundWinStatus");
C_CSGameRules.m_eRoundWinReason = findOffsetByName(j, "C_CSGameRules", "m_eRoundWinReason");
C_CSGameRules.m_bTCantBuy = findOffsetByName(j, "C_CSGameRules", "m_bTCantBuy");
C_CSGameRules.m_bCTCantBuy = findOffsetByName(j, "C_CSGameRules", "m_bCTCantBuy");
C_CSGameRules.m_iMatchStats_RoundResults = findOffsetByName(j, "C_CSGameRules", "m_iMatchStats_RoundResults");
C_CSGameRules.m_iMatchStats_PlayersAlive_CT = findOffsetByName(j, "C_CSGameRules", "m_iMatchStats_PlayersAlive_CT");
C_CSGameRules.m_iMatchStats_PlayersAlive_T = findOffsetByName(j, "C_CSGameRules", "m_iMatchStats_PlayersAlive_T");
C_CSGameRules.m_TeamRespawnWaveTimes = findOffsetByName(j, "C_CSGameRules", "m_TeamRespawnWaveTimes");
C_CSGameRules.m_flNextRespawnWave = findOffsetByName(j, "C_CSGameRules", "m_flNextRespawnWave");
C_CSGameRules.m_nServerQuestID = findOffsetByName(j, "C_CSGameRules", "m_nServerQuestID");
C_CSGameRules.m_vMinimapMins = findOffsetByName(j, "C_CSGameRules", "m_vMinimapMins");
C_CSGameRules.m_vMinimapMaxs = findOffsetByName(j, "C_CSGameRules", "m_vMinimapMaxs");
C_CSGameRules.m_MinimapVerticalSectionHeights = findOffsetByName(j, "C_CSGameRules", "m_MinimapVerticalSectionHeights");
C_CSGameRules.m_bSpawnedTerrorHuntHeavy = findOffsetByName(j, "C_CSGameRules", "m_bSpawnedTerrorHuntHeavy");
C_CSGameRules.m_nEndMatchMapGroupVoteTypes = findOffsetByName(j, "C_CSGameRules", "m_nEndMatchMapGroupVoteTypes");
C_CSGameRules.m_nEndMatchMapGroupVoteOptions = findOffsetByName(j, "C_CSGameRules", "m_nEndMatchMapGroupVoteOptions");
C_CSGameRules.m_nEndMatchMapVoteWinner = findOffsetByName(j, "C_CSGameRules", "m_nEndMatchMapVoteWinner");
C_CSGameRules.m_iNumConsecutiveCTLoses = findOffsetByName(j, "C_CSGameRules", "m_iNumConsecutiveCTLoses");
C_CSGameRules.m_iNumConsecutiveTerroristLoses = findOffsetByName(j, "C_CSGameRules", "m_iNumConsecutiveTerroristLoses");
C_CSGameRules.m_bMarkClientStopRecordAtRoundEnd = findOffsetByName(j, "C_CSGameRules", "m_bMarkClientStopRecordAtRoundEnd");
C_CSGameRules.m_nMatchAbortedEarlyReason = findOffsetByName(j, "C_CSGameRules", "m_nMatchAbortedEarlyReason");
C_CSGameRules.m_bHasTriggeredRoundStartMusic = findOffsetByName(j, "C_CSGameRules", "m_bHasTriggeredRoundStartMusic");
C_CSGameRules.m_bSwitchingTeamsAtRoundReset = findOffsetByName(j, "C_CSGameRules", "m_bSwitchingTeamsAtRoundReset");
C_CSGameRules.m_pGameModeRules = findOffsetByName(j, "C_CSGameRules", "m_pGameModeRules");
C_CSGameRules.m_RetakeRules = findOffsetByName(j, "C_CSGameRules", "m_RetakeRules");
C_CSGameRules.m_nMatchEndCount = findOffsetByName(j, "C_CSGameRules", "m_nMatchEndCount");
C_CSGameRules.m_nTTeamIntroVariant = findOffsetByName(j, "C_CSGameRules", "m_nTTeamIntroVariant");
C_CSGameRules.m_nCTTeamIntroVariant = findOffsetByName(j, "C_CSGameRules", "m_nCTTeamIntroVariant");
C_CSGameRules.m_bTeamIntroPeriod = findOffsetByName(j, "C_CSGameRules", "m_bTeamIntroPeriod");
C_CSGameRules.m_iRoundEndWinnerTeam = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndWinnerTeam");
C_CSGameRules.m_eRoundEndReason = findOffsetByName(j, "C_CSGameRules", "m_eRoundEndReason");
C_CSGameRules.m_bRoundEndShowTimerDefend = findOffsetByName(j, "C_CSGameRules", "m_bRoundEndShowTimerDefend");
C_CSGameRules.m_iRoundEndTimerTime = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndTimerTime");
C_CSGameRules.m_sRoundEndFunFactToken = findOffsetByName(j, "C_CSGameRules", "m_sRoundEndFunFactToken");
C_CSGameRules.m_iRoundEndFunFactPlayerSlot = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndFunFactPlayerSlot");
C_CSGameRules.m_iRoundEndFunFactData1 = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndFunFactData1");
C_CSGameRules.m_iRoundEndFunFactData2 = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndFunFactData2");
C_CSGameRules.m_iRoundEndFunFactData3 = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndFunFactData3");
C_CSGameRules.m_sRoundEndMessage = findOffsetByName(j, "C_CSGameRules", "m_sRoundEndMessage");
C_CSGameRules.m_iRoundEndPlayerCount = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndPlayerCount");
C_CSGameRules.m_bRoundEndNoMusic = findOffsetByName(j, "C_CSGameRules", "m_bRoundEndNoMusic");
C_CSGameRules.m_iRoundEndLegacy = findOffsetByName(j, "C_CSGameRules", "m_iRoundEndLegacy");
C_CSGameRules.m_nRoundEndCount = findOffsetByName(j, "C_CSGameRules", "m_nRoundEndCount");
C_CSGameRules.m_iRoundStartRoundNumber = findOffsetByName(j, "C_CSGameRules", "m_iRoundStartRoundNumber");
C_CSGameRules.m_nRoundStartCount = findOffsetByName(j, "C_CSGameRules", "m_nRoundStartCount");
C_CSGameRules.m_flLastPerfSampleTime = findOffsetByName(j, "C_CSGameRules", "m_flLastPerfSampleTime");

// Atribuições para CBodyComponentSkeletonInstance
// CBodyComponentSkeletonInstance Offsets
CBodyComponentSkeletonInstance.m_skeletonInstance = findOffsetByName(j, "CBodyComponentSkeletonInstance", "m_skeletonInstance");

// Atribuições para C_BaseModelEntity
// C_BaseModelEntity Offsets
C_BaseModelEntity.m_CRenderComponent = findOffsetByName(j, "C_BaseModelEntity", "m_CRenderComponent");
C_BaseModelEntity.m_CHitboxComponent = findOffsetByName(j, "C_BaseModelEntity", "m_CHitboxComponent");
C_BaseModelEntity.m_LastHitGroup = findOffsetByName(j, "C_BaseModelEntity", "m_LastHitGroup");
C_BaseModelEntity.m_bInitModelEffects = findOffsetByName(j, "C_BaseModelEntity", "m_bInitModelEffects");
C_BaseModelEntity.m_bIsStaticProp = findOffsetByName(j, "C_BaseModelEntity", "m_bIsStaticProp");
C_BaseModelEntity.m_nLastAddDecal = findOffsetByName(j, "C_BaseModelEntity", "m_nLastAddDecal");
C_BaseModelEntity.m_nDecalsAdded = findOffsetByName(j, "C_BaseModelEntity", "m_nDecalsAdded");
C_BaseModelEntity.m_iOldHealth = findOffsetByName(j, "C_BaseModelEntity", "m_iOldHealth");
C_BaseModelEntity.m_nRenderMode = findOffsetByName(j, "C_BaseModelEntity", "m_nRenderMode");
C_BaseModelEntity.m_nRenderFX = findOffsetByName(j, "C_BaseModelEntity", "m_nRenderFX");
C_BaseModelEntity.m_bAllowFadeInView = findOffsetByName(j, "C_BaseModelEntity", "m_bAllowFadeInView");
C_BaseModelEntity.m_clrRender = findOffsetByName(j, "C_BaseModelEntity", "m_clrRender");
C_BaseModelEntity.m_vecRenderAttributes = findOffsetByName(j, "C_BaseModelEntity", "m_vecRenderAttributes");
C_BaseModelEntity.m_bRenderToCubemaps = findOffsetByName(j, "C_BaseModelEntity", "m_bRenderToCubemaps");
C_BaseModelEntity.m_bNoInterpolate = findOffsetByName(j, "C_BaseModelEntity", "m_bNoInterpolate");
C_BaseModelEntity.m_Collision = findOffsetByName(j, "C_BaseModelEntity", "m_Collision");
C_BaseModelEntity.m_Glow = findOffsetByName(j, "C_BaseModelEntity", "m_Glow");
C_BaseModelEntity.m_flGlowBackfaceMult = findOffsetByName(j, "C_BaseModelEntity", "m_flGlowBackfaceMult");
C_BaseModelEntity.m_fadeMinDist = findOffsetByName(j, "C_BaseModelEntity", "m_fadeMinDist");
C_BaseModelEntity.m_fadeMaxDist = findOffsetByName(j, "C_BaseModelEntity", "m_fadeMaxDist");
C_BaseModelEntity.m_flFadeScale = findOffsetByName(j, "C_BaseModelEntity", "m_flFadeScale");
C_BaseModelEntity.m_flShadowStrength = findOffsetByName(j, "C_BaseModelEntity", "m_flShadowStrength");
C_BaseModelEntity.m_nObjectCulling = findOffsetByName(j, "C_BaseModelEntity", "m_nObjectCulling");
C_BaseModelEntity.m_nAddDecal = findOffsetByName(j, "C_BaseModelEntity", "m_nAddDecal");
C_BaseModelEntity.m_vDecalPosition = findOffsetByName(j, "C_BaseModelEntity", "m_vDecalPosition");
C_BaseModelEntity.m_vDecalForwardAxis = findOffsetByName(j, "C_BaseModelEntity", "m_vDecalForwardAxis");
C_BaseModelEntity.m_flDecalHealBloodRate = findOffsetByName(j, "C_BaseModelEntity", "m_flDecalHealBloodRate");
C_BaseModelEntity.m_flDecalHealHeightRate = findOffsetByName(j, "C_BaseModelEntity", "m_flDecalHealHeightRate");
C_BaseModelEntity.m_ConfigEntitiesToPropagateMaterialDecalsTo = findOffsetByName(j, "C_BaseModelEntity", "m_ConfigEntitiesToPropagateMaterialDecalsTo");
C_BaseModelEntity.m_vecViewOffset = findOffsetByName(j, "C_BaseModelEntity", "m_vecViewOffset");
C_BaseModelEntity.m_pClientAlphaProperty = findOffsetByName(j, "C_BaseModelEntity", "m_pClientAlphaProperty");
C_BaseModelEntity.m_ClientOverrideTint = findOffsetByName(j, "C_BaseModelEntity", "m_ClientOverrideTint");
C_BaseModelEntity.m_bUseClientOverrideTint = findOffsetByName(j, "C_BaseModelEntity", "m_bUseClientOverrideTint");

// Atribuições para C_FootstepControl
// C_FootstepControl Offsets
C_FootstepControl.m_source = findOffsetByName(j, "C_FootstepControl", "m_source");
C_FootstepControl.m_destination = findOffsetByName(j, "C_FootstepControl", "m_destination");

// Atribuições para C_PointClientUIHUD
// C_PointClientUIHUD Offsets
C_PointClientUIHUD.m_bCheckCSSClasses = findOffsetByName(j, "C_PointClientUIHUD", "m_bCheckCSSClasses");
C_PointClientUIHUD.m_bIgnoreInput = findOffsetByName(j, "C_PointClientUIHUD", "m_bIgnoreInput");
C_PointClientUIHUD.m_flWidth = findOffsetByName(j, "C_PointClientUIHUD", "m_flWidth");
C_PointClientUIHUD.m_flHeight = findOffsetByName(j, "C_PointClientUIHUD", "m_flHeight");
C_PointClientUIHUD.m_flDPI = findOffsetByName(j, "C_PointClientUIHUD", "m_flDPI");
C_PointClientUIHUD.m_flInteractDistance = findOffsetByName(j, "C_PointClientUIHUD", "m_flInteractDistance");
C_PointClientUIHUD.m_flDepthOffset = findOffsetByName(j, "C_PointClientUIHUD", "m_flDepthOffset");
C_PointClientUIHUD.m_unOwnerContext = findOffsetByName(j, "C_PointClientUIHUD", "m_unOwnerContext");
C_PointClientUIHUD.m_unHorizontalAlign = findOffsetByName(j, "C_PointClientUIHUD", "m_unHorizontalAlign");
C_PointClientUIHUD.m_unVerticalAlign = findOffsetByName(j, "C_PointClientUIHUD", "m_unVerticalAlign");
C_PointClientUIHUD.m_unOrientation = findOffsetByName(j, "C_PointClientUIHUD", "m_unOrientation");
C_PointClientUIHUD.m_bAllowInteractionFromAllSceneWorlds = findOffsetByName(j, "C_PointClientUIHUD", "m_bAllowInteractionFromAllSceneWorlds");
C_PointClientUIHUD.m_vecCSSClasses = findOffsetByName(j, "C_PointClientUIHUD", "m_vecCSSClasses");

// Atribuições para C_SpotlightEnd
// C_SpotlightEnd Offsets
C_SpotlightEnd.m_flLightScale = findOffsetByName(j, "C_SpotlightEnd", "m_flLightScale");
C_SpotlightEnd.m_Radius = findOffsetByName(j, "C_SpotlightEnd", "m_Radius");

// Atribuições para CEconItemAttribute
// CEconItemAttribute Offsets
CEconItemAttribute.m_iAttributeDefinitionIndex = findOffsetByName(j, "CEconItemAttribute", "m_iAttributeDefinitionIndex");
CEconItemAttribute.m_flValue = findOffsetByName(j, "CEconItemAttribute", "m_flValue");
CEconItemAttribute.m_flInitialValue = findOffsetByName(j, "CEconItemAttribute", "m_flInitialValue");
CEconItemAttribute.m_nRefundableCurrency = findOffsetByName(j, "CEconItemAttribute", "m_nRefundableCurrency");
CEconItemAttribute.m_bSetBonus = findOffsetByName(j, "CEconItemAttribute", "m_bSetBonus");

// Atribuições para C_PointCamera
// C_PointCamera Offsets
C_PointCamera.m_FOV = findOffsetByName(j, "C_PointCamera", "m_FOV");
C_PointCamera.m_Resolution = findOffsetByName(j, "C_PointCamera", "m_Resolution");
C_PointCamera.m_bFogEnable = findOffsetByName(j, "C_PointCamera", "m_bFogEnable");
C_PointCamera.m_FogColor = findOffsetByName(j, "C_PointCamera", "m_FogColor");
C_PointCamera.m_flFogStart = findOffsetByName(j, "C_PointCamera", "m_flFogStart");
C_PointCamera.m_flFogEnd = findOffsetByName(j, "C_PointCamera", "m_flFogEnd");
C_PointCamera.m_flFogMaxDensity = findOffsetByName(j, "C_PointCamera", "m_flFogMaxDensity");
C_PointCamera.m_bActive = findOffsetByName(j, "C_PointCamera", "m_bActive");
C_PointCamera.m_bUseScreenAspectRatio = findOffsetByName(j, "C_PointCamera", "m_bUseScreenAspectRatio");
C_PointCamera.m_flAspectRatio = findOffsetByName(j, "C_PointCamera", "m_flAspectRatio");
C_PointCamera.m_bNoSky = findOffsetByName(j, "C_PointCamera", "m_bNoSky");
C_PointCamera.m_fBrightness = findOffsetByName(j, "C_PointCamera", "m_fBrightness");
C_PointCamera.m_flZFar = findOffsetByName(j, "C_PointCamera", "m_flZFar");
C_PointCamera.m_flZNear = findOffsetByName(j, "C_PointCamera", "m_flZNear");
C_PointCamera.m_bCanHLTVUse = findOffsetByName(j, "C_PointCamera", "m_bCanHLTVUse");
C_PointCamera.m_bAlignWithParent = findOffsetByName(j, "C_PointCamera", "m_bAlignWithParent");
C_PointCamera.m_bDofEnabled = findOffsetByName(j, "C_PointCamera", "m_bDofEnabled");
C_PointCamera.m_flDofNearBlurry = findOffsetByName(j, "C_PointCamera", "m_flDofNearBlurry");
C_PointCamera.m_flDofNearCrisp = findOffsetByName(j, "C_PointCamera", "m_flDofNearCrisp");
C_PointCamera.m_flDofFarCrisp = findOffsetByName(j, "C_PointCamera", "m_flDofFarCrisp");
C_PointCamera.m_flDofFarBlurry = findOffsetByName(j, "C_PointCamera", "m_flDofFarBlurry");
C_PointCamera.m_flDofTiltToGround = findOffsetByName(j, "C_PointCamera", "m_flDofTiltToGround");
C_PointCamera.m_TargetFOV = findOffsetByName(j, "C_PointCamera", "m_TargetFOV");
C_PointCamera.m_DegreesPerSecond = findOffsetByName(j, "C_PointCamera", "m_DegreesPerSecond");
C_PointCamera.m_bIsOn = findOffsetByName(j, "C_PointCamera", "m_bIsOn");
C_PointCamera.m_pNext = findOffsetByName(j, "C_PointCamera", "m_pNext");

// Atribuições para C_EnvWind
// C_EnvWind Offsets
C_EnvWind.m_EnvWindShared = findOffsetByName(j, "C_EnvWind", "m_EnvWindShared");

// Atribuições para C_BaseCombatCharacter
// C_BaseCombatCharacter Offsets
C_BaseCombatCharacter.m_hMyWearables = findOffsetByName(j, "C_BaseCombatCharacter", "m_hMyWearables");
C_BaseCombatCharacter.m_leftFootAttachment = findOffsetByName(j, "C_BaseCombatCharacter", "m_leftFootAttachment");
C_BaseCombatCharacter.m_rightFootAttachment = findOffsetByName(j, "C_BaseCombatCharacter", "m_rightFootAttachment");
C_BaseCombatCharacter.m_nWaterWakeMode = findOffsetByName(j, "C_BaseCombatCharacter", "m_nWaterWakeMode");
C_BaseCombatCharacter.m_flWaterWorldZ = findOffsetByName(j, "C_BaseCombatCharacter", "m_flWaterWorldZ");
C_BaseCombatCharacter.m_flWaterNextTraceTime = findOffsetByName(j, "C_BaseCombatCharacter", "m_flWaterNextTraceTime");

// Atribuições para C_SoundEventSphereEntity
// C_SoundEventSphereEntity Offsets
C_SoundEventSphereEntity.m_flRadius = findOffsetByName(j, "C_SoundEventSphereEntity", "m_flRadius");

// Atribuições para C_SceneEntity
// C_SceneEntity Offsets
C_SceneEntity.m_bIsPlayingBack = findOffsetByName(j, "C_SceneEntity", "m_bIsPlayingBack");
C_SceneEntity.m_bPaused = findOffsetByName(j, "C_SceneEntity", "m_bPaused");
C_SceneEntity.m_bMultiplayer = findOffsetByName(j, "C_SceneEntity", "m_bMultiplayer");
C_SceneEntity.m_bAutogenerated = findOffsetByName(j, "C_SceneEntity", "m_bAutogenerated");
C_SceneEntity.m_flForceClientTime = findOffsetByName(j, "C_SceneEntity", "m_flForceClientTime");
C_SceneEntity.m_nSceneStringIndex = findOffsetByName(j, "C_SceneEntity", "m_nSceneStringIndex");
C_SceneEntity.m_bClientOnly = findOffsetByName(j, "C_SceneEntity", "m_bClientOnly");
C_SceneEntity.m_hOwner = findOffsetByName(j, "C_SceneEntity", "m_hOwner");
C_SceneEntity.m_hActorList = findOffsetByName(j, "C_SceneEntity", "m_hActorList");
C_SceneEntity.m_bWasPlaying = findOffsetByName(j, "C_SceneEntity", "m_bWasPlaying");
C_SceneEntity.m_QueuedEvents = findOffsetByName(j, "C_SceneEntity", "m_QueuedEvents");
C_SceneEntity.m_flCurrentTime = findOffsetByName(j, "C_SceneEntity", "m_flCurrentTime");

// Atribuições para CPlayer_CameraServices
// CPlayer_CameraServices Offsets
CPlayer_CameraServices.m_vecCsViewPunchAngle = findOffsetByName(j, "CPlayer_CameraServices", "m_vecCsViewPunchAngle");
CPlayer_CameraServices.m_nCsViewPunchAngleTick = findOffsetByName(j, "CPlayer_CameraServices", "m_nCsViewPunchAngleTick");
CPlayer_CameraServices.m_flCsViewPunchAngleTickRatio = findOffsetByName(j, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio");
CPlayer_CameraServices.m_PlayerFog = findOffsetByName(j, "CPlayer_CameraServices", "m_PlayerFog");
CPlayer_CameraServices.m_hColorCorrectionCtrl = findOffsetByName(j, "CPlayer_CameraServices", "m_hColorCorrectionCtrl");
CPlayer_CameraServices.m_hViewEntity = findOffsetByName(j, "CPlayer_CameraServices", "m_hViewEntity");
CPlayer_CameraServices.m_hTonemapController = findOffsetByName(j, "CPlayer_CameraServices", "m_hTonemapController");
CPlayer_CameraServices.m_audio = findOffsetByName(j, "CPlayer_CameraServices", "m_audio");
CPlayer_CameraServices.m_PostProcessingVolumes = findOffsetByName(j, "CPlayer_CameraServices", "m_PostProcessingVolumes");
CPlayer_CameraServices.m_flOldPlayerZ = findOffsetByName(j, "CPlayer_CameraServices", "m_flOldPlayerZ");
CPlayer_CameraServices.m_flOldPlayerViewOffsetZ = findOffsetByName(j, "CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ");
CPlayer_CameraServices.m_CurrentFog = findOffsetByName(j, "CPlayer_CameraServices", "m_CurrentFog");
CPlayer_CameraServices.m_hOldFogController = findOffsetByName(j, "CPlayer_CameraServices", "m_hOldFogController");
CPlayer_CameraServices.m_bOverrideFogColor = findOffsetByName(j, "CPlayer_CameraServices", "m_bOverrideFogColor");
CPlayer_CameraServices.m_OverrideFogColor = findOffsetByName(j, "CPlayer_CameraServices", "m_OverrideFogColor");
CPlayer_CameraServices.m_bOverrideFogStartEnd = findOffsetByName(j, "CPlayer_CameraServices", "m_bOverrideFogStartEnd");
CPlayer_CameraServices.m_fOverrideFogStart = findOffsetByName(j, "CPlayer_CameraServices", "m_fOverrideFogStart");
CPlayer_CameraServices.m_fOverrideFogEnd = findOffsetByName(j, "CPlayer_CameraServices", "m_fOverrideFogEnd");
CPlayer_CameraServices.m_hActivePostProcessingVolume = findOffsetByName(j, "CPlayer_CameraServices", "m_hActivePostProcessingVolume");
CPlayer_CameraServices.m_angDemoViewAngles = findOffsetByName(j, "CPlayer_CameraServices", "m_angDemoViewAngles");
CPlayer_CameraServices.m_hTriggerSoundscapeList = findOffsetByName(j, "CPlayer_CameraServices", "m_hTriggerSoundscapeList");

// Atribuições para C_BaseCSGrenade
// C_BaseCSGrenade Offsets
C_BaseCSGrenade.m_bClientPredictDelete = findOffsetByName(j, "C_BaseCSGrenade", "m_bClientPredictDelete");
C_BaseCSGrenade.m_bRedraw = findOffsetByName(j, "C_BaseCSGrenade", "m_bRedraw");
C_BaseCSGrenade.m_bIsHeldByPlayer = findOffsetByName(j, "C_BaseCSGrenade", "m_bIsHeldByPlayer");
C_BaseCSGrenade.m_bPinPulled = findOffsetByName(j, "C_BaseCSGrenade", "m_bPinPulled");
C_BaseCSGrenade.m_bJumpThrow = findOffsetByName(j, "C_BaseCSGrenade", "m_bJumpThrow");
C_BaseCSGrenade.m_bThrowAnimating = findOffsetByName(j, "C_BaseCSGrenade", "m_bThrowAnimating");
C_BaseCSGrenade.m_fThrowTime = findOffsetByName(j, "C_BaseCSGrenade", "m_fThrowTime");
C_BaseCSGrenade.m_flThrowStrength = findOffsetByName(j, "C_BaseCSGrenade", "m_flThrowStrength");
C_BaseCSGrenade.m_flThrowStrengthApproach = findOffsetByName(j, "C_BaseCSGrenade", "m_flThrowStrengthApproach");
C_BaseCSGrenade.m_fDropTime = findOffsetByName(j, "C_BaseCSGrenade", "m_fDropTime");
C_BaseCSGrenade.m_fPinPullTime = findOffsetByName(j, "C_BaseCSGrenade", "m_fPinPullTime");
C_BaseCSGrenade.m_bJustPulledPin = findOffsetByName(j, "C_BaseCSGrenade", "m_bJustPulledPin");
C_BaseCSGrenade.m_nNextHoldTick = findOffsetByName(j, "C_BaseCSGrenade", "m_nNextHoldTick");
C_BaseCSGrenade.m_flNextHoldFrac = findOffsetByName(j, "C_BaseCSGrenade", "m_flNextHoldFrac");
C_BaseCSGrenade.m_hSwitchToWeaponAfterThrow = findOffsetByName(j, "C_BaseCSGrenade", "m_hSwitchToWeaponAfterThrow");

// Atribuições para C_FuncMonitor
// C_FuncMonitor Offsets
C_FuncMonitor.m_targetCamera = findOffsetByName(j, "C_FuncMonitor", "m_targetCamera");
C_FuncMonitor.m_nResolutionEnum = findOffsetByName(j, "C_FuncMonitor", "m_nResolutionEnum");
C_FuncMonitor.m_bRenderShadows = findOffsetByName(j, "C_FuncMonitor", "m_bRenderShadows");
C_FuncMonitor.m_bUseUniqueColorTarget = findOffsetByName(j, "C_FuncMonitor", "m_bUseUniqueColorTarget");
C_FuncMonitor.m_brushModelName = findOffsetByName(j, "C_FuncMonitor", "m_brushModelName");
C_FuncMonitor.m_hTargetCamera = findOffsetByName(j, "C_FuncMonitor", "m_hTargetCamera");
C_FuncMonitor.m_bEnabled = findOffsetByName(j, "C_FuncMonitor", "m_bEnabled");
C_FuncMonitor.m_bDraw3DSkybox = findOffsetByName(j, "C_FuncMonitor", "m_bDraw3DSkybox");

// Atribuições para C_RopeKeyframe__CPhysicsDelegate
// C_RopeKeyframe__CPhysicsDelegate Offsets
C_RopeKeyframe__CPhysicsDelegate.m_pKeyframe = findOffsetByName(j, "C_RopeKeyframe__CPhysicsDelegate", "m_pKeyframe");

// Atribuições para CBodyComponent
// CBodyComponent Offsets
CBodyComponent.m_pSceneNode = findOffsetByName(j, "CBodyComponent", "m_pSceneNode");
CBodyComponent.__m_pChainEntity = findOffsetByName(j, "CBodyComponent", "__m_pChainEntity");

// Atribuições para C_SoundAreaEntitySphere
// C_SoundAreaEntitySphere Offsets
C_SoundAreaEntitySphere.m_flRadius = findOffsetByName(j, "C_SoundAreaEntitySphere", "m_flRadius");

// Atribuições para C_LightGlow
// C_LightGlow Offsets
C_LightGlow.m_nHorizontalSize = findOffsetByName(j, "C_LightGlow", "m_nHorizontalSize");
C_LightGlow.m_nVerticalSize = findOffsetByName(j, "C_LightGlow", "m_nVerticalSize");
C_LightGlow.m_nMinDist = findOffsetByName(j, "C_LightGlow", "m_nMinDist");
C_LightGlow.m_nMaxDist = findOffsetByName(j, "C_LightGlow", "m_nMaxDist");
C_LightGlow.m_nOuterMaxDist = findOffsetByName(j, "C_LightGlow", "m_nOuterMaxDist");
C_LightGlow.m_flGlowProxySize = findOffsetByName(j, "C_LightGlow", "m_flGlowProxySize");
C_LightGlow.m_flHDRColorScale = findOffsetByName(j, "C_LightGlow", "m_flHDRColorScale");
C_LightGlow.m_GlowOverlay = findOffsetByName(j, "C_LightGlow", "m_GlowOverlay");

// Atribuições para CountdownTimer
// CountdownTimer Offsets
CountdownTimer.m_duration = findOffsetByName(j, "CountdownTimer", "m_duration");
CountdownTimer.m_timestamp = findOffsetByName(j, "CountdownTimer", "m_timestamp");
CountdownTimer.m_timescale = findOffsetByName(j, "CountdownTimer", "m_timescale");
CountdownTimer.m_nWorldGroupId = findOffsetByName(j, "CountdownTimer", "m_nWorldGroupId");

// Atribuições para CGameSceneNodeHandle
// CGameSceneNodeHandle Offsets
CGameSceneNodeHandle.m_hOwner = findOffsetByName(j, "CGameSceneNodeHandle", "m_hOwner");
CGameSceneNodeHandle.m_name = findOffsetByName(j, "CGameSceneNodeHandle", "m_name");

// Atribuições para PredictedDamageTag_t
// PredictedDamageTag_t Offsets
PredictedDamageTag_t.nTagTick = findOffsetByName(j, "PredictedDamageTag_t", "nTagTick");
PredictedDamageTag_t.flFlinchModSmall = findOffsetByName(j, "PredictedDamageTag_t", "flFlinchModSmall");
PredictedDamageTag_t.flFlinchModLarge = findOffsetByName(j, "PredictedDamageTag_t", "flFlinchModLarge");
PredictedDamageTag_t.flFriendlyFireDamageReductionRatio = findOffsetByName(j, "PredictedDamageTag_t", "flFriendlyFireDamageReductionRatio");

// Atribuições para C_ClientRagdoll
// C_ClientRagdoll Offsets
C_ClientRagdoll.m_bFadeOut = findOffsetByName(j, "C_ClientRagdoll", "m_bFadeOut");
C_ClientRagdoll.m_bImportant = findOffsetByName(j, "C_ClientRagdoll", "m_bImportant");
C_ClientRagdoll.m_flEffectTime = findOffsetByName(j, "C_ClientRagdoll", "m_flEffectTime");
C_ClientRagdoll.m_gibDespawnTime = findOffsetByName(j, "C_ClientRagdoll", "m_gibDespawnTime");
C_ClientRagdoll.m_iCurrentFriction = findOffsetByName(j, "C_ClientRagdoll", "m_iCurrentFriction");
C_ClientRagdoll.m_iMinFriction = findOffsetByName(j, "C_ClientRagdoll", "m_iMinFriction");
C_ClientRagdoll.m_iMaxFriction = findOffsetByName(j, "C_ClientRagdoll", "m_iMaxFriction");
C_ClientRagdoll.m_iFrictionAnimState = findOffsetByName(j, "C_ClientRagdoll", "m_iFrictionAnimState");
C_ClientRagdoll.m_bReleaseRagdoll = findOffsetByName(j, "C_ClientRagdoll", "m_bReleaseRagdoll");
C_ClientRagdoll.m_iEyeAttachment = findOffsetByName(j, "C_ClientRagdoll", "m_iEyeAttachment");
C_ClientRagdoll.m_bFadingOut = findOffsetByName(j, "C_ClientRagdoll", "m_bFadingOut");
C_ClientRagdoll.m_flScaleEnd = findOffsetByName(j, "C_ClientRagdoll", "m_flScaleEnd");
C_ClientRagdoll.m_flScaleTimeStart = findOffsetByName(j, "C_ClientRagdoll", "m_flScaleTimeStart");
C_ClientRagdoll.m_flScaleTimeEnd = findOffsetByName(j, "C_ClientRagdoll", "m_flScaleTimeEnd");

// Atribuições para C_GlobalLight
// C_GlobalLight Offsets
C_GlobalLight.m_WindClothForceHandle = findOffsetByName(j, "C_GlobalLight", "m_WindClothForceHandle");

// Atribuições para C_CSPlayerResource
// C_CSPlayerResource Offsets
C_CSPlayerResource.m_bHostageAlive = findOffsetByName(j, "C_CSPlayerResource", "m_bHostageAlive");
C_CSPlayerResource.m_isHostageFollowingSomeone = findOffsetByName(j, "C_CSPlayerResource", "m_isHostageFollowingSomeone");
C_CSPlayerResource.m_iHostageEntityIDs = findOffsetByName(j, "C_CSPlayerResource", "m_iHostageEntityIDs");
C_CSPlayerResource.m_bombsiteCenterA = findOffsetByName(j, "C_CSPlayerResource", "m_bombsiteCenterA");
C_CSPlayerResource.m_bombsiteCenterB = findOffsetByName(j, "C_CSPlayerResource", "m_bombsiteCenterB");
C_CSPlayerResource.m_hostageRescueX = findOffsetByName(j, "C_CSPlayerResource", "m_hostageRescueX");
C_CSPlayerResource.m_hostageRescueY = findOffsetByName(j, "C_CSPlayerResource", "m_hostageRescueY");
C_CSPlayerResource.m_hostageRescueZ = findOffsetByName(j, "C_CSPlayerResource", "m_hostageRescueZ");
C_CSPlayerResource.m_bEndMatchNextMapAllVoted = findOffsetByName(j, "C_CSPlayerResource", "m_bEndMatchNextMapAllVoted");
C_CSPlayerResource.m_foundGoalPositions = findOffsetByName(j, "C_CSPlayerResource", "m_foundGoalPositions");

// Atribuições para CSkeletonInstance
// CSkeletonInstance Offsets
CSkeletonInstance.m_modelState = findOffsetByName(j, "CSkeletonInstance", "m_modelState");
CSkeletonInstance.m_bIsAnimationEnabled = findOffsetByName(j, "CSkeletonInstance", "m_bIsAnimationEnabled");
CSkeletonInstance.m_bUseParentRenderBounds = findOffsetByName(j, "CSkeletonInstance", "m_bUseParentRenderBounds");
CSkeletonInstance.m_bDisableSolidCollisionsForHierarchy = findOffsetByName(j, "CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy");
CSkeletonInstance.m_bDirtyMotionType = findOffsetByName(j, "CSkeletonInstance", "m_bDirtyMotionType");
CSkeletonInstance.m_bIsGeneratingLatchedParentSpaceState = findOffsetByName(j, "CSkeletonInstance", "m_bIsGeneratingLatchedParentSpaceState");
CSkeletonInstance.m_materialGroup = findOffsetByName(j, "CSkeletonInstance", "m_materialGroup");
CSkeletonInstance.m_nHitboxSet = findOffsetByName(j, "CSkeletonInstance", "m_nHitboxSet");

// Atribuições para CBodyComponentBaseAnimGraph
// CBodyComponentBaseAnimGraph Offsets
CBodyComponentBaseAnimGraph.m_animationController = findOffsetByName(j, "CBodyComponentBaseAnimGraph", "m_animationController");

// Atribuições para CBodyComponentPoint
// CBodyComponentPoint Offsets
CBodyComponentPoint.m_sceneNode = findOffsetByName(j, "CBodyComponentPoint", "m_sceneNode");

// Atribuições para C_SmokeGrenadeProjectile
// C_SmokeGrenadeProjectile Offsets
C_SmokeGrenadeProjectile.m_nSmokeEffectTickBegin = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_nSmokeEffectTickBegin");
C_SmokeGrenadeProjectile.m_bDidSmokeEffect = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_bDidSmokeEffect");
C_SmokeGrenadeProjectile.m_nRandomSeed = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_nRandomSeed");
C_SmokeGrenadeProjectile.m_vSmokeColor = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_vSmokeColor");
C_SmokeGrenadeProjectile.m_vSmokeDetonationPos = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_vSmokeDetonationPos");
C_SmokeGrenadeProjectile.m_VoxelFrameData = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_VoxelFrameData");
C_SmokeGrenadeProjectile.m_nVoxelFrameDataSize = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_nVoxelFrameDataSize");
C_SmokeGrenadeProjectile.m_nVoxelUpdate = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_nVoxelUpdate");
C_SmokeGrenadeProjectile.m_bSmokeVolumeDataReceived = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_bSmokeVolumeDataReceived");
C_SmokeGrenadeProjectile.m_bSmokeEffectSpawned = findOffsetByName(j, "C_SmokeGrenadeProjectile", "m_bSmokeEffectSpawned");

// Atribuições para C_CSGO_MapPreviewCameraPath
// C_CSGO_MapPreviewCameraPath Offsets
C_CSGO_MapPreviewCameraPath.m_flZFar = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_flZFar");
C_CSGO_MapPreviewCameraPath.m_flZNear = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_flZNear");
C_CSGO_MapPreviewCameraPath.m_bLoop = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_bLoop");
C_CSGO_MapPreviewCameraPath.m_bVerticalFOV = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_bVerticalFOV");
C_CSGO_MapPreviewCameraPath.m_bConstantSpeed = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_bConstantSpeed");
C_CSGO_MapPreviewCameraPath.m_flDuration = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_flDuration");
C_CSGO_MapPreviewCameraPath.m_flPathLength = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_flPathLength");
C_CSGO_MapPreviewCameraPath.m_flPathDuration = findOffsetByName(j, "C_CSGO_MapPreviewCameraPath", "m_flPathDuration");

// Atribuições para C_Inferno
// C_Inferno Offsets
C_Inferno.m_nfxFireDamageEffect = findOffsetByName(j, "C_Inferno", "m_nfxFireDamageEffect");
C_Inferno.m_hInfernoPointsSnapshot = findOffsetByName(j, "C_Inferno", "m_hInfernoPointsSnapshot");
C_Inferno.m_hInfernoFillerPointsSnapshot = findOffsetByName(j, "C_Inferno", "m_hInfernoFillerPointsSnapshot");
C_Inferno.m_hInfernoOutlinePointsSnapshot = findOffsetByName(j, "C_Inferno", "m_hInfernoOutlinePointsSnapshot");
C_Inferno.m_hInfernoClimbingOutlinePointsSnapshot = findOffsetByName(j, "C_Inferno", "m_hInfernoClimbingOutlinePointsSnapshot");
C_Inferno.m_hInfernoDecalsSnapshot = findOffsetByName(j, "C_Inferno", "m_hInfernoDecalsSnapshot");
C_Inferno.m_firePositions = findOffsetByName(j, "C_Inferno", "m_firePositions");
C_Inferno.m_fireParentPositions = findOffsetByName(j, "C_Inferno", "m_fireParentPositions");
C_Inferno.m_bFireIsBurning = findOffsetByName(j, "C_Inferno", "m_bFireIsBurning");
C_Inferno.m_BurnNormal = findOffsetByName(j, "C_Inferno", "m_BurnNormal");
C_Inferno.m_fireCount = findOffsetByName(j, "C_Inferno", "m_fireCount");
C_Inferno.m_nInfernoType = findOffsetByName(j, "C_Inferno", "m_nInfernoType");
C_Inferno.m_nFireLifetime = findOffsetByName(j, "C_Inferno", "m_nFireLifetime");
C_Inferno.m_bInPostEffectTime = findOffsetByName(j, "C_Inferno", "m_bInPostEffectTime");
C_Inferno.m_lastFireCount = findOffsetByName(j, "C_Inferno", "m_lastFireCount");
C_Inferno.m_nFireEffectTickBegin = findOffsetByName(j, "C_Inferno", "m_nFireEffectTickBegin");
C_Inferno.m_drawableCount = findOffsetByName(j, "C_Inferno", "m_drawableCount");
C_Inferno.m_blosCheck = findOffsetByName(j, "C_Inferno", "m_blosCheck");
C_Inferno.m_nlosperiod = findOffsetByName(j, "C_Inferno", "m_nlosperiod");
C_Inferno.m_maxFireHalfWidth = findOffsetByName(j, "C_Inferno", "m_maxFireHalfWidth");
C_Inferno.m_maxFireHeight = findOffsetByName(j, "C_Inferno", "m_maxFireHeight");
C_Inferno.m_minBounds = findOffsetByName(j, "C_Inferno", "m_minBounds");
C_Inferno.m_maxBounds = findOffsetByName(j, "C_Inferno", "m_maxBounds");
C_Inferno.m_flLastGrassBurnThink = findOffsetByName(j, "C_Inferno", "m_flLastGrassBurnThink");

// Atribuições para C_PlayerPing
// C_PlayerPing Offsets
C_PlayerPing.m_hPlayer = findOffsetByName(j, "C_PlayerPing", "m_hPlayer");
C_PlayerPing.m_hPingedEntity = findOffsetByName(j, "C_PlayerPing", "m_hPingedEntity");
C_PlayerPing.m_iType = findOffsetByName(j, "C_PlayerPing", "m_iType");
C_PlayerPing.m_bUrgent = findOffsetByName(j, "C_PlayerPing", "m_bUrgent");
C_PlayerPing.m_szPlaceName = findOffsetByName(j, "C_PlayerPing", "m_szPlaceName");

// Atribuições para C_CSTeam
// C_CSTeam Offsets
C_CSTeam.m_szTeamMatchStat = findOffsetByName(j, "C_CSTeam", "m_szTeamMatchStat");
C_CSTeam.m_numMapVictories = findOffsetByName(j, "C_CSTeam", "m_numMapVictories");
C_CSTeam.m_bSurrendered = findOffsetByName(j, "C_CSTeam", "m_bSurrendered");
C_CSTeam.m_scoreFirstHalf = findOffsetByName(j, "C_CSTeam", "m_scoreFirstHalf");
C_CSTeam.m_scoreSecondHalf = findOffsetByName(j, "C_CSTeam", "m_scoreSecondHalf");
C_CSTeam.m_scoreOvertime = findOffsetByName(j, "C_CSTeam", "m_scoreOvertime");
C_CSTeam.m_szClanTeamname = findOffsetByName(j, "C_CSTeam", "m_szClanTeamname");
C_CSTeam.m_iClanID = findOffsetByName(j, "C_CSTeam", "m_iClanID");
C_CSTeam.m_szTeamFlagImage = findOffsetByName(j, "C_CSTeam", "m_szTeamFlagImage");
C_CSTeam.m_szTeamLogoImage = findOffsetByName(j, "C_CSTeam", "m_szTeamLogoImage");

// Atribuições para C_CSGO_MapPreviewCameraPathNode
// C_CSGO_MapPreviewCameraPathNode Offsets
C_CSGO_MapPreviewCameraPathNode.m_szParentPathUniqueID = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_szParentPathUniqueID");
C_CSGO_MapPreviewCameraPathNode.m_nPathIndex = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_nPathIndex");
C_CSGO_MapPreviewCameraPathNode.m_vInTangentLocal = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_vInTangentLocal");
C_CSGO_MapPreviewCameraPathNode.m_vOutTangentLocal = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_vOutTangentLocal");
C_CSGO_MapPreviewCameraPathNode.m_flFOV = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_flFOV");
C_CSGO_MapPreviewCameraPathNode.m_flCameraSpeed = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_flCameraSpeed");
C_CSGO_MapPreviewCameraPathNode.m_flEaseIn = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_flEaseIn");
C_CSGO_MapPreviewCameraPathNode.m_flEaseOut = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_flEaseOut");
C_CSGO_MapPreviewCameraPathNode.m_vInTangentWorld = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_vInTangentWorld");
C_CSGO_MapPreviewCameraPathNode.m_vOutTangentWorld = findOffsetByName(j, "C_CSGO_MapPreviewCameraPathNode", "m_vOutTangentWorld");

// Atribuições para C_CSPlayerPawn
// C_CSPlayerPawn Offsets
C_CSPlayerPawn.m_pBulletServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pBulletServices");
C_CSPlayerPawn.m_pHostageServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pHostageServices");
C_CSPlayerPawn.m_pBuyServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pBuyServices");
C_CSPlayerPawn.m_pGlowServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pGlowServices");
C_CSPlayerPawn.m_pActionTrackingServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pActionTrackingServices");
C_CSPlayerPawn.m_pDamageReactServices = findOffsetByName(j, "C_CSPlayerPawn", "m_pDamageReactServices");
C_CSPlayerPawn.m_flHealthShotBoostExpirationTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flHealthShotBoostExpirationTime");
C_CSPlayerPawn.m_flLastFiredWeaponTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flLastFiredWeaponTime");
C_CSPlayerPawn.m_bHasFemaleVoice = findOffsetByName(j, "C_CSPlayerPawn", "m_bHasFemaleVoice");
C_CSPlayerPawn.m_flLandingTimeSeconds = findOffsetByName(j, "C_CSPlayerPawn", "m_flLandingTimeSeconds");
C_CSPlayerPawn.m_flOldFallVelocity = findOffsetByName(j, "C_CSPlayerPawn", "m_flOldFallVelocity");
C_CSPlayerPawn.m_szLastPlaceName = findOffsetByName(j, "C_CSPlayerPawn", "m_szLastPlaceName");
C_CSPlayerPawn.m_bPrevDefuser = findOffsetByName(j, "C_CSPlayerPawn", "m_bPrevDefuser");
C_CSPlayerPawn.m_bPrevHelmet = findOffsetByName(j, "C_CSPlayerPawn", "m_bPrevHelmet");
C_CSPlayerPawn.m_nPrevArmorVal = findOffsetByName(j, "C_CSPlayerPawn", "m_nPrevArmorVal");
C_CSPlayerPawn.m_nPrevGrenadeAmmoCount = findOffsetByName(j, "C_CSPlayerPawn", "m_nPrevGrenadeAmmoCount");
C_CSPlayerPawn.m_unPreviousWeaponHash = findOffsetByName(j, "C_CSPlayerPawn", "m_unPreviousWeaponHash");
C_CSPlayerPawn.m_unWeaponHash = findOffsetByName(j, "C_CSPlayerPawn", "m_unWeaponHash");
C_CSPlayerPawn.m_bInBuyZone = findOffsetByName(j, "C_CSPlayerPawn", "m_bInBuyZone");
C_CSPlayerPawn.m_bPreviouslyInBuyZone = findOffsetByName(j, "C_CSPlayerPawn", "m_bPreviouslyInBuyZone");
C_CSPlayerPawn.m_aimPunchAngle = findOffsetByName(j, "C_CSPlayerPawn", "m_aimPunchAngle");
C_CSPlayerPawn.m_aimPunchAngleVel = findOffsetByName(j, "C_CSPlayerPawn", "m_aimPunchAngleVel");
C_CSPlayerPawn.m_aimPunchTickBase = findOffsetByName(j, "C_CSPlayerPawn", "m_aimPunchTickBase");
C_CSPlayerPawn.m_aimPunchTickFraction = findOffsetByName(j, "C_CSPlayerPawn", "m_aimPunchTickFraction");
C_CSPlayerPawn.m_aimPunchCache = findOffsetByName(j, "C_CSPlayerPawn", "m_aimPunchCache");
C_CSPlayerPawn.m_bInLanding = findOffsetByName(j, "C_CSPlayerPawn", "m_bInLanding");
C_CSPlayerPawn.m_flLandingStartTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flLandingStartTime");
C_CSPlayerPawn.m_bInHostageRescueZone = findOffsetByName(j, "C_CSPlayerPawn", "m_bInHostageRescueZone");
C_CSPlayerPawn.m_bInBombZone = findOffsetByName(j, "C_CSPlayerPawn", "m_bInBombZone");
C_CSPlayerPawn.m_bIsBuyMenuOpen = findOffsetByName(j, "C_CSPlayerPawn", "m_bIsBuyMenuOpen");
C_CSPlayerPawn.m_flTimeOfLastInjury = findOffsetByName(j, "C_CSPlayerPawn", "m_flTimeOfLastInjury");
C_CSPlayerPawn.m_flNextSprayDecalTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flNextSprayDecalTime");
C_CSPlayerPawn.m_iRetakesOffering = findOffsetByName(j, "C_CSPlayerPawn", "m_iRetakesOffering");
C_CSPlayerPawn.m_iRetakesOfferingCard = findOffsetByName(j, "C_CSPlayerPawn", "m_iRetakesOfferingCard");
C_CSPlayerPawn.m_bRetakesHasDefuseKit = findOffsetByName(j, "C_CSPlayerPawn", "m_bRetakesHasDefuseKit");
C_CSPlayerPawn.m_bRetakesMVPLastRound = findOffsetByName(j, "C_CSPlayerPawn", "m_bRetakesMVPLastRound");
C_CSPlayerPawn.m_iRetakesMVPBoostItem = findOffsetByName(j, "C_CSPlayerPawn", "m_iRetakesMVPBoostItem");
C_CSPlayerPawn.m_RetakesMVPBoostExtraUtility = findOffsetByName(j, "C_CSPlayerPawn", "m_RetakesMVPBoostExtraUtility");
C_CSPlayerPawn.m_bNeedToReApplyGloves = findOffsetByName(j, "C_CSPlayerPawn", "m_bNeedToReApplyGloves");
C_CSPlayerPawn.m_EconGloves = findOffsetByName(j, "C_CSPlayerPawn", "m_EconGloves");
C_CSPlayerPawn.m_nEconGlovesChanged = findOffsetByName(j, "C_CSPlayerPawn", "m_nEconGlovesChanged");
C_CSPlayerPawn.m_bMustSyncRagdollState = findOffsetByName(j, "C_CSPlayerPawn", "m_bMustSyncRagdollState");
C_CSPlayerPawn.m_nRagdollDamageBone = findOffsetByName(j, "C_CSPlayerPawn", "m_nRagdollDamageBone");
C_CSPlayerPawn.m_vRagdollDamageForce = findOffsetByName(j, "C_CSPlayerPawn", "m_vRagdollDamageForce");
C_CSPlayerPawn.m_vRagdollDamagePosition = findOffsetByName(j, "C_CSPlayerPawn", "m_vRagdollDamagePosition");
C_CSPlayerPawn.m_szRagdollDamageWeaponName = findOffsetByName(j, "C_CSPlayerPawn", "m_szRagdollDamageWeaponName");
C_CSPlayerPawn.m_bRagdollDamageHeadshot = findOffsetByName(j, "C_CSPlayerPawn", "m_bRagdollDamageHeadshot");
C_CSPlayerPawn.m_vRagdollServerOrigin = findOffsetByName(j, "C_CSPlayerPawn", "m_vRagdollServerOrigin");
C_CSPlayerPawn.m_bLastHeadBoneTransformIsValid = findOffsetByName(j, "C_CSPlayerPawn", "m_bLastHeadBoneTransformIsValid");
C_CSPlayerPawn.m_lastLandTime = findOffsetByName(j, "C_CSPlayerPawn", "m_lastLandTime");
C_CSPlayerPawn.m_bOnGroundLastTick = findOffsetByName(j, "C_CSPlayerPawn", "m_bOnGroundLastTick");
C_CSPlayerPawn.m_qDeathEyeAngles = findOffsetByName(j, "C_CSPlayerPawn", "m_qDeathEyeAngles");
C_CSPlayerPawn.m_bSkipOneHeadConstraintUpdate = findOffsetByName(j, "C_CSPlayerPawn", "m_bSkipOneHeadConstraintUpdate");
C_CSPlayerPawn.m_bLeftHanded = findOffsetByName(j, "C_CSPlayerPawn", "m_bLeftHanded");
C_CSPlayerPawn.m_fSwitchedHandednessTime = findOffsetByName(j, "C_CSPlayerPawn", "m_fSwitchedHandednessTime");
C_CSPlayerPawn.m_flViewmodelOffsetX = findOffsetByName(j, "C_CSPlayerPawn", "m_flViewmodelOffsetX");
C_CSPlayerPawn.m_flViewmodelOffsetY = findOffsetByName(j, "C_CSPlayerPawn", "m_flViewmodelOffsetY");
C_CSPlayerPawn.m_flViewmodelOffsetZ = findOffsetByName(j, "C_CSPlayerPawn", "m_flViewmodelOffsetZ");
C_CSPlayerPawn.m_flViewmodelFOV = findOffsetByName(j, "C_CSPlayerPawn", "m_flViewmodelFOV");
C_CSPlayerPawn.m_vecPlayerPatchEconIndices = findOffsetByName(j, "C_CSPlayerPawn", "m_vecPlayerPatchEconIndices");
C_CSPlayerPawn.m_GunGameImmunityColor = findOffsetByName(j, "C_CSPlayerPawn", "m_GunGameImmunityColor");
C_CSPlayerPawn.m_vecBulletHitModels = findOffsetByName(j, "C_CSPlayerPawn", "m_vecBulletHitModels");
C_CSPlayerPawn.m_bIsWalking = findOffsetByName(j, "C_CSPlayerPawn", "m_bIsWalking");
C_CSPlayerPawn.m_thirdPersonHeading = findOffsetByName(j, "C_CSPlayerPawn", "m_thirdPersonHeading");
C_CSPlayerPawn.m_flSlopeDropOffset = findOffsetByName(j, "C_CSPlayerPawn", "m_flSlopeDropOffset");
C_CSPlayerPawn.m_flSlopeDropHeight = findOffsetByName(j, "C_CSPlayerPawn", "m_flSlopeDropHeight");
C_CSPlayerPawn.m_vHeadConstraintOffset = findOffsetByName(j, "C_CSPlayerPawn", "m_vHeadConstraintOffset");
C_CSPlayerPawn.m_entitySpottedState = findOffsetByName(j, "C_CSPlayerPawn", "m_entitySpottedState");
C_CSPlayerPawn.m_bIsScoped = findOffsetByName(j, "C_CSPlayerPawn", "m_bIsScoped");
C_CSPlayerPawn.m_bResumeZoom = findOffsetByName(j, "C_CSPlayerPawn", "m_bResumeZoom");
C_CSPlayerPawn.m_bIsDefusing = findOffsetByName(j, "C_CSPlayerPawn", "m_bIsDefusing");
C_CSPlayerPawn.m_bIsGrabbingHostage = findOffsetByName(j, "C_CSPlayerPawn", "m_bIsGrabbingHostage");
C_CSPlayerPawn.m_iBlockingUseActionInProgress = findOffsetByName(j, "C_CSPlayerPawn", "m_iBlockingUseActionInProgress");
C_CSPlayerPawn.m_flEmitSoundTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flEmitSoundTime");
C_CSPlayerPawn.m_bInNoDefuseArea = findOffsetByName(j, "C_CSPlayerPawn", "m_bInNoDefuseArea");
C_CSPlayerPawn.m_nWhichBombZone = findOffsetByName(j, "C_CSPlayerPawn", "m_nWhichBombZone");
C_CSPlayerPawn.m_iShotsFired = findOffsetByName(j, "C_CSPlayerPawn", "m_iShotsFired");
C_CSPlayerPawn.m_flFlinchStack = findOffsetByName(j, "C_CSPlayerPawn", "m_flFlinchStack");
C_CSPlayerPawn.m_flVelocityModifier = findOffsetByName(j, "C_CSPlayerPawn", "m_flVelocityModifier");
C_CSPlayerPawn.m_flHitHeading = findOffsetByName(j, "C_CSPlayerPawn", "m_flHitHeading");
C_CSPlayerPawn.m_nHitBodyPart = findOffsetByName(j, "C_CSPlayerPawn", "m_nHitBodyPart");
C_CSPlayerPawn.m_bWaitForNoAttack = findOffsetByName(j, "C_CSPlayerPawn", "m_bWaitForNoAttack");
C_CSPlayerPawn.m_ignoreLadderJumpTime = findOffsetByName(j, "C_CSPlayerPawn", "m_ignoreLadderJumpTime");
C_CSPlayerPawn.m_bKilledByHeadshot = findOffsetByName(j, "C_CSPlayerPawn", "m_bKilledByHeadshot");
C_CSPlayerPawn.m_ArmorValue = findOffsetByName(j, "C_CSPlayerPawn", "m_ArmorValue");
C_CSPlayerPawn.m_unCurrentEquipmentValue = findOffsetByName(j, "C_CSPlayerPawn", "m_unCurrentEquipmentValue");
C_CSPlayerPawn.m_unRoundStartEquipmentValue = findOffsetByName(j, "C_CSPlayerPawn", "m_unRoundStartEquipmentValue");
C_CSPlayerPawn.m_unFreezetimeEndEquipmentValue = findOffsetByName(j, "C_CSPlayerPawn", "m_unFreezetimeEndEquipmentValue");
C_CSPlayerPawn.m_nLastKillerIndex = findOffsetByName(j, "C_CSPlayerPawn", "m_nLastKillerIndex");
C_CSPlayerPawn.m_bOldIsScoped = findOffsetByName(j, "C_CSPlayerPawn", "m_bOldIsScoped");
C_CSPlayerPawn.m_bHasDeathInfo = findOffsetByName(j, "C_CSPlayerPawn", "m_bHasDeathInfo");
C_CSPlayerPawn.m_flDeathInfoTime = findOffsetByName(j, "C_CSPlayerPawn", "m_flDeathInfoTime");
C_CSPlayerPawn.m_vecDeathInfoOrigin = findOffsetByName(j, "C_CSPlayerPawn", "m_vecDeathInfoOrigin");
C_CSPlayerPawn.m_grenadeParameterStashTime = findOffsetByName(j, "C_CSPlayerPawn", "m_grenadeParameterStashTime");
C_CSPlayerPawn.m_bGrenadeParametersStashed = findOffsetByName(j, "C_CSPlayerPawn", "m_bGrenadeParametersStashed");
C_CSPlayerPawn.m_angStashedShootAngles = findOffsetByName(j, "C_CSPlayerPawn", "m_angStashedShootAngles");
C_CSPlayerPawn.m_vecStashedGrenadeThrowPosition = findOffsetByName(j, "C_CSPlayerPawn", "m_vecStashedGrenadeThrowPosition");
C_CSPlayerPawn.m_vecStashedVelocity = findOffsetByName(j, "C_CSPlayerPawn", "m_vecStashedVelocity");
C_CSPlayerPawn.m_angShootAngleHistory = findOffsetByName(j, "C_CSPlayerPawn", "m_angShootAngleHistory");
C_CSPlayerPawn.m_vecThrowPositionHistory = findOffsetByName(j, "C_CSPlayerPawn", "m_vecThrowPositionHistory");
C_CSPlayerPawn.m_vecVelocityHistory = findOffsetByName(j, "C_CSPlayerPawn", "m_vecVelocityHistory");
C_CSPlayerPawn.m_PredictedDamageTags = findOffsetByName(j, "C_CSPlayerPawn", "m_PredictedDamageTags");
C_CSPlayerPawn.m_nPrevHighestReceivedDamageTagTick = findOffsetByName(j, "C_CSPlayerPawn", "m_nPrevHighestReceivedDamageTagTick");
C_CSPlayerPawn.m_nHighestAppliedDamageTagTick = findOffsetByName(j, "C_CSPlayerPawn", "m_nHighestAppliedDamageTagTick");

// Atribuições para C_RagdollPropAttached
// C_RagdollPropAttached Offsets
C_RagdollPropAttached.m_boneIndexAttached = findOffsetByName(j, "C_RagdollPropAttached", "m_boneIndexAttached");
C_RagdollPropAttached.m_ragdollAttachedObjectIndex = findOffsetByName(j, "C_RagdollPropAttached", "m_ragdollAttachedObjectIndex");
C_RagdollPropAttached.m_attachmentPointBoneSpace = findOffsetByName(j, "C_RagdollPropAttached", "m_attachmentPointBoneSpace");
C_RagdollPropAttached.m_attachmentPointRagdollSpace = findOffsetByName(j, "C_RagdollPropAttached", "m_attachmentPointRagdollSpace");
C_RagdollPropAttached.m_vecOffset = findOffsetByName(j, "C_RagdollPropAttached", "m_vecOffset");
C_RagdollPropAttached.m_parentTime = findOffsetByName(j, "C_RagdollPropAttached", "m_parentTime");
C_RagdollPropAttached.m_bHasParent = findOffsetByName(j, "C_RagdollPropAttached", "m_bHasParent");

// Atribuições para C_BaseCSGrenadeProjectile
// C_BaseCSGrenadeProjectile Offsets
C_BaseCSGrenadeProjectile.m_vInitialPosition = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_vInitialPosition");
C_BaseCSGrenadeProjectile.m_vInitialVelocity = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_vInitialVelocity");
C_BaseCSGrenadeProjectile.m_nBounces = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_nBounces");
C_BaseCSGrenadeProjectile.m_nExplodeEffectIndex = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_nExplodeEffectIndex");
C_BaseCSGrenadeProjectile.m_nExplodeEffectTickBegin = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin");
C_BaseCSGrenadeProjectile.m_vecExplodeEffectOrigin = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin");
C_BaseCSGrenadeProjectile.m_flSpawnTime = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_flSpawnTime");
C_BaseCSGrenadeProjectile.vecLastTrailLinePos = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "vecLastTrailLinePos");
C_BaseCSGrenadeProjectile.flNextTrailLineTime = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "flNextTrailLineTime");
C_BaseCSGrenadeProjectile.m_bExplodeEffectBegan = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_bExplodeEffectBegan");
C_BaseCSGrenadeProjectile.m_bCanCreateGrenadeTrail = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_bCanCreateGrenadeTrail");
C_BaseCSGrenadeProjectile.m_nSnapshotTrajectoryEffectIndex = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_nSnapshotTrajectoryEffectIndex");
C_BaseCSGrenadeProjectile.m_hSnapshotTrajectoryParticleSnapshot = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_hSnapshotTrajectoryParticleSnapshot");
C_BaseCSGrenadeProjectile.m_arrTrajectoryTrailPoints = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_arrTrajectoryTrailPoints");
C_BaseCSGrenadeProjectile.m_arrTrajectoryTrailPointCreationTimes = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_arrTrajectoryTrailPointCreationTimes");
C_BaseCSGrenadeProjectile.m_flTrajectoryTrailEffectCreationTime = findOffsetByName(j, "C_BaseCSGrenadeProjectile", "m_flTrajectoryTrailEffectCreationTime");

// Atribuições para C_BaseTrigger
// C_BaseTrigger Offsets
C_BaseTrigger.m_bDisabled = findOffsetByName(j, "C_BaseTrigger", "m_bDisabled");
C_BaseTrigger.m_bClientSidePredicted = findOffsetByName(j, "C_BaseTrigger", "m_bClientSidePredicted");

// Atribuições para C_WeaponBaseItem
// C_WeaponBaseItem Offsets
C_WeaponBaseItem.m_SequenceCompleteTimer = findOffsetByName(j, "C_WeaponBaseItem", "m_SequenceCompleteTimer");
C_WeaponBaseItem.m_bRedraw = findOffsetByName(j, "C_WeaponBaseItem", "m_bRedraw");

// Atribuições para CEffectData
// CEffectData Offsets
CEffectData.m_vOrigin = findOffsetByName(j, "CEffectData", "m_vOrigin");
CEffectData.m_vStart = findOffsetByName(j, "CEffectData", "m_vStart");
CEffectData.m_vNormal = findOffsetByName(j, "CEffectData", "m_vNormal");
CEffectData.m_vAngles = findOffsetByName(j, "CEffectData", "m_vAngles");
CEffectData.m_hEntity = findOffsetByName(j, "CEffectData", "m_hEntity");
CEffectData.m_hOtherEntity = findOffsetByName(j, "CEffectData", "m_hOtherEntity");
CEffectData.m_flScale = findOffsetByName(j, "CEffectData", "m_flScale");
CEffectData.m_flMagnitude = findOffsetByName(j, "CEffectData", "m_flMagnitude");
CEffectData.m_flRadius = findOffsetByName(j, "CEffectData", "m_flRadius");
CEffectData.m_nSurfaceProp = findOffsetByName(j, "CEffectData", "m_nSurfaceProp");
CEffectData.m_nEffectIndex = findOffsetByName(j, "CEffectData", "m_nEffectIndex");
CEffectData.m_nDamageType = findOffsetByName(j, "CEffectData", "m_nDamageType");
CEffectData.m_nPenetrate = findOffsetByName(j, "CEffectData", "m_nPenetrate");
CEffectData.m_nMaterial = findOffsetByName(j, "CEffectData", "m_nMaterial");
CEffectData.m_nHitBox = findOffsetByName(j, "CEffectData", "m_nHitBox");
CEffectData.m_nColor = findOffsetByName(j, "CEffectData", "m_nColor");
CEffectData.m_fFlags = findOffsetByName(j, "CEffectData", "m_fFlags");
CEffectData.m_nAttachmentIndex = findOffsetByName(j, "CEffectData", "m_nAttachmentIndex");
CEffectData.m_nAttachmentName = findOffsetByName(j, "CEffectData", "m_nAttachmentName");
CEffectData.m_iEffectName = findOffsetByName(j, "CEffectData", "m_iEffectName");
CEffectData.m_nExplosionType = findOffsetByName(j, "CEffectData", "m_nExplosionType");

// Atribuições para C_BaseButton
// C_BaseButton Offsets
C_BaseButton.m_glowEntity = findOffsetByName(j, "C_BaseButton", "m_glowEntity");
C_BaseButton.m_usable = findOffsetByName(j, "C_BaseButton", "m_usable");
C_BaseButton.m_szDisplayText = findOffsetByName(j, "C_BaseButton", "m_szDisplayText");

// Atribuições para CCSPlayer_ViewModelServices
// CCSPlayer_ViewModelServices Offsets
CCSPlayer_ViewModelServices.m_hViewModel = findOffsetByName(j, "CCSPlayer_ViewModelServices", "m_hViewModel");

// Atribuições para CPlayer_MovementServices_Humanoid
// CPlayer_MovementServices_Humanoid Offsets
CPlayer_MovementServices_Humanoid.m_flStepSoundTime = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_flStepSoundTime");
CPlayer_MovementServices_Humanoid.m_flFallVelocity = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_flFallVelocity");
CPlayer_MovementServices_Humanoid.m_bInCrouch = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_bInCrouch");
CPlayer_MovementServices_Humanoid.m_nCrouchState = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_nCrouchState");
CPlayer_MovementServices_Humanoid.m_flCrouchTransitionStartTime = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_flCrouchTransitionStartTime");
CPlayer_MovementServices_Humanoid.m_bDucked = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_bDucked");
CPlayer_MovementServices_Humanoid.m_bDucking = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_bDucking");
CPlayer_MovementServices_Humanoid.m_bInDuckJump = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_bInDuckJump");
CPlayer_MovementServices_Humanoid.m_groundNormal = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_groundNormal");
CPlayer_MovementServices_Humanoid.m_flSurfaceFriction = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_flSurfaceFriction");
CPlayer_MovementServices_Humanoid.m_surfaceProps = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_surfaceProps");
CPlayer_MovementServices_Humanoid.m_nStepside = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_nStepside");
CPlayer_MovementServices_Humanoid.m_iTargetVolume = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_iTargetVolume");
CPlayer_MovementServices_Humanoid.m_vecSmoothedVelocity = findOffsetByName(j, "CPlayer_MovementServices_Humanoid", "m_vecSmoothedVelocity");

// Atribuições para C_PointClientUIWorldPanel
// C_PointClientUIWorldPanel Offsets
C_PointClientUIWorldPanel.m_bForceRecreateNextUpdate = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bForceRecreateNextUpdate");
C_PointClientUIWorldPanel.m_bMoveViewToPlayerNextThink = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bMoveViewToPlayerNextThink");
C_PointClientUIWorldPanel.m_bCheckCSSClasses = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bCheckCSSClasses");
C_PointClientUIWorldPanel.m_anchorDeltaTransform = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_anchorDeltaTransform");
C_PointClientUIWorldPanel.m_pOffScreenIndicator = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_pOffScreenIndicator");
C_PointClientUIWorldPanel.m_bIgnoreInput = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bIgnoreInput");
C_PointClientUIWorldPanel.m_bLit = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bLit");
C_PointClientUIWorldPanel.m_bFollowPlayerAcrossTeleport = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");
C_PointClientUIWorldPanel.m_flWidth = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_flWidth");
C_PointClientUIWorldPanel.m_flHeight = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_flHeight");
C_PointClientUIWorldPanel.m_flDPI = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_flDPI");
C_PointClientUIWorldPanel.m_flInteractDistance = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_flInteractDistance");
C_PointClientUIWorldPanel.m_flDepthOffset = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_flDepthOffset");
C_PointClientUIWorldPanel.m_unOwnerContext = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_unOwnerContext");
C_PointClientUIWorldPanel.m_unHorizontalAlign = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_unHorizontalAlign");
C_PointClientUIWorldPanel.m_unVerticalAlign = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_unVerticalAlign");
C_PointClientUIWorldPanel.m_unOrientation = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_unOrientation");
C_PointClientUIWorldPanel.m_bAllowInteractionFromAllSceneWorlds = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");
C_PointClientUIWorldPanel.m_vecCSSClasses = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_vecCSSClasses");
C_PointClientUIWorldPanel.m_bOpaque = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bOpaque");
C_PointClientUIWorldPanel.m_bNoDepth = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bNoDepth");
C_PointClientUIWorldPanel.m_bRenderBackface = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bRenderBackface");
C_PointClientUIWorldPanel.m_bUseOffScreenIndicator = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bUseOffScreenIndicator");
C_PointClientUIWorldPanel.m_bExcludeFromSaveGames = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bExcludeFromSaveGames");
C_PointClientUIWorldPanel.m_bGrabbable = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bGrabbable");
C_PointClientUIWorldPanel.m_bOnlyRenderToTexture = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bOnlyRenderToTexture");
C_PointClientUIWorldPanel.m_bDisableMipGen = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_bDisableMipGen");
C_PointClientUIWorldPanel.m_nExplicitImageLayout = findOffsetByName(j, "C_PointClientUIWorldPanel", "m_nExplicitImageLayout");

// Atribuições para CCSGameModeRules_Deathmatch
// CCSGameModeRules_Deathmatch Offsets
CCSGameModeRules_Deathmatch.m_flDMBonusStartTime = findOffsetByName(j, "CCSGameModeRules_Deathmatch", "m_flDMBonusStartTime");
CCSGameModeRules_Deathmatch.m_flDMBonusTimeLength = findOffsetByName(j, "CCSGameModeRules_Deathmatch", "m_flDMBonusTimeLength");
CCSGameModeRules_Deathmatch.m_sDMBonusWeapon = findOffsetByName(j, "CCSGameModeRules_Deathmatch", "m_sDMBonusWeapon");

// Atribuições para C_GameRules
// C_GameRules Offsets
C_GameRules.__m_pChainEntity = findOffsetByName(j, "C_GameRules", "__m_pChainEntity");
C_GameRules.m_nTotalPausedTicks = findOffsetByName(j, "C_GameRules", "m_nTotalPausedTicks");
C_GameRules.m_nPauseStartTick = findOffsetByName(j, "C_GameRules", "m_nPauseStartTick");
C_GameRules.m_bGamePaused = findOffsetByName(j, "C_GameRules", "m_bGamePaused");

// Atribuições para C_Team
// C_Team Offsets
C_Team.m_aPlayerControllers = findOffsetByName(j, "C_Team", "m_aPlayerControllers");
C_Team.m_aPlayers = findOffsetByName(j, "C_Team", "m_aPlayers");
C_Team.m_iScore = findOffsetByName(j, "C_Team", "m_iScore");
C_Team.m_szTeamname = findOffsetByName(j, "C_Team", "m_szTeamname");

// Atribuições para C_SoundAreaEntityOrientedBox
// C_SoundAreaEntityOrientedBox Offsets
C_SoundAreaEntityOrientedBox.m_vMin = findOffsetByName(j, "C_SoundAreaEntityOrientedBox", "m_vMin");
C_SoundAreaEntityOrientedBox.m_vMax = findOffsetByName(j, "C_SoundAreaEntityOrientedBox", "m_vMax");

// Atribuições para C_TextureBasedAnimatable
// C_TextureBasedAnimatable Offsets
C_TextureBasedAnimatable.m_bLoop = findOffsetByName(j, "C_TextureBasedAnimatable", "m_bLoop");
C_TextureBasedAnimatable.m_flFPS = findOffsetByName(j, "C_TextureBasedAnimatable", "m_flFPS");
C_TextureBasedAnimatable.m_hPositionKeys = findOffsetByName(j, "C_TextureBasedAnimatable", "m_hPositionKeys");
C_TextureBasedAnimatable.m_hRotationKeys = findOffsetByName(j, "C_TextureBasedAnimatable", "m_hRotationKeys");
C_TextureBasedAnimatable.m_vAnimationBoundsMin = findOffsetByName(j, "C_TextureBasedAnimatable", "m_vAnimationBoundsMin");
C_TextureBasedAnimatable.m_vAnimationBoundsMax = findOffsetByName(j, "C_TextureBasedAnimatable", "m_vAnimationBoundsMax");
C_TextureBasedAnimatable.m_flStartTime = findOffsetByName(j, "C_TextureBasedAnimatable", "m_flStartTime");
C_TextureBasedAnimatable.m_flStartFrame = findOffsetByName(j, "C_TextureBasedAnimatable", "m_flStartFrame");

// Atribuições para CCSPlayer_WaterServices
// CCSPlayer_WaterServices Offsets
CCSPlayer_WaterServices.m_flWaterJumpTime = findOffsetByName(j, "CCSPlayer_WaterServices", "m_flWaterJumpTime");
CCSPlayer_WaterServices.m_vecWaterJumpVel = findOffsetByName(j, "CCSPlayer_WaterServices", "m_vecWaterJumpVel");
CCSPlayer_WaterServices.m_flSwimSoundTime = findOffsetByName(j, "CCSPlayer_WaterServices", "m_flSwimSoundTime");
CCSPlayer_WaterServices.m_NextDrownDamageTime = findOffsetByName(j, "CCSPlayer_WaterServices", "m_NextDrownDamageTime");
CCSPlayer_WaterServices.m_nDrownDmgRate = findOffsetByName(j, "CCSPlayer_WaterServices", "m_nDrownDmgRate");
CCSPlayer_WaterServices.m_AirFinishedTime = findOffsetByName(j, "CCSPlayer_WaterServices", "m_AirFinishedTime");

// Atribuições para CSkyboxReference
// CSkyboxReference Offsets
CSkyboxReference.m_worldGroupId = findOffsetByName(j, "CSkyboxReference", "m_worldGroupId");
CSkyboxReference.m_hSkyCamera = findOffsetByName(j, "CSkyboxReference", "m_hSkyCamera");

// Atribuições para CProjectedTextureBase
// CProjectedTextureBase Offsets
CProjectedTextureBase.m_hTargetEntity = findOffsetByName(j, "CProjectedTextureBase", "m_hTargetEntity");
CProjectedTextureBase.m_bState = findOffsetByName(j, "CProjectedTextureBase", "m_bState");
CProjectedTextureBase.m_bAlwaysUpdate = findOffsetByName(j, "CProjectedTextureBase", "m_bAlwaysUpdate");
CProjectedTextureBase.m_flLightFOV = findOffsetByName(j, "CProjectedTextureBase", "m_flLightFOV");
CProjectedTextureBase.m_bEnableShadows = findOffsetByName(j, "CProjectedTextureBase", "m_bEnableShadows");
CProjectedTextureBase.m_bSimpleProjection = findOffsetByName(j, "CProjectedTextureBase", "m_bSimpleProjection");
CProjectedTextureBase.m_bLightOnlyTarget = findOffsetByName(j, "CProjectedTextureBase", "m_bLightOnlyTarget");
CProjectedTextureBase.m_bLightWorld = findOffsetByName(j, "CProjectedTextureBase", "m_bLightWorld");
CProjectedTextureBase.m_bCameraSpace = findOffsetByName(j, "CProjectedTextureBase", "m_bCameraSpace");
CProjectedTextureBase.m_flBrightnessScale = findOffsetByName(j, "CProjectedTextureBase", "m_flBrightnessScale");
CProjectedTextureBase.m_LightColor = findOffsetByName(j, "CProjectedTextureBase", "m_LightColor");
CProjectedTextureBase.m_flIntensity = findOffsetByName(j, "CProjectedTextureBase", "m_flIntensity");
CProjectedTextureBase.m_flLinearAttenuation = findOffsetByName(j, "CProjectedTextureBase", "m_flLinearAttenuation");
CProjectedTextureBase.m_flQuadraticAttenuation = findOffsetByName(j, "CProjectedTextureBase", "m_flQuadraticAttenuation");
CProjectedTextureBase.m_bVolumetric = findOffsetByName(j, "CProjectedTextureBase", "m_bVolumetric");
CProjectedTextureBase.m_flVolumetricIntensity = findOffsetByName(j, "CProjectedTextureBase", "m_flVolumetricIntensity");
CProjectedTextureBase.m_flNoiseStrength = findOffsetByName(j, "CProjectedTextureBase", "m_flNoiseStrength");
CProjectedTextureBase.m_flFlashlightTime = findOffsetByName(j, "CProjectedTextureBase", "m_flFlashlightTime");
CProjectedTextureBase.m_nNumPlanes = findOffsetByName(j, "CProjectedTextureBase", "m_nNumPlanes");
CProjectedTextureBase.m_flPlaneOffset = findOffsetByName(j, "CProjectedTextureBase", "m_flPlaneOffset");
CProjectedTextureBase.m_flColorTransitionTime = findOffsetByName(j, "CProjectedTextureBase", "m_flColorTransitionTime");
CProjectedTextureBase.m_flAmbient = findOffsetByName(j, "CProjectedTextureBase", "m_flAmbient");
CProjectedTextureBase.m_SpotlightTextureName = findOffsetByName(j, "CProjectedTextureBase", "m_SpotlightTextureName");
CProjectedTextureBase.m_nSpotlightTextureFrame = findOffsetByName(j, "CProjectedTextureBase", "m_nSpotlightTextureFrame");
CProjectedTextureBase.m_nShadowQuality = findOffsetByName(j, "CProjectedTextureBase", "m_nShadowQuality");
CProjectedTextureBase.m_flNearZ = findOffsetByName(j, "CProjectedTextureBase", "m_flNearZ");
CProjectedTextureBase.m_flFarZ = findOffsetByName(j, "CProjectedTextureBase", "m_flFarZ");
CProjectedTextureBase.m_flProjectionSize = findOffsetByName(j, "CProjectedTextureBase", "m_flProjectionSize");
CProjectedTextureBase.m_flRotation = findOffsetByName(j, "CProjectedTextureBase", "m_flRotation");
CProjectedTextureBase.m_bFlipHorizontal = findOffsetByName(j, "CProjectedTextureBase", "m_bFlipHorizontal");

// Atribuições para CCSPlayerController_InventoryServices
// CCSPlayerController_InventoryServices Offsets
CCSPlayerController_InventoryServices.m_unMusicID = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_unMusicID");
CCSPlayerController_InventoryServices.m_rank = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_rank");
CCSPlayerController_InventoryServices.m_nPersonaDataPublicLevel = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel");
CCSPlayerController_InventoryServices.m_nPersonaDataPublicCommendsLeader = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader");
CCSPlayerController_InventoryServices.m_nPersonaDataPublicCommendsTeacher = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher");
CCSPlayerController_InventoryServices.m_nPersonaDataPublicCommendsFriendly = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly");
CCSPlayerController_InventoryServices.m_nPersonaDataXpTrailLevel = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_nPersonaDataXpTrailLevel");
CCSPlayerController_InventoryServices.m_vecServerAuthoritativeWeaponSlots = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots");
CCSPlayerController_InventoryServices.m_unEquippedPlayerSprayIDs = findOffsetByName(j, "CCSPlayerController_InventoryServices", "m_unEquippedPlayerSprayIDs");

// Atribuições para C_CSGOViewModel
// C_CSGOViewModel Offsets
C_CSGOViewModel.m_bShouldIgnoreOffsetAndAccuracy = findOffsetByName(j, "C_CSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy");
C_CSGOViewModel.m_nLastKnownAssociatedWeaponEntIndex = findOffsetByName(j, "C_CSGOViewModel", "m_nLastKnownAssociatedWeaponEntIndex");
C_CSGOViewModel.m_bNeedToQueueHighResComposite = findOffsetByName(j, "C_CSGOViewModel", "m_bNeedToQueueHighResComposite");
C_CSGOViewModel.m_vLoweredWeaponOffset = findOffsetByName(j, "C_CSGOViewModel", "m_vLoweredWeaponOffset");

// Atribuições para CScriptComponent
// CScriptComponent Offsets
CScriptComponent.m_scriptClassName = findOffsetByName(j, "CScriptComponent", "m_scriptClassName");

// Atribuições para C_EnvLightProbeVolume
// C_EnvLightProbeVolume Offsets
C_EnvLightProbeVolume.m_Entity_hLightProbeTexture = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_hLightProbeTexture");
C_EnvLightProbeVolume.m_Entity_hLightProbeDirectLightIndicesTexture = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_hLightProbeDirectLightIndicesTexture");
C_EnvLightProbeVolume.m_Entity_hLightProbeDirectLightScalarsTexture = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_hLightProbeDirectLightScalarsTexture");
C_EnvLightProbeVolume.m_Entity_hLightProbeDirectLightShadowsTexture = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_hLightProbeDirectLightShadowsTexture");
C_EnvLightProbeVolume.m_Entity_vBoxMins = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_vBoxMins");
C_EnvLightProbeVolume.m_Entity_vBoxMaxs = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_vBoxMaxs");
C_EnvLightProbeVolume.m_Entity_bMoveable = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_bMoveable");
C_EnvLightProbeVolume.m_Entity_nHandshake = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nHandshake");
C_EnvLightProbeVolume.m_Entity_nPriority = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nPriority");
C_EnvLightProbeVolume.m_Entity_bStartDisabled = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_bStartDisabled");
C_EnvLightProbeVolume.m_Entity_nLightProbeSizeX = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeSizeX");
C_EnvLightProbeVolume.m_Entity_nLightProbeSizeY = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeSizeY");
C_EnvLightProbeVolume.m_Entity_nLightProbeSizeZ = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeSizeZ");
C_EnvLightProbeVolume.m_Entity_nLightProbeAtlasX = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeAtlasX");
C_EnvLightProbeVolume.m_Entity_nLightProbeAtlasY = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeAtlasY");
C_EnvLightProbeVolume.m_Entity_nLightProbeAtlasZ = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
C_EnvLightProbeVolume.m_Entity_bEnabled = findOffsetByName(j, "C_EnvLightProbeVolume", "m_Entity_bEnabled");

// Atribuições para C_ViewmodelAttachmentModel
// C_ViewmodelAttachmentModel Offsets
C_ViewmodelAttachmentModel.m_bShouldFrontFaceCullLeftHanded = findOffsetByName(j, "C_ViewmodelAttachmentModel", "m_bShouldFrontFaceCullLeftHanded");
C_ViewmodelAttachmentModel.m_bCreatedLeftHanded = findOffsetByName(j, "C_ViewmodelAttachmentModel", "m_bCreatedLeftHanded");

// Atribuições para CSPerRoundStats_t
// CSPerRoundStats_t Offsets
CSPerRoundStats_t.m_iKills = findOffsetByName(j, "CSPerRoundStats_t", "m_iKills");
CSPerRoundStats_t.m_iDeaths = findOffsetByName(j, "CSPerRoundStats_t", "m_iDeaths");
CSPerRoundStats_t.m_iAssists = findOffsetByName(j, "CSPerRoundStats_t", "m_iAssists");
CSPerRoundStats_t.m_iDamage = findOffsetByName(j, "CSPerRoundStats_t", "m_iDamage");
CSPerRoundStats_t.m_iEquipmentValue = findOffsetByName(j, "CSPerRoundStats_t", "m_iEquipmentValue");
CSPerRoundStats_t.m_iMoneySaved = findOffsetByName(j, "CSPerRoundStats_t", "m_iMoneySaved");
CSPerRoundStats_t.m_iKillReward = findOffsetByName(j, "CSPerRoundStats_t", "m_iKillReward");
CSPerRoundStats_t.m_iLiveTime = findOffsetByName(j, "CSPerRoundStats_t", "m_iLiveTime");
CSPerRoundStats_t.m_iHeadShotKills = findOffsetByName(j, "CSPerRoundStats_t", "m_iHeadShotKills");
CSPerRoundStats_t.m_iObjective = findOffsetByName(j, "CSPerRoundStats_t", "m_iObjective");
CSPerRoundStats_t.m_iCashEarned = findOffsetByName(j, "CSPerRoundStats_t", "m_iCashEarned");
CSPerRoundStats_t.m_iUtilityDamage = findOffsetByName(j, "CSPerRoundStats_t", "m_iUtilityDamage");
CSPerRoundStats_t.m_iEnemiesFlashed = findOffsetByName(j, "CSPerRoundStats_t", "m_iEnemiesFlashed");

// Atribuições para CRagdollManager
// CRagdollManager Offsets
CRagdollManager.m_iCurrentMaxRagdollCount = findOffsetByName(j, "CRagdollManager", "m_iCurrentMaxRagdollCount");
CRagdollManager.m_iMaxRagdollCount = findOffsetByName(j, "CRagdollManager", "m_iMaxRagdollCount");
CRagdollManager.m_bSaveImportant = findOffsetByName(j, "CRagdollManager", "m_bSaveImportant");
CRagdollManager.m_bCanTakeDamage = findOffsetByName(j, "CRagdollManager", "m_bCanTakeDamage");

// Atribuições para C_TeamRoundTimer
// C_TeamRoundTimer Offsets
C_TeamRoundTimer.m_bTimerPaused = findOffsetByName(j, "C_TeamRoundTimer", "m_bTimerPaused");
C_TeamRoundTimer.m_flTimeRemaining = findOffsetByName(j, "C_TeamRoundTimer", "m_flTimeRemaining");
C_TeamRoundTimer.m_flTimerEndTime = findOffsetByName(j, "C_TeamRoundTimer", "m_flTimerEndTime");
C_TeamRoundTimer.m_bIsDisabled = findOffsetByName(j, "C_TeamRoundTimer", "m_bIsDisabled");
C_TeamRoundTimer.m_bShowInHUD = findOffsetByName(j, "C_TeamRoundTimer", "m_bShowInHUD");
C_TeamRoundTimer.m_nTimerLength = findOffsetByName(j, "C_TeamRoundTimer", "m_nTimerLength");
C_TeamRoundTimer.m_nTimerInitialLength = findOffsetByName(j, "C_TeamRoundTimer", "m_nTimerInitialLength");
C_TeamRoundTimer.m_nTimerMaxLength = findOffsetByName(j, "C_TeamRoundTimer", "m_nTimerMaxLength");
C_TeamRoundTimer.m_bAutoCountdown = findOffsetByName(j, "C_TeamRoundTimer", "m_bAutoCountdown");
C_TeamRoundTimer.m_nSetupTimeLength = findOffsetByName(j, "C_TeamRoundTimer", "m_nSetupTimeLength");
C_TeamRoundTimer.m_nState = findOffsetByName(j, "C_TeamRoundTimer", "m_nState");
C_TeamRoundTimer.m_bStartPaused = findOffsetByName(j, "C_TeamRoundTimer", "m_bStartPaused");
C_TeamRoundTimer.m_bInCaptureWatchState = findOffsetByName(j, "C_TeamRoundTimer", "m_bInCaptureWatchState");
C_TeamRoundTimer.m_flTotalTime = findOffsetByName(j, "C_TeamRoundTimer", "m_flTotalTime");
C_TeamRoundTimer.m_bStopWatchTimer = findOffsetByName(j, "C_TeamRoundTimer", "m_bStopWatchTimer");
C_TeamRoundTimer.m_bFireFinished = findOffsetByName(j, "C_TeamRoundTimer", "m_bFireFinished");
C_TeamRoundTimer.m_bFire5MinRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire5MinRemain");
C_TeamRoundTimer.m_bFire4MinRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire4MinRemain");
C_TeamRoundTimer.m_bFire3MinRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire3MinRemain");
C_TeamRoundTimer.m_bFire2MinRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire2MinRemain");
C_TeamRoundTimer.m_bFire1MinRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire1MinRemain");
C_TeamRoundTimer.m_bFire30SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire30SecRemain");
C_TeamRoundTimer.m_bFire10SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire10SecRemain");
C_TeamRoundTimer.m_bFire5SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire5SecRemain");
C_TeamRoundTimer.m_bFire4SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire4SecRemain");
C_TeamRoundTimer.m_bFire3SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire3SecRemain");
C_TeamRoundTimer.m_bFire2SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire2SecRemain");
C_TeamRoundTimer.m_bFire1SecRemain = findOffsetByName(j, "C_TeamRoundTimer", "m_bFire1SecRemain");
C_TeamRoundTimer.m_nOldTimerLength = findOffsetByName(j, "C_TeamRoundTimer", "m_nOldTimerLength");
C_TeamRoundTimer.m_nOldTimerState = findOffsetByName(j, "C_TeamRoundTimer", "m_nOldTimerState");

// Atribuições para WeaponPurchaseCount_t
// WeaponPurchaseCount_t Offsets
WeaponPurchaseCount_t.m_nItemDefIndex = findOffsetByName(j, "WeaponPurchaseCount_t", "m_nItemDefIndex");
WeaponPurchaseCount_t.m_nCount = findOffsetByName(j, "WeaponPurchaseCount_t", "m_nCount");

// Atribuições para CPathSimple
// CPathSimple Offsets
CPathSimple.m_pathString = findOffsetByName(j, "CPathSimple", "m_pathString");

// Atribuições para CCSPlayerBase_CameraServices
// CCSPlayerBase_CameraServices Offsets
CCSPlayerBase_CameraServices.m_iFOV = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_iFOV");
CCSPlayerBase_CameraServices.m_iFOVStart = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_iFOVStart");
CCSPlayerBase_CameraServices.m_flFOVTime = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_flFOVTime");
CCSPlayerBase_CameraServices.m_flFOVRate = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_flFOVRate");
CCSPlayerBase_CameraServices.m_hZoomOwner = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_hZoomOwner");
CCSPlayerBase_CameraServices.m_flLastShotFOV = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_flLastShotFOV");
CCSPlayerBase_CameraServices.m_hTriggerFogList = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_hTriggerFogList");
CCSPlayerBase_CameraServices.m_hLastFogTrigger = findOffsetByName(j, "CCSPlayerBase_CameraServices", "m_hLastFogTrigger");

// Atribuições para CPointOffScreenIndicatorUi
// CPointOffScreenIndicatorUi Offsets
CPointOffScreenIndicatorUi.m_bBeenEnabled = findOffsetByName(j, "CPointOffScreenIndicatorUi", "m_bBeenEnabled");
CPointOffScreenIndicatorUi.m_bHide = findOffsetByName(j, "CPointOffScreenIndicatorUi", "m_bHide");
CPointOffScreenIndicatorUi.m_flSeenTargetTime = findOffsetByName(j, "CPointOffScreenIndicatorUi", "m_flSeenTargetTime");
CPointOffScreenIndicatorUi.m_pTargetPanel = findOffsetByName(j, "CPointOffScreenIndicatorUi", "m_pTargetPanel");

// Atribuições para C_CSWeaponBaseGun
// C_CSWeaponBaseGun Offsets
C_CSWeaponBaseGun.m_zoomLevel = findOffsetByName(j, "C_CSWeaponBaseGun", "m_zoomLevel");
C_CSWeaponBaseGun.m_iBurstShotsRemaining = findOffsetByName(j, "C_CSWeaponBaseGun", "m_iBurstShotsRemaining");
C_CSWeaponBaseGun.m_iSilencerBodygroup = findOffsetByName(j, "C_CSWeaponBaseGun", "m_iSilencerBodygroup");
C_CSWeaponBaseGun.m_silencedModelIndex = findOffsetByName(j, "C_CSWeaponBaseGun", "m_silencedModelIndex");
C_CSWeaponBaseGun.m_inPrecache = findOffsetByName(j, "C_CSWeaponBaseGun", "m_inPrecache");
C_CSWeaponBaseGun.m_bNeedsBoltAction = findOffsetByName(j, "C_CSWeaponBaseGun", "m_bNeedsBoltAction");

// Atribuições para C_SkyCamera
// C_SkyCamera Offsets
C_SkyCamera.m_skyboxData = findOffsetByName(j, "C_SkyCamera", "m_skyboxData");
C_SkyCamera.m_skyboxSlotToken = findOffsetByName(j, "C_SkyCamera", "m_skyboxSlotToken");
C_SkyCamera.m_bUseAngles = findOffsetByName(j, "C_SkyCamera", "m_bUseAngles");
C_SkyCamera.m_pNext = findOffsetByName(j, "C_SkyCamera", "m_pNext");

// Atribuições para C_EntityDissolve
// C_EntityDissolve Offsets
C_EntityDissolve.m_flStartTime = findOffsetByName(j, "C_EntityDissolve", "m_flStartTime");
C_EntityDissolve.m_flFadeInStart = findOffsetByName(j, "C_EntityDissolve", "m_flFadeInStart");
C_EntityDissolve.m_flFadeInLength = findOffsetByName(j, "C_EntityDissolve", "m_flFadeInLength");
C_EntityDissolve.m_flFadeOutModelStart = findOffsetByName(j, "C_EntityDissolve", "m_flFadeOutModelStart");
C_EntityDissolve.m_flFadeOutModelLength = findOffsetByName(j, "C_EntityDissolve", "m_flFadeOutModelLength");
C_EntityDissolve.m_flFadeOutStart = findOffsetByName(j, "C_EntityDissolve", "m_flFadeOutStart");
C_EntityDissolve.m_flFadeOutLength = findOffsetByName(j, "C_EntityDissolve", "m_flFadeOutLength");
C_EntityDissolve.m_flNextSparkTime = findOffsetByName(j, "C_EntityDissolve", "m_flNextSparkTime");
C_EntityDissolve.m_nDissolveType = findOffsetByName(j, "C_EntityDissolve", "m_nDissolveType");
C_EntityDissolve.m_vDissolverOrigin = findOffsetByName(j, "C_EntityDissolve", "m_vDissolverOrigin");
C_EntityDissolve.m_nMagnitude = findOffsetByName(j, "C_EntityDissolve", "m_nMagnitude");
C_EntityDissolve.m_bCoreExplode = findOffsetByName(j, "C_EntityDissolve", "m_bCoreExplode");
C_EntityDissolve.m_bLinkedToServerEnt = findOffsetByName(j, "C_EntityDissolve", "m_bLinkedToServerEnt");

// Atribuições para C_fogplayerparams_t
// C_fogplayerparams_t Offsets
C_fogplayerparams_t.m_hCtrl = findOffsetByName(j, "C_fogplayerparams_t", "m_hCtrl");
C_fogplayerparams_t.m_flTransitionTime = findOffsetByName(j, "C_fogplayerparams_t", "m_flTransitionTime");
C_fogplayerparams_t.m_OldColor = findOffsetByName(j, "C_fogplayerparams_t", "m_OldColor");
C_fogplayerparams_t.m_flOldStart = findOffsetByName(j, "C_fogplayerparams_t", "m_flOldStart");
C_fogplayerparams_t.m_flOldEnd = findOffsetByName(j, "C_fogplayerparams_t", "m_flOldEnd");
C_fogplayerparams_t.m_flOldMaxDensity = findOffsetByName(j, "C_fogplayerparams_t", "m_flOldMaxDensity");
C_fogplayerparams_t.m_flOldHDRColorScale = findOffsetByName(j, "C_fogplayerparams_t", "m_flOldHDRColorScale");
C_fogplayerparams_t.m_flOldFarZ = findOffsetByName(j, "C_fogplayerparams_t", "m_flOldFarZ");
C_fogplayerparams_t.m_NewColor = findOffsetByName(j, "C_fogplayerparams_t", "m_NewColor");
C_fogplayerparams_t.m_flNewStart = findOffsetByName(j, "C_fogplayerparams_t", "m_flNewStart");
C_fogplayerparams_t.m_flNewEnd = findOffsetByName(j, "C_fogplayerparams_t", "m_flNewEnd");
C_fogplayerparams_t.m_flNewMaxDensity = findOffsetByName(j, "C_fogplayerparams_t", "m_flNewMaxDensity");
C_fogplayerparams_t.m_flNewHDRColorScale = findOffsetByName(j, "C_fogplayerparams_t", "m_flNewHDRColorScale");
C_fogplayerparams_t.m_flNewFarZ = findOffsetByName(j, "C_fogplayerparams_t", "m_flNewFarZ");

// Atribuições para C_CSPlayerPawnBase
// C_CSPlayerPawnBase Offsets
C_CSPlayerPawnBase.m_pPingServices = findOffsetByName(j, "C_CSPlayerPawnBase", "m_pPingServices");
C_CSPlayerPawnBase.m_pViewModelServices = findOffsetByName(j, "C_CSPlayerPawnBase", "m_pViewModelServices");
C_CSPlayerPawnBase.m_fRenderingClipPlane = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fRenderingClipPlane");
C_CSPlayerPawnBase.m_nLastClipPlaneSetupFrame = findOffsetByName(j, "C_CSPlayerPawnBase", "m_nLastClipPlaneSetupFrame");
C_CSPlayerPawnBase.m_vecLastClipCameraPos = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vecLastClipCameraPos");
C_CSPlayerPawnBase.m_vecLastClipCameraForward = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vecLastClipCameraForward");
C_CSPlayerPawnBase.m_bClipHitStaticWorld = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bClipHitStaticWorld");
C_CSPlayerPawnBase.m_bCachedPlaneIsValid = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bCachedPlaneIsValid");
C_CSPlayerPawnBase.m_pClippingWeapon = findOffsetByName(j, "C_CSPlayerPawnBase", "m_pClippingWeapon");
C_CSPlayerPawnBase.m_previousPlayerState = findOffsetByName(j, "C_CSPlayerPawnBase", "m_previousPlayerState");
C_CSPlayerPawnBase.m_iPlayerState = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iPlayerState");
C_CSPlayerPawnBase.m_bIsRescuing = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bIsRescuing");
C_CSPlayerPawnBase.m_fImmuneToGunGameDamageTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fImmuneToGunGameDamageTime");
C_CSPlayerPawnBase.m_fImmuneToGunGameDamageTimeLast = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fImmuneToGunGameDamageTimeLast");
C_CSPlayerPawnBase.m_bGunGameImmunity = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bGunGameImmunity");
C_CSPlayerPawnBase.m_bHasMovedSinceSpawn = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bHasMovedSinceSpawn");
C_CSPlayerPawnBase.m_fMolotovUseTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fMolotovUseTime");
C_CSPlayerPawnBase.m_fMolotovDamageTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fMolotovDamageTime");
C_CSPlayerPawnBase.m_iThrowGrenadeCounter = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iThrowGrenadeCounter");
C_CSPlayerPawnBase.m_flLastSpawnTimeIndex = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flLastSpawnTimeIndex");
C_CSPlayerPawnBase.m_iProgressBarDuration = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iProgressBarDuration");
C_CSPlayerPawnBase.m_flProgressBarStartTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flProgressBarStartTime");
C_CSPlayerPawnBase.m_vecIntroStartEyePosition = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vecIntroStartEyePosition");
C_CSPlayerPawnBase.m_vecIntroStartPlayerForward = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vecIntroStartPlayerForward");
C_CSPlayerPawnBase.m_flClientDeathTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flClientDeathTime");
C_CSPlayerPawnBase.m_bScreenTearFrameCaptured = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bScreenTearFrameCaptured");
C_CSPlayerPawnBase.m_flFlashBangTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flFlashBangTime");
C_CSPlayerPawnBase.m_flFlashScreenshotAlpha = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flFlashScreenshotAlpha");
C_CSPlayerPawnBase.m_flFlashOverlayAlpha = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flFlashOverlayAlpha");
C_CSPlayerPawnBase.m_bFlashBuildUp = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bFlashBuildUp");
C_CSPlayerPawnBase.m_bFlashDspHasBeenCleared = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bFlashDspHasBeenCleared");
C_CSPlayerPawnBase.m_bFlashScreenshotHasBeenGrabbed = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bFlashScreenshotHasBeenGrabbed");
C_CSPlayerPawnBase.m_flFlashMaxAlpha = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flFlashMaxAlpha");
C_CSPlayerPawnBase.m_flFlashDuration = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flFlashDuration");
C_CSPlayerPawnBase.m_iHealthBarRenderMaskIndex = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iHealthBarRenderMaskIndex");
C_CSPlayerPawnBase.m_flHealthFadeValue = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flHealthFadeValue");
C_CSPlayerPawnBase.m_flHealthFadeAlpha = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flHealthFadeAlpha");
C_CSPlayerPawnBase.m_flDeathCCWeight = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flDeathCCWeight");
C_CSPlayerPawnBase.m_flPrevRoundEndTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flPrevRoundEndTime");
C_CSPlayerPawnBase.m_flPrevMatchEndTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flPrevMatchEndTime");
C_CSPlayerPawnBase.m_angEyeAngles = findOffsetByName(j, "C_CSPlayerPawnBase", "m_angEyeAngles");
C_CSPlayerPawnBase.m_fNextThinkPushAway = findOffsetByName(j, "C_CSPlayerPawnBase", "m_fNextThinkPushAway");
C_CSPlayerPawnBase.m_bShouldAutobuyDMWeapons = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bShouldAutobuyDMWeapons");
C_CSPlayerPawnBase.m_bShouldAutobuyNow = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bShouldAutobuyNow");
C_CSPlayerPawnBase.m_iIDEntIndex = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iIDEntIndex");
C_CSPlayerPawnBase.m_delayTargetIDTimer = findOffsetByName(j, "C_CSPlayerPawnBase", "m_delayTargetIDTimer");
C_CSPlayerPawnBase.m_iTargetItemEntIdx = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iTargetItemEntIdx");
C_CSPlayerPawnBase.m_iOldIDEntIndex = findOffsetByName(j, "C_CSPlayerPawnBase", "m_iOldIDEntIndex");
C_CSPlayerPawnBase.m_holdTargetIDTimer = findOffsetByName(j, "C_CSPlayerPawnBase", "m_holdTargetIDTimer");
C_CSPlayerPawnBase.m_flCurrentMusicStartTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flCurrentMusicStartTime");
C_CSPlayerPawnBase.m_flMusicRoundStartTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flMusicRoundStartTime");
C_CSPlayerPawnBase.m_bDeferStartMusicOnWarmup = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bDeferStartMusicOnWarmup");
C_CSPlayerPawnBase.m_cycleLatch = findOffsetByName(j, "C_CSPlayerPawnBase", "m_cycleLatch");
C_CSPlayerPawnBase.m_serverIntendedCycle = findOffsetByName(j, "C_CSPlayerPawnBase", "m_serverIntendedCycle");
C_CSPlayerPawnBase.m_flLastSmokeOverlayAlpha = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flLastSmokeOverlayAlpha");
C_CSPlayerPawnBase.m_flLastSmokeAge = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flLastSmokeAge");
C_CSPlayerPawnBase.m_vLastSmokeOverlayColor = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vLastSmokeOverlayColor");
C_CSPlayerPawnBase.m_nPlayerSmokedFx = findOffsetByName(j, "C_CSPlayerPawnBase", "m_nPlayerSmokedFx");
C_CSPlayerPawnBase.m_nPlayerInfernoBodyFx = findOffsetByName(j, "C_CSPlayerPawnBase", "m_nPlayerInfernoBodyFx");
C_CSPlayerPawnBase.m_nPlayerInfernoFootFx = findOffsetByName(j, "C_CSPlayerPawnBase", "m_nPlayerInfernoFootFx");
C_CSPlayerPawnBase.m_flNextMagDropTime = findOffsetByName(j, "C_CSPlayerPawnBase", "m_flNextMagDropTime");
C_CSPlayerPawnBase.m_nLastMagDropAttachmentIndex = findOffsetByName(j, "C_CSPlayerPawnBase", "m_nLastMagDropAttachmentIndex");
C_CSPlayerPawnBase.m_vecLastAliveLocalVelocity = findOffsetByName(j, "C_CSPlayerPawnBase", "m_vecLastAliveLocalVelocity");
C_CSPlayerPawnBase.m_bGuardianShouldSprayCustomXMark = findOffsetByName(j, "C_CSPlayerPawnBase", "m_bGuardianShouldSprayCustomXMark");
C_CSPlayerPawnBase.m_hOriginalController = findOffsetByName(j, "C_CSPlayerPawnBase", "m_hOriginalController");

// Atribuições para C_EnvWindShared
// C_EnvWindShared Offsets
C_EnvWindShared.m_flStartTime = findOffsetByName(j, "C_EnvWindShared", "m_flStartTime");
C_EnvWindShared.m_iWindSeed = findOffsetByName(j, "C_EnvWindShared", "m_iWindSeed");
C_EnvWindShared.m_iMinWind = findOffsetByName(j, "C_EnvWindShared", "m_iMinWind");
C_EnvWindShared.m_iMaxWind = findOffsetByName(j, "C_EnvWindShared", "m_iMaxWind");
C_EnvWindShared.m_windRadius = findOffsetByName(j, "C_EnvWindShared", "m_windRadius");
C_EnvWindShared.m_iMinGust = findOffsetByName(j, "C_EnvWindShared", "m_iMinGust");
C_EnvWindShared.m_iMaxGust = findOffsetByName(j, "C_EnvWindShared", "m_iMaxGust");
C_EnvWindShared.m_flMinGustDelay = findOffsetByName(j, "C_EnvWindShared", "m_flMinGustDelay");
C_EnvWindShared.m_flMaxGustDelay = findOffsetByName(j, "C_EnvWindShared", "m_flMaxGustDelay");
C_EnvWindShared.m_flGustDuration = findOffsetByName(j, "C_EnvWindShared", "m_flGustDuration");
C_EnvWindShared.m_iGustDirChange = findOffsetByName(j, "C_EnvWindShared", "m_iGustDirChange");
C_EnvWindShared.m_location = findOffsetByName(j, "C_EnvWindShared", "m_location");
C_EnvWindShared.m_iszGustSound = findOffsetByName(j, "C_EnvWindShared", "m_iszGustSound");
C_EnvWindShared.m_iWindDir = findOffsetByName(j, "C_EnvWindShared", "m_iWindDir");
C_EnvWindShared.m_flWindSpeed = findOffsetByName(j, "C_EnvWindShared", "m_flWindSpeed");
C_EnvWindShared.m_currentWindVector = findOffsetByName(j, "C_EnvWindShared", "m_currentWindVector");
C_EnvWindShared.m_CurrentSwayVector = findOffsetByName(j, "C_EnvWindShared", "m_CurrentSwayVector");
C_EnvWindShared.m_PrevSwayVector = findOffsetByName(j, "C_EnvWindShared", "m_PrevSwayVector");
C_EnvWindShared.m_iInitialWindDir = findOffsetByName(j, "C_EnvWindShared", "m_iInitialWindDir");
C_EnvWindShared.m_flInitialWindSpeed = findOffsetByName(j, "C_EnvWindShared", "m_flInitialWindSpeed");
C_EnvWindShared.m_flVariationTime = findOffsetByName(j, "C_EnvWindShared", "m_flVariationTime");
C_EnvWindShared.m_flSwayTime = findOffsetByName(j, "C_EnvWindShared", "m_flSwayTime");
C_EnvWindShared.m_flSimTime = findOffsetByName(j, "C_EnvWindShared", "m_flSimTime");
C_EnvWindShared.m_flSwitchTime = findOffsetByName(j, "C_EnvWindShared", "m_flSwitchTime");
C_EnvWindShared.m_flAveWindSpeed = findOffsetByName(j, "C_EnvWindShared", "m_flAveWindSpeed");
C_EnvWindShared.m_bGusting = findOffsetByName(j, "C_EnvWindShared", "m_bGusting");
C_EnvWindShared.m_flWindAngleVariation = findOffsetByName(j, "C_EnvWindShared", "m_flWindAngleVariation");
C_EnvWindShared.m_flWindSpeedVariation = findOffsetByName(j, "C_EnvWindShared", "m_flWindSpeedVariation");
C_EnvWindShared.m_hEntOwner = findOffsetByName(j, "C_EnvWindShared", "m_hEntOwner");

// Atribuições para C_PostProcessingVolume
// C_PostProcessingVolume Offsets
C_PostProcessingVolume.m_hPostSettings = findOffsetByName(j, "C_PostProcessingVolume", "m_hPostSettings");
C_PostProcessingVolume.m_flFadeDuration = findOffsetByName(j, "C_PostProcessingVolume", "m_flFadeDuration");
C_PostProcessingVolume.m_flMinLogExposure = findOffsetByName(j, "C_PostProcessingVolume", "m_flMinLogExposure");
C_PostProcessingVolume.m_flMaxLogExposure = findOffsetByName(j, "C_PostProcessingVolume", "m_flMaxLogExposure");
C_PostProcessingVolume.m_flMinExposure = findOffsetByName(j, "C_PostProcessingVolume", "m_flMinExposure");
C_PostProcessingVolume.m_flMaxExposure = findOffsetByName(j, "C_PostProcessingVolume", "m_flMaxExposure");
C_PostProcessingVolume.m_flExposureCompensation = findOffsetByName(j, "C_PostProcessingVolume", "m_flExposureCompensation");
C_PostProcessingVolume.m_flExposureFadeSpeedUp = findOffsetByName(j, "C_PostProcessingVolume", "m_flExposureFadeSpeedUp");
C_PostProcessingVolume.m_flExposureFadeSpeedDown = findOffsetByName(j, "C_PostProcessingVolume", "m_flExposureFadeSpeedDown");
C_PostProcessingVolume.m_flTonemapEVSmoothingRange = findOffsetByName(j, "C_PostProcessingVolume", "m_flTonemapEVSmoothingRange");
C_PostProcessingVolume.m_bMaster = findOffsetByName(j, "C_PostProcessingVolume", "m_bMaster");
C_PostProcessingVolume.m_bExposureControl = findOffsetByName(j, "C_PostProcessingVolume", "m_bExposureControl");
C_PostProcessingVolume.m_flRate = findOffsetByName(j, "C_PostProcessingVolume", "m_flRate");
C_PostProcessingVolume.m_flTonemapPercentTarget = findOffsetByName(j, "C_PostProcessingVolume", "m_flTonemapPercentTarget");
C_PostProcessingVolume.m_flTonemapPercentBrightPixels = findOffsetByName(j, "C_PostProcessingVolume", "m_flTonemapPercentBrightPixels");
C_PostProcessingVolume.m_flTonemapMinAvgLum = findOffsetByName(j, "C_PostProcessingVolume", "m_flTonemapMinAvgLum");

// Atribuições para CCSPlayer_PingServices
// CCSPlayer_PingServices Offsets
CCSPlayer_PingServices.m_hPlayerPing = findOffsetByName(j, "CCSPlayer_PingServices", "m_hPlayerPing");
CCSPlayer_PingServices.m_flPlayerPingTokens = findOffsetByName(j, "CCSPlayer_PingServices", "m_flPlayerPingTokens");

// Atribuições para C_AttributeContainer
// C_AttributeContainer Offsets
C_AttributeContainer.m_Item = findOffsetByName(j, "C_AttributeContainer", "m_Item");
C_AttributeContainer.m_iExternalItemProviderRegisteredToken = findOffsetByName(j, "C_AttributeContainer", "m_iExternalItemProviderRegisteredToken");
C_AttributeContainer.m_ullRegisteredAsItemID = findOffsetByName(j, "C_AttributeContainer", "m_ullRegisteredAsItemID");

// Atribuições para C_BaseFire
// C_BaseFire Offsets
C_BaseFire.m_flScale = findOffsetByName(j, "C_BaseFire", "m_flScale");
C_BaseFire.m_flStartScale = findOffsetByName(j, "C_BaseFire", "m_flStartScale");
C_BaseFire.m_flScaleTime = findOffsetByName(j, "C_BaseFire", "m_flScaleTime");
C_BaseFire.m_nFlags = findOffsetByName(j, "C_BaseFire", "m_nFlags");

// Atribuições para CBasePlayerController
// CBasePlayerController Offsets
CBasePlayerController.m_nFinalPredictedTick = findOffsetByName(j, "CBasePlayerController", "m_nFinalPredictedTick");
CBasePlayerController.m_CommandContext = findOffsetByName(j, "CBasePlayerController", "m_CommandContext");
CBasePlayerController.m_nInButtonsWhichAreToggles = findOffsetByName(j, "CBasePlayerController", "m_nInButtonsWhichAreToggles");
CBasePlayerController.m_nTickBase = findOffsetByName(j, "CBasePlayerController", "m_nTickBase");
CBasePlayerController.m_hPawn = findOffsetByName(j, "CBasePlayerController", "m_hPawn");
CBasePlayerController.m_bKnownTeamMismatch = findOffsetByName(j, "CBasePlayerController", "m_bKnownTeamMismatch");
CBasePlayerController.m_hPredictedPawn = findOffsetByName(j, "CBasePlayerController", "m_hPredictedPawn");
CBasePlayerController.m_nSplitScreenSlot = findOffsetByName(j, "CBasePlayerController", "m_nSplitScreenSlot");
CBasePlayerController.m_hSplitOwner = findOffsetByName(j, "CBasePlayerController", "m_hSplitOwner");
CBasePlayerController.m_hSplitScreenPlayers = findOffsetByName(j, "CBasePlayerController", "m_hSplitScreenPlayers");
CBasePlayerController.m_bIsHLTV = findOffsetByName(j, "CBasePlayerController", "m_bIsHLTV");
CBasePlayerController.m_iConnected = findOffsetByName(j, "CBasePlayerController", "m_iConnected");
CBasePlayerController.m_iszPlayerName = findOffsetByName(j, "CBasePlayerController", "m_iszPlayerName");
CBasePlayerController.m_steamID = findOffsetByName(j, "CBasePlayerController", "m_steamID");
CBasePlayerController.m_bIsLocalPlayerController = findOffsetByName(j, "CBasePlayerController", "m_bIsLocalPlayerController");
CBasePlayerController.m_iDesiredFOV = findOffsetByName(j, "CBasePlayerController", "m_iDesiredFOV");
CBasePlayerController.m_szNetworkIDString = findOffsetByName(j, "CBasePlayerController", "m_szNetworkIDString");
CBasePlayerController.m_fLerpTime = findOffsetByName(j, "CBasePlayerController", "m_fLerpTime");
CBasePlayerController.m_bLagCompensation = findOffsetByName(j, "CBasePlayerController", "m_bLagCompensation");
CBasePlayerController.m_bPredict = findOffsetByName(j, "CBasePlayerController", "m_bPredict");
CBasePlayerController.m_bAutoKickDisabled = findOffsetByName(j, "CBasePlayerController", "m_bAutoKickDisabled");
CBasePlayerController.m_bIsLowViolence = findOffsetByName(j, "CBasePlayerController", "m_bIsLowViolence");
CBasePlayerController.m_bGamePaused = findOffsetByName(j, "CBasePlayerController", "m_bGamePaused");
CBasePlayerController.m_iIgnoreGlobalChat = findOffsetByName(j, "CBasePlayerController", "m_iIgnoreGlobalChat");
CBasePlayerController.m_flLastPlayerTalkTime = findOffsetByName(j, "CBasePlayerController", "m_flLastPlayerTalkTime");
CBasePlayerController.m_flLastEntitySteadyState = findOffsetByName(j, "CBasePlayerController", "m_flLastEntitySteadyState");
CBasePlayerController.m_nAvailableEntitySteadyState = findOffsetByName(j, "CBasePlayerController", "m_nAvailableEntitySteadyState");
CBasePlayerController.m_bHasAnySteadyStateEnts = findOffsetByName(j, "CBasePlayerController", "m_bHasAnySteadyStateEnts");

// Atribuições para C_DecoyProjectile
// C_DecoyProjectile Offsets
C_DecoyProjectile.m_nDecoyShotTick = findOffsetByName(j, "C_DecoyProjectile", "m_nDecoyShotTick");
C_DecoyProjectile.m_nClientLastKnownDecoyShotTick = findOffsetByName(j, "C_DecoyProjectile", "m_nClientLastKnownDecoyShotTick");
C_DecoyProjectile.m_flTimeParticleEffectSpawn = findOffsetByName(j, "C_DecoyProjectile", "m_flTimeParticleEffectSpawn");

// Atribuições para C_CSGO_PreviewPlayer
// C_CSGO_PreviewPlayer Offsets
C_CSGO_PreviewPlayer.m_animgraph = findOffsetByName(j, "C_CSGO_PreviewPlayer", "m_animgraph");
C_CSGO_PreviewPlayer.m_animgraphCharacterModeString = findOffsetByName(j, "C_CSGO_PreviewPlayer", "m_animgraphCharacterModeString");
C_CSGO_PreviewPlayer.m_flInitialModelScale = findOffsetByName(j, "C_CSGO_PreviewPlayer", "m_flInitialModelScale");

// Atribuições para CBaseAnimGraphController
// CBaseAnimGraphController Offsets
CBaseAnimGraphController.m_animGraphNetworkedVars = findOffsetByName(j, "CBaseAnimGraphController", "m_animGraphNetworkedVars");
CBaseAnimGraphController.m_bSequenceFinished = findOffsetByName(j, "CBaseAnimGraphController", "m_bSequenceFinished");
CBaseAnimGraphController.m_flSoundSyncTime = findOffsetByName(j, "CBaseAnimGraphController", "m_flSoundSyncTime");
CBaseAnimGraphController.m_nActiveIKChainMask = findOffsetByName(j, "CBaseAnimGraphController", "m_nActiveIKChainMask");
CBaseAnimGraphController.m_hSequence = findOffsetByName(j, "CBaseAnimGraphController", "m_hSequence");
CBaseAnimGraphController.m_flSeqStartTime = findOffsetByName(j, "CBaseAnimGraphController", "m_flSeqStartTime");
CBaseAnimGraphController.m_flSeqFixedCycle = findOffsetByName(j, "CBaseAnimGraphController", "m_flSeqFixedCycle");
CBaseAnimGraphController.m_nAnimLoopMode = findOffsetByName(j, "CBaseAnimGraphController", "m_nAnimLoopMode");
CBaseAnimGraphController.m_flPlaybackRate = findOffsetByName(j, "CBaseAnimGraphController", "m_flPlaybackRate");
CBaseAnimGraphController.m_nNotifyState = findOffsetByName(j, "CBaseAnimGraphController", "m_nNotifyState");
CBaseAnimGraphController.m_bNetworkedAnimationInputsChanged = findOffsetByName(j, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged");
CBaseAnimGraphController.m_bNetworkedSequenceChanged = findOffsetByName(j, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged");
CBaseAnimGraphController.m_bLastUpdateSkipped = findOffsetByName(j, "CBaseAnimGraphController", "m_bLastUpdateSkipped");
CBaseAnimGraphController.m_flPrevAnimUpdateTime = findOffsetByName(j, "CBaseAnimGraphController", "m_flPrevAnimUpdateTime");

// Atribuições para C_C4
// C_C4 Offsets
C_C4.m_szScreenText = findOffsetByName(j, "C_C4", "m_szScreenText");
C_C4.m_activeLightParticleIndex = findOffsetByName(j, "C_C4", "m_activeLightParticleIndex");
C_C4.m_eActiveLightEffect = findOffsetByName(j, "C_C4", "m_eActiveLightEffect");
C_C4.m_bStartedArming = findOffsetByName(j, "C_C4", "m_bStartedArming");
C_C4.m_fArmedTime = findOffsetByName(j, "C_C4", "m_fArmedTime");
C_C4.m_bBombPlacedAnimation = findOffsetByName(j, "C_C4", "m_bBombPlacedAnimation");
C_C4.m_bIsPlantingViaUse = findOffsetByName(j, "C_C4", "m_bIsPlantingViaUse");
C_C4.m_entitySpottedState = findOffsetByName(j, "C_C4", "m_entitySpottedState");
C_C4.m_nSpotRules = findOffsetByName(j, "C_C4", "m_nSpotRules");
C_C4.m_bPlayedArmingBeeps = findOffsetByName(j, "C_C4", "m_bPlayedArmingBeeps");
C_C4.m_bBombPlanted = findOffsetByName(j, "C_C4", "m_bBombPlanted");

// Atribuições para CBaseAnimGraph
// CBaseAnimGraph Offsets
CBaseAnimGraph.m_bInitiallyPopulateInterpHistory = findOffsetByName(j, "CBaseAnimGraph", "m_bInitiallyPopulateInterpHistory");
CBaseAnimGraph.m_bSuppressAnimEventSounds = findOffsetByName(j, "CBaseAnimGraph", "m_bSuppressAnimEventSounds");
CBaseAnimGraph.m_bAnimGraphUpdateEnabled = findOffsetByName(j, "CBaseAnimGraph", "m_bAnimGraphUpdateEnabled");
CBaseAnimGraph.m_flMaxSlopeDistance = findOffsetByName(j, "CBaseAnimGraph", "m_flMaxSlopeDistance");
CBaseAnimGraph.m_vLastSlopeCheckPos = findOffsetByName(j, "CBaseAnimGraph", "m_vLastSlopeCheckPos");
CBaseAnimGraph.m_bAnimationUpdateScheduled = findOffsetByName(j, "CBaseAnimGraph", "m_bAnimationUpdateScheduled");
CBaseAnimGraph.m_vecForce = findOffsetByName(j, "CBaseAnimGraph", "m_vecForce");
CBaseAnimGraph.m_nForceBone = findOffsetByName(j, "CBaseAnimGraph", "m_nForceBone");
CBaseAnimGraph.m_pClientsideRagdoll = findOffsetByName(j, "CBaseAnimGraph", "m_pClientsideRagdoll");
CBaseAnimGraph.m_bBuiltRagdoll = findOffsetByName(j, "CBaseAnimGraph", "m_bBuiltRagdoll");
CBaseAnimGraph.m_RagdollPose = findOffsetByName(j, "CBaseAnimGraph", "m_RagdollPose");
CBaseAnimGraph.m_bRagdollClientSide = findOffsetByName(j, "CBaseAnimGraph", "m_bRagdollClientSide");
CBaseAnimGraph.m_bHasAnimatedMaterialAttributes = findOffsetByName(j, "CBaseAnimGraph", "m_bHasAnimatedMaterialAttributes");
CBaseAnimGraph.m_pChoreoServices = findOffsetByName(j, "CBaseAnimGraph", "m_pChoreoServices");
CBaseAnimGraph.m_nLastDestructiblePartDestroyedAnimgraphSetTick = findOffsetByName(j, "CBaseAnimGraph", "m_nLastDestructiblePartDestroyedAnimgraphSetTick");

// Atribuições para C_PathParticleRope
// C_PathParticleRope Offsets
C_PathParticleRope.m_bStartActive = findOffsetByName(j, "C_PathParticleRope", "m_bStartActive");
C_PathParticleRope.m_flMaxSimulationTime = findOffsetByName(j, "C_PathParticleRope", "m_flMaxSimulationTime");
C_PathParticleRope.m_iszEffectName = findOffsetByName(j, "C_PathParticleRope", "m_iszEffectName");
C_PathParticleRope.m_PathNodes_Name = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_Name");
C_PathParticleRope.m_flParticleSpacing = findOffsetByName(j, "C_PathParticleRope", "m_flParticleSpacing");
C_PathParticleRope.m_flSlack = findOffsetByName(j, "C_PathParticleRope", "m_flSlack");
C_PathParticleRope.m_flRadius = findOffsetByName(j, "C_PathParticleRope", "m_flRadius");
C_PathParticleRope.m_ColorTint = findOffsetByName(j, "C_PathParticleRope", "m_ColorTint");
C_PathParticleRope.m_nEffectState = findOffsetByName(j, "C_PathParticleRope", "m_nEffectState");
C_PathParticleRope.m_iEffectIndex = findOffsetByName(j, "C_PathParticleRope", "m_iEffectIndex");
C_PathParticleRope.m_PathNodes_Position = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_Position");
C_PathParticleRope.m_PathNodes_TangentIn = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_TangentIn");
C_PathParticleRope.m_PathNodes_TangentOut = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_TangentOut");
C_PathParticleRope.m_PathNodes_Color = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_Color");
C_PathParticleRope.m_PathNodes_PinEnabled = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_PinEnabled");
C_PathParticleRope.m_PathNodes_RadiusScale = findOffsetByName(j, "C_PathParticleRope", "m_PathNodes_RadiusScale");

// Atribuições para C_SoundEventAABBEntity
// C_SoundEventAABBEntity Offsets
C_SoundEventAABBEntity.m_vMins = findOffsetByName(j, "C_SoundEventAABBEntity", "m_vMins");
C_SoundEventAABBEntity.m_vMaxs = findOffsetByName(j, "C_SoundEventAABBEntity", "m_vMaxs");

// Atribuições para C_BasePlayerWeapon
// C_BasePlayerWeapon Offsets
C_BasePlayerWeapon.m_nNextPrimaryAttackTick = findOffsetByName(j, "C_BasePlayerWeapon", "m_nNextPrimaryAttackTick");
C_BasePlayerWeapon.m_flNextPrimaryAttackTickRatio = findOffsetByName(j, "C_BasePlayerWeapon", "m_flNextPrimaryAttackTickRatio");
C_BasePlayerWeapon.m_nNextSecondaryAttackTick = findOffsetByName(j, "C_BasePlayerWeapon", "m_nNextSecondaryAttackTick");
C_BasePlayerWeapon.m_flNextSecondaryAttackTickRatio = findOffsetByName(j, "C_BasePlayerWeapon", "m_flNextSecondaryAttackTickRatio");
C_BasePlayerWeapon.m_iClip1 = findOffsetByName(j, "C_BasePlayerWeapon", "m_iClip1");
C_BasePlayerWeapon.m_iClip2 = findOffsetByName(j, "C_BasePlayerWeapon", "m_iClip2");
C_BasePlayerWeapon.m_pReserveAmmo = findOffsetByName(j, "C_BasePlayerWeapon", "m_pReserveAmmo");

// Atribuições para CBasePlayerWeaponVData
// CBasePlayerWeaponVData Offsets
CBasePlayerWeaponVData.m_szWorldModel = findOffsetByName(j, "CBasePlayerWeaponVData", "m_szWorldModel");
CBasePlayerWeaponVData.m_sToolsOnlyOwnerModelName = findOffsetByName(j, "CBasePlayerWeaponVData", "m_sToolsOnlyOwnerModelName");
CBasePlayerWeaponVData.m_bBuiltRightHanded = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bBuiltRightHanded");
CBasePlayerWeaponVData.m_bAllowFlipping = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bAllowFlipping");
CBasePlayerWeaponVData.m_sMuzzleAttachment = findOffsetByName(j, "CBasePlayerWeaponVData", "m_sMuzzleAttachment");
CBasePlayerWeaponVData.m_szMuzzleFlashParticle = findOffsetByName(j, "CBasePlayerWeaponVData", "m_szMuzzleFlashParticle");
CBasePlayerWeaponVData.m_bLinkedCooldowns = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bLinkedCooldowns");
CBasePlayerWeaponVData.m_iFlags = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iFlags");
CBasePlayerWeaponVData.m_nPrimaryAmmoType = findOffsetByName(j, "CBasePlayerWeaponVData", "m_nPrimaryAmmoType");
CBasePlayerWeaponVData.m_nSecondaryAmmoType = findOffsetByName(j, "CBasePlayerWeaponVData", "m_nSecondaryAmmoType");
CBasePlayerWeaponVData.m_iMaxClip1 = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iMaxClip1");
CBasePlayerWeaponVData.m_iMaxClip2 = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iMaxClip2");
CBasePlayerWeaponVData.m_iDefaultClip1 = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iDefaultClip1");
CBasePlayerWeaponVData.m_iDefaultClip2 = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iDefaultClip2");
CBasePlayerWeaponVData.m_bReserveAmmoAsClips = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bReserveAmmoAsClips");
CBasePlayerWeaponVData.m_iWeight = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iWeight");
CBasePlayerWeaponVData.m_bAutoSwitchTo = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bAutoSwitchTo");
CBasePlayerWeaponVData.m_bAutoSwitchFrom = findOffsetByName(j, "CBasePlayerWeaponVData", "m_bAutoSwitchFrom");
CBasePlayerWeaponVData.m_iRumbleEffect = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iRumbleEffect");
CBasePlayerWeaponVData.m_iSlot = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iSlot");
CBasePlayerWeaponVData.m_iPosition = findOffsetByName(j, "CBasePlayerWeaponVData", "m_iPosition");
CBasePlayerWeaponVData.m_aShootSounds = findOffsetByName(j, "CBasePlayerWeaponVData", "m_aShootSounds");

// Atribuições para C_Fish
// C_Fish Offsets
C_Fish.m_pos = findOffsetByName(j, "C_Fish", "m_pos");
C_Fish.m_vel = findOffsetByName(j, "C_Fish", "m_vel");
C_Fish.m_angles = findOffsetByName(j, "C_Fish", "m_angles");
C_Fish.m_localLifeState = findOffsetByName(j, "C_Fish", "m_localLifeState");
C_Fish.m_deathDepth = findOffsetByName(j, "C_Fish", "m_deathDepth");
C_Fish.m_deathAngle = findOffsetByName(j, "C_Fish", "m_deathAngle");
C_Fish.m_buoyancy = findOffsetByName(j, "C_Fish", "m_buoyancy");
C_Fish.m_wiggleTimer = findOffsetByName(j, "C_Fish", "m_wiggleTimer");
C_Fish.m_wigglePhase = findOffsetByName(j, "C_Fish", "m_wigglePhase");
C_Fish.m_wiggleRate = findOffsetByName(j, "C_Fish", "m_wiggleRate");
C_Fish.m_actualPos = findOffsetByName(j, "C_Fish", "m_actualPos");
C_Fish.m_actualAngles = findOffsetByName(j, "C_Fish", "m_actualAngles");
C_Fish.m_poolOrigin = findOffsetByName(j, "C_Fish", "m_poolOrigin");
C_Fish.m_waterLevel = findOffsetByName(j, "C_Fish", "m_waterLevel");
C_Fish.m_gotUpdate = findOffsetByName(j, "C_Fish", "m_gotUpdate");
C_Fish.m_x = findOffsetByName(j, "C_Fish", "m_x");
C_Fish.m_y = findOffsetByName(j, "C_Fish", "m_y");
C_Fish.m_z = findOffsetByName(j, "C_Fish", "m_z");
C_Fish.m_angle = findOffsetByName(j, "C_Fish", "m_angle");
C_Fish.m_errorHistory = findOffsetByName(j, "C_Fish", "m_errorHistory");
C_Fish.m_errorHistoryIndex = findOffsetByName(j, "C_Fish", "m_errorHistoryIndex");
C_Fish.m_errorHistoryCount = findOffsetByName(j, "C_Fish", "m_errorHistoryCount");
C_Fish.m_averageError = findOffsetByName(j, "C_Fish", "m_averageError");

// Atribuições para CTimeline
// CTimeline Offsets
CTimeline.m_flValues = findOffsetByName(j, "CTimeline", "m_flValues");
CTimeline.m_nValueCounts = findOffsetByName(j, "CTimeline", "m_nValueCounts");
CTimeline.m_nBucketCount = findOffsetByName(j, "CTimeline", "m_nBucketCount");
CTimeline.m_flInterval = findOffsetByName(j, "CTimeline", "m_flInterval");
CTimeline.m_flFinalValue = findOffsetByName(j, "CTimeline", "m_flFinalValue");
CTimeline.m_nCompressionType = findOffsetByName(j, "CTimeline", "m_nCompressionType");
CTimeline.m_bStopped = findOffsetByName(j, "CTimeline", "m_bStopped");

// Atribuições para C_BasePlayerPawn
// C_BasePlayerPawn Offsets
C_BasePlayerPawn.m_pWeaponServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pWeaponServices");
C_BasePlayerPawn.m_pItemServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pItemServices");
C_BasePlayerPawn.m_pAutoaimServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pAutoaimServices");
C_BasePlayerPawn.m_pObserverServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pObserverServices");
C_BasePlayerPawn.m_pWaterServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pWaterServices");
C_BasePlayerPawn.m_pUseServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pUseServices");
C_BasePlayerPawn.m_pFlashlightServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pFlashlightServices");
C_BasePlayerPawn.m_pCameraServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pCameraServices");
C_BasePlayerPawn.m_pMovementServices = findOffsetByName(j, "C_BasePlayerPawn", "m_pMovementServices");
C_BasePlayerPawn.m_ServerViewAngleChanges = findOffsetByName(j, "C_BasePlayerPawn", "m_ServerViewAngleChanges");
C_BasePlayerPawn.m_nHighestConsumedServerViewAngleChangeIndex = findOffsetByName(j, "C_BasePlayerPawn", "m_nHighestConsumedServerViewAngleChangeIndex");
C_BasePlayerPawn.v_angle = findOffsetByName(j, "C_BasePlayerPawn", "v_angle");
C_BasePlayerPawn.v_anglePrevious = findOffsetByName(j, "C_BasePlayerPawn", "v_anglePrevious");
C_BasePlayerPawn.m_iHideHUD = findOffsetByName(j, "C_BasePlayerPawn", "m_iHideHUD");
C_BasePlayerPawn.m_skybox3d = findOffsetByName(j, "C_BasePlayerPawn", "m_skybox3d");
C_BasePlayerPawn.m_flDeathTime = findOffsetByName(j, "C_BasePlayerPawn", "m_flDeathTime");
C_BasePlayerPawn.m_vecPredictionError = findOffsetByName(j, "C_BasePlayerPawn", "m_vecPredictionError");
C_BasePlayerPawn.m_flPredictionErrorTime = findOffsetByName(j, "C_BasePlayerPawn", "m_flPredictionErrorTime");
C_BasePlayerPawn.m_vecLastCameraSetupLocalOrigin = findOffsetByName(j, "C_BasePlayerPawn", "m_vecLastCameraSetupLocalOrigin");
C_BasePlayerPawn.m_flLastCameraSetupTime = findOffsetByName(j, "C_BasePlayerPawn", "m_flLastCameraSetupTime");
C_BasePlayerPawn.m_flFOVSensitivityAdjust = findOffsetByName(j, "C_BasePlayerPawn", "m_flFOVSensitivityAdjust");
C_BasePlayerPawn.m_flMouseSensitivity = findOffsetByName(j, "C_BasePlayerPawn", "m_flMouseSensitivity");
C_BasePlayerPawn.m_vOldOrigin = findOffsetByName(j, "C_BasePlayerPawn", "m_vOldOrigin");
C_BasePlayerPawn.m_flOldSimulationTime = findOffsetByName(j, "C_BasePlayerPawn", "m_flOldSimulationTime");
C_BasePlayerPawn.m_nLastExecutedCommandNumber = findOffsetByName(j, "C_BasePlayerPawn", "m_nLastExecutedCommandNumber");
C_BasePlayerPawn.m_nLastExecutedCommandTick = findOffsetByName(j, "C_BasePlayerPawn", "m_nLastExecutedCommandTick");
C_BasePlayerPawn.m_hController = findOffsetByName(j, "C_BasePlayerPawn", "m_hController");
C_BasePlayerPawn.m_bIsSwappingToPredictableController = findOffsetByName(j, "C_BasePlayerPawn", "m_bIsSwappingToPredictableController");

// Atribuições para CAttributeManager
// CAttributeManager Offsets
CAttributeManager.m_Providers = findOffsetByName(j, "CAttributeManager", "m_Providers");
CAttributeManager.m_iReapplyProvisionParity = findOffsetByName(j, "CAttributeManager", "m_iReapplyProvisionParity");
CAttributeManager.m_hOuter = findOffsetByName(j, "CAttributeManager", "m_hOuter");
CAttributeManager.m_bPreventLoopback = findOffsetByName(j, "CAttributeManager", "m_bPreventLoopback");
CAttributeManager.m_ProviderType = findOffsetByName(j, "CAttributeManager", "m_ProviderType");
CAttributeManager.m_CachedResults = findOffsetByName(j, "CAttributeManager", "m_CachedResults");

// Atribuições para CAnimGraphNetworkedVariables
// CAnimGraphNetworkedVariables Offsets
CAnimGraphNetworkedVariables.m_PredNetBoolVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetBoolVariables");
CAnimGraphNetworkedVariables.m_PredNetByteVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetByteVariables");
CAnimGraphNetworkedVariables.m_PredNetUInt16Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetUInt16Variables");
CAnimGraphNetworkedVariables.m_PredNetIntVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetIntVariables");
CAnimGraphNetworkedVariables.m_PredNetUInt32Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetUInt32Variables");
CAnimGraphNetworkedVariables.m_PredNetUInt64Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetUInt64Variables");
CAnimGraphNetworkedVariables.m_PredNetFloatVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetFloatVariables");
CAnimGraphNetworkedVariables.m_PredNetVectorVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetVectorVariables");
CAnimGraphNetworkedVariables.m_PredNetQuaternionVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetQuaternionVariables");
CAnimGraphNetworkedVariables.m_PredNetGlobalSymbolVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_PredNetGlobalSymbolVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetBoolVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetBoolVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetByteVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetByteVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetUInt16Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt16Variables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetIntVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetIntVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetUInt32Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt32Variables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetUInt64Variables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt64Variables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetFloatVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetFloatVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetVectorVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetVectorVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetQuaternionVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetQuaternionVariables");
CAnimGraphNetworkedVariables.m_OwnerOnlyPredNetGlobalSymbolVariables = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetGlobalSymbolVariables");
CAnimGraphNetworkedVariables.m_nBoolVariablesCount = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_nBoolVariablesCount");
CAnimGraphNetworkedVariables.m_nOwnerOnlyBoolVariablesCount = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_nOwnerOnlyBoolVariablesCount");
CAnimGraphNetworkedVariables.m_nRandomSeedOffset = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_nRandomSeedOffset");
CAnimGraphNetworkedVariables.m_flLastTeleportTime = findOffsetByName(j, "CAnimGraphNetworkedVariables", "m_flLastTeleportTime");

// Atribuições para C_TriggerBuoyancy
// C_TriggerBuoyancy Offsets
C_TriggerBuoyancy.m_BuoyancyHelper = findOffsetByName(j, "C_TriggerBuoyancy", "m_BuoyancyHelper");
C_TriggerBuoyancy.m_flFluidDensity = findOffsetByName(j, "C_TriggerBuoyancy", "m_flFluidDensity");

// Atribuições para C_RopeKeyframe
// C_RopeKeyframe Offsets
C_RopeKeyframe.m_LinksTouchingSomething = findOffsetByName(j, "C_RopeKeyframe", "m_LinksTouchingSomething");
C_RopeKeyframe.m_nLinksTouchingSomething = findOffsetByName(j, "C_RopeKeyframe", "m_nLinksTouchingSomething");
C_RopeKeyframe.m_bApplyWind = findOffsetByName(j, "C_RopeKeyframe", "m_bApplyWind");
C_RopeKeyframe.m_fPrevLockedPoints = findOffsetByName(j, "C_RopeKeyframe", "m_fPrevLockedPoints");
C_RopeKeyframe.m_iForcePointMoveCounter = findOffsetByName(j, "C_RopeKeyframe", "m_iForcePointMoveCounter");
C_RopeKeyframe.m_bPrevEndPointPos = findOffsetByName(j, "C_RopeKeyframe", "m_bPrevEndPointPos");
C_RopeKeyframe.m_vPrevEndPointPos = findOffsetByName(j, "C_RopeKeyframe", "m_vPrevEndPointPos");
C_RopeKeyframe.m_flCurScroll = findOffsetByName(j, "C_RopeKeyframe", "m_flCurScroll");
C_RopeKeyframe.m_flScrollSpeed = findOffsetByName(j, "C_RopeKeyframe", "m_flScrollSpeed");
C_RopeKeyframe.m_RopeFlags = findOffsetByName(j, "C_RopeKeyframe", "m_RopeFlags");
C_RopeKeyframe.m_iRopeMaterialModelIndex = findOffsetByName(j, "C_RopeKeyframe", "m_iRopeMaterialModelIndex");
C_RopeKeyframe.m_LightValues = findOffsetByName(j, "C_RopeKeyframe", "m_LightValues");
C_RopeKeyframe.m_nSegments = findOffsetByName(j, "C_RopeKeyframe", "m_nSegments");
C_RopeKeyframe.m_hStartPoint = findOffsetByName(j, "C_RopeKeyframe", "m_hStartPoint");
C_RopeKeyframe.m_hEndPoint = findOffsetByName(j, "C_RopeKeyframe", "m_hEndPoint");
C_RopeKeyframe.m_iStartAttachment = findOffsetByName(j, "C_RopeKeyframe", "m_iStartAttachment");
C_RopeKeyframe.m_iEndAttachment = findOffsetByName(j, "C_RopeKeyframe", "m_iEndAttachment");
C_RopeKeyframe.m_Subdiv = findOffsetByName(j, "C_RopeKeyframe", "m_Subdiv");
C_RopeKeyframe.m_RopeLength = findOffsetByName(j, "C_RopeKeyframe", "m_RopeLength");
C_RopeKeyframe.m_Slack = findOffsetByName(j, "C_RopeKeyframe", "m_Slack");
C_RopeKeyframe.m_TextureScale = findOffsetByName(j, "C_RopeKeyframe", "m_TextureScale");
C_RopeKeyframe.m_fLockedPoints = findOffsetByName(j, "C_RopeKeyframe", "m_fLockedPoints");
C_RopeKeyframe.m_nChangeCount = findOffsetByName(j, "C_RopeKeyframe", "m_nChangeCount");
C_RopeKeyframe.m_Width = findOffsetByName(j, "C_RopeKeyframe", "m_Width");
C_RopeKeyframe.m_PhysicsDelegate = findOffsetByName(j, "C_RopeKeyframe", "m_PhysicsDelegate");
C_RopeKeyframe.m_hMaterial = findOffsetByName(j, "C_RopeKeyframe", "m_hMaterial");
C_RopeKeyframe.m_TextureHeight = findOffsetByName(j, "C_RopeKeyframe", "m_TextureHeight");
C_RopeKeyframe.m_vecImpulse = findOffsetByName(j, "C_RopeKeyframe", "m_vecImpulse");
C_RopeKeyframe.m_vecPreviousImpulse = findOffsetByName(j, "C_RopeKeyframe", "m_vecPreviousImpulse");
C_RopeKeyframe.m_flCurrentGustTimer = findOffsetByName(j, "C_RopeKeyframe", "m_flCurrentGustTimer");
C_RopeKeyframe.m_flCurrentGustLifetime = findOffsetByName(j, "C_RopeKeyframe", "m_flCurrentGustLifetime");
C_RopeKeyframe.m_flTimeToNextGust = findOffsetByName(j, "C_RopeKeyframe", "m_flTimeToNextGust");
C_RopeKeyframe.m_vWindDir = findOffsetByName(j, "C_RopeKeyframe", "m_vWindDir");
C_RopeKeyframe.m_vColorMod = findOffsetByName(j, "C_RopeKeyframe", "m_vColorMod");
C_RopeKeyframe.m_vCachedEndPointAttachmentPos = findOffsetByName(j, "C_RopeKeyframe", "m_vCachedEndPointAttachmentPos");
C_RopeKeyframe.m_vCachedEndPointAttachmentAngle = findOffsetByName(j, "C_RopeKeyframe", "m_vCachedEndPointAttachmentAngle");
C_RopeKeyframe.m_bConstrainBetweenEndpoints = findOffsetByName(j, "C_RopeKeyframe", "m_bConstrainBetweenEndpoints");
C_RopeKeyframe.m_bEndPointAttachmentPositionsDirty = findOffsetByName(j, "C_RopeKeyframe", "m_bEndPointAttachmentPositionsDirty");
C_RopeKeyframe.m_bEndPointAttachmentAnglesDirty = findOffsetByName(j, "C_RopeKeyframe", "m_bEndPointAttachmentAnglesDirty");
C_RopeKeyframe.m_bNewDataThisFrame = findOffsetByName(j, "C_RopeKeyframe", "m_bNewDataThisFrame");
C_RopeKeyframe.m_bPhysicsInitted = findOffsetByName(j, "C_RopeKeyframe", "m_bPhysicsInitted");

// Atribuições para C_GradientFog
// C_GradientFog Offsets
C_GradientFog.m_hGradientFogTexture = findOffsetByName(j, "C_GradientFog", "m_hGradientFogTexture");
C_GradientFog.m_flFogStartDistance = findOffsetByName(j, "C_GradientFog", "m_flFogStartDistance");
C_GradientFog.m_flFogEndDistance = findOffsetByName(j, "C_GradientFog", "m_flFogEndDistance");
C_GradientFog.m_bHeightFogEnabled = findOffsetByName(j, "C_GradientFog", "m_bHeightFogEnabled");
C_GradientFog.m_flFogStartHeight = findOffsetByName(j, "C_GradientFog", "m_flFogStartHeight");
C_GradientFog.m_flFogEndHeight = findOffsetByName(j, "C_GradientFog", "m_flFogEndHeight");
C_GradientFog.m_flFarZ = findOffsetByName(j, "C_GradientFog", "m_flFarZ");
C_GradientFog.m_flFogMaxOpacity = findOffsetByName(j, "C_GradientFog", "m_flFogMaxOpacity");
C_GradientFog.m_flFogFalloffExponent = findOffsetByName(j, "C_GradientFog", "m_flFogFalloffExponent");
C_GradientFog.m_flFogVerticalExponent = findOffsetByName(j, "C_GradientFog", "m_flFogVerticalExponent");
C_GradientFog.m_fogColor = findOffsetByName(j, "C_GradientFog", "m_fogColor");
C_GradientFog.m_flFogStrength = findOffsetByName(j, "C_GradientFog", "m_flFogStrength");
C_GradientFog.m_flFadeTime = findOffsetByName(j, "C_GradientFog", "m_flFadeTime");
C_GradientFog.m_bStartDisabled = findOffsetByName(j, "C_GradientFog", "m_bStartDisabled");
C_GradientFog.m_bIsEnabled = findOffsetByName(j, "C_GradientFog", "m_bIsEnabled");
C_GradientFog.m_bGradientFogNeedsTextures = findOffsetByName(j, "C_GradientFog", "m_bGradientFogNeedsTextures");

// Atribuições para EntitySpottedState_t
// EntitySpottedState_t Offsets
EntitySpottedState_t.m_bSpotted = findOffsetByName(j, "EntitySpottedState_t", "m_bSpotted");
EntitySpottedState_t.m_bSpottedByMask = findOffsetByName(j, "EntitySpottedState_t", "m_bSpottedByMask");

// Atribuições para C_CSGO_TeamPreviewCamera
// C_CSGO_TeamPreviewCamera Offsets
C_CSGO_TeamPreviewCamera.m_nVariant = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_nVariant");
C_CSGO_TeamPreviewCamera.m_bDofEnabled = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_bDofEnabled");
C_CSGO_TeamPreviewCamera.m_flDofNearBlurry = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_flDofNearBlurry");
C_CSGO_TeamPreviewCamera.m_flDofNearCrisp = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_flDofNearCrisp");
C_CSGO_TeamPreviewCamera.m_flDofFarCrisp = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_flDofFarCrisp");
C_CSGO_TeamPreviewCamera.m_flDofFarBlurry = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_flDofFarBlurry");
C_CSGO_TeamPreviewCamera.m_flDofTiltToGround = findOffsetByName(j, "C_CSGO_TeamPreviewCamera", "m_flDofTiltToGround");

// Atribuições para CCSPlayer_CameraServices
// CCSPlayer_CameraServices Offsets
CCSPlayer_CameraServices.m_flDeathCamTilt = findOffsetByName(j, "CCSPlayer_CameraServices", "m_flDeathCamTilt");
CCSPlayer_CameraServices.m_vClientScopeInaccuracy = findOffsetByName(j, "CCSPlayer_CameraServices", "m_vClientScopeInaccuracy");

// Atribuições para C_EconWearable
// C_EconWearable Offsets
C_EconWearable.m_nForceSkin = findOffsetByName(j, "C_EconWearable", "m_nForceSkin");
C_EconWearable.m_bAlwaysAllow = findOffsetByName(j, "C_EconWearable", "m_bAlwaysAllow");

// Atribuições para CSMatchStats_t
// CSMatchStats_t Offsets
CSMatchStats_t.m_iEnemy5Ks = findOffsetByName(j, "CSMatchStats_t", "m_iEnemy5Ks");
CSMatchStats_t.m_iEnemy4Ks = findOffsetByName(j, "CSMatchStats_t", "m_iEnemy4Ks");
CSMatchStats_t.m_iEnemy3Ks = findOffsetByName(j, "CSMatchStats_t", "m_iEnemy3Ks");
CSMatchStats_t.m_iEnemyKnifeKills = findOffsetByName(j, "CSMatchStats_t", "m_iEnemyKnifeKills");
CSMatchStats_t.m_iEnemyTaserKills = findOffsetByName(j, "CSMatchStats_t", "m_iEnemyTaserKills");
CSMatchStats_t.m_iEnemy2Ks = findOffsetByName(j, "CSMatchStats_t", "m_iEnemy2Ks");
CSMatchStats_t.m_iUtility_Count = findOffsetByName(j, "CSMatchStats_t", "m_iUtility_Count");
CSMatchStats_t.m_iUtility_Successes = findOffsetByName(j, "CSMatchStats_t", "m_iUtility_Successes");
CSMatchStats_t.m_iUtility_Enemies = findOffsetByName(j, "CSMatchStats_t", "m_iUtility_Enemies");
CSMatchStats_t.m_iFlash_Count = findOffsetByName(j, "CSMatchStats_t", "m_iFlash_Count");
CSMatchStats_t.m_iFlash_Successes = findOffsetByName(j, "CSMatchStats_t", "m_iFlash_Successes");
CSMatchStats_t.m_nHealthPointsRemovedTotal = findOffsetByName(j, "CSMatchStats_t", "m_nHealthPointsRemovedTotal");
CSMatchStats_t.m_nHealthPointsDealtTotal = findOffsetByName(j, "CSMatchStats_t", "m_nHealthPointsDealtTotal");
CSMatchStats_t.m_nShotsFiredTotal = findOffsetByName(j, "CSMatchStats_t", "m_nShotsFiredTotal");
CSMatchStats_t.m_nShotsOnTargetTotal = findOffsetByName(j, "CSMatchStats_t", "m_nShotsOnTargetTotal");
CSMatchStats_t.m_i1v1Count = findOffsetByName(j, "CSMatchStats_t", "m_i1v1Count");
CSMatchStats_t.m_i1v1Wins = findOffsetByName(j, "CSMatchStats_t", "m_i1v1Wins");
CSMatchStats_t.m_i1v2Count = findOffsetByName(j, "CSMatchStats_t", "m_i1v2Count");
CSMatchStats_t.m_i1v2Wins = findOffsetByName(j, "CSMatchStats_t", "m_i1v2Wins");
CSMatchStats_t.m_iEntryCount = findOffsetByName(j, "CSMatchStats_t", "m_iEntryCount");
CSMatchStats_t.m_iEntryWins = findOffsetByName(j, "CSMatchStats_t", "m_iEntryWins");

// Atribuições para C_EnvVolumetricFogVolume
// C_EnvVolumetricFogVolume Offsets
C_EnvVolumetricFogVolume.m_bActive = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bActive");
C_EnvVolumetricFogVolume.m_vBoxMins = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_vBoxMins");
C_EnvVolumetricFogVolume.m_vBoxMaxs = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_vBoxMaxs");
C_EnvVolumetricFogVolume.m_bStartDisabled = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bStartDisabled");
C_EnvVolumetricFogVolume.m_flStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_flStrength");
C_EnvVolumetricFogVolume.m_nFalloffShape = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_nFalloffShape");
C_EnvVolumetricFogVolume.m_flFalloffExponent = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_flFalloffExponent");
C_EnvVolumetricFogVolume.m_flHeightFogDepth = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_flHeightFogDepth");
C_EnvVolumetricFogVolume.m_fHeightFogEdgeWidth = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_fHeightFogEdgeWidth");
C_EnvVolumetricFogVolume.m_fIndirectLightStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_fIndirectLightStrength");
C_EnvVolumetricFogVolume.m_fSunLightStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_fSunLightStrength");
C_EnvVolumetricFogVolume.m_fNoiseStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_fNoiseStrength");
C_EnvVolumetricFogVolume.m_bOverrideIndirectLightStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength");
C_EnvVolumetricFogVolume.m_bOverrideSunLightStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bOverrideSunLightStrength");
C_EnvVolumetricFogVolume.m_bOverrideNoiseStrength = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bOverrideNoiseStrength");
C_EnvVolumetricFogVolume.m_bAllowLPVIndirect = findOffsetByName(j, "C_EnvVolumetricFogVolume", "m_bAllowLPVIndirect");

// Atribuições para C_FireSmoke
// C_FireSmoke Offsets
C_FireSmoke.m_nFlameModelIndex = findOffsetByName(j, "C_FireSmoke", "m_nFlameModelIndex");
C_FireSmoke.m_nFlameFromAboveModelIndex = findOffsetByName(j, "C_FireSmoke", "m_nFlameFromAboveModelIndex");
C_FireSmoke.m_flScaleRegister = findOffsetByName(j, "C_FireSmoke", "m_flScaleRegister");
C_FireSmoke.m_flScaleStart = findOffsetByName(j, "C_FireSmoke", "m_flScaleStart");
C_FireSmoke.m_flScaleEnd = findOffsetByName(j, "C_FireSmoke", "m_flScaleEnd");
C_FireSmoke.m_flScaleTimeStart = findOffsetByName(j, "C_FireSmoke", "m_flScaleTimeStart");
C_FireSmoke.m_flScaleTimeEnd = findOffsetByName(j, "C_FireSmoke", "m_flScaleTimeEnd");
C_FireSmoke.m_flChildFlameSpread = findOffsetByName(j, "C_FireSmoke", "m_flChildFlameSpread");
C_FireSmoke.m_flClipPerc = findOffsetByName(j, "C_FireSmoke", "m_flClipPerc");
C_FireSmoke.m_bClipTested = findOffsetByName(j, "C_FireSmoke", "m_bClipTested");
C_FireSmoke.m_bFadingOut = findOffsetByName(j, "C_FireSmoke", "m_bFadingOut");
C_FireSmoke.m_tParticleSpawn = findOffsetByName(j, "C_FireSmoke", "m_tParticleSpawn");
C_FireSmoke.m_pFireOverlay = findOffsetByName(j, "C_FireSmoke", "m_pFireOverlay");

// Atribuições para C_EnvCombinedLightProbeVolume
// C_EnvCombinedLightProbeVolume Offsets
C_EnvCombinedLightProbeVolume.m_Entity_Color = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_Color");
C_EnvCombinedLightProbeVolume.m_Entity_flBrightness = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_flBrightness");
C_EnvCombinedLightProbeVolume.m_Entity_hCubemapTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_hCubemapTexture");
C_EnvCombinedLightProbeVolume.m_Entity_bCustomCubemapTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_bCustomCubemapTexture");
C_EnvCombinedLightProbeVolume.m_Entity_hLightProbeTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_hLightProbeTexture");
C_EnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightIndicesTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightIndicesTexture");
C_EnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightScalarsTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightScalarsTexture");
C_EnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightShadowsTexture = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightShadowsTexture");
C_EnvCombinedLightProbeVolume.m_Entity_vBoxMins = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_vBoxMins");
C_EnvCombinedLightProbeVolume.m_Entity_vBoxMaxs = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_vBoxMaxs");
C_EnvCombinedLightProbeVolume.m_Entity_bMoveable = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_bMoveable");
C_EnvCombinedLightProbeVolume.m_Entity_nHandshake = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nHandshake");
C_EnvCombinedLightProbeVolume.m_Entity_nEnvCubeMapArrayIndex = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nEnvCubeMapArrayIndex");
C_EnvCombinedLightProbeVolume.m_Entity_nPriority = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nPriority");
C_EnvCombinedLightProbeVolume.m_Entity_bStartDisabled = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_bStartDisabled");
C_EnvCombinedLightProbeVolume.m_Entity_flEdgeFadeDist = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_flEdgeFadeDist");
C_EnvCombinedLightProbeVolume.m_Entity_vEdgeFadeDists = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_vEdgeFadeDists");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeX = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeX");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeY = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeY");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeZ = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeZ");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasX = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasX");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasY = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasY");
C_EnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasZ = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
C_EnvCombinedLightProbeVolume.m_Entity_bEnabled = findOffsetByName(j, "C_EnvCombinedLightProbeVolume", "m_Entity_bEnabled");

// Atribuições para ActiveModelConfig_t
// ActiveModelConfig_t Offsets
ActiveModelConfig_t.m_Handle = findOffsetByName(j, "ActiveModelConfig_t", "m_Handle");
ActiveModelConfig_t.m_Name = findOffsetByName(j, "ActiveModelConfig_t", "m_Name");
ActiveModelConfig_t.m_AssociatedEntities = findOffsetByName(j, "ActiveModelConfig_t", "m_AssociatedEntities");
ActiveModelConfig_t.m_AssociatedEntityNames = findOffsetByName(j, "ActiveModelConfig_t", "m_AssociatedEntityNames");

// Atribuições para CCSPlayer_BulletServices
// CCSPlayer_BulletServices Offsets
CCSPlayer_BulletServices.m_totalHitsOnServer = findOffsetByName(j, "CCSPlayer_BulletServices", "m_totalHitsOnServer");

// Atribuições para CLogicRelay
// CLogicRelay Offsets
CLogicRelay.m_OnTrigger = findOffsetByName(j, "CLogicRelay", "m_OnTrigger");
CLogicRelay.m_OnSpawn = findOffsetByName(j, "CLogicRelay", "m_OnSpawn");
CLogicRelay.m_bDisabled = findOffsetByName(j, "CLogicRelay", "m_bDisabled");
CLogicRelay.m_bWaitForRefire = findOffsetByName(j, "CLogicRelay", "m_bWaitForRefire");
CLogicRelay.m_bTriggerOnce = findOffsetByName(j, "CLogicRelay", "m_bTriggerOnce");
CLogicRelay.m_bFastRetrigger = findOffsetByName(j, "CLogicRelay", "m_bFastRetrigger");
CLogicRelay.m_bPassthoughCaller = findOffsetByName(j, "CLogicRelay", "m_bPassthoughCaller");

// Atribuições para C_PointCameraVFOV
// C_PointCameraVFOV Offsets
C_PointCameraVFOV.m_flVerticalFOV = findOffsetByName(j, "C_PointCameraVFOV", "m_flVerticalFOV");

// Atribuições para CCSPlayer_ItemServices
// CCSPlayer_ItemServices Offsets
CCSPlayer_ItemServices.m_bHasDefuser = findOffsetByName(j, "CCSPlayer_ItemServices", "m_bHasDefuser");
CCSPlayer_ItemServices.m_bHasHelmet = findOffsetByName(j, "CCSPlayer_ItemServices", "m_bHasHelmet");
CCSPlayer_ItemServices.m_bHasHeavyArmor = findOffsetByName(j, "CCSPlayer_ItemServices", "m_bHasHeavyArmor");

// Atribuições para C_BarnLight
// C_BarnLight Offsets
C_BarnLight.m_bEnabled = findOffsetByName(j, "C_BarnLight", "m_bEnabled");
C_BarnLight.m_nColorMode = findOffsetByName(j, "C_BarnLight", "m_nColorMode");
C_BarnLight.m_Color = findOffsetByName(j, "C_BarnLight", "m_Color");
C_BarnLight.m_flColorTemperature = findOffsetByName(j, "C_BarnLight", "m_flColorTemperature");
C_BarnLight.m_flBrightness = findOffsetByName(j, "C_BarnLight", "m_flBrightness");
C_BarnLight.m_flBrightnessScale = findOffsetByName(j, "C_BarnLight", "m_flBrightnessScale");
C_BarnLight.m_nDirectLight = findOffsetByName(j, "C_BarnLight", "m_nDirectLight");
C_BarnLight.m_nBakedShadowIndex = findOffsetByName(j, "C_BarnLight", "m_nBakedShadowIndex");
C_BarnLight.m_nLuminaireShape = findOffsetByName(j, "C_BarnLight", "m_nLuminaireShape");
C_BarnLight.m_flLuminaireSize = findOffsetByName(j, "C_BarnLight", "m_flLuminaireSize");
C_BarnLight.m_flLuminaireAnisotropy = findOffsetByName(j, "C_BarnLight", "m_flLuminaireAnisotropy");
C_BarnLight.m_LightStyleString = findOffsetByName(j, "C_BarnLight", "m_LightStyleString");
C_BarnLight.m_flLightStyleStartTime = findOffsetByName(j, "C_BarnLight", "m_flLightStyleStartTime");
C_BarnLight.m_QueuedLightStyleStrings = findOffsetByName(j, "C_BarnLight", "m_QueuedLightStyleStrings");
C_BarnLight.m_LightStyleEvents = findOffsetByName(j, "C_BarnLight", "m_LightStyleEvents");
C_BarnLight.m_LightStyleTargets = findOffsetByName(j, "C_BarnLight", "m_LightStyleTargets");
C_BarnLight.m_StyleEvent = findOffsetByName(j, "C_BarnLight", "m_StyleEvent");
C_BarnLight.m_hLightCookie = findOffsetByName(j, "C_BarnLight", "m_hLightCookie");
C_BarnLight.m_flShape = findOffsetByName(j, "C_BarnLight", "m_flShape");
C_BarnLight.m_flSoftX = findOffsetByName(j, "C_BarnLight", "m_flSoftX");
C_BarnLight.m_flSoftY = findOffsetByName(j, "C_BarnLight", "m_flSoftY");
C_BarnLight.m_flSkirt = findOffsetByName(j, "C_BarnLight", "m_flSkirt");
C_BarnLight.m_flSkirtNear = findOffsetByName(j, "C_BarnLight", "m_flSkirtNear");
C_BarnLight.m_vSizeParams = findOffsetByName(j, "C_BarnLight", "m_vSizeParams");
C_BarnLight.m_flRange = findOffsetByName(j, "C_BarnLight", "m_flRange");
C_BarnLight.m_vShear = findOffsetByName(j, "C_BarnLight", "m_vShear");
C_BarnLight.m_nBakeSpecularToCubemaps = findOffsetByName(j, "C_BarnLight", "m_nBakeSpecularToCubemaps");
C_BarnLight.m_vBakeSpecularToCubemapsSize = findOffsetByName(j, "C_BarnLight", "m_vBakeSpecularToCubemapsSize");
C_BarnLight.m_nCastShadows = findOffsetByName(j, "C_BarnLight", "m_nCastShadows");
C_BarnLight.m_nShadowMapSize = findOffsetByName(j, "C_BarnLight", "m_nShadowMapSize");
C_BarnLight.m_nShadowPriority = findOffsetByName(j, "C_BarnLight", "m_nShadowPriority");
C_BarnLight.m_bContactShadow = findOffsetByName(j, "C_BarnLight", "m_bContactShadow");
C_BarnLight.m_nBounceLight = findOffsetByName(j, "C_BarnLight", "m_nBounceLight");
C_BarnLight.m_flBounceScale = findOffsetByName(j, "C_BarnLight", "m_flBounceScale");
C_BarnLight.m_flMinRoughness = findOffsetByName(j, "C_BarnLight", "m_flMinRoughness");
C_BarnLight.m_vAlternateColor = findOffsetByName(j, "C_BarnLight", "m_vAlternateColor");
C_BarnLight.m_fAlternateColorBrightness = findOffsetByName(j, "C_BarnLight", "m_fAlternateColorBrightness");
C_BarnLight.m_nFog = findOffsetByName(j, "C_BarnLight", "m_nFog");
C_BarnLight.m_flFogStrength = findOffsetByName(j, "C_BarnLight", "m_flFogStrength");
C_BarnLight.m_nFogShadows = findOffsetByName(j, "C_BarnLight", "m_nFogShadows");
C_BarnLight.m_flFogScale = findOffsetByName(j, "C_BarnLight", "m_flFogScale");
C_BarnLight.m_bFogMixedShadows = findOffsetByName(j, "C_BarnLight", "m_bFogMixedShadows");
C_BarnLight.m_flFadeSizeStart = findOffsetByName(j, "C_BarnLight", "m_flFadeSizeStart");
C_BarnLight.m_flFadeSizeEnd = findOffsetByName(j, "C_BarnLight", "m_flFadeSizeEnd");
C_BarnLight.m_flShadowFadeSizeStart = findOffsetByName(j, "C_BarnLight", "m_flShadowFadeSizeStart");
C_BarnLight.m_flShadowFadeSizeEnd = findOffsetByName(j, "C_BarnLight", "m_flShadowFadeSizeEnd");
C_BarnLight.m_bPrecomputedFieldsValid = findOffsetByName(j, "C_BarnLight", "m_bPrecomputedFieldsValid");
C_BarnLight.m_vPrecomputedBoundsMins = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedBoundsMins");
C_BarnLight.m_vPrecomputedBoundsMaxs = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedBoundsMaxs");
C_BarnLight.m_vPrecomputedOBBOrigin = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin");
C_BarnLight.m_vPrecomputedOBBAngles = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles");
C_BarnLight.m_vPrecomputedOBBExtent = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent");
C_BarnLight.m_nPrecomputedSubFrusta = findOffsetByName(j, "C_BarnLight", "m_nPrecomputedSubFrusta");
C_BarnLight.m_vPrecomputedOBBOrigin0 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin0");
C_BarnLight.m_vPrecomputedOBBAngles0 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles0");
C_BarnLight.m_vPrecomputedOBBExtent0 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent0");
C_BarnLight.m_vPrecomputedOBBOrigin1 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin1");
C_BarnLight.m_vPrecomputedOBBAngles1 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles1");
C_BarnLight.m_vPrecomputedOBBExtent1 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent1");
C_BarnLight.m_vPrecomputedOBBOrigin2 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin2");
C_BarnLight.m_vPrecomputedOBBAngles2 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles2");
C_BarnLight.m_vPrecomputedOBBExtent2 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent2");
C_BarnLight.m_vPrecomputedOBBOrigin3 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin3");
C_BarnLight.m_vPrecomputedOBBAngles3 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles3");
C_BarnLight.m_vPrecomputedOBBExtent3 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent3");
C_BarnLight.m_vPrecomputedOBBOrigin4 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin4");
C_BarnLight.m_vPrecomputedOBBAngles4 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles4");
C_BarnLight.m_vPrecomputedOBBExtent4 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent4");
C_BarnLight.m_vPrecomputedOBBOrigin5 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBOrigin5");
C_BarnLight.m_vPrecomputedOBBAngles5 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBAngles5");
C_BarnLight.m_vPrecomputedOBBExtent5 = findOffsetByName(j, "C_BarnLight", "m_vPrecomputedOBBExtent5");
C_BarnLight.m_bInitialBoneSetup = findOffsetByName(j, "C_BarnLight", "m_bInitialBoneSetup");
C_BarnLight.m_VisClusters = findOffsetByName(j, "C_BarnLight", "m_VisClusters");

// Atribuições para C_TonemapController2
// C_TonemapController2 Offsets
C_TonemapController2.m_flAutoExposureMin = findOffsetByName(j, "C_TonemapController2", "m_flAutoExposureMin");
C_TonemapController2.m_flAutoExposureMax = findOffsetByName(j, "C_TonemapController2", "m_flAutoExposureMax");
C_TonemapController2.m_flTonemapPercentTarget = findOffsetByName(j, "C_TonemapController2", "m_flTonemapPercentTarget");
C_TonemapController2.m_flTonemapPercentBrightPixels = findOffsetByName(j, "C_TonemapController2", "m_flTonemapPercentBrightPixels");
C_TonemapController2.m_flTonemapMinAvgLum = findOffsetByName(j, "C_TonemapController2", "m_flTonemapMinAvgLum");
C_TonemapController2.m_flExposureAdaptationSpeedUp = findOffsetByName(j, "C_TonemapController2", "m_flExposureAdaptationSpeedUp");
C_TonemapController2.m_flExposureAdaptationSpeedDown = findOffsetByName(j, "C_TonemapController2", "m_flExposureAdaptationSpeedDown");
C_TonemapController2.m_flTonemapEVSmoothingRange = findOffsetByName(j, "C_TonemapController2", "m_flTonemapEVSmoothingRange");

// Atribuições para CFuncWater
// CFuncWater Offsets
CFuncWater.m_BuoyancyHelper = findOffsetByName(j, "CFuncWater", "m_BuoyancyHelper");

// Atribuições para C_EconEntity
// C_EconEntity Offsets
C_EconEntity.m_flFlexDelayTime = findOffsetByName(j, "C_EconEntity", "m_flFlexDelayTime");
C_EconEntity.m_flFlexDelayedWeight = findOffsetByName(j, "C_EconEntity", "m_flFlexDelayedWeight");
C_EconEntity.m_bAttributesInitialized = findOffsetByName(j, "C_EconEntity", "m_bAttributesInitialized");
C_EconEntity.m_AttributeManager = findOffsetByName(j, "C_EconEntity", "m_AttributeManager");
C_EconEntity.m_OriginalOwnerXuidLow = findOffsetByName(j, "C_EconEntity", "m_OriginalOwnerXuidLow");
C_EconEntity.m_OriginalOwnerXuidHigh = findOffsetByName(j, "C_EconEntity", "m_OriginalOwnerXuidHigh");
C_EconEntity.m_nFallbackPaintKit = findOffsetByName(j, "C_EconEntity", "m_nFallbackPaintKit");
C_EconEntity.m_nFallbackSeed = findOffsetByName(j, "C_EconEntity", "m_nFallbackSeed");
C_EconEntity.m_flFallbackWear = findOffsetByName(j, "C_EconEntity", "m_flFallbackWear");
C_EconEntity.m_nFallbackStatTrak = findOffsetByName(j, "C_EconEntity", "m_nFallbackStatTrak");
C_EconEntity.m_bClientside = findOffsetByName(j, "C_EconEntity", "m_bClientside");
C_EconEntity.m_bParticleSystemsCreated = findOffsetByName(j, "C_EconEntity", "m_bParticleSystemsCreated");
C_EconEntity.m_vecAttachedParticles = findOffsetByName(j, "C_EconEntity", "m_vecAttachedParticles");
C_EconEntity.m_hViewmodelAttachment = findOffsetByName(j, "C_EconEntity", "m_hViewmodelAttachment");
C_EconEntity.m_iOldTeam = findOffsetByName(j, "C_EconEntity", "m_iOldTeam");
C_EconEntity.m_bAttachmentDirty = findOffsetByName(j, "C_EconEntity", "m_bAttachmentDirty");
C_EconEntity.m_nUnloadedModelIndex = findOffsetByName(j, "C_EconEntity", "m_nUnloadedModelIndex");
C_EconEntity.m_iNumOwnerValidationRetries = findOffsetByName(j, "C_EconEntity", "m_iNumOwnerValidationRetries");
C_EconEntity.m_hOldProvidee = findOffsetByName(j, "C_EconEntity", "m_hOldProvidee");
C_EconEntity.m_vecAttachedModels = findOffsetByName(j, "C_EconEntity", "m_vecAttachedModels");

// Atribuições para C_RectLight
// C_RectLight Offsets
C_RectLight.m_bShowLight = findOffsetByName(j, "C_RectLight", "m_bShowLight");

// Atribuições para C_ParticleSystem
// C_ParticleSystem Offsets
C_ParticleSystem.m_szSnapshotFileName = findOffsetByName(j, "C_ParticleSystem", "m_szSnapshotFileName");
C_ParticleSystem.m_bActive = findOffsetByName(j, "C_ParticleSystem", "m_bActive");
C_ParticleSystem.m_bFrozen = findOffsetByName(j, "C_ParticleSystem", "m_bFrozen");
C_ParticleSystem.m_flFreezeTransitionDuration = findOffsetByName(j, "C_ParticleSystem", "m_flFreezeTransitionDuration");
C_ParticleSystem.m_nStopType = findOffsetByName(j, "C_ParticleSystem", "m_nStopType");
C_ParticleSystem.m_bAnimateDuringGameplayPause = findOffsetByName(j, "C_ParticleSystem", "m_bAnimateDuringGameplayPause");
C_ParticleSystem.m_iEffectIndex = findOffsetByName(j, "C_ParticleSystem", "m_iEffectIndex");
C_ParticleSystem.m_flStartTime = findOffsetByName(j, "C_ParticleSystem", "m_flStartTime");
C_ParticleSystem.m_flPreSimTime = findOffsetByName(j, "C_ParticleSystem", "m_flPreSimTime");
C_ParticleSystem.m_vServerControlPoints = findOffsetByName(j, "C_ParticleSystem", "m_vServerControlPoints");
C_ParticleSystem.m_iServerControlPointAssignments = findOffsetByName(j, "C_ParticleSystem", "m_iServerControlPointAssignments");
C_ParticleSystem.m_hControlPointEnts = findOffsetByName(j, "C_ParticleSystem", "m_hControlPointEnts");
C_ParticleSystem.m_bNoSave = findOffsetByName(j, "C_ParticleSystem", "m_bNoSave");
C_ParticleSystem.m_bNoFreeze = findOffsetByName(j, "C_ParticleSystem", "m_bNoFreeze");
C_ParticleSystem.m_bNoRamp = findOffsetByName(j, "C_ParticleSystem", "m_bNoRamp");
C_ParticleSystem.m_bStartActive = findOffsetByName(j, "C_ParticleSystem", "m_bStartActive");
C_ParticleSystem.m_iszEffectName = findOffsetByName(j, "C_ParticleSystem", "m_iszEffectName");
C_ParticleSystem.m_iszControlPointNames = findOffsetByName(j, "C_ParticleSystem", "m_iszControlPointNames");
C_ParticleSystem.m_nDataCP = findOffsetByName(j, "C_ParticleSystem", "m_nDataCP");
C_ParticleSystem.m_vecDataCPValue = findOffsetByName(j, "C_ParticleSystem", "m_vecDataCPValue");
C_ParticleSystem.m_nTintCP = findOffsetByName(j, "C_ParticleSystem", "m_nTintCP");
C_ParticleSystem.m_clrTint = findOffsetByName(j, "C_ParticleSystem", "m_clrTint");
C_ParticleSystem.m_bOldActive = findOffsetByName(j, "C_ParticleSystem", "m_bOldActive");
C_ParticleSystem.m_bOldFrozen = findOffsetByName(j, "C_ParticleSystem", "m_bOldFrozen");

// Atribuições para C_CSGameRulesProxy
// C_CSGameRulesProxy Offsets
C_CSGameRulesProxy.m_pGameRules = findOffsetByName(j, "C_CSGameRulesProxy", "m_pGameRules");

// Atribuições para CPlayer_ObserverServices
// CPlayer_ObserverServices Offsets
CPlayer_ObserverServices.m_iObserverMode = findOffsetByName(j, "CPlayer_ObserverServices", "m_iObserverMode");
CPlayer_ObserverServices.m_hObserverTarget = findOffsetByName(j, "CPlayer_ObserverServices", "m_hObserverTarget");
CPlayer_ObserverServices.m_iObserverLastMode = findOffsetByName(j, "CPlayer_ObserverServices", "m_iObserverLastMode");
CPlayer_ObserverServices.m_bForcedObserverMode = findOffsetByName(j, "CPlayer_ObserverServices", "m_bForcedObserverMode");
CPlayer_ObserverServices.m_flObserverChaseDistance = findOffsetByName(j, "CPlayer_ObserverServices", "m_flObserverChaseDistance");
CPlayer_ObserverServices.m_flObserverChaseDistanceCalcTime = findOffsetByName(j, "CPlayer_ObserverServices", "m_flObserverChaseDistanceCalcTime");

// Atribuições para SequenceHistory_t
// SequenceHistory_t Offsets
SequenceHistory_t.m_hSequence = findOffsetByName(j, "SequenceHistory_t", "m_hSequence");
SequenceHistory_t.m_flSeqStartTime = findOffsetByName(j, "SequenceHistory_t", "m_flSeqStartTime");
SequenceHistory_t.m_flSeqFixedCycle = findOffsetByName(j, "SequenceHistory_t", "m_flSeqFixedCycle");
SequenceHistory_t.m_nSeqLoopMode = findOffsetByName(j, "SequenceHistory_t", "m_nSeqLoopMode");
SequenceHistory_t.m_flPlaybackRate = findOffsetByName(j, "SequenceHistory_t", "m_flPlaybackRate");
SequenceHistory_t.m_flCyclesPerSecond = findOffsetByName(j, "SequenceHistory_t", "m_flCyclesPerSecond");

// Atribuições para C_Multimeter
// C_Multimeter Offsets
C_Multimeter.m_hTargetC4 = findOffsetByName(j, "C_Multimeter", "m_hTargetC4");

// Atribuições para C_CsmFovOverride
// C_CsmFovOverride Offsets
C_CsmFovOverride.m_cameraName = findOffsetByName(j, "C_CsmFovOverride", "m_cameraName");
C_CsmFovOverride.m_flCsmFovOverrideValue = findOffsetByName(j, "C_CsmFovOverride", "m_flCsmFovOverrideValue");

// Atribuições para C_EnvDecal
// C_EnvDecal Offsets
C_EnvDecal.m_hDecalMaterial = findOffsetByName(j, "C_EnvDecal", "m_hDecalMaterial");
C_EnvDecal.m_flWidth = findOffsetByName(j, "C_EnvDecal", "m_flWidth");
C_EnvDecal.m_flHeight = findOffsetByName(j, "C_EnvDecal", "m_flHeight");
C_EnvDecal.m_flDepth = findOffsetByName(j, "C_EnvDecal", "m_flDepth");
C_EnvDecal.m_nRenderOrder = findOffsetByName(j, "C_EnvDecal", "m_nRenderOrder");
C_EnvDecal.m_bProjectOnWorld = findOffsetByName(j, "C_EnvDecal", "m_bProjectOnWorld");
C_EnvDecal.m_bProjectOnCharacters = findOffsetByName(j, "C_EnvDecal", "m_bProjectOnCharacters");
C_EnvDecal.m_bProjectOnWater = findOffsetByName(j, "C_EnvDecal", "m_bProjectOnWater");
C_EnvDecal.m_flDepthSortBias = findOffsetByName(j, "C_EnvDecal", "m_flDepthSortBias");

// Atribuições para C_ColorCorrection
// C_ColorCorrection Offsets
C_ColorCorrection.m_vecOrigin = findOffsetByName(j, "C_ColorCorrection", "m_vecOrigin");
C_ColorCorrection.m_MinFalloff = findOffsetByName(j, "C_ColorCorrection", "m_MinFalloff");
C_ColorCorrection.m_MaxFalloff = findOffsetByName(j, "C_ColorCorrection", "m_MaxFalloff");
C_ColorCorrection.m_flFadeInDuration = findOffsetByName(j, "C_ColorCorrection", "m_flFadeInDuration");
C_ColorCorrection.m_flFadeOutDuration = findOffsetByName(j, "C_ColorCorrection", "m_flFadeOutDuration");
C_ColorCorrection.m_flMaxWeight = findOffsetByName(j, "C_ColorCorrection", "m_flMaxWeight");
C_ColorCorrection.m_flCurWeight = findOffsetByName(j, "C_ColorCorrection", "m_flCurWeight");
C_ColorCorrection.m_netlookupFilename = findOffsetByName(j, "C_ColorCorrection", "m_netlookupFilename");
C_ColorCorrection.m_bEnabled = findOffsetByName(j, "C_ColorCorrection", "m_bEnabled");
C_ColorCorrection.m_bMaster = findOffsetByName(j, "C_ColorCorrection", "m_bMaster");
C_ColorCorrection.m_bClientSide = findOffsetByName(j, "C_ColorCorrection", "m_bClientSide");
C_ColorCorrection.m_bExclusive = findOffsetByName(j, "C_ColorCorrection", "m_bExclusive");
C_ColorCorrection.m_bEnabledOnClient = findOffsetByName(j, "C_ColorCorrection", "m_bEnabledOnClient");
C_ColorCorrection.m_flCurWeightOnClient = findOffsetByName(j, "C_ColorCorrection", "m_flCurWeightOnClient");
C_ColorCorrection.m_bFadingIn = findOffsetByName(j, "C_ColorCorrection", "m_bFadingIn");
C_ColorCorrection.m_flFadeStartWeight = findOffsetByName(j, "C_ColorCorrection", "m_flFadeStartWeight");
C_ColorCorrection.m_flFadeStartTime = findOffsetByName(j, "C_ColorCorrection", "m_flFadeStartTime");
C_ColorCorrection.m_flFadeDuration = findOffsetByName(j, "C_ColorCorrection", "m_flFadeDuration");

// Atribuições para CModelState
// CModelState Offsets
CModelState.m_hModel = findOffsetByName(j, "CModelState", "m_hModel");
CModelState.m_ModelName = findOffsetByName(j, "CModelState", "m_ModelName");
CModelState.m_bClientClothCreationSuppressed = findOffsetByName(j, "CModelState", "m_bClientClothCreationSuppressed");
CModelState.m_MeshGroupMask = findOffsetByName(j, "CModelState", "m_MeshGroupMask");
CModelState.m_nIdealMotionType = findOffsetByName(j, "CModelState", "m_nIdealMotionType");
CModelState.m_nForceLOD = findOffsetByName(j, "CModelState", "m_nForceLOD");
CModelState.m_nClothUpdateFlags = findOffsetByName(j, "CModelState", "m_nClothUpdateFlags");

// Atribuições para C_EconEntity__AttachedModelData_t
// C_EconEntity__AttachedModelData_t Offsets
C_EconEntity__AttachedModelData_t.m_iModelDisplayFlags = findOffsetByName(j, "C_EconEntity__AttachedModelData_t", "m_iModelDisplayFlags");

// Atribuições para CAttributeList
// CAttributeList Offsets
CAttributeList.m_Attributes = findOffsetByName(j, "CAttributeList", "m_Attributes");
CAttributeList.m_pManager = findOffsetByName(j, "CAttributeList", "m_pManager");

// Atribuições para C_BaseDoor
// C_BaseDoor Offsets
C_BaseDoor.m_bIsUsable = findOffsetByName(j, "C_BaseDoor", "m_bIsUsable");

// Atribuições para CGrenadeTracer
// CGrenadeTracer Offsets
CGrenadeTracer.m_flTracerDuration = findOffsetByName(j, "CGrenadeTracer", "m_flTracerDuration");
CGrenadeTracer.m_nType = findOffsetByName(j, "CGrenadeTracer", "m_nType");

// Atribuições para CBombTarget
// CBombTarget Offsets
CBombTarget.m_bBombPlantedHere = findOffsetByName(j, "CBombTarget", "m_bBombPlantedHere");
CBombTarget.m_OnBombExplode = findOffsetByName(j, "CBombTarget", "m_OnBombExplode");
CBombTarget.m_OnBombPlanted = findOffsetByName(j, "CBombTarget", "m_OnBombPlanted");
CBombTarget.m_OnBombDefused = findOffsetByName(j, "CBombTarget", "m_OnBombDefused");
CBombTarget.m_bIsBombSiteB = findOffsetByName(j, "CBombTarget", "m_bIsBombSiteB");
CBombTarget.m_bIsHeistBombTarget = findOffsetByName(j, "CBombTarget", "m_bIsHeistBombTarget");
CBombTarget.m_szMountTarget = findOffsetByName(j, "CBombTarget", "m_szMountTarget");
CBombTarget.m_hInstructorHint = findOffsetByName(j, "CBombTarget", "m_hInstructorHint");
CBombTarget.m_nBombSiteDesignation = findOffsetByName(j, "CBombTarget", "m_nBombSiteDesignation");

// Atribuições para C_PointClientUIDialog
// C_PointClientUIDialog Offsets
C_PointClientUIDialog.m_hActivator = findOffsetByName(j, "C_PointClientUIDialog", "m_hActivator");
C_PointClientUIDialog.m_bStartEnabled = findOffsetByName(j, "C_PointClientUIDialog", "m_bStartEnabled");

// Atribuições para CCSGameModeRules_ArmsRace
// CCSGameModeRules_ArmsRace Offsets
CCSGameModeRules_ArmsRace.m_WeaponSequence = findOffsetByName(j, "CCSGameModeRules_ArmsRace", "m_WeaponSequence");

// Atribuições para CPointChildModifier
// CPointChildModifier Offsets
CPointChildModifier.m_bOrphanInsteadOfDeletingChildrenOnRemove = findOffsetByName(j, "CPointChildModifier", "m_bOrphanInsteadOfDeletingChildrenOnRemove");

// Atribuições para CDamageRecord
// CDamageRecord Offsets
CDamageRecord.m_PlayerDamager = findOffsetByName(j, "CDamageRecord", "m_PlayerDamager");
CDamageRecord.m_PlayerRecipient = findOffsetByName(j, "CDamageRecord", "m_PlayerRecipient");
CDamageRecord.m_hPlayerControllerDamager = findOffsetByName(j, "CDamageRecord", "m_hPlayerControllerDamager");
CDamageRecord.m_hPlayerControllerRecipient = findOffsetByName(j, "CDamageRecord", "m_hPlayerControllerRecipient");
CDamageRecord.m_szPlayerDamagerName = findOffsetByName(j, "CDamageRecord", "m_szPlayerDamagerName");
CDamageRecord.m_szPlayerRecipientName = findOffsetByName(j, "CDamageRecord", "m_szPlayerRecipientName");
CDamageRecord.m_DamagerXuid = findOffsetByName(j, "CDamageRecord", "m_DamagerXuid");
CDamageRecord.m_RecipientXuid = findOffsetByName(j, "CDamageRecord", "m_RecipientXuid");
CDamageRecord.m_iBulletsDamage = findOffsetByName(j, "CDamageRecord", "m_iBulletsDamage");
CDamageRecord.m_iDamage = findOffsetByName(j, "CDamageRecord", "m_iDamage");
CDamageRecord.m_iActualHealthRemoved = findOffsetByName(j, "CDamageRecord", "m_iActualHealthRemoved");
CDamageRecord.m_iNumHits = findOffsetByName(j, "CDamageRecord", "m_iNumHits");
CDamageRecord.m_iLastBulletUpdate = findOffsetByName(j, "CDamageRecord", "m_iLastBulletUpdate");
CDamageRecord.m_bIsOtherEnemy = findOffsetByName(j, "CDamageRecord", "m_bIsOtherEnemy");
CDamageRecord.m_killType = findOffsetByName(j, "CDamageRecord", "m_killType");

// Atribuições para CCSPlayerController_DamageServices
// CCSPlayerController_DamageServices Offsets
CCSPlayerController_DamageServices.m_nSendUpdate = findOffsetByName(j, "CCSPlayerController_DamageServices", "m_nSendUpdate");
CCSPlayerController_DamageServices.m_DamageList = findOffsetByName(j, "CCSPlayerController_DamageServices", "m_DamageList");

// Atribuições para CRenderComponent
// CRenderComponent Offsets
CRenderComponent.__m_pChainEntity = findOffsetByName(j, "CRenderComponent", "__m_pChainEntity");
CRenderComponent.m_bIsRenderingWithViewModels = findOffsetByName(j, "CRenderComponent", "m_bIsRenderingWithViewModels");
CRenderComponent.m_nSplitscreenFlags = findOffsetByName(j, "CRenderComponent", "m_nSplitscreenFlags");
CRenderComponent.m_bEnableRendering = findOffsetByName(j, "CRenderComponent", "m_bEnableRendering");
CRenderComponent.m_bInterpolationReadyToDraw = findOffsetByName(j, "CRenderComponent", "m_bInterpolationReadyToDraw");

// Atribuições para CEnvSoundscapeProxy
// CEnvSoundscapeProxy Offsets
CEnvSoundscapeProxy.m_MainSoundscapeName = findOffsetByName(j, "CEnvSoundscapeProxy", "m_MainSoundscapeName");

// Atribuições para C_SoundEventOBBEntity
// C_SoundEventOBBEntity Offsets
C_SoundEventOBBEntity.m_vMins = findOffsetByName(j, "C_SoundEventOBBEntity", "m_vMins");
C_SoundEventOBBEntity.m_vMaxs = findOffsetByName(j, "C_SoundEventOBBEntity", "m_vMaxs");

// Atribuições para CLightComponent
// CLightComponent Offsets
CLightComponent.__m_pChainEntity = findOffsetByName(j, "CLightComponent", "__m_pChainEntity");
CLightComponent.m_Color = findOffsetByName(j, "CLightComponent", "m_Color");
CLightComponent.m_SecondaryColor = findOffsetByName(j, "CLightComponent", "m_SecondaryColor");
CLightComponent.m_flBrightness = findOffsetByName(j, "CLightComponent", "m_flBrightness");
CLightComponent.m_flBrightnessScale = findOffsetByName(j, "CLightComponent", "m_flBrightnessScale");
CLightComponent.m_flBrightnessMult = findOffsetByName(j, "CLightComponent", "m_flBrightnessMult");
CLightComponent.m_flRange = findOffsetByName(j, "CLightComponent", "m_flRange");
CLightComponent.m_flFalloff = findOffsetByName(j, "CLightComponent", "m_flFalloff");
CLightComponent.m_flAttenuation0 = findOffsetByName(j, "CLightComponent", "m_flAttenuation0");
CLightComponent.m_flAttenuation1 = findOffsetByName(j, "CLightComponent", "m_flAttenuation1");
CLightComponent.m_flAttenuation2 = findOffsetByName(j, "CLightComponent", "m_flAttenuation2");
CLightComponent.m_flTheta = findOffsetByName(j, "CLightComponent", "m_flTheta");
CLightComponent.m_flPhi = findOffsetByName(j, "CLightComponent", "m_flPhi");
CLightComponent.m_hLightCookie = findOffsetByName(j, "CLightComponent", "m_hLightCookie");
CLightComponent.m_nCascades = findOffsetByName(j, "CLightComponent", "m_nCascades");
CLightComponent.m_nCastShadows = findOffsetByName(j, "CLightComponent", "m_nCastShadows");
CLightComponent.m_nShadowWidth = findOffsetByName(j, "CLightComponent", "m_nShadowWidth");
CLightComponent.m_nShadowHeight = findOffsetByName(j, "CLightComponent", "m_nShadowHeight");
CLightComponent.m_bRenderDiffuse = findOffsetByName(j, "CLightComponent", "m_bRenderDiffuse");
CLightComponent.m_nRenderSpecular = findOffsetByName(j, "CLightComponent", "m_nRenderSpecular");
CLightComponent.m_bRenderTransmissive = findOffsetByName(j, "CLightComponent", "m_bRenderTransmissive");
CLightComponent.m_flOrthoLightWidth = findOffsetByName(j, "CLightComponent", "m_flOrthoLightWidth");
CLightComponent.m_flOrthoLightHeight = findOffsetByName(j, "CLightComponent", "m_flOrthoLightHeight");
CLightComponent.m_nStyle = findOffsetByName(j, "CLightComponent", "m_nStyle");
CLightComponent.m_Pattern = findOffsetByName(j, "CLightComponent", "m_Pattern");
CLightComponent.m_nCascadeRenderStaticObjects = findOffsetByName(j, "CLightComponent", "m_nCascadeRenderStaticObjects");
CLightComponent.m_flShadowCascadeCrossFade = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeCrossFade");
CLightComponent.m_flShadowCascadeDistanceFade = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeDistanceFade");
CLightComponent.m_flShadowCascadeDistance0 = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeDistance0");
CLightComponent.m_flShadowCascadeDistance1 = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeDistance1");
CLightComponent.m_flShadowCascadeDistance2 = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeDistance2");
CLightComponent.m_flShadowCascadeDistance3 = findOffsetByName(j, "CLightComponent", "m_flShadowCascadeDistance3");
CLightComponent.m_nShadowCascadeResolution0 = findOffsetByName(j, "CLightComponent", "m_nShadowCascadeResolution0");
CLightComponent.m_nShadowCascadeResolution1 = findOffsetByName(j, "CLightComponent", "m_nShadowCascadeResolution1");
CLightComponent.m_nShadowCascadeResolution2 = findOffsetByName(j, "CLightComponent", "m_nShadowCascadeResolution2");
CLightComponent.m_nShadowCascadeResolution3 = findOffsetByName(j, "CLightComponent", "m_nShadowCascadeResolution3");
CLightComponent.m_bUsesBakedShadowing = findOffsetByName(j, "CLightComponent", "m_bUsesBakedShadowing");
CLightComponent.m_nShadowPriority = findOffsetByName(j, "CLightComponent", "m_nShadowPriority");
CLightComponent.m_nBakedShadowIndex = findOffsetByName(j, "CLightComponent", "m_nBakedShadowIndex");
CLightComponent.m_bRenderToCubemaps = findOffsetByName(j, "CLightComponent", "m_bRenderToCubemaps");
CLightComponent.m_nDirectLight = findOffsetByName(j, "CLightComponent", "m_nDirectLight");
CLightComponent.m_nIndirectLight = findOffsetByName(j, "CLightComponent", "m_nIndirectLight");
CLightComponent.m_flFadeMinDist = findOffsetByName(j, "CLightComponent", "m_flFadeMinDist");
CLightComponent.m_flFadeMaxDist = findOffsetByName(j, "CLightComponent", "m_flFadeMaxDist");
CLightComponent.m_flShadowFadeMinDist = findOffsetByName(j, "CLightComponent", "m_flShadowFadeMinDist");
CLightComponent.m_flShadowFadeMaxDist = findOffsetByName(j, "CLightComponent", "m_flShadowFadeMaxDist");
CLightComponent.m_bEnabled = findOffsetByName(j, "CLightComponent", "m_bEnabled");
CLightComponent.m_bFlicker = findOffsetByName(j, "CLightComponent", "m_bFlicker");
CLightComponent.m_bPrecomputedFieldsValid = findOffsetByName(j, "CLightComponent", "m_bPrecomputedFieldsValid");
CLightComponent.m_vPrecomputedBoundsMins = findOffsetByName(j, "CLightComponent", "m_vPrecomputedBoundsMins");
CLightComponent.m_vPrecomputedBoundsMaxs = findOffsetByName(j, "CLightComponent", "m_vPrecomputedBoundsMaxs");
CLightComponent.m_vPrecomputedOBBOrigin = findOffsetByName(j, "CLightComponent", "m_vPrecomputedOBBOrigin");
CLightComponent.m_vPrecomputedOBBAngles = findOffsetByName(j, "CLightComponent", "m_vPrecomputedOBBAngles");
CLightComponent.m_vPrecomputedOBBExtent = findOffsetByName(j, "CLightComponent", "m_vPrecomputedOBBExtent");
CLightComponent.m_flPrecomputedMaxRange = findOffsetByName(j, "CLightComponent", "m_flPrecomputedMaxRange");
CLightComponent.m_nFogLightingMode = findOffsetByName(j, "CLightComponent", "m_nFogLightingMode");
CLightComponent.m_flFogContributionStength = findOffsetByName(j, "CLightComponent", "m_flFogContributionStength");
CLightComponent.m_flNearClipPlane = findOffsetByName(j, "CLightComponent", "m_flNearClipPlane");
CLightComponent.m_SkyColor = findOffsetByName(j, "CLightComponent", "m_SkyColor");
CLightComponent.m_flSkyIntensity = findOffsetByName(j, "CLightComponent", "m_flSkyIntensity");
CLightComponent.m_SkyAmbientBounce = findOffsetByName(j, "CLightComponent", "m_SkyAmbientBounce");
CLightComponent.m_bUseSecondaryColor = findOffsetByName(j, "CLightComponent", "m_bUseSecondaryColor");
CLightComponent.m_bMixedShadows = findOffsetByName(j, "CLightComponent", "m_bMixedShadows");
CLightComponent.m_flLightStyleStartTime = findOffsetByName(j, "CLightComponent", "m_flLightStyleStartTime");
CLightComponent.m_flCapsuleLength = findOffsetByName(j, "CLightComponent", "m_flCapsuleLength");
CLightComponent.m_flMinRoughness = findOffsetByName(j, "CLightComponent", "m_flMinRoughness");
CLightComponent.m_bPvsModifyEntity = findOffsetByName(j, "CLightComponent", "m_bPvsModifyEntity");

// Atribuições para C_EconItemView
// C_EconItemView Offsets
C_EconItemView.m_bInventoryImageRgbaRequested = findOffsetByName(j, "C_EconItemView", "m_bInventoryImageRgbaRequested");
C_EconItemView.m_bInventoryImageTriedCache = findOffsetByName(j, "C_EconItemView", "m_bInventoryImageTriedCache");
C_EconItemView.m_nInventoryImageRgbaWidth = findOffsetByName(j, "C_EconItemView", "m_nInventoryImageRgbaWidth");
C_EconItemView.m_nInventoryImageRgbaHeight = findOffsetByName(j, "C_EconItemView", "m_nInventoryImageRgbaHeight");
C_EconItemView.m_szCurrentLoadCachedFileName = findOffsetByName(j, "C_EconItemView", "m_szCurrentLoadCachedFileName");
C_EconItemView.m_bRestoreCustomMaterialAfterPrecache = findOffsetByName(j, "C_EconItemView", "m_bRestoreCustomMaterialAfterPrecache");
C_EconItemView.m_iItemDefinitionIndex = findOffsetByName(j, "C_EconItemView", "m_iItemDefinitionIndex");
C_EconItemView.m_iEntityQuality = findOffsetByName(j, "C_EconItemView", "m_iEntityQuality");
C_EconItemView.m_iEntityLevel = findOffsetByName(j, "C_EconItemView", "m_iEntityLevel");
C_EconItemView.m_iItemID = findOffsetByName(j, "C_EconItemView", "m_iItemID");
C_EconItemView.m_iItemIDHigh = findOffsetByName(j, "C_EconItemView", "m_iItemIDHigh");
C_EconItemView.m_iItemIDLow = findOffsetByName(j, "C_EconItemView", "m_iItemIDLow");
C_EconItemView.m_iAccountID = findOffsetByName(j, "C_EconItemView", "m_iAccountID");
C_EconItemView.m_iInventoryPosition = findOffsetByName(j, "C_EconItemView", "m_iInventoryPosition");
C_EconItemView.m_bInitialized = findOffsetByName(j, "C_EconItemView", "m_bInitialized");
C_EconItemView.m_bDisallowSOC = findOffsetByName(j, "C_EconItemView", "m_bDisallowSOC");
C_EconItemView.m_bIsStoreItem = findOffsetByName(j, "C_EconItemView", "m_bIsStoreItem");
C_EconItemView.m_bIsTradeItem = findOffsetByName(j, "C_EconItemView", "m_bIsTradeItem");
C_EconItemView.m_iEntityQuantity = findOffsetByName(j, "C_EconItemView", "m_iEntityQuantity");
C_EconItemView.m_iRarityOverride = findOffsetByName(j, "C_EconItemView", "m_iRarityOverride");
C_EconItemView.m_iQualityOverride = findOffsetByName(j, "C_EconItemView", "m_iQualityOverride");
C_EconItemView.m_iOriginOverride = findOffsetByName(j, "C_EconItemView", "m_iOriginOverride");
C_EconItemView.m_unClientFlags = findOffsetByName(j, "C_EconItemView", "m_unClientFlags");
C_EconItemView.m_unOverrideStyle = findOffsetByName(j, "C_EconItemView", "m_unOverrideStyle");
C_EconItemView.m_AttributeList = findOffsetByName(j, "C_EconItemView", "m_AttributeList");
C_EconItemView.m_NetworkedDynamicAttributes = findOffsetByName(j, "C_EconItemView", "m_NetworkedDynamicAttributes");
C_EconItemView.m_szCustomName = findOffsetByName(j, "C_EconItemView", "m_szCustomName");
C_EconItemView.m_szCustomNameOverride = findOffsetByName(j, "C_EconItemView", "m_szCustomNameOverride");
C_EconItemView.m_bInitializedTags = findOffsetByName(j, "C_EconItemView", "m_bInitializedTags");

// Atribuições para C_HandleTest
// C_HandleTest Offsets
C_HandleTest.m_Handle = findOffsetByName(j, "C_HandleTest", "m_Handle");
C_HandleTest.m_bSendHandle = findOffsetByName(j, "C_HandleTest", "m_bSendHandle");

// Atribuições para C_EnvWindClientside
// C_EnvWindClientside Offsets
C_EnvWindClientside.m_EnvWindShared = findOffsetByName(j, "C_EnvWindClientside", "m_EnvWindShared");

// Atribuições para C_WeaponShield
// C_WeaponShield Offsets
C_WeaponShield.m_flDisplayHealth = findOffsetByName(j, "C_WeaponShield", "m_flDisplayHealth");

// Atribuições para C_PointClientUIWorldTextPanel
// C_PointClientUIWorldTextPanel Offsets
C_PointClientUIWorldTextPanel.m_messageText = findOffsetByName(j, "C_PointClientUIWorldTextPanel", "m_messageText");

// Atribuições para CPlayer_MovementServices
// CPlayer_MovementServices Offsets
CPlayer_MovementServices.m_nImpulse = findOffsetByName(j, "CPlayer_MovementServices", "m_nImpulse");
CPlayer_MovementServices.m_nButtons = findOffsetByName(j, "CPlayer_MovementServices", "m_nButtons");
CPlayer_MovementServices.m_nQueuedButtonDownMask = findOffsetByName(j, "CPlayer_MovementServices", "m_nQueuedButtonDownMask");
CPlayer_MovementServices.m_nQueuedButtonChangeMask = findOffsetByName(j, "CPlayer_MovementServices", "m_nQueuedButtonChangeMask");
CPlayer_MovementServices.m_nButtonDoublePressed = findOffsetByName(j, "CPlayer_MovementServices", "m_nButtonDoublePressed");
CPlayer_MovementServices.m_pButtonPressedCmdNumber = findOffsetByName(j, "CPlayer_MovementServices", "m_pButtonPressedCmdNumber");
CPlayer_MovementServices.m_nLastCommandNumberProcessed = findOffsetByName(j, "CPlayer_MovementServices", "m_nLastCommandNumberProcessed");
CPlayer_MovementServices.m_nToggleButtonDownMask = findOffsetByName(j, "CPlayer_MovementServices", "m_nToggleButtonDownMask");
CPlayer_MovementServices.m_flMaxspeed = findOffsetByName(j, "CPlayer_MovementServices", "m_flMaxspeed");
CPlayer_MovementServices.m_arrForceSubtickMoveWhen = findOffsetByName(j, "CPlayer_MovementServices", "m_arrForceSubtickMoveWhen");
CPlayer_MovementServices.m_flForwardMove = findOffsetByName(j, "CPlayer_MovementServices", "m_flForwardMove");
CPlayer_MovementServices.m_flLeftMove = findOffsetByName(j, "CPlayer_MovementServices", "m_flLeftMove");
CPlayer_MovementServices.m_flUpMove = findOffsetByName(j, "CPlayer_MovementServices", "m_flUpMove");
CPlayer_MovementServices.m_vecLastMovementImpulses = findOffsetByName(j, "CPlayer_MovementServices", "m_vecLastMovementImpulses");
CPlayer_MovementServices.m_vecOldViewAngles = findOffsetByName(j, "CPlayer_MovementServices", "m_vecOldViewAngles");

// Atribuições para CEnvSoundscape
// CEnvSoundscape Offsets
CEnvSoundscape.m_OnPlay = findOffsetByName(j, "CEnvSoundscape", "m_OnPlay");
CEnvSoundscape.m_flRadius = findOffsetByName(j, "CEnvSoundscape", "m_flRadius");
CEnvSoundscape.m_soundEventName = findOffsetByName(j, "CEnvSoundscape", "m_soundEventName");
CEnvSoundscape.m_bOverrideWithEvent = findOffsetByName(j, "CEnvSoundscape", "m_bOverrideWithEvent");
CEnvSoundscape.m_soundscapeIndex = findOffsetByName(j, "CEnvSoundscape", "m_soundscapeIndex");
CEnvSoundscape.m_soundscapeEntityListId = findOffsetByName(j, "CEnvSoundscape", "m_soundscapeEntityListId");
CEnvSoundscape.m_positionNames = findOffsetByName(j, "CEnvSoundscape", "m_positionNames");
CEnvSoundscape.m_hProxySoundscape = findOffsetByName(j, "CEnvSoundscape", "m_hProxySoundscape");
CEnvSoundscape.m_bDisabled = findOffsetByName(j, "CEnvSoundscape", "m_bDisabled");
CEnvSoundscape.m_soundscapeName = findOffsetByName(j, "CEnvSoundscape", "m_soundscapeName");
CEnvSoundscape.m_soundEventHash = findOffsetByName(j, "CEnvSoundscape", "m_soundEventHash");

// Atribuições para CBasePlayerVData
// CBasePlayerVData Offsets
CBasePlayerVData.m_sModelName = findOffsetByName(j, "CBasePlayerVData", "m_sModelName");
CBasePlayerVData.m_flHeadDamageMultiplier = findOffsetByName(j, "CBasePlayerVData", "m_flHeadDamageMultiplier");
CBasePlayerVData.m_flChestDamageMultiplier = findOffsetByName(j, "CBasePlayerVData", "m_flChestDamageMultiplier");
CBasePlayerVData.m_flStomachDamageMultiplier = findOffsetByName(j, "CBasePlayerVData", "m_flStomachDamageMultiplier");
CBasePlayerVData.m_flArmDamageMultiplier = findOffsetByName(j, "CBasePlayerVData", "m_flArmDamageMultiplier");
CBasePlayerVData.m_flLegDamageMultiplier = findOffsetByName(j, "CBasePlayerVData", "m_flLegDamageMultiplier");
CBasePlayerVData.m_flHoldBreathTime = findOffsetByName(j, "CBasePlayerVData", "m_flHoldBreathTime");
CBasePlayerVData.m_flDrowningDamageInterval = findOffsetByName(j, "CBasePlayerVData", "m_flDrowningDamageInterval");
CBasePlayerVData.m_nDrowningDamageInitial = findOffsetByName(j, "CBasePlayerVData", "m_nDrowningDamageInitial");
CBasePlayerVData.m_nDrowningDamageMax = findOffsetByName(j, "CBasePlayerVData", "m_nDrowningDamageMax");
CBasePlayerVData.m_nWaterSpeed = findOffsetByName(j, "CBasePlayerVData", "m_nWaterSpeed");
CBasePlayerVData.m_flUseRange = findOffsetByName(j, "CBasePlayerVData", "m_flUseRange");
CBasePlayerVData.m_flUseAngleTolerance = findOffsetByName(j, "CBasePlayerVData", "m_flUseAngleTolerance");
CBasePlayerVData.m_flCrouchTime = findOffsetByName(j, "CBasePlayerVData", "m_flCrouchTime");

// Atribuições para CCSPlayerController_InGameMoneyServices
// CCSPlayerController_InGameMoneyServices Offsets
CCSPlayerController_InGameMoneyServices.m_iAccount = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_iAccount");
CCSPlayerController_InGameMoneyServices.m_iStartAccount = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_iStartAccount");
CCSPlayerController_InGameMoneyServices.m_iTotalCashSpent = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_iTotalCashSpent");
CCSPlayerController_InGameMoneyServices.m_iCashSpentThisRound = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_iCashSpentThisRound");
CCSPlayerController_InGameMoneyServices.m_bReceivesMoneyNextRound = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_bReceivesMoneyNextRound");
CCSPlayerController_InGameMoneyServices.m_iMoneyEarnedForNextRound = findOffsetByName(j, "CCSPlayerController_InGameMoneyServices", "m_iMoneyEarnedForNextRound");

// Atribuições para C_EnvWindShared__WindVariationEvent_t
// C_EnvWindShared__WindVariationEvent_t Offsets
C_EnvWindShared__WindVariationEvent_t.m_flWindAngleVariation = findOffsetByName(j, "C_EnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation");
C_EnvWindShared__WindVariationEvent_t.m_flWindSpeedVariation = findOffsetByName(j, "C_EnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation");

// Atribuições para C_EnvParticleGlow
// C_EnvParticleGlow Offsets
C_EnvParticleGlow.m_flAlphaScale = findOffsetByName(j, "C_EnvParticleGlow", "m_flAlphaScale");
C_EnvParticleGlow.m_flRadiusScale = findOffsetByName(j, "C_EnvParticleGlow", "m_flRadiusScale");
C_EnvParticleGlow.m_flSelfIllumScale = findOffsetByName(j, "C_EnvParticleGlow", "m_flSelfIllumScale");
C_EnvParticleGlow.m_ColorTint = findOffsetByName(j, "C_EnvParticleGlow", "m_ColorTint");
C_EnvParticleGlow.m_hTextureOverride = findOffsetByName(j, "C_EnvParticleGlow", "m_hTextureOverride");

// Atribuições para C_SoundEventEntity
// C_SoundEventEntity Offsets
C_SoundEventEntity.m_bStartOnSpawn = findOffsetByName(j, "C_SoundEventEntity", "m_bStartOnSpawn");
C_SoundEventEntity.m_bToLocalPlayer = findOffsetByName(j, "C_SoundEventEntity", "m_bToLocalPlayer");
C_SoundEventEntity.m_bStopOnNew = findOffsetByName(j, "C_SoundEventEntity", "m_bStopOnNew");
C_SoundEventEntity.m_bSaveRestore = findOffsetByName(j, "C_SoundEventEntity", "m_bSaveRestore");
C_SoundEventEntity.m_bSavedIsPlaying = findOffsetByName(j, "C_SoundEventEntity", "m_bSavedIsPlaying");
C_SoundEventEntity.m_flSavedElapsedTime = findOffsetByName(j, "C_SoundEventEntity", "m_flSavedElapsedTime");
C_SoundEventEntity.m_iszSourceEntityName = findOffsetByName(j, "C_SoundEventEntity", "m_iszSourceEntityName");
C_SoundEventEntity.m_iszAttachmentName = findOffsetByName(j, "C_SoundEventEntity", "m_iszAttachmentName");
C_SoundEventEntity.m_onGUIDChanged = findOffsetByName(j, "C_SoundEventEntity", "m_onGUIDChanged");
C_SoundEventEntity.m_onSoundFinished = findOffsetByName(j, "C_SoundEventEntity", "m_onSoundFinished");
C_SoundEventEntity.m_flClientCullRadius = findOffsetByName(j, "C_SoundEventEntity", "m_flClientCullRadius");
C_SoundEventEntity.m_iszSoundName = findOffsetByName(j, "C_SoundEventEntity", "m_iszSoundName");
C_SoundEventEntity.m_hSource = findOffsetByName(j, "C_SoundEventEntity", "m_hSource");
C_SoundEventEntity.m_nEntityIndexSelection = findOffsetByName(j, "C_SoundEventEntity", "m_nEntityIndexSelection");
C_SoundEventEntity.m_bClientSideOnly = findOffsetByName(j, "C_SoundEventEntity", "m_bClientSideOnly");

// Atribuições para C_Sun
// C_Sun Offsets
C_Sun.m_fxSSSunFlareEffectIndex = findOffsetByName(j, "C_Sun", "m_fxSSSunFlareEffectIndex");
C_Sun.m_fxSunFlareEffectIndex = findOffsetByName(j, "C_Sun", "m_fxSunFlareEffectIndex");
C_Sun.m_fdistNormalize = findOffsetByName(j, "C_Sun", "m_fdistNormalize");
C_Sun.m_vSunPos = findOffsetByName(j, "C_Sun", "m_vSunPos");
C_Sun.m_vDirection = findOffsetByName(j, "C_Sun", "m_vDirection");
C_Sun.m_iszEffectName = findOffsetByName(j, "C_Sun", "m_iszEffectName");
C_Sun.m_iszSSEffectName = findOffsetByName(j, "C_Sun", "m_iszSSEffectName");
C_Sun.m_clrOverlay = findOffsetByName(j, "C_Sun", "m_clrOverlay");
C_Sun.m_bOn = findOffsetByName(j, "C_Sun", "m_bOn");
C_Sun.m_bmaxColor = findOffsetByName(j, "C_Sun", "m_bmaxColor");
C_Sun.m_flSize = findOffsetByName(j, "C_Sun", "m_flSize");
C_Sun.m_flHazeScale = findOffsetByName(j, "C_Sun", "m_flHazeScale");
C_Sun.m_flRotation = findOffsetByName(j, "C_Sun", "m_flRotation");
C_Sun.m_flHDRColorScale = findOffsetByName(j, "C_Sun", "m_flHDRColorScale");
C_Sun.m_flAlphaHaze = findOffsetByName(j, "C_Sun", "m_flAlphaHaze");
C_Sun.m_flAlphaScale = findOffsetByName(j, "C_Sun", "m_flAlphaScale");
C_Sun.m_flAlphaHdr = findOffsetByName(j, "C_Sun", "m_flAlphaHdr");
C_Sun.m_flFarZScale = findOffsetByName(j, "C_Sun", "m_flFarZScale");

// Atribuições para CCSPlayerController_ActionTrackingServices
// CCSPlayerController_ActionTrackingServices Offsets
CCSPlayerController_ActionTrackingServices.m_perRoundStats = findOffsetByName(j, "CCSPlayerController_ActionTrackingServices", "m_perRoundStats");
CCSPlayerController_ActionTrackingServices.m_matchStats = findOffsetByName(j, "CCSPlayerController_ActionTrackingServices", "m_matchStats");
CCSPlayerController_ActionTrackingServices.m_iNumRoundKills = findOffsetByName(j, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKills");
CCSPlayerController_ActionTrackingServices.m_iNumRoundKillsHeadshots = findOffsetByName(j, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKillsHeadshots");
CCSPlayerController_ActionTrackingServices.m_unTotalRoundDamageDealt = findOffsetByName(j, "CCSPlayerController_ActionTrackingServices", "m_unTotalRoundDamageDealt");

// Atribuições para CHitboxComponent
// CHitboxComponent Offsets
CHitboxComponent.m_bvDisabledHitGroups = findOffsetByName(j, "CHitboxComponent", "m_bvDisabledHitGroups");

// Atribuições para C_ColorCorrectionVolume
// C_ColorCorrectionVolume Offsets
C_ColorCorrectionVolume.m_LastEnterWeight = findOffsetByName(j, "C_ColorCorrectionVolume", "m_LastEnterWeight");
C_ColorCorrectionVolume.m_LastEnterTime = findOffsetByName(j, "C_ColorCorrectionVolume", "m_LastEnterTime");
C_ColorCorrectionVolume.m_LastExitWeight = findOffsetByName(j, "C_ColorCorrectionVolume", "m_LastExitWeight");
C_ColorCorrectionVolume.m_LastExitTime = findOffsetByName(j, "C_ColorCorrectionVolume", "m_LastExitTime");
C_ColorCorrectionVolume.m_bEnabled = findOffsetByName(j, "C_ColorCorrectionVolume", "m_bEnabled");
C_ColorCorrectionVolume.m_MaxWeight = findOffsetByName(j, "C_ColorCorrectionVolume", "m_MaxWeight");
C_ColorCorrectionVolume.m_FadeDuration = findOffsetByName(j, "C_ColorCorrectionVolume", "m_FadeDuration");
C_ColorCorrectionVolume.m_Weight = findOffsetByName(j, "C_ColorCorrectionVolume", "m_Weight");
C_ColorCorrectionVolume.m_lookupFilename = findOffsetByName(j, "C_ColorCorrectionVolume", "m_lookupFilename");

// Atribuições para C_BulletHitModel
// C_BulletHitModel Offsets
C_BulletHitModel.m_matLocal = findOffsetByName(j, "C_BulletHitModel", "m_matLocal");
C_BulletHitModel.m_iBoneIndex = findOffsetByName(j, "C_BulletHitModel", "m_iBoneIndex");
C_BulletHitModel.m_hPlayerParent = findOffsetByName(j, "C_BulletHitModel", "m_hPlayerParent");
C_BulletHitModel.m_bIsHit = findOffsetByName(j, "C_BulletHitModel", "m_bIsHit");
C_BulletHitModel.m_flTimeCreated = findOffsetByName(j, "C_BulletHitModel", "m_flTimeCreated");
C_BulletHitModel.m_vecStartPos = findOffsetByName(j, "C_BulletHitModel", "m_vecStartPos");

// Atribuições para C_MapVetoPickController
// C_MapVetoPickController Offsets
C_MapVetoPickController.m_nDraftType = findOffsetByName(j, "C_MapVetoPickController", "m_nDraftType");
C_MapVetoPickController.m_nTeamWinningCoinToss = findOffsetByName(j, "C_MapVetoPickController", "m_nTeamWinningCoinToss");
C_MapVetoPickController.m_nTeamWithFirstChoice = findOffsetByName(j, "C_MapVetoPickController", "m_nTeamWithFirstChoice");
C_MapVetoPickController.m_nVoteMapIdsList = findOffsetByName(j, "C_MapVetoPickController", "m_nVoteMapIdsList");
C_MapVetoPickController.m_nAccountIDs = findOffsetByName(j, "C_MapVetoPickController", "m_nAccountIDs");
C_MapVetoPickController.m_nMapId0 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId0");
C_MapVetoPickController.m_nMapId1 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId1");
C_MapVetoPickController.m_nMapId2 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId2");
C_MapVetoPickController.m_nMapId3 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId3");
C_MapVetoPickController.m_nMapId4 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId4");
C_MapVetoPickController.m_nMapId5 = findOffsetByName(j, "C_MapVetoPickController", "m_nMapId5");
C_MapVetoPickController.m_nStartingSide0 = findOffsetByName(j, "C_MapVetoPickController", "m_nStartingSide0");
C_MapVetoPickController.m_nCurrentPhase = findOffsetByName(j, "C_MapVetoPickController", "m_nCurrentPhase");
C_MapVetoPickController.m_nPhaseStartTick = findOffsetByName(j, "C_MapVetoPickController", "m_nPhaseStartTick");
C_MapVetoPickController.m_nPhaseDurationTicks = findOffsetByName(j, "C_MapVetoPickController", "m_nPhaseDurationTicks");
C_MapVetoPickController.m_nPostDataUpdateTick = findOffsetByName(j, "C_MapVetoPickController", "m_nPostDataUpdateTick");
C_MapVetoPickController.m_bDisabledHud = findOffsetByName(j, "C_MapVetoPickController", "m_bDisabledHud");

// Atribuições para C_OmniLight
// C_OmniLight Offsets
C_OmniLight.m_flInnerAngle = findOffsetByName(j, "C_OmniLight", "m_flInnerAngle");
C_OmniLight.m_flOuterAngle = findOffsetByName(j, "C_OmniLight", "m_flOuterAngle");
C_OmniLight.m_bShowLight = findOffsetByName(j, "C_OmniLight", "m_bShowLight");

// Atribuições para WeaponPurchaseTracker_t
// WeaponPurchaseTracker_t Offsets
WeaponPurchaseTracker_t.m_weaponPurchases = findOffsetByName(j, "WeaponPurchaseTracker_t", "m_weaponPurchases");

// Atribuições para C_RetakeGameRules
// C_RetakeGameRules Offsets
C_RetakeGameRules.m_nMatchSeed = findOffsetByName(j, "C_RetakeGameRules", "m_nMatchSeed");
C_RetakeGameRules.m_bBlockersPresent = findOffsetByName(j, "C_RetakeGameRules", "m_bBlockersPresent");
C_RetakeGameRules.m_bRoundInProgress = findOffsetByName(j, "C_RetakeGameRules", "m_bRoundInProgress");
C_RetakeGameRules.m_iFirstSecondHalfRound = findOffsetByName(j, "C_RetakeGameRules", "m_iFirstSecondHalfRound");
C_RetakeGameRules.m_iBombSite = findOffsetByName(j, "C_RetakeGameRules", "m_iBombSite");

// Atribuições para EngineCountdownTimer
// EngineCountdownTimer Offsets
EngineCountdownTimer.m_duration = findOffsetByName(j, "EngineCountdownTimer", "m_duration");
EngineCountdownTimer.m_timestamp = findOffsetByName(j, "EngineCountdownTimer", "m_timestamp");
EngineCountdownTimer.m_timescale = findOffsetByName(j, "EngineCountdownTimer", "m_timescale");

// Atribuições para C_BaseFlex__Emphasized_Phoneme
// C_BaseFlex__Emphasized_Phoneme Offsets
C_BaseFlex__Emphasized_Phoneme.m_sClassName = findOffsetByName(j, "C_BaseFlex__Emphasized_Phoneme", "m_sClassName");
C_BaseFlex__Emphasized_Phoneme.m_flAmount = findOffsetByName(j, "C_BaseFlex__Emphasized_Phoneme", "m_flAmount");
C_BaseFlex__Emphasized_Phoneme.m_bRequired = findOffsetByName(j, "C_BaseFlex__Emphasized_Phoneme", "m_bRequired");
C_BaseFlex__Emphasized_Phoneme.m_bBasechecked = findOffsetByName(j, "C_BaseFlex__Emphasized_Phoneme", "m_bBasechecked");
C_BaseFlex__Emphasized_Phoneme.m_bValid = findOffsetByName(j, "C_BaseFlex__Emphasized_Phoneme", "m_bValid");

// Atribuições para IntervalTimer
// IntervalTimer Offsets
IntervalTimer.m_timestamp = findOffsetByName(j, "IntervalTimer", "m_timestamp");
IntervalTimer.m_nWorldGroupId = findOffsetByName(j, "IntervalTimer", "m_nWorldGroupId");

// Atribuições para C_FuncLadder
// C_FuncLadder Offsets
C_FuncLadder.m_vecLadderDir = findOffsetByName(j, "C_FuncLadder", "m_vecLadderDir");
C_FuncLadder.m_Dismounts = findOffsetByName(j, "C_FuncLadder", "m_Dismounts");
C_FuncLadder.m_vecLocalTop = findOffsetByName(j, "C_FuncLadder", "m_vecLocalTop");
C_FuncLadder.m_vecPlayerMountPositionTop = findOffsetByName(j, "C_FuncLadder", "m_vecPlayerMountPositionTop");
C_FuncLadder.m_vecPlayerMountPositionBottom = findOffsetByName(j, "C_FuncLadder", "m_vecPlayerMountPositionBottom");
C_FuncLadder.m_flAutoRideSpeed = findOffsetByName(j, "C_FuncLadder", "m_flAutoRideSpeed");
C_FuncLadder.m_bDisabled = findOffsetByName(j, "C_FuncLadder", "m_bDisabled");
C_FuncLadder.m_bFakeLadder = findOffsetByName(j, "C_FuncLadder", "m_bFakeLadder");
C_FuncLadder.m_bHasSlack = findOffsetByName(j, "C_FuncLadder", "m_bHasSlack");

// Atribuições para CPlayer_WeaponServices
// CPlayer_WeaponServices Offsets
CPlayer_WeaponServices.m_hMyWeapons = findOffsetByName(j, "CPlayer_WeaponServices", "m_hMyWeapons");
CPlayer_WeaponServices.m_hActiveWeapon = findOffsetByName(j, "CPlayer_WeaponServices", "m_hActiveWeapon");
CPlayer_WeaponServices.m_hLastWeapon = findOffsetByName(j, "CPlayer_WeaponServices", "m_hLastWeapon");
CPlayer_WeaponServices.m_iAmmo = findOffsetByName(j, "CPlayer_WeaponServices", "m_iAmmo");
CPlayer_WeaponServices.m_bPreventWeaponPickup = findOffsetByName(j, "CPlayer_WeaponServices", "m_bPreventWeaponPickup");

// Atribuições para CAttributeManager__cached_attribute_float_t
// CAttributeManager__cached_attribute_float_t Offsets
CAttributeManager__cached_attribute_float_t.flIn = findOffsetByName(j, "CAttributeManager__cached_attribute_float_t", "flIn");
CAttributeManager__cached_attribute_float_t.iAttribHook = findOffsetByName(j, "CAttributeManager__cached_attribute_float_t", "iAttribHook");
CAttributeManager__cached_attribute_float_t.flOut = findOffsetByName(j, "CAttributeManager__cached_attribute_float_t", "flOut");

// Atribuições para C_BaseGrenade
// C_BaseGrenade Offsets
C_BaseGrenade.m_bHasWarnedAI = findOffsetByName(j, "C_BaseGrenade", "m_bHasWarnedAI");
C_BaseGrenade.m_bIsSmokeGrenade = findOffsetByName(j, "C_BaseGrenade", "m_bIsSmokeGrenade");
C_BaseGrenade.m_bIsLive = findOffsetByName(j, "C_BaseGrenade", "m_bIsLive");
C_BaseGrenade.m_DmgRadius = findOffsetByName(j, "C_BaseGrenade", "m_DmgRadius");
C_BaseGrenade.m_flDetonateTime = findOffsetByName(j, "C_BaseGrenade", "m_flDetonateTime");
C_BaseGrenade.m_flWarnAITime = findOffsetByName(j, "C_BaseGrenade", "m_flWarnAITime");
C_BaseGrenade.m_flDamage = findOffsetByName(j, "C_BaseGrenade", "m_flDamage");
C_BaseGrenade.m_iszBounceSound = findOffsetByName(j, "C_BaseGrenade", "m_iszBounceSound");
C_BaseGrenade.m_ExplosionSound = findOffsetByName(j, "C_BaseGrenade", "m_ExplosionSound");
C_BaseGrenade.m_hThrower = findOffsetByName(j, "C_BaseGrenade", "m_hThrower");
C_BaseGrenade.m_flNextAttack = findOffsetByName(j, "C_BaseGrenade", "m_flNextAttack");
C_BaseGrenade.m_hOriginalThrower = findOffsetByName(j, "C_BaseGrenade", "m_hOriginalThrower");

// Atribuições para CCSGameModeRules
// CCSGameModeRules Offsets
CCSGameModeRules.__m_pChainEntity = findOffsetByName(j, "CCSGameModeRules", "__m_pChainEntity");

// Atribuições para VPhysicsCollisionAttribute_t
// VPhysicsCollisionAttribute_t Offsets
VPhysicsCollisionAttribute_t.m_nInteractsAs = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nInteractsAs");
VPhysicsCollisionAttribute_t.m_nInteractsWith = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nInteractsWith");
VPhysicsCollisionAttribute_t.m_nInteractsExclude = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nInteractsExclude");
VPhysicsCollisionAttribute_t.m_nEntityId = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nEntityId");
VPhysicsCollisionAttribute_t.m_nOwnerId = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nOwnerId");
VPhysicsCollisionAttribute_t.m_nHierarchyId = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nHierarchyId");
VPhysicsCollisionAttribute_t.m_nCollisionGroup = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nCollisionGroup");
VPhysicsCollisionAttribute_t.m_nCollisionFunctionMask = findOffsetByName(j, "VPhysicsCollisionAttribute_t", "m_nCollisionFunctionMask");

// Atribuições para C_EnvVolumetricFogController
// C_EnvVolumetricFogController Offsets
C_EnvVolumetricFogController.m_flScattering = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flScattering");
C_EnvVolumetricFogController.m_flAnisotropy = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flAnisotropy");
C_EnvVolumetricFogController.m_flFadeSpeed = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flFadeSpeed");
C_EnvVolumetricFogController.m_flDrawDistance = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flDrawDistance");
C_EnvVolumetricFogController.m_flFadeInStart = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flFadeInStart");
C_EnvVolumetricFogController.m_flFadeInEnd = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flFadeInEnd");
C_EnvVolumetricFogController.m_flIndirectStrength = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flIndirectStrength");
C_EnvVolumetricFogController.m_nVolumeDepth = findOffsetByName(j, "C_EnvVolumetricFogController", "m_nVolumeDepth");
C_EnvVolumetricFogController.m_fFirstVolumeSliceThickness = findOffsetByName(j, "C_EnvVolumetricFogController", "m_fFirstVolumeSliceThickness");
C_EnvVolumetricFogController.m_nIndirectTextureDimX = findOffsetByName(j, "C_EnvVolumetricFogController", "m_nIndirectTextureDimX");
C_EnvVolumetricFogController.m_nIndirectTextureDimY = findOffsetByName(j, "C_EnvVolumetricFogController", "m_nIndirectTextureDimY");
C_EnvVolumetricFogController.m_nIndirectTextureDimZ = findOffsetByName(j, "C_EnvVolumetricFogController", "m_nIndirectTextureDimZ");
C_EnvVolumetricFogController.m_vBoxMins = findOffsetByName(j, "C_EnvVolumetricFogController", "m_vBoxMins");
C_EnvVolumetricFogController.m_vBoxMaxs = findOffsetByName(j, "C_EnvVolumetricFogController", "m_vBoxMaxs");
C_EnvVolumetricFogController.m_bActive = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bActive");
C_EnvVolumetricFogController.m_flStartAnisoTime = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartAnisoTime");
C_EnvVolumetricFogController.m_flStartScatterTime = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartScatterTime");
C_EnvVolumetricFogController.m_flStartDrawDistanceTime = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartDrawDistanceTime");
C_EnvVolumetricFogController.m_flStartAnisotropy = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartAnisotropy");
C_EnvVolumetricFogController.m_flStartScattering = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartScattering");
C_EnvVolumetricFogController.m_flStartDrawDistance = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flStartDrawDistance");
C_EnvVolumetricFogController.m_flDefaultAnisotropy = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flDefaultAnisotropy");
C_EnvVolumetricFogController.m_flDefaultScattering = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flDefaultScattering");
C_EnvVolumetricFogController.m_flDefaultDrawDistance = findOffsetByName(j, "C_EnvVolumetricFogController", "m_flDefaultDrawDistance");
C_EnvVolumetricFogController.m_bStartDisabled = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bStartDisabled");
C_EnvVolumetricFogController.m_bEnableIndirect = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bEnableIndirect");
C_EnvVolumetricFogController.m_bIndirectUseLPVs = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bIndirectUseLPVs");
C_EnvVolumetricFogController.m_bIsMaster = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bIsMaster");
C_EnvVolumetricFogController.m_hFogIndirectTexture = findOffsetByName(j, "C_EnvVolumetricFogController", "m_hFogIndirectTexture");
C_EnvVolumetricFogController.m_nForceRefreshCount = findOffsetByName(j, "C_EnvVolumetricFogController", "m_nForceRefreshCount");
C_EnvVolumetricFogController.m_fNoiseSpeed = findOffsetByName(j, "C_EnvVolumetricFogController", "m_fNoiseSpeed");
C_EnvVolumetricFogController.m_fNoiseStrength = findOffsetByName(j, "C_EnvVolumetricFogController", "m_fNoiseStrength");
C_EnvVolumetricFogController.m_vNoiseScale = findOffsetByName(j, "C_EnvVolumetricFogController", "m_vNoiseScale");
C_EnvVolumetricFogController.m_bFirstTime = findOffsetByName(j, "C_EnvVolumetricFogController", "m_bFirstTime");

// Atribuições para C_PointCommentaryNode
// C_PointCommentaryNode Offsets
C_PointCommentaryNode.m_bActive = findOffsetByName(j, "C_PointCommentaryNode", "m_bActive");
C_PointCommentaryNode.m_bWasActive = findOffsetByName(j, "C_PointCommentaryNode", "m_bWasActive");
C_PointCommentaryNode.m_flEndTime = findOffsetByName(j, "C_PointCommentaryNode", "m_flEndTime");
C_PointCommentaryNode.m_flStartTime = findOffsetByName(j, "C_PointCommentaryNode", "m_flStartTime");
C_PointCommentaryNode.m_flStartTimeInCommentary = findOffsetByName(j, "C_PointCommentaryNode", "m_flStartTimeInCommentary");
C_PointCommentaryNode.m_iszCommentaryFile = findOffsetByName(j, "C_PointCommentaryNode", "m_iszCommentaryFile");
C_PointCommentaryNode.m_iszTitle = findOffsetByName(j, "C_PointCommentaryNode", "m_iszTitle");
C_PointCommentaryNode.m_iszSpeakers = findOffsetByName(j, "C_PointCommentaryNode", "m_iszSpeakers");
C_PointCommentaryNode.m_iNodeNumber = findOffsetByName(j, "C_PointCommentaryNode", "m_iNodeNumber");
C_PointCommentaryNode.m_iNodeNumberMax = findOffsetByName(j, "C_PointCommentaryNode", "m_iNodeNumberMax");
C_PointCommentaryNode.m_bListenedTo = findOffsetByName(j, "C_PointCommentaryNode", "m_bListenedTo");
C_PointCommentaryNode.m_hViewPosition = findOffsetByName(j, "C_PointCommentaryNode", "m_hViewPosition");
C_PointCommentaryNode.m_bRestartAfterRestore = findOffsetByName(j, "C_PointCommentaryNode", "m_bRestartAfterRestore");

// Atribuições para audioparams_t
// audioparams_t Offsets
audioparams_t.localSound = findOffsetByName(j, "audioparams_t", "localSound");
audioparams_t.soundscapeIndex = findOffsetByName(j, "audioparams_t", "soundscapeIndex");
audioparams_t.localBits = findOffsetByName(j, "audioparams_t", "localBits");
audioparams_t.soundscapeEntityListIndex = findOffsetByName(j, "audioparams_t", "soundscapeEntityListIndex");
audioparams_t.soundEventHash = findOffsetByName(j, "audioparams_t", "soundEventHash");

// Atribuições para C_InfoVisibilityBox
// C_InfoVisibilityBox Offsets
C_InfoVisibilityBox.m_nMode = findOffsetByName(j, "C_InfoVisibilityBox", "m_nMode");
C_InfoVisibilityBox.m_vBoxSize = findOffsetByName(j, "C_InfoVisibilityBox", "m_vBoxSize");
C_InfoVisibilityBox.m_bEnabled = findOffsetByName(j, "C_InfoVisibilityBox", "m_bEnabled");

// Atribuições para C_FireSprite
// C_FireSprite Offsets
C_FireSprite.m_vecMoveDir = findOffsetByName(j, "C_FireSprite", "m_vecMoveDir");
C_FireSprite.m_bFadeFromAbove = findOffsetByName(j, "C_FireSprite", "m_bFadeFromAbove");

// Atribuições para C_Precipitation
// C_Precipitation Offsets
C_Precipitation.m_flDensity = findOffsetByName(j, "C_Precipitation", "m_flDensity");
C_Precipitation.m_flParticleInnerDist = findOffsetByName(j, "C_Precipitation", "m_flParticleInnerDist");
C_Precipitation.m_pParticleDef = findOffsetByName(j, "C_Precipitation", "m_pParticleDef");
C_Precipitation.m_tParticlePrecipTraceTimer = findOffsetByName(j, "C_Precipitation", "m_tParticlePrecipTraceTimer");
C_Precipitation.m_bActiveParticlePrecipEmitter = findOffsetByName(j, "C_Precipitation", "m_bActiveParticlePrecipEmitter");
C_Precipitation.m_bParticlePrecipInitialized = findOffsetByName(j, "C_Precipitation", "m_bParticlePrecipInitialized");
C_Precipitation.m_bHasSimulatedSinceLastSceneObjectUpdate = findOffsetByName(j, "C_Precipitation", "m_bHasSimulatedSinceLastSceneObjectUpdate");
C_Precipitation.m_nAvailableSheetSequencesMaxIndex = findOffsetByName(j, "C_Precipitation", "m_nAvailableSheetSequencesMaxIndex");

// Atribuições para CPrecipitationVData
// CPrecipitationVData Offsets
CPrecipitationVData.m_szParticlePrecipitationEffect = findOffsetByName(j, "CPrecipitationVData", "m_szParticlePrecipitationEffect");
CPrecipitationVData.m_flInnerDistance = findOffsetByName(j, "CPrecipitationVData", "m_flInnerDistance");
CPrecipitationVData.m_nAttachType = findOffsetByName(j, "CPrecipitationVData", "m_nAttachType");
CPrecipitationVData.m_bBatchSameVolumeType = findOffsetByName(j, "CPrecipitationVData", "m_bBatchSameVolumeType");
CPrecipitationVData.m_nRTEnvCP = findOffsetByName(j, "CPrecipitationVData", "m_nRTEnvCP");
CPrecipitationVData.m_nRTEnvCPComponent = findOffsetByName(j, "CPrecipitationVData", "m_nRTEnvCPComponent");
CPrecipitationVData.m_szModifier = findOffsetByName(j, "CPrecipitationVData", "m_szModifier");

// Atribuições para CBuoyancyHelper
// CBuoyancyHelper Offsets
CBuoyancyHelper.m_nFluidType = findOffsetByName(j, "CBuoyancyHelper", "m_nFluidType");
CBuoyancyHelper.m_flFluidDensity = findOffsetByName(j, "CBuoyancyHelper", "m_flFluidDensity");
CBuoyancyHelper.m_vecFractionOfWheelSubmergedForWheelFriction = findOffsetByName(j, "CBuoyancyHelper", "m_vecFractionOfWheelSubmergedForWheelFriction");
CBuoyancyHelper.m_vecWheelFrictionScales = findOffsetByName(j, "CBuoyancyHelper", "m_vecWheelFrictionScales");
CBuoyancyHelper.m_vecFractionOfWheelSubmergedForWheelDrag = findOffsetByName(j, "CBuoyancyHelper", "m_vecFractionOfWheelSubmergedForWheelDrag");
CBuoyancyHelper.m_vecWheelDrag = findOffsetByName(j, "CBuoyancyHelper", "m_vecWheelDrag");

// Atribuições para C_BaseClientUIEntity
// C_BaseClientUIEntity Offsets
C_BaseClientUIEntity.m_bEnabled = findOffsetByName(j, "C_BaseClientUIEntity", "m_bEnabled");
C_BaseClientUIEntity.m_DialogXMLName = findOffsetByName(j, "C_BaseClientUIEntity", "m_DialogXMLName");
C_BaseClientUIEntity.m_PanelClassName = findOffsetByName(j, "C_BaseClientUIEntity", "m_PanelClassName");
C_BaseClientUIEntity.m_PanelID = findOffsetByName(j, "C_BaseClientUIEntity", "m_PanelID");

// Atribuições para C_FuncTrackTrain
// C_FuncTrackTrain Offsets
C_FuncTrackTrain.m_nLongAxis = findOffsetByName(j, "C_FuncTrackTrain", "m_nLongAxis");
C_FuncTrackTrain.m_flRadius = findOffsetByName(j, "C_FuncTrackTrain", "m_flRadius");
C_FuncTrackTrain.m_flLineLength = findOffsetByName(j, "C_FuncTrackTrain", "m_flLineLength");

// Atribuições para CCSPlayer_ActionTrackingServices
// CCSPlayer_ActionTrackingServices Offsets
CCSPlayer_ActionTrackingServices.m_hLastWeaponBeforeC4AutoSwitch = findOffsetByName(j, "CCSPlayer_ActionTrackingServices", "m_hLastWeaponBeforeC4AutoSwitch");
CCSPlayer_ActionTrackingServices.m_bIsRescuing = findOffsetByName(j, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing");
CCSPlayer_ActionTrackingServices.m_weaponPurchasesThisMatch = findOffsetByName(j, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisMatch");
CCSPlayer_ActionTrackingServices.m_weaponPurchasesThisRound = findOffsetByName(j, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisRound");

// Atribuições para shard_model_desc_t
// shard_model_desc_t Offsets
shard_model_desc_t.m_nModelID = findOffsetByName(j, "shard_model_desc_t", "m_nModelID");
shard_model_desc_t.m_hMaterialBase = findOffsetByName(j, "shard_model_desc_t", "m_hMaterialBase");
shard_model_desc_t.m_hMaterialDamageOverlay = findOffsetByName(j, "shard_model_desc_t", "m_hMaterialDamageOverlay");
shard_model_desc_t.m_solid = findOffsetByName(j, "shard_model_desc_t", "m_solid");
shard_model_desc_t.m_vecPanelSize = findOffsetByName(j, "shard_model_desc_t", "m_vecPanelSize");
shard_model_desc_t.m_vecStressPositionA = findOffsetByName(j, "shard_model_desc_t", "m_vecStressPositionA");
shard_model_desc_t.m_vecStressPositionB = findOffsetByName(j, "shard_model_desc_t", "m_vecStressPositionB");
shard_model_desc_t.m_vecPanelVertices = findOffsetByName(j, "shard_model_desc_t", "m_vecPanelVertices");
shard_model_desc_t.m_vInitialPanelVertices = findOffsetByName(j, "shard_model_desc_t", "m_vInitialPanelVertices");
shard_model_desc_t.m_flGlassHalfThickness = findOffsetByName(j, "shard_model_desc_t", "m_flGlassHalfThickness");
shard_model_desc_t.m_bHasParent = findOffsetByName(j, "shard_model_desc_t", "m_bHasParent");
shard_model_desc_t.m_bParentFrozen = findOffsetByName(j, "shard_model_desc_t", "m_bParentFrozen");
shard_model_desc_t.m_SurfacePropStringToken = findOffsetByName(j, "shard_model_desc_t", "m_SurfacePropStringToken");

// Atribuições para C_SceneEntity__QueuedEvents_t
// C_SceneEntity__QueuedEvents_t Offsets
C_SceneEntity__QueuedEvents_t.starttime = findOffsetByName(j, "C_SceneEntity__QueuedEvents_t", "starttime");

// Atribuições para CBaseProp
// CBaseProp Offsets
CBaseProp.m_bModelOverrodeBlockLOS = findOffsetByName(j, "CBaseProp", "m_bModelOverrodeBlockLOS");
CBaseProp.m_iShapeType = findOffsetByName(j, "CBaseProp", "m_iShapeType");
CBaseProp.m_bConformToCollisionBounds = findOffsetByName(j, "CBaseProp", "m_bConformToCollisionBounds");
CBaseProp.m_mPreferredCatchTransform = findOffsetByName(j, "CBaseProp", "m_mPreferredCatchTransform");

// Atribuições para CPointTemplate
// CPointTemplate Offsets
CPointTemplate.m_iszWorldName = findOffsetByName(j, "CPointTemplate", "m_iszWorldName");
CPointTemplate.m_iszSource2EntityLumpName = findOffsetByName(j, "CPointTemplate", "m_iszSource2EntityLumpName");
CPointTemplate.m_iszEntityFilterName = findOffsetByName(j, "CPointTemplate", "m_iszEntityFilterName");
CPointTemplate.m_flTimeoutInterval = findOffsetByName(j, "CPointTemplate", "m_flTimeoutInterval");
CPointTemplate.m_bAsynchronouslySpawnEntities = findOffsetByName(j, "CPointTemplate", "m_bAsynchronouslySpawnEntities");
CPointTemplate.m_pOutputOnSpawned = findOffsetByName(j, "CPointTemplate", "m_pOutputOnSpawned");
CPointTemplate.m_clientOnlyEntityBehavior = findOffsetByName(j, "CPointTemplate", "m_clientOnlyEntityBehavior");
CPointTemplate.m_ownerSpawnGroupType = findOffsetByName(j, "CPointTemplate", "m_ownerSpawnGroupType");
CPointTemplate.m_createdSpawnGroupHandles = findOffsetByName(j, "CPointTemplate", "m_createdSpawnGroupHandles");
CPointTemplate.m_SpawnedEntityHandles = findOffsetByName(j, "CPointTemplate", "m_SpawnedEntityHandles");
CPointTemplate.m_ScriptSpawnCallback = findOffsetByName(j, "CPointTemplate", "m_ScriptSpawnCallback");
CPointTemplate.m_ScriptCallbackScope = findOffsetByName(j, "CPointTemplate", "m_ScriptCallbackScope");

// Atribuições para C_CSGO_PreviewModel
// C_CSGO_PreviewModel Offsets
C_CSGO_PreviewModel.m_animgraph = findOffsetByName(j, "C_CSGO_PreviewModel", "m_animgraph");
C_CSGO_PreviewModel.m_animgraphCharacterModeString = findOffsetByName(j, "C_CSGO_PreviewModel", "m_animgraphCharacterModeString");
C_CSGO_PreviewModel.m_defaultAnim = findOffsetByName(j, "C_CSGO_PreviewModel", "m_defaultAnim");
C_CSGO_PreviewModel.m_nDefaultAnimLoopMode = findOffsetByName(j, "C_CSGO_PreviewModel", "m_nDefaultAnimLoopMode");
C_CSGO_PreviewModel.m_flInitialModelScale = findOffsetByName(j, "C_CSGO_PreviewModel", "m_flInitialModelScale");
C_CSGO_PreviewModel.m_sInitialWeaponState = findOffsetByName(j, "C_CSGO_PreviewModel", "m_sInitialWeaponState");

// Atribuições para CInfoDynamicShadowHint
// CInfoDynamicShadowHint Offsets
CInfoDynamicShadowHint.m_bDisabled = findOffsetByName(j, "CInfoDynamicShadowHint", "m_bDisabled");
CInfoDynamicShadowHint.m_flRange = findOffsetByName(j, "CInfoDynamicShadowHint", "m_flRange");
CInfoDynamicShadowHint.m_nImportance = findOffsetByName(j, "CInfoDynamicShadowHint", "m_nImportance");
CInfoDynamicShadowHint.m_nLightChoice = findOffsetByName(j, "CInfoDynamicShadowHint", "m_nLightChoice");
CInfoDynamicShadowHint.m_hLight = findOffsetByName(j, "CInfoDynamicShadowHint", "m_hLight");

// Atribuições para CGlowProperty
// CGlowProperty Offsets
CGlowProperty.m_fGlowColor = findOffsetByName(j, "CGlowProperty", "m_fGlowColor");
CGlowProperty.m_iGlowType = findOffsetByName(j, "CGlowProperty", "m_iGlowType");
CGlowProperty.m_iGlowTeam = findOffsetByName(j, "CGlowProperty", "m_iGlowTeam");
CGlowProperty.m_nGlowRange = findOffsetByName(j, "CGlowProperty", "m_nGlowRange");
CGlowProperty.m_nGlowRangeMin = findOffsetByName(j, "CGlowProperty", "m_nGlowRangeMin");
CGlowProperty.m_glowColorOverride = findOffsetByName(j, "CGlowProperty", "m_glowColorOverride");
CGlowProperty.m_bFlashing = findOffsetByName(j, "CGlowProperty", "m_bFlashing");
CGlowProperty.m_flGlowTime = findOffsetByName(j, "CGlowProperty", "m_flGlowTime");
CGlowProperty.m_flGlowStartTime = findOffsetByName(j, "CGlowProperty", "m_flGlowStartTime");
CGlowProperty.m_bEligibleForScreenHighlight = findOffsetByName(j, "CGlowProperty", "m_bEligibleForScreenHighlight");
CGlowProperty.m_bGlowing = findOffsetByName(j, "CGlowProperty", "m_bGlowing");

// Atribuições para C_TriggerPhysics
// C_TriggerPhysics Offsets
C_TriggerPhysics.m_gravityScale = findOffsetByName(j, "C_TriggerPhysics", "m_gravityScale");
C_TriggerPhysics.m_linearLimit = findOffsetByName(j, "C_TriggerPhysics", "m_linearLimit");
C_TriggerPhysics.m_linearDamping = findOffsetByName(j, "C_TriggerPhysics", "m_linearDamping");
C_TriggerPhysics.m_angularLimit = findOffsetByName(j, "C_TriggerPhysics", "m_angularLimit");
C_TriggerPhysics.m_angularDamping = findOffsetByName(j, "C_TriggerPhysics", "m_angularDamping");
C_TriggerPhysics.m_linearForce = findOffsetByName(j, "C_TriggerPhysics", "m_linearForce");
C_TriggerPhysics.m_flFrequency = findOffsetByName(j, "C_TriggerPhysics", "m_flFrequency");
C_TriggerPhysics.m_flDampingRatio = findOffsetByName(j, "C_TriggerPhysics", "m_flDampingRatio");
C_TriggerPhysics.m_vecLinearForcePointAt = findOffsetByName(j, "C_TriggerPhysics", "m_vecLinearForcePointAt");
C_TriggerPhysics.m_bCollapseToForcePoint = findOffsetByName(j, "C_TriggerPhysics", "m_bCollapseToForcePoint");
C_TriggerPhysics.m_vecLinearForcePointAtWorld = findOffsetByName(j, "C_TriggerPhysics", "m_vecLinearForcePointAtWorld");
C_TriggerPhysics.m_vecLinearForceDirection = findOffsetByName(j, "C_TriggerPhysics", "m_vecLinearForceDirection");
C_TriggerPhysics.m_bConvertToDebrisWhenPossible = findOffsetByName(j, "C_TriggerPhysics", "m_bConvertToDebrisWhenPossible");

// Atribuições para CCSPlayer_HostageServices
// CCSPlayer_HostageServices Offsets
CCSPlayer_HostageServices.m_hCarriedHostage = findOffsetByName(j, "CCSPlayer_HostageServices", "m_hCarriedHostage");
CCSPlayer_HostageServices.m_hCarriedHostageProp = findOffsetByName(j, "CCSPlayer_HostageServices", "m_hCarriedHostageProp");

// Atribuições para C_EnvCubemap
// C_EnvCubemap Offsets
C_EnvCubemap.m_Entity_hCubemapTexture = findOffsetByName(j, "C_EnvCubemap", "m_Entity_hCubemapTexture");
C_EnvCubemap.m_Entity_bCustomCubemapTexture = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bCustomCubemapTexture");
C_EnvCubemap.m_Entity_flInfluenceRadius = findOffsetByName(j, "C_EnvCubemap", "m_Entity_flInfluenceRadius");
C_EnvCubemap.m_Entity_vBoxProjectMins = findOffsetByName(j, "C_EnvCubemap", "m_Entity_vBoxProjectMins");
C_EnvCubemap.m_Entity_vBoxProjectMaxs = findOffsetByName(j, "C_EnvCubemap", "m_Entity_vBoxProjectMaxs");
C_EnvCubemap.m_Entity_bMoveable = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bMoveable");
C_EnvCubemap.m_Entity_nHandshake = findOffsetByName(j, "C_EnvCubemap", "m_Entity_nHandshake");
C_EnvCubemap.m_Entity_nEnvCubeMapArrayIndex = findOffsetByName(j, "C_EnvCubemap", "m_Entity_nEnvCubeMapArrayIndex");
C_EnvCubemap.m_Entity_nPriority = findOffsetByName(j, "C_EnvCubemap", "m_Entity_nPriority");
C_EnvCubemap.m_Entity_flEdgeFadeDist = findOffsetByName(j, "C_EnvCubemap", "m_Entity_flEdgeFadeDist");
C_EnvCubemap.m_Entity_vEdgeFadeDists = findOffsetByName(j, "C_EnvCubemap", "m_Entity_vEdgeFadeDists");
C_EnvCubemap.m_Entity_flDiffuseScale = findOffsetByName(j, "C_EnvCubemap", "m_Entity_flDiffuseScale");
C_EnvCubemap.m_Entity_bStartDisabled = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bStartDisabled");
C_EnvCubemap.m_Entity_bDefaultEnvMap = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bDefaultEnvMap");
C_EnvCubemap.m_Entity_bDefaultSpecEnvMap = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bDefaultSpecEnvMap");
C_EnvCubemap.m_Entity_bIndoorCubeMap = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bIndoorCubeMap");
C_EnvCubemap.m_Entity_bCopyDiffuseFromDefaultCubemap = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bCopyDiffuseFromDefaultCubemap");
C_EnvCubemap.m_Entity_bEnabled = findOffsetByName(j, "C_EnvCubemap", "m_Entity_bEnabled");

// Atribuições para C_PredictedViewModel
// C_PredictedViewModel Offsets
C_PredictedViewModel.m_vPredictedLagOffset = findOffsetByName(j, "C_PredictedViewModel", "m_vPredictedLagOffset");
C_PredictedViewModel.m_targetSpeed = findOffsetByName(j, "C_PredictedViewModel", "m_targetSpeed");
C_PredictedViewModel.m_currentSpeed = findOffsetByName(j, "C_PredictedViewModel", "m_currentSpeed");

// Atribuições para C_PointValueRemapper
// C_PointValueRemapper Offsets
C_PointValueRemapper.m_bDisabled = findOffsetByName(j, "C_PointValueRemapper", "m_bDisabled");
C_PointValueRemapper.m_bDisabledOld = findOffsetByName(j, "C_PointValueRemapper", "m_bDisabledOld");
C_PointValueRemapper.m_bUpdateOnClient = findOffsetByName(j, "C_PointValueRemapper", "m_bUpdateOnClient");
C_PointValueRemapper.m_nInputType = findOffsetByName(j, "C_PointValueRemapper", "m_nInputType");
C_PointValueRemapper.m_hRemapLineStart = findOffsetByName(j, "C_PointValueRemapper", "m_hRemapLineStart");
C_PointValueRemapper.m_hRemapLineEnd = findOffsetByName(j, "C_PointValueRemapper", "m_hRemapLineEnd");
C_PointValueRemapper.m_flMaximumChangePerSecond = findOffsetByName(j, "C_PointValueRemapper", "m_flMaximumChangePerSecond");
C_PointValueRemapper.m_flDisengageDistance = findOffsetByName(j, "C_PointValueRemapper", "m_flDisengageDistance");
C_PointValueRemapper.m_flEngageDistance = findOffsetByName(j, "C_PointValueRemapper", "m_flEngageDistance");
C_PointValueRemapper.m_bRequiresUseKey = findOffsetByName(j, "C_PointValueRemapper", "m_bRequiresUseKey");
C_PointValueRemapper.m_nOutputType = findOffsetByName(j, "C_PointValueRemapper", "m_nOutputType");
C_PointValueRemapper.m_hOutputEntities = findOffsetByName(j, "C_PointValueRemapper", "m_hOutputEntities");
C_PointValueRemapper.m_nHapticsType = findOffsetByName(j, "C_PointValueRemapper", "m_nHapticsType");
C_PointValueRemapper.m_nMomentumType = findOffsetByName(j, "C_PointValueRemapper", "m_nMomentumType");
C_PointValueRemapper.m_flMomentumModifier = findOffsetByName(j, "C_PointValueRemapper", "m_flMomentumModifier");
C_PointValueRemapper.m_flSnapValue = findOffsetByName(j, "C_PointValueRemapper", "m_flSnapValue");
C_PointValueRemapper.m_flCurrentMomentum = findOffsetByName(j, "C_PointValueRemapper", "m_flCurrentMomentum");
C_PointValueRemapper.m_nRatchetType = findOffsetByName(j, "C_PointValueRemapper", "m_nRatchetType");
C_PointValueRemapper.m_flRatchetOffset = findOffsetByName(j, "C_PointValueRemapper", "m_flRatchetOffset");
C_PointValueRemapper.m_flInputOffset = findOffsetByName(j, "C_PointValueRemapper", "m_flInputOffset");
C_PointValueRemapper.m_bEngaged = findOffsetByName(j, "C_PointValueRemapper", "m_bEngaged");
C_PointValueRemapper.m_bFirstUpdate = findOffsetByName(j, "C_PointValueRemapper", "m_bFirstUpdate");
C_PointValueRemapper.m_flPreviousValue = findOffsetByName(j, "C_PointValueRemapper", "m_flPreviousValue");
C_PointValueRemapper.m_flPreviousUpdateTickTime = findOffsetByName(j, "C_PointValueRemapper", "m_flPreviousUpdateTickTime");
C_PointValueRemapper.m_vecPreviousTestPoint = findOffsetByName(j, "C_PointValueRemapper", "m_vecPreviousTestPoint");

// Atribuições para C_Knife
// C_Knife Offsets
C_Knife.m_bFirstAttack = findOffsetByName(j, "C_Knife", "m_bFirstAttack");

// Atribuições para C_ItemDogtags
// C_ItemDogtags Offsets
C_ItemDogtags.m_OwningPlayer = findOffsetByName(j, "C_ItemDogtags", "m_OwningPlayer");
C_ItemDogtags.m_KillingPlayer = findOffsetByName(j, "C_ItemDogtags", "m_KillingPlayer");

// Atribuições para C_SoundOpvarSetPointBase
// C_SoundOpvarSetPointBase Offsets
C_SoundOpvarSetPointBase.m_iszStackName = findOffsetByName(j, "C_SoundOpvarSetPointBase", "m_iszStackName");
C_SoundOpvarSetPointBase.m_iszOperatorName = findOffsetByName(j, "C_SoundOpvarSetPointBase", "m_iszOperatorName");
C_SoundOpvarSetPointBase.m_iszOpvarName = findOffsetByName(j, "C_SoundOpvarSetPointBase", "m_iszOpvarName");
C_SoundOpvarSetPointBase.m_iOpvarIndex = findOffsetByName(j, "C_SoundOpvarSetPointBase", "m_iOpvarIndex");
C_SoundOpvarSetPointBase.m_bUseAutoCompare = findOffsetByName(j, "C_SoundOpvarSetPointBase", "m_bUseAutoCompare");

// Atribuições para CCSPlayer_BuyServices
// CCSPlayer_BuyServices Offsets
CCSPlayer_BuyServices.m_vecSellbackPurchaseEntries = findOffsetByName(j, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries");

// Atribuições para C_WeaponTaser
// C_WeaponTaser Offsets
C_WeaponTaser.m_fFireTime = findOffsetByName(j, "C_WeaponTaser", "m_fFireTime");
C_WeaponTaser.m_nLastAttackTick = findOffsetByName(j, "C_WeaponTaser", "m_nLastAttackTick");

// Atribuições para C_Fists
// C_Fists Offsets
C_Fists.m_bPlayingUninterruptableAct = findOffsetByName(j, "C_Fists", "m_bPlayingUninterruptableAct");
C_Fists.m_nUninterruptableActivity = findOffsetByName(j, "C_Fists", "m_nUninterruptableActivity");

// Atribuições para CInfoDynamicShadowHintBox
// CInfoDynamicShadowHintBox Offsets
CInfoDynamicShadowHintBox.m_vBoxMins = findOffsetByName(j, "CInfoDynamicShadowHintBox", "m_vBoxMins");
CInfoDynamicShadowHintBox.m_vBoxMaxs = findOffsetByName(j, "CInfoDynamicShadowHintBox", "m_vBoxMaxs");

// Atribuições para C_EnvCubemapFog
// C_EnvCubemapFog Offsets
C_EnvCubemapFog.m_flEndDistance = findOffsetByName(j, "C_EnvCubemapFog", "m_flEndDistance");
C_EnvCubemapFog.m_flStartDistance = findOffsetByName(j, "C_EnvCubemapFog", "m_flStartDistance");
C_EnvCubemapFog.m_flFogFalloffExponent = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogFalloffExponent");
C_EnvCubemapFog.m_bHeightFogEnabled = findOffsetByName(j, "C_EnvCubemapFog", "m_bHeightFogEnabled");
C_EnvCubemapFog.m_flFogHeightWidth = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogHeightWidth");
C_EnvCubemapFog.m_flFogHeightEnd = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogHeightEnd");
C_EnvCubemapFog.m_flFogHeightStart = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogHeightStart");
C_EnvCubemapFog.m_flFogHeightExponent = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogHeightExponent");
C_EnvCubemapFog.m_flLODBias = findOffsetByName(j, "C_EnvCubemapFog", "m_flLODBias");
C_EnvCubemapFog.m_bActive = findOffsetByName(j, "C_EnvCubemapFog", "m_bActive");
C_EnvCubemapFog.m_bStartDisabled = findOffsetByName(j, "C_EnvCubemapFog", "m_bStartDisabled");
C_EnvCubemapFog.m_flFogMaxOpacity = findOffsetByName(j, "C_EnvCubemapFog", "m_flFogMaxOpacity");
C_EnvCubemapFog.m_nCubemapSourceType = findOffsetByName(j, "C_EnvCubemapFog", "m_nCubemapSourceType");
C_EnvCubemapFog.m_hSkyMaterial = findOffsetByName(j, "C_EnvCubemapFog", "m_hSkyMaterial");
C_EnvCubemapFog.m_iszSkyEntity = findOffsetByName(j, "C_EnvCubemapFog", "m_iszSkyEntity");
C_EnvCubemapFog.m_hFogCubemapTexture = findOffsetByName(j, "C_EnvCubemapFog", "m_hFogCubemapTexture");
C_EnvCubemapFog.m_bHasHeightFogEnd = findOffsetByName(j, "C_EnvCubemapFog", "m_bHasHeightFogEnd");
C_EnvCubemapFog.m_bFirstTime = findOffsetByName(j, "C_EnvCubemapFog", "m_bFirstTime");

// Atribuições para CCollisionProperty
// CCollisionProperty Offsets
CCollisionProperty.m_collisionAttribute = findOffsetByName(j, "CCollisionProperty", "m_collisionAttribute");
CCollisionProperty.m_vecMins = findOffsetByName(j, "CCollisionProperty", "m_vecMins");
CCollisionProperty.m_vecMaxs = findOffsetByName(j, "CCollisionProperty", "m_vecMaxs");
CCollisionProperty.m_usSolidFlags = findOffsetByName(j, "CCollisionProperty", "m_usSolidFlags");
CCollisionProperty.m_nSolidType = findOffsetByName(j, "CCollisionProperty", "m_nSolidType");
CCollisionProperty.m_triggerBloat = findOffsetByName(j, "CCollisionProperty", "m_triggerBloat");
CCollisionProperty.m_nSurroundType = findOffsetByName(j, "CCollisionProperty", "m_nSurroundType");
CCollisionProperty.m_CollisionGroup = findOffsetByName(j, "CCollisionProperty", "m_CollisionGroup");
CCollisionProperty.m_nEnablePhysics = findOffsetByName(j, "CCollisionProperty", "m_nEnablePhysics");
CCollisionProperty.m_flBoundingRadius = findOffsetByName(j, "CCollisionProperty", "m_flBoundingRadius");
CCollisionProperty.m_vecSpecifiedSurroundingMins = findOffsetByName(j, "CCollisionProperty", "m_vecSpecifiedSurroundingMins");
CCollisionProperty.m_vecSpecifiedSurroundingMaxs = findOffsetByName(j, "CCollisionProperty", "m_vecSpecifiedSurroundingMaxs");
CCollisionProperty.m_vecSurroundingMaxs = findOffsetByName(j, "CCollisionProperty", "m_vecSurroundingMaxs");
CCollisionProperty.m_vecSurroundingMins = findOffsetByName(j, "CCollisionProperty", "m_vecSurroundingMins");
CCollisionProperty.m_vCapsuleCenter1 = findOffsetByName(j, "CCollisionProperty", "m_vCapsuleCenter1");
CCollisionProperty.m_vCapsuleCenter2 = findOffsetByName(j, "CCollisionProperty", "m_vCapsuleCenter2");
CCollisionProperty.m_flCapsuleRadius = findOffsetByName(j, "CCollisionProperty", "m_flCapsuleRadius");

// Atribuições para CNetworkedSequenceOperation
// CNetworkedSequenceOperation Offsets
CNetworkedSequenceOperation.m_hSequence = findOffsetByName(j, "CNetworkedSequenceOperation", "m_hSequence");
CNetworkedSequenceOperation.m_flPrevCycle = findOffsetByName(j, "CNetworkedSequenceOperation", "m_flPrevCycle");
CNetworkedSequenceOperation.m_flCycle = findOffsetByName(j, "CNetworkedSequenceOperation", "m_flCycle");
CNetworkedSequenceOperation.m_flWeight = findOffsetByName(j, "CNetworkedSequenceOperation", "m_flWeight");
CNetworkedSequenceOperation.m_bSequenceChangeNetworked = findOffsetByName(j, "CNetworkedSequenceOperation", "m_bSequenceChangeNetworked");
CNetworkedSequenceOperation.m_bDiscontinuity = findOffsetByName(j, "CNetworkedSequenceOperation", "m_bDiscontinuity");
CNetworkedSequenceOperation.m_flPrevCycleFromDiscontinuity = findOffsetByName(j, "CNetworkedSequenceOperation", "m_flPrevCycleFromDiscontinuity");
CNetworkedSequenceOperation.m_flPrevCycleForAnimEventDetection = findOffsetByName(j, "CNetworkedSequenceOperation", "m_flPrevCycleForAnimEventDetection");

// Atribuições para C_PlayerSprayDecal
// C_PlayerSprayDecal Offsets
C_PlayerSprayDecal.m_nUniqueID = findOffsetByName(j, "C_PlayerSprayDecal", "m_nUniqueID");
C_PlayerSprayDecal.m_unAccountID = findOffsetByName(j, "C_PlayerSprayDecal", "m_unAccountID");
C_PlayerSprayDecal.m_unTraceID = findOffsetByName(j, "C_PlayerSprayDecal", "m_unTraceID");
C_PlayerSprayDecal.m_rtGcTime = findOffsetByName(j, "C_PlayerSprayDecal", "m_rtGcTime");
C_PlayerSprayDecal.m_vecEndPos = findOffsetByName(j, "C_PlayerSprayDecal", "m_vecEndPos");
C_PlayerSprayDecal.m_vecStart = findOffsetByName(j, "C_PlayerSprayDecal", "m_vecStart");
C_PlayerSprayDecal.m_vecLeft = findOffsetByName(j, "C_PlayerSprayDecal", "m_vecLeft");
C_PlayerSprayDecal.m_vecNormal = findOffsetByName(j, "C_PlayerSprayDecal", "m_vecNormal");
C_PlayerSprayDecal.m_nPlayer = findOffsetByName(j, "C_PlayerSprayDecal", "m_nPlayer");
C_PlayerSprayDecal.m_nEntity = findOffsetByName(j, "C_PlayerSprayDecal", "m_nEntity");
C_PlayerSprayDecal.m_nHitbox = findOffsetByName(j, "C_PlayerSprayDecal", "m_nHitbox");
C_PlayerSprayDecal.m_flCreationTime = findOffsetByName(j, "C_PlayerSprayDecal", "m_flCreationTime");
C_PlayerSprayDecal.m_nTintID = findOffsetByName(j, "C_PlayerSprayDecal", "m_nTintID");
C_PlayerSprayDecal.m_nVersion = findOffsetByName(j, "C_PlayerSprayDecal", "m_nVersion");
C_PlayerSprayDecal.m_ubSignature = findOffsetByName(j, "C_PlayerSprayDecal", "m_ubSignature");
C_PlayerSprayDecal.m_SprayRenderHelper = findOffsetByName(j, "C_PlayerSprayDecal", "m_SprayRenderHelper");

// Atribuições para EntityRenderAttribute_t
// EntityRenderAttribute_t Offsets
EntityRenderAttribute_t.m_ID = findOffsetByName(j, "EntityRenderAttribute_t", "m_ID");
EntityRenderAttribute_t.m_Values = findOffsetByName(j, "EntityRenderAttribute_t", "m_Values");

// Atribuições para C_ShatterGlassShardPhysics
// C_ShatterGlassShardPhysics Offsets
C_ShatterGlassShardPhysics.m_ShardDesc = findOffsetByName(j, "C_ShatterGlassShardPhysics", "m_ShardDesc");

// Atribuições para C_LightEntity
// C_LightEntity Offsets
C_LightEntity.m_CLightComponent = findOffsetByName(j, "C_LightEntity", "m_CLightComponent");

// Atribuições para C_PlayerVisibility
// C_PlayerVisibility Offsets
C_PlayerVisibility.m_flVisibilityStrength = findOffsetByName(j, "C_PlayerVisibility", "m_flVisibilityStrength");
C_PlayerVisibility.m_flFogDistanceMultiplier = findOffsetByName(j, "C_PlayerVisibility", "m_flFogDistanceMultiplier");
C_PlayerVisibility.m_flFogMaxDensityMultiplier = findOffsetByName(j, "C_PlayerVisibility", "m_flFogMaxDensityMultiplier");
C_PlayerVisibility.m_flFadeTime = findOffsetByName(j, "C_PlayerVisibility", "m_flFadeTime");
C_PlayerVisibility.m_bStartDisabled = findOffsetByName(j, "C_PlayerVisibility", "m_bStartDisabled");
C_PlayerVisibility.m_bIsEnabled = findOffsetByName(j, "C_PlayerVisibility", "m_bIsEnabled");

// Atribuições para fogparams_t
// fogparams_t Offsets
fogparams_t.dirPrimary = findOffsetByName(j, "fogparams_t", "dirPrimary");
fogparams_t.colorPrimary = findOffsetByName(j, "fogparams_t", "colorPrimary");
fogparams_t.colorSecondary = findOffsetByName(j, "fogparams_t", "colorSecondary");
fogparams_t.colorPrimaryLerpTo = findOffsetByName(j, "fogparams_t", "colorPrimaryLerpTo");
fogparams_t.colorSecondaryLerpTo = findOffsetByName(j, "fogparams_t", "colorSecondaryLerpTo");
fogparams_t.start = findOffsetByName(j, "fogparams_t", "start");
fogparams_t.end = findOffsetByName(j, "fogparams_t", "end");
fogparams_t.farz = findOffsetByName(j, "fogparams_t", "farz");
fogparams_t.maxdensity = findOffsetByName(j, "fogparams_t", "maxdensity");
fogparams_t.exponent = findOffsetByName(j, "fogparams_t", "exponent");
fogparams_t.HDRColorScale = findOffsetByName(j, "fogparams_t", "HDRColorScale");
fogparams_t.skyboxFogFactor = findOffsetByName(j, "fogparams_t", "skyboxFogFactor");
fogparams_t.skyboxFogFactorLerpTo = findOffsetByName(j, "fogparams_t", "skyboxFogFactorLerpTo");
fogparams_t.startLerpTo = findOffsetByName(j, "fogparams_t", "startLerpTo");
fogparams_t.endLerpTo = findOffsetByName(j, "fogparams_t", "endLerpTo");
fogparams_t.maxdensityLerpTo = findOffsetByName(j, "fogparams_t", "maxdensityLerpTo");
fogparams_t.lerptime = findOffsetByName(j, "fogparams_t", "lerptime");
fogparams_t.duration = findOffsetByName(j, "fogparams_t", "duration");
fogparams_t.blendtobackground = findOffsetByName(j, "fogparams_t", "blendtobackground");
fogparams_t.scattering = findOffsetByName(j, "fogparams_t", "scattering");
fogparams_t.locallightscale = findOffsetByName(j, "fogparams_t", "locallightscale");
fogparams_t.enable = findOffsetByName(j, "fogparams_t", "enable");
fogparams_t.blend = findOffsetByName(j, "fogparams_t", "blend");
fogparams_t.m_bNoReflectionFog = findOffsetByName(j, "fogparams_t", "m_bNoReflectionFog");
fogparams_t.m_bPadding = findOffsetByName(j, "fogparams_t", "m_bPadding");

// Atribuições para C_BaseFlex
// C_BaseFlex Offsets
C_BaseFlex.m_flexWeight = findOffsetByName(j, "C_BaseFlex", "m_flexWeight");
C_BaseFlex.m_vLookTargetPosition = findOffsetByName(j, "C_BaseFlex", "m_vLookTargetPosition");
C_BaseFlex.m_blinktoggle = findOffsetByName(j, "C_BaseFlex", "m_blinktoggle");
C_BaseFlex.m_nLastFlexUpdateFrameCount = findOffsetByName(j, "C_BaseFlex", "m_nLastFlexUpdateFrameCount");
C_BaseFlex.m_CachedViewTarget = findOffsetByName(j, "C_BaseFlex", "m_CachedViewTarget");
C_BaseFlex.m_nNextSceneEventId = findOffsetByName(j, "C_BaseFlex", "m_nNextSceneEventId");
C_BaseFlex.m_iBlink = findOffsetByName(j, "C_BaseFlex", "m_iBlink");
C_BaseFlex.m_blinktime = findOffsetByName(j, "C_BaseFlex", "m_blinktime");
C_BaseFlex.m_prevblinktoggle = findOffsetByName(j, "C_BaseFlex", "m_prevblinktoggle");
C_BaseFlex.m_iJawOpen = findOffsetByName(j, "C_BaseFlex", "m_iJawOpen");
C_BaseFlex.m_flJawOpenAmount = findOffsetByName(j, "C_BaseFlex", "m_flJawOpenAmount");
C_BaseFlex.m_flBlinkAmount = findOffsetByName(j, "C_BaseFlex", "m_flBlinkAmount");
C_BaseFlex.m_iMouthAttachment = findOffsetByName(j, "C_BaseFlex", "m_iMouthAttachment");
C_BaseFlex.m_iEyeAttachment = findOffsetByName(j, "C_BaseFlex", "m_iEyeAttachment");
C_BaseFlex.m_bResetFlexWeightsOnModelChange = findOffsetByName(j, "C_BaseFlex", "m_bResetFlexWeightsOnModelChange");
C_BaseFlex.m_nEyeOcclusionRendererBone = findOffsetByName(j, "C_BaseFlex", "m_nEyeOcclusionRendererBone");
C_BaseFlex.m_mEyeOcclusionRendererCameraToBoneTransform = findOffsetByName(j, "C_BaseFlex", "m_mEyeOcclusionRendererCameraToBoneTransform");
C_BaseFlex.m_vEyeOcclusionRendererHalfExtent = findOffsetByName(j, "C_BaseFlex", "m_vEyeOcclusionRendererHalfExtent");
C_BaseFlex.m_PhonemeClasses = findOffsetByName(j, "C_BaseFlex", "m_PhonemeClasses");

// Atribuições para C_EnvSky
// C_EnvSky Offsets
C_EnvSky.m_hSkyMaterial = findOffsetByName(j, "C_EnvSky", "m_hSkyMaterial");
C_EnvSky.m_hSkyMaterialLightingOnly = findOffsetByName(j, "C_EnvSky", "m_hSkyMaterialLightingOnly");
C_EnvSky.m_bStartDisabled = findOffsetByName(j, "C_EnvSky", "m_bStartDisabled");
C_EnvSky.m_vTintColor = findOffsetByName(j, "C_EnvSky", "m_vTintColor");
C_EnvSky.m_vTintColorLightingOnly = findOffsetByName(j, "C_EnvSky", "m_vTintColorLightingOnly");
C_EnvSky.m_flBrightnessScale = findOffsetByName(j, "C_EnvSky", "m_flBrightnessScale");
C_EnvSky.m_nFogType = findOffsetByName(j, "C_EnvSky", "m_nFogType");
C_EnvSky.m_flFogMinStart = findOffsetByName(j, "C_EnvSky", "m_flFogMinStart");
C_EnvSky.m_flFogMinEnd = findOffsetByName(j, "C_EnvSky", "m_flFogMinEnd");
C_EnvSky.m_flFogMaxStart = findOffsetByName(j, "C_EnvSky", "m_flFogMaxStart");
C_EnvSky.m_flFogMaxEnd = findOffsetByName(j, "C_EnvSky", "m_flFogMaxEnd");
C_EnvSky.m_bEnabled = findOffsetByName(j, "C_EnvSky", "m_bEnabled");

// Atribuições para C_DynamicProp
// C_DynamicProp Offsets
C_DynamicProp.m_bUseHitboxesForRenderBox = findOffsetByName(j, "C_DynamicProp", "m_bUseHitboxesForRenderBox");
C_DynamicProp.m_bUseAnimGraph = findOffsetByName(j, "C_DynamicProp", "m_bUseAnimGraph");
C_DynamicProp.m_pOutputAnimBegun = findOffsetByName(j, "C_DynamicProp", "m_pOutputAnimBegun");
C_DynamicProp.m_pOutputAnimOver = findOffsetByName(j, "C_DynamicProp", "m_pOutputAnimOver");
C_DynamicProp.m_pOutputAnimLoopCycleOver = findOffsetByName(j, "C_DynamicProp", "m_pOutputAnimLoopCycleOver");
C_DynamicProp.m_OnAnimReachedStart = findOffsetByName(j, "C_DynamicProp", "m_OnAnimReachedStart");
C_DynamicProp.m_OnAnimReachedEnd = findOffsetByName(j, "C_DynamicProp", "m_OnAnimReachedEnd");
C_DynamicProp.m_iszIdleAnim = findOffsetByName(j, "C_DynamicProp", "m_iszIdleAnim");
C_DynamicProp.m_nIdleAnimLoopMode = findOffsetByName(j, "C_DynamicProp", "m_nIdleAnimLoopMode");
C_DynamicProp.m_bRandomizeCycle = findOffsetByName(j, "C_DynamicProp", "m_bRandomizeCycle");
C_DynamicProp.m_bStartDisabled = findOffsetByName(j, "C_DynamicProp", "m_bStartDisabled");
C_DynamicProp.m_bFiredStartEndOutput = findOffsetByName(j, "C_DynamicProp", "m_bFiredStartEndOutput");
C_DynamicProp.m_bForceNpcExclude = findOffsetByName(j, "C_DynamicProp", "m_bForceNpcExclude");
C_DynamicProp.m_bCreateNonSolid = findOffsetByName(j, "C_DynamicProp", "m_bCreateNonSolid");
C_DynamicProp.m_bIsOverrideProp = findOffsetByName(j, "C_DynamicProp", "m_bIsOverrideProp");
C_DynamicProp.m_iInitialGlowState = findOffsetByName(j, "C_DynamicProp", "m_iInitialGlowState");
C_DynamicProp.m_nGlowRange = findOffsetByName(j, "C_DynamicProp", "m_nGlowRange");
C_DynamicProp.m_nGlowRangeMin = findOffsetByName(j, "C_DynamicProp", "m_nGlowRangeMin");
C_DynamicProp.m_glowColor = findOffsetByName(j, "C_DynamicProp", "m_glowColor");
C_DynamicProp.m_nGlowTeam = findOffsetByName(j, "C_DynamicProp", "m_nGlowTeam");
C_DynamicProp.m_iCachedFrameCount = findOffsetByName(j, "C_DynamicProp", "m_iCachedFrameCount");
C_DynamicProp.m_vecCachedRenderMins = findOffsetByName(j, "C_DynamicProp", "m_vecCachedRenderMins");
C_DynamicProp.m_vecCachedRenderMaxs = findOffsetByName(j, "C_DynamicProp", "m_vecCachedRenderMaxs");

// Atribuições para CPropDataComponent
// CPropDataComponent Offsets
CPropDataComponent.m_flDmgModBullet = findOffsetByName(j, "CPropDataComponent", "m_flDmgModBullet");
CPropDataComponent.m_flDmgModClub = findOffsetByName(j, "CPropDataComponent", "m_flDmgModClub");
CPropDataComponent.m_flDmgModExplosive = findOffsetByName(j, "CPropDataComponent", "m_flDmgModExplosive");
CPropDataComponent.m_flDmgModFire = findOffsetByName(j, "CPropDataComponent", "m_flDmgModFire");
CPropDataComponent.m_iszPhysicsDamageTableName = findOffsetByName(j, "CPropDataComponent", "m_iszPhysicsDamageTableName");
CPropDataComponent.m_iszBasePropData = findOffsetByName(j, "CPropDataComponent", "m_iszBasePropData");
CPropDataComponent.m_nInteractions = findOffsetByName(j, "CPropDataComponent", "m_nInteractions");
CPropDataComponent.m_bSpawnMotionDisabled = findOffsetByName(j, "CPropDataComponent", "m_bSpawnMotionDisabled");
CPropDataComponent.m_nDisableTakePhysicsDamageSpawnFlag = findOffsetByName(j, "CPropDataComponent", "m_nDisableTakePhysicsDamageSpawnFlag");
CPropDataComponent.m_nMotionDisabledSpawnFlag = findOffsetByName(j, "CPropDataComponent", "m_nMotionDisabledSpawnFlag");

// Atribuições para C_KeychainModule
// C_KeychainModule Offsets
C_KeychainModule.m_nKeychainDefID = findOffsetByName(j, "C_KeychainModule", "m_nKeychainDefID");
C_KeychainModule.m_nKeychainSeed = findOffsetByName(j, "C_KeychainModule", "m_nKeychainSeed");

// Atribuições para CCitadelSoundOpvarSetOBB
// CCitadelSoundOpvarSetOBB Offsets
CCitadelSoundOpvarSetOBB.m_iszStackName = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_iszStackName");
CCitadelSoundOpvarSetOBB.m_iszOperatorName = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_iszOperatorName");
CCitadelSoundOpvarSetOBB.m_iszOpvarName = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_iszOpvarName");
CCitadelSoundOpvarSetOBB.m_vDistanceInnerMins = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMins");
CCitadelSoundOpvarSetOBB.m_vDistanceInnerMaxs = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMaxs");
CCitadelSoundOpvarSetOBB.m_vDistanceOuterMins = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMins");
CCitadelSoundOpvarSetOBB.m_vDistanceOuterMaxs = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMaxs");
CCitadelSoundOpvarSetOBB.m_nAABBDirection = findOffsetByName(j, "CCitadelSoundOpvarSetOBB", "m_nAABBDirection");

// Atribuições para SellbackPurchaseEntry_t
// SellbackPurchaseEntry_t Offsets
SellbackPurchaseEntry_t.m_unDefIdx = findOffsetByName(j, "SellbackPurchaseEntry_t", "m_unDefIdx");
SellbackPurchaseEntry_t.m_nCost = findOffsetByName(j, "SellbackPurchaseEntry_t", "m_nCost");
SellbackPurchaseEntry_t.m_nPrevArmor = findOffsetByName(j, "SellbackPurchaseEntry_t", "m_nPrevArmor");
SellbackPurchaseEntry_t.m_bPrevHelmet = findOffsetByName(j, "SellbackPurchaseEntry_t", "m_bPrevHelmet");
SellbackPurchaseEntry_t.m_hItem = findOffsetByName(j, "SellbackPurchaseEntry_t", "m_hItem");

// Atribuições para C_LocalTempEntity
// C_LocalTempEntity Offsets
C_LocalTempEntity.flags = findOffsetByName(j, "C_LocalTempEntity", "flags");
C_LocalTempEntity.die = findOffsetByName(j, "C_LocalTempEntity", "die");
C_LocalTempEntity.m_flFrameMax = findOffsetByName(j, "C_LocalTempEntity", "m_flFrameMax");
C_LocalTempEntity.x = findOffsetByName(j, "C_LocalTempEntity", "x");
C_LocalTempEntity.y = findOffsetByName(j, "C_LocalTempEntity", "y");
C_LocalTempEntity.fadeSpeed = findOffsetByName(j, "C_LocalTempEntity", "fadeSpeed");
C_LocalTempEntity.bounceFactor = findOffsetByName(j, "C_LocalTempEntity", "bounceFactor");
C_LocalTempEntity.hitSound = findOffsetByName(j, "C_LocalTempEntity", "hitSound");
C_LocalTempEntity.priority = findOffsetByName(j, "C_LocalTempEntity", "priority");
C_LocalTempEntity.tentOffset = findOffsetByName(j, "C_LocalTempEntity", "tentOffset");
C_LocalTempEntity.m_vecTempEntAngVelocity = findOffsetByName(j, "C_LocalTempEntity", "m_vecTempEntAngVelocity");
C_LocalTempEntity.tempent_renderamt = findOffsetByName(j, "C_LocalTempEntity", "tempent_renderamt");
C_LocalTempEntity.m_vecNormal = findOffsetByName(j, "C_LocalTempEntity", "m_vecNormal");
C_LocalTempEntity.m_flSpriteScale = findOffsetByName(j, "C_LocalTempEntity", "m_flSpriteScale");
C_LocalTempEntity.m_nFlickerFrame = findOffsetByName(j, "C_LocalTempEntity", "m_nFlickerFrame");
C_LocalTempEntity.m_flFrameRate = findOffsetByName(j, "C_LocalTempEntity", "m_flFrameRate");
C_LocalTempEntity.m_flFrame = findOffsetByName(j, "C_LocalTempEntity", "m_flFrame");
C_LocalTempEntity.m_pszImpactEffect = findOffsetByName(j, "C_LocalTempEntity", "m_pszImpactEffect");
C_LocalTempEntity.m_pszParticleEffect = findOffsetByName(j, "C_LocalTempEntity", "m_pszParticleEffect");
C_LocalTempEntity.m_bParticleCollision = findOffsetByName(j, "C_LocalTempEntity", "m_bParticleCollision");
C_LocalTempEntity.m_iLastCollisionFrame = findOffsetByName(j, "C_LocalTempEntity", "m_iLastCollisionFrame");
C_LocalTempEntity.m_vLastCollisionOrigin = findOffsetByName(j, "C_LocalTempEntity", "m_vLastCollisionOrigin");
C_LocalTempEntity.m_vecTempEntVelocity = findOffsetByName(j, "C_LocalTempEntity", "m_vecTempEntVelocity");
C_LocalTempEntity.m_vecPrevAbsOrigin = findOffsetByName(j, "C_LocalTempEntity", "m_vecPrevAbsOrigin");
C_LocalTempEntity.m_vecTempEntAcceleration = findOffsetByName(j, "C_LocalTempEntity", "m_vecTempEntAcceleration");

// Atribuições para C_EnvWindShared__WindAveEvent_t
// C_EnvWindShared__WindAveEvent_t Offsets
C_EnvWindShared__WindAveEvent_t.m_flStartWindSpeed = findOffsetByName(j, "C_EnvWindShared__WindAveEvent_t", "m_flStartWindSpeed");
C_EnvWindShared__WindAveEvent_t.m_flAveWindSpeed = findOffsetByName(j, "C_EnvWindShared__WindAveEvent_t", "m_flAveWindSpeed");

// Atribuições para C_MolotovProjectile
// C_MolotovProjectile Offsets
C_MolotovProjectile.m_bIsIncGrenade = findOffsetByName(j, "C_MolotovProjectile", "m_bIsIncGrenade");

// Atribuições para CInfoOffscreenPanoramaTexture
// CInfoOffscreenPanoramaTexture Offsets
CInfoOffscreenPanoramaTexture.m_bDisabled = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_bDisabled");
CInfoOffscreenPanoramaTexture.m_nResolutionX = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_nResolutionX");
CInfoOffscreenPanoramaTexture.m_nResolutionY = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_nResolutionY");
CInfoOffscreenPanoramaTexture.m_szLayoutFileName = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName");
CInfoOffscreenPanoramaTexture.m_RenderAttrName = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName");
CInfoOffscreenPanoramaTexture.m_TargetEntities = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_TargetEntities");
CInfoOffscreenPanoramaTexture.m_nTargetChangeCount = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount");
CInfoOffscreenPanoramaTexture.m_vecCSSClasses = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses");
CInfoOffscreenPanoramaTexture.m_bCheckCSSClasses = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_bCheckCSSClasses");
CInfoOffscreenPanoramaTexture.m_szTargetsName = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_szTargetsName");
CInfoOffscreenPanoramaTexture.m_AdditionalTargetEntities = findOffsetByName(j, "CInfoOffscreenPanoramaTexture", "m_AdditionalTargetEntities");

// Atribuições para C_DynamicLight
// C_DynamicLight Offsets
C_DynamicLight.m_Flags = findOffsetByName(j, "C_DynamicLight", "m_Flags");
C_DynamicLight.m_LightStyle = findOffsetByName(j, "C_DynamicLight", "m_LightStyle");
C_DynamicLight.m_Radius = findOffsetByName(j, "C_DynamicLight", "m_Radius");
C_DynamicLight.m_Exponent = findOffsetByName(j, "C_DynamicLight", "m_Exponent");
C_DynamicLight.m_InnerAngle = findOffsetByName(j, "C_DynamicLight", "m_InnerAngle");
C_DynamicLight.m_OuterAngle = findOffsetByName(j, "C_DynamicLight", "m_OuterAngle");
C_DynamicLight.m_SpotRadius = findOffsetByName(j, "C_DynamicLight", "m_SpotRadius");

// Atribuições para C_CSWeaponBase
// C_CSWeaponBase Offsets
C_CSWeaponBase.m_flFireSequenceStartTime = findOffsetByName(j, "C_CSWeaponBase", "m_flFireSequenceStartTime");
C_CSWeaponBase.m_nFireSequenceStartTimeChange = findOffsetByName(j, "C_CSWeaponBase", "m_nFireSequenceStartTimeChange");
C_CSWeaponBase.m_nFireSequenceStartTimeAck = findOffsetByName(j, "C_CSWeaponBase", "m_nFireSequenceStartTimeAck");
C_CSWeaponBase.m_ePlayerFireEvent = findOffsetByName(j, "C_CSWeaponBase", "m_ePlayerFireEvent");
C_CSWeaponBase.m_ePlayerFireEventAttackType = findOffsetByName(j, "C_CSWeaponBase", "m_ePlayerFireEventAttackType");
C_CSWeaponBase.m_seqIdle = findOffsetByName(j, "C_CSWeaponBase", "m_seqIdle");
C_CSWeaponBase.m_seqFirePrimary = findOffsetByName(j, "C_CSWeaponBase", "m_seqFirePrimary");
C_CSWeaponBase.m_seqFireSecondary = findOffsetByName(j, "C_CSWeaponBase", "m_seqFireSecondary");
C_CSWeaponBase.m_thirdPersonFireSequences = findOffsetByName(j, "C_CSWeaponBase", "m_thirdPersonFireSequences");
C_CSWeaponBase.m_hCurrentThirdPersonSequence = findOffsetByName(j, "C_CSWeaponBase", "m_hCurrentThirdPersonSequence");
C_CSWeaponBase.m_nSilencerBoneIndex = findOffsetByName(j, "C_CSWeaponBase", "m_nSilencerBoneIndex");
C_CSWeaponBase.m_thirdPersonSequences = findOffsetByName(j, "C_CSWeaponBase", "m_thirdPersonSequences");
C_CSWeaponBase.m_ClientPreviousWeaponState = findOffsetByName(j, "C_CSWeaponBase", "m_ClientPreviousWeaponState");
C_CSWeaponBase.m_iState = findOffsetByName(j, "C_CSWeaponBase", "m_iState");
C_CSWeaponBase.m_flCrosshairDistance = findOffsetByName(j, "C_CSWeaponBase", "m_flCrosshairDistance");
C_CSWeaponBase.m_iAmmoLastCheck = findOffsetByName(j, "C_CSWeaponBase", "m_iAmmoLastCheck");
C_CSWeaponBase.m_iAlpha = findOffsetByName(j, "C_CSWeaponBase", "m_iAlpha");
C_CSWeaponBase.m_iScopeTextureID = findOffsetByName(j, "C_CSWeaponBase", "m_iScopeTextureID");
C_CSWeaponBase.m_iCrosshairTextureID = findOffsetByName(j, "C_CSWeaponBase", "m_iCrosshairTextureID");
C_CSWeaponBase.m_flGunAccuracyPositionDeprecated = findOffsetByName(j, "C_CSWeaponBase", "m_flGunAccuracyPositionDeprecated");
C_CSWeaponBase.m_nLastEmptySoundCmdNum = findOffsetByName(j, "C_CSWeaponBase", "m_nLastEmptySoundCmdNum");
C_CSWeaponBase.m_nViewModelIndex = findOffsetByName(j, "C_CSWeaponBase", "m_nViewModelIndex");
C_CSWeaponBase.m_bReloadsWithClips = findOffsetByName(j, "C_CSWeaponBase", "m_bReloadsWithClips");
C_CSWeaponBase.m_flTimeWeaponIdle = findOffsetByName(j, "C_CSWeaponBase", "m_flTimeWeaponIdle");
C_CSWeaponBase.m_bFireOnEmpty = findOffsetByName(j, "C_CSWeaponBase", "m_bFireOnEmpty");
C_CSWeaponBase.m_OnPlayerPickup = findOffsetByName(j, "C_CSWeaponBase", "m_OnPlayerPickup");
C_CSWeaponBase.m_weaponMode = findOffsetByName(j, "C_CSWeaponBase", "m_weaponMode");
C_CSWeaponBase.m_flTurningInaccuracyDelta = findOffsetByName(j, "C_CSWeaponBase", "m_flTurningInaccuracyDelta");
C_CSWeaponBase.m_vecTurningInaccuracyEyeDirLast = findOffsetByName(j, "C_CSWeaponBase", "m_vecTurningInaccuracyEyeDirLast");
C_CSWeaponBase.m_flTurningInaccuracy = findOffsetByName(j, "C_CSWeaponBase", "m_flTurningInaccuracy");
C_CSWeaponBase.m_fAccuracyPenalty = findOffsetByName(j, "C_CSWeaponBase", "m_fAccuracyPenalty");
C_CSWeaponBase.m_flLastAccuracyUpdateTime = findOffsetByName(j, "C_CSWeaponBase", "m_flLastAccuracyUpdateTime");
C_CSWeaponBase.m_fAccuracySmoothedForZoom = findOffsetByName(j, "C_CSWeaponBase", "m_fAccuracySmoothedForZoom");
C_CSWeaponBase.m_fScopeZoomEndTime = findOffsetByName(j, "C_CSWeaponBase", "m_fScopeZoomEndTime");
C_CSWeaponBase.m_iRecoilIndex = findOffsetByName(j, "C_CSWeaponBase", "m_iRecoilIndex");
C_CSWeaponBase.m_flRecoilIndex = findOffsetByName(j, "C_CSWeaponBase", "m_flRecoilIndex");
C_CSWeaponBase.m_bBurstMode = findOffsetByName(j, "C_CSWeaponBase", "m_bBurstMode");
C_CSWeaponBase.m_flLastBurstModeChangeTime = findOffsetByName(j, "C_CSWeaponBase", "m_flLastBurstModeChangeTime");
C_CSWeaponBase.m_nPostponeFireReadyTicks = findOffsetByName(j, "C_CSWeaponBase", "m_nPostponeFireReadyTicks");
C_CSWeaponBase.m_flPostponeFireReadyFrac = findOffsetByName(j, "C_CSWeaponBase", "m_flPostponeFireReadyFrac");
C_CSWeaponBase.m_bInReload = findOffsetByName(j, "C_CSWeaponBase", "m_bInReload");
C_CSWeaponBase.m_bReloadVisuallyComplete = findOffsetByName(j, "C_CSWeaponBase", "m_bReloadVisuallyComplete");
C_CSWeaponBase.m_flDroppedAtTime = findOffsetByName(j, "C_CSWeaponBase", "m_flDroppedAtTime");
C_CSWeaponBase.m_bIsHauledBack = findOffsetByName(j, "C_CSWeaponBase", "m_bIsHauledBack");
C_CSWeaponBase.m_bSilencerOn = findOffsetByName(j, "C_CSWeaponBase", "m_bSilencerOn");
C_CSWeaponBase.m_flTimeSilencerSwitchComplete = findOffsetByName(j, "C_CSWeaponBase", "m_flTimeSilencerSwitchComplete");
C_CSWeaponBase.m_iOriginalTeamNumber = findOffsetByName(j, "C_CSWeaponBase", "m_iOriginalTeamNumber");
C_CSWeaponBase.m_iMostRecentTeamNumber = findOffsetByName(j, "C_CSWeaponBase", "m_iMostRecentTeamNumber");
C_CSWeaponBase.m_bDroppedNearBuyZone = findOffsetByName(j, "C_CSWeaponBase", "m_bDroppedNearBuyZone");
C_CSWeaponBase.m_flNextAttackRenderTimeOffset = findOffsetByName(j, "C_CSWeaponBase", "m_flNextAttackRenderTimeOffset");
C_CSWeaponBase.m_bClearWeaponIdentifyingUGC = findOffsetByName(j, "C_CSWeaponBase", "m_bClearWeaponIdentifyingUGC");
C_CSWeaponBase.m_bVisualsDataSet = findOffsetByName(j, "C_CSWeaponBase", "m_bVisualsDataSet");
C_CSWeaponBase.m_bOldFirstPersonSpectatedState = findOffsetByName(j, "C_CSWeaponBase", "m_bOldFirstPersonSpectatedState");
C_CSWeaponBase.m_bUIWeapon = findOffsetByName(j, "C_CSWeaponBase", "m_bUIWeapon");
C_CSWeaponBase.m_nCustomEconReloadEventId = findOffsetByName(j, "C_CSWeaponBase", "m_nCustomEconReloadEventId");
C_CSWeaponBase.m_nextPrevOwnerUseTime = findOffsetByName(j, "C_CSWeaponBase", "m_nextPrevOwnerUseTime");
C_CSWeaponBase.m_hPrevOwner = findOffsetByName(j, "C_CSWeaponBase", "m_hPrevOwner");
C_CSWeaponBase.m_nDropTick = findOffsetByName(j, "C_CSWeaponBase", "m_nDropTick");
C_CSWeaponBase.m_donated = findOffsetByName(j, "C_CSWeaponBase", "m_donated");
C_CSWeaponBase.m_fLastShotTime = findOffsetByName(j, "C_CSWeaponBase", "m_fLastShotTime");
C_CSWeaponBase.m_bWasOwnedByCT = findOffsetByName(j, "C_CSWeaponBase", "m_bWasOwnedByCT");
C_CSWeaponBase.m_bWasOwnedByTerrorist = findOffsetByName(j, "C_CSWeaponBase", "m_bWasOwnedByTerrorist");
C_CSWeaponBase.m_gunHeat = findOffsetByName(j, "C_CSWeaponBase", "m_gunHeat");
C_CSWeaponBase.m_smokeAttachments = findOffsetByName(j, "C_CSWeaponBase", "m_smokeAttachments");
C_CSWeaponBase.m_lastSmokeTime = findOffsetByName(j, "C_CSWeaponBase", "m_lastSmokeTime");
C_CSWeaponBase.m_flNextClientFireBulletTime = findOffsetByName(j, "C_CSWeaponBase", "m_flNextClientFireBulletTime");
C_CSWeaponBase.m_flNextClientFireBulletTime_Repredict = findOffsetByName(j, "C_CSWeaponBase", "m_flNextClientFireBulletTime_Repredict");
C_CSWeaponBase.m_IronSightController = findOffsetByName(j, "C_CSWeaponBase", "m_IronSightController");
C_CSWeaponBase.m_iIronSightMode = findOffsetByName(j, "C_CSWeaponBase", "m_iIronSightMode");
C_CSWeaponBase.m_flLastLOSTraceFailureTime = findOffsetByName(j, "C_CSWeaponBase", "m_flLastLOSTraceFailureTime");
C_CSWeaponBase.m_iNumEmptyAttacks = findOffsetByName(j, "C_CSWeaponBase", "m_iNumEmptyAttacks");
C_CSWeaponBase.m_flLastMagDropRequestTime = findOffsetByName(j, "C_CSWeaponBase", "m_flLastMagDropRequestTime");
C_CSWeaponBase.m_flWatTickOffset = findOffsetByName(j, "C_CSWeaponBase", "m_flWatTickOffset");

// Atribuições para C_FuncElectrifiedVolume
// C_FuncElectrifiedVolume Offsets
C_FuncElectrifiedVolume.m_nAmbientEffect = findOffsetByName(j, "C_FuncElectrifiedVolume", "m_nAmbientEffect");
C_FuncElectrifiedVolume.m_EffectName = findOffsetByName(j, "C_FuncElectrifiedVolume", "m_EffectName");
C_FuncElectrifiedVolume.m_bState = findOffsetByName(j, "C_FuncElectrifiedVolume", "m_bState");

// Atribuições para CCSPlayer_WeaponServices
// CCSPlayer_WeaponServices Offsets
CCSPlayer_WeaponServices.m_flNextAttack = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_flNextAttack");
CCSPlayer_WeaponServices.m_bIsLookingAtWeapon = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon");
CCSPlayer_WeaponServices.m_bIsHoldingLookAtWeapon = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon");
CCSPlayer_WeaponServices.m_nOldShootPositionHistoryCount = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nOldShootPositionHistoryCount");
CCSPlayer_WeaponServices.m_nOldInputHistoryCount = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nOldInputHistoryCount");
CCSPlayer_WeaponServices.m_hSavedWeapon = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_hSavedWeapon");
CCSPlayer_WeaponServices.m_nTimeToMelee = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nTimeToMelee");
CCSPlayer_WeaponServices.m_nTimeToSecondary = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nTimeToSecondary");
CCSPlayer_WeaponServices.m_nTimeToPrimary = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nTimeToPrimary");
CCSPlayer_WeaponServices.m_nTimeToSniperRifle = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_nTimeToSniperRifle");
CCSPlayer_WeaponServices.m_bIsBeingGivenItem = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bIsBeingGivenItem");
CCSPlayer_WeaponServices.m_bIsPickingUpItemWithUse = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bIsPickingUpItemWithUse");
CCSPlayer_WeaponServices.m_bPickedUpWeapon = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bPickedUpWeapon");
CCSPlayer_WeaponServices.m_bDisableAutoDeploy = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bDisableAutoDeploy");
CCSPlayer_WeaponServices.m_bIsPickingUpGroundWeapon = findOffsetByName(j, "CCSPlayer_WeaponServices", "m_bIsPickingUpGroundWeapon");

// Atribuições para C_EnvDetailController
// C_EnvDetailController Offsets
C_EnvDetailController.m_flFadeStartDist = findOffsetByName(j, "C_EnvDetailController", "m_flFadeStartDist");
C_EnvDetailController.m_flFadeEndDist = findOffsetByName(j, "C_EnvDetailController", "m_flFadeEndDist");

// Atribuições para C_BaseEntity
// C_BaseEntity Offsets
C_BaseEntity.m_CBodyComponent = findOffsetByName(j, "C_BaseEntity", "m_CBodyComponent");
C_BaseEntity.m_NetworkTransmitComponent = findOffsetByName(j, "C_BaseEntity", "m_NetworkTransmitComponent");
C_BaseEntity.m_nLastThinkTick = findOffsetByName(j, "C_BaseEntity", "m_nLastThinkTick");
C_BaseEntity.m_pGameSceneNode = findOffsetByName(j, "C_BaseEntity", "m_pGameSceneNode");
C_BaseEntity.m_pRenderComponent = findOffsetByName(j, "C_BaseEntity", "m_pRenderComponent");
C_BaseEntity.m_pCollision = findOffsetByName(j, "C_BaseEntity", "m_pCollision");
C_BaseEntity.m_iMaxHealth = findOffsetByName(j, "C_BaseEntity", "m_iMaxHealth");
C_BaseEntity.m_iHealth = findOffsetByName(j, "C_BaseEntity", "m_iHealth");
C_BaseEntity.m_lifeState = findOffsetByName(j, "C_BaseEntity", "m_lifeState");
C_BaseEntity.m_bTakesDamage = findOffsetByName(j, "C_BaseEntity", "m_bTakesDamage");
C_BaseEntity.m_nTakeDamageFlags = findOffsetByName(j, "C_BaseEntity", "m_nTakeDamageFlags");
C_BaseEntity.m_nPlatformType = findOffsetByName(j, "C_BaseEntity", "m_nPlatformType");
C_BaseEntity.m_ubInterpolationFrame = findOffsetByName(j, "C_BaseEntity", "m_ubInterpolationFrame");
C_BaseEntity.m_hSceneObjectController = findOffsetByName(j, "C_BaseEntity", "m_hSceneObjectController");
C_BaseEntity.m_nNoInterpolationTick = findOffsetByName(j, "C_BaseEntity", "m_nNoInterpolationTick");
C_BaseEntity.m_nVisibilityNoInterpolationTick = findOffsetByName(j, "C_BaseEntity", "m_nVisibilityNoInterpolationTick");
C_BaseEntity.m_flProxyRandomValue = findOffsetByName(j, "C_BaseEntity", "m_flProxyRandomValue");
C_BaseEntity.m_iEFlags = findOffsetByName(j, "C_BaseEntity", "m_iEFlags");
C_BaseEntity.m_nWaterType = findOffsetByName(j, "C_BaseEntity", "m_nWaterType");
C_BaseEntity.m_bInterpolateEvenWithNoModel = findOffsetByName(j, "C_BaseEntity", "m_bInterpolateEvenWithNoModel");
C_BaseEntity.m_bPredictionEligible = findOffsetByName(j, "C_BaseEntity", "m_bPredictionEligible");
C_BaseEntity.m_bApplyLayerMatchIDToModel = findOffsetByName(j, "C_BaseEntity", "m_bApplyLayerMatchIDToModel");
C_BaseEntity.m_tokLayerMatchID = findOffsetByName(j, "C_BaseEntity", "m_tokLayerMatchID");
C_BaseEntity.m_nSubclassID = findOffsetByName(j, "C_BaseEntity", "m_nSubclassID");
C_BaseEntity.m_nSimulationTick = findOffsetByName(j, "C_BaseEntity", "m_nSimulationTick");
C_BaseEntity.m_iCurrentThinkContext = findOffsetByName(j, "C_BaseEntity", "m_iCurrentThinkContext");
C_BaseEntity.m_aThinkFunctions = findOffsetByName(j, "C_BaseEntity", "m_aThinkFunctions");
C_BaseEntity.m_bDisabledContextThinks = findOffsetByName(j, "C_BaseEntity", "m_bDisabledContextThinks");
C_BaseEntity.m_flAnimTime = findOffsetByName(j, "C_BaseEntity", "m_flAnimTime");
C_BaseEntity.m_flSimulationTime = findOffsetByName(j, "C_BaseEntity", "m_flSimulationTime");
C_BaseEntity.m_nSceneObjectOverrideFlags = findOffsetByName(j, "C_BaseEntity", "m_nSceneObjectOverrideFlags");
C_BaseEntity.m_bHasSuccessfullyInterpolated = findOffsetByName(j, "C_BaseEntity", "m_bHasSuccessfullyInterpolated");
C_BaseEntity.m_bHasAddedVarsToInterpolation = findOffsetByName(j, "C_BaseEntity", "m_bHasAddedVarsToInterpolation");
C_BaseEntity.m_bRenderEvenWhenNotSuccessfullyInterpolated = findOffsetByName(j, "C_BaseEntity", "m_bRenderEvenWhenNotSuccessfullyInterpolated");
C_BaseEntity.m_nInterpolationLatchDirtyFlags = findOffsetByName(j, "C_BaseEntity", "m_nInterpolationLatchDirtyFlags");
C_BaseEntity.m_ListEntry = findOffsetByName(j, "C_BaseEntity", "m_ListEntry");
C_BaseEntity.m_flCreateTime = findOffsetByName(j, "C_BaseEntity", "m_flCreateTime");
C_BaseEntity.m_flSpeed = findOffsetByName(j, "C_BaseEntity", "m_flSpeed");
C_BaseEntity.m_EntClientFlags = findOffsetByName(j, "C_BaseEntity", "m_EntClientFlags");
C_BaseEntity.m_bClientSideRagdoll = findOffsetByName(j, "C_BaseEntity", "m_bClientSideRagdoll");
C_BaseEntity.m_iTeamNum = findOffsetByName(j, "C_BaseEntity", "m_iTeamNum");
C_BaseEntity.m_spawnflags = findOffsetByName(j, "C_BaseEntity", "m_spawnflags");
C_BaseEntity.m_nNextThinkTick = findOffsetByName(j, "C_BaseEntity", "m_nNextThinkTick");
C_BaseEntity.m_fFlags = findOffsetByName(j, "C_BaseEntity", "m_fFlags");
C_BaseEntity.m_vecAbsVelocity = findOffsetByName(j, "C_BaseEntity", "m_vecAbsVelocity");
C_BaseEntity.m_vecVelocity = findOffsetByName(j, "C_BaseEntity", "m_vecVelocity");
C_BaseEntity.m_vecBaseVelocity = findOffsetByName(j, "C_BaseEntity", "m_vecBaseVelocity");
C_BaseEntity.m_hEffectEntity = findOffsetByName(j, "C_BaseEntity", "m_hEffectEntity");
C_BaseEntity.m_hOwnerEntity = findOffsetByName(j, "C_BaseEntity", "m_hOwnerEntity");
C_BaseEntity.m_MoveCollide = findOffsetByName(j, "C_BaseEntity", "m_MoveCollide");
C_BaseEntity.m_MoveType = findOffsetByName(j, "C_BaseEntity", "m_MoveType");
C_BaseEntity.m_nActualMoveType = findOffsetByName(j, "C_BaseEntity", "m_nActualMoveType");
C_BaseEntity.m_flWaterLevel = findOffsetByName(j, "C_BaseEntity", "m_flWaterLevel");
C_BaseEntity.m_fEffects = findOffsetByName(j, "C_BaseEntity", "m_fEffects");
C_BaseEntity.m_hGroundEntity = findOffsetByName(j, "C_BaseEntity", "m_hGroundEntity");
C_BaseEntity.m_nGroundBodyIndex = findOffsetByName(j, "C_BaseEntity", "m_nGroundBodyIndex");
C_BaseEntity.m_flFriction = findOffsetByName(j, "C_BaseEntity", "m_flFriction");
C_BaseEntity.m_flElasticity = findOffsetByName(j, "C_BaseEntity", "m_flElasticity");
C_BaseEntity.m_flGravityScale = findOffsetByName(j, "C_BaseEntity", "m_flGravityScale");
C_BaseEntity.m_flTimeScale = findOffsetByName(j, "C_BaseEntity", "m_flTimeScale");
C_BaseEntity.m_bAnimatedEveryTick = findOffsetByName(j, "C_BaseEntity", "m_bAnimatedEveryTick");
C_BaseEntity.m_flNavIgnoreUntilTime = findOffsetByName(j, "C_BaseEntity", "m_flNavIgnoreUntilTime");
C_BaseEntity.m_hThink = findOffsetByName(j, "C_BaseEntity", "m_hThink");
C_BaseEntity.m_fBBoxVisFlags = findOffsetByName(j, "C_BaseEntity", "m_fBBoxVisFlags");
C_BaseEntity.m_bPredictable = findOffsetByName(j, "C_BaseEntity", "m_bPredictable");
C_BaseEntity.m_bRenderWithViewModels = findOffsetByName(j, "C_BaseEntity", "m_bRenderWithViewModels");
C_BaseEntity.m_nSplitUserPlayerPredictionSlot = findOffsetByName(j, "C_BaseEntity", "m_nSplitUserPlayerPredictionSlot");
C_BaseEntity.m_nFirstPredictableCommand = findOffsetByName(j, "C_BaseEntity", "m_nFirstPredictableCommand");
C_BaseEntity.m_nLastPredictableCommand = findOffsetByName(j, "C_BaseEntity", "m_nLastPredictableCommand");
C_BaseEntity.m_hOldMoveParent = findOffsetByName(j, "C_BaseEntity", "m_hOldMoveParent");
C_BaseEntity.m_Particles = findOffsetByName(j, "C_BaseEntity", "m_Particles");
C_BaseEntity.m_vecPredictedScriptFloats = findOffsetByName(j, "C_BaseEntity", "m_vecPredictedScriptFloats");
C_BaseEntity.m_vecPredictedScriptFloatIDs = findOffsetByName(j, "C_BaseEntity", "m_vecPredictedScriptFloatIDs");
C_BaseEntity.m_nNextScriptVarRecordID = findOffsetByName(j, "C_BaseEntity", "m_nNextScriptVarRecordID");
C_BaseEntity.m_vecAngVelocity = findOffsetByName(j, "C_BaseEntity", "m_vecAngVelocity");
C_BaseEntity.m_DataChangeEventRef = findOffsetByName(j, "C_BaseEntity", "m_DataChangeEventRef");
C_BaseEntity.m_dependencies = findOffsetByName(j, "C_BaseEntity", "m_dependencies");
C_BaseEntity.m_nCreationTick = findOffsetByName(j, "C_BaseEntity", "m_nCreationTick");
C_BaseEntity.m_bAnimTimeChanged = findOffsetByName(j, "C_BaseEntity", "m_bAnimTimeChanged");
C_BaseEntity.m_bSimulationTimeChanged = findOffsetByName(j, "C_BaseEntity", "m_bSimulationTimeChanged");
C_BaseEntity.m_sUniqueHammerID = findOffsetByName(j, "C_BaseEntity", "m_sUniqueHammerID");
C_BaseEntity.m_nBloodType = findOffsetByName(j, "C_BaseEntity", "m_nBloodType");

// Atribuições para CEntityIdentity
// CEntityIdentity Offsets
CEntityIdentity.m_nameStringableIndex = findOffsetByName(j, "CEntityIdentity", "m_nameStringableIndex");
CEntityIdentity.m_name = findOffsetByName(j, "CEntityIdentity", "m_name");
CEntityIdentity.m_designerName = findOffsetByName(j, "CEntityIdentity", "m_designerName");
CEntityIdentity.m_flags = findOffsetByName(j, "CEntityIdentity", "m_flags");
CEntityIdentity.m_worldGroupId = findOffsetByName(j, "CEntityIdentity", "m_worldGroupId");
CEntityIdentity.m_fDataObjectTypes = findOffsetByName(j, "CEntityIdentity", "m_fDataObjectTypes");
CEntityIdentity.m_PathIndex = findOffsetByName(j, "CEntityIdentity", "m_PathIndex");
CEntityIdentity.m_pPrev = findOffsetByName(j, "CEntityIdentity", "m_pPrev");
CEntityIdentity.m_pNext = findOffsetByName(j, "CEntityIdentity", "m_pNext");
CEntityIdentity.m_pPrevByClass = findOffsetByName(j, "CEntityIdentity", "m_pPrevByClass");
CEntityIdentity.m_pNextByClass = findOffsetByName(j, "CEntityIdentity", "m_pNextByClass");

// Atribuições para C_StattrakModule
// C_StattrakModule Offsets
C_StattrakModule.m_bKnife = findOffsetByName(j, "C_StattrakModule", "m_bKnife");

// Atribuições para C_PhysicsProp
// C_PhysicsProp Offsets
C_PhysicsProp.m_bAwake = findOffsetByName(j, "C_PhysicsProp", "m_bAwake");

// Atribuições para C_BreakableProp
// C_BreakableProp Offsets
C_BreakableProp.m_CPropDataComponent = findOffsetByName(j, "C_BreakableProp", "m_CPropDataComponent");
C_BreakableProp.m_OnBreak = findOffsetByName(j, "C_BreakableProp", "m_OnBreak");
C_BreakableProp.m_OnHealthChanged = findOffsetByName(j, "C_BreakableProp", "m_OnHealthChanged");
C_BreakableProp.m_OnTakeDamage = findOffsetByName(j, "C_BreakableProp", "m_OnTakeDamage");
C_BreakableProp.m_impactEnergyScale = findOffsetByName(j, "C_BreakableProp", "m_impactEnergyScale");
C_BreakableProp.m_iMinHealthDmg = findOffsetByName(j, "C_BreakableProp", "m_iMinHealthDmg");
C_BreakableProp.m_flPressureDelay = findOffsetByName(j, "C_BreakableProp", "m_flPressureDelay");
C_BreakableProp.m_flDefBurstScale = findOffsetByName(j, "C_BreakableProp", "m_flDefBurstScale");
C_BreakableProp.m_vDefBurstOffset = findOffsetByName(j, "C_BreakableProp", "m_vDefBurstOffset");
C_BreakableProp.m_hBreaker = findOffsetByName(j, "C_BreakableProp", "m_hBreaker");
C_BreakableProp.m_PerformanceMode = findOffsetByName(j, "C_BreakableProp", "m_PerformanceMode");
C_BreakableProp.m_flPreventDamageBeforeTime = findOffsetByName(j, "C_BreakableProp", "m_flPreventDamageBeforeTime");
C_BreakableProp.m_BreakableContentsType = findOffsetByName(j, "C_BreakableProp", "m_BreakableContentsType");
C_BreakableProp.m_strBreakableContentsPropGroupOverride = findOffsetByName(j, "C_BreakableProp", "m_strBreakableContentsPropGroupOverride");
C_BreakableProp.m_strBreakableContentsParticleOverride = findOffsetByName(j, "C_BreakableProp", "m_strBreakableContentsParticleOverride");
C_BreakableProp.m_bHasBreakPiecesOrCommands = findOffsetByName(j, "C_BreakableProp", "m_bHasBreakPiecesOrCommands");
C_BreakableProp.m_explodeDamage = findOffsetByName(j, "C_BreakableProp", "m_explodeDamage");
C_BreakableProp.m_explodeRadius = findOffsetByName(j, "C_BreakableProp", "m_explodeRadius");
C_BreakableProp.m_explosionDelay = findOffsetByName(j, "C_BreakableProp", "m_explosionDelay");
C_BreakableProp.m_explosionBuildupSound = findOffsetByName(j, "C_BreakableProp", "m_explosionBuildupSound");
C_BreakableProp.m_explosionCustomEffect = findOffsetByName(j, "C_BreakableProp", "m_explosionCustomEffect");
C_BreakableProp.m_explosionCustomSound = findOffsetByName(j, "C_BreakableProp", "m_explosionCustomSound");
C_BreakableProp.m_explosionModifier = findOffsetByName(j, "C_BreakableProp", "m_explosionModifier");
C_BreakableProp.m_hPhysicsAttacker = findOffsetByName(j, "C_BreakableProp", "m_hPhysicsAttacker");
C_BreakableProp.m_flLastPhysicsInfluenceTime = findOffsetByName(j, "C_BreakableProp", "m_flLastPhysicsInfluenceTime");
C_BreakableProp.m_flDefaultFadeScale = findOffsetByName(j, "C_BreakableProp", "m_flDefaultFadeScale");
C_BreakableProp.m_hLastAttacker = findOffsetByName(j, "C_BreakableProp", "m_hLastAttacker");
C_BreakableProp.m_hFlareEnt = findOffsetByName(j, "C_BreakableProp", "m_hFlareEnt");
C_BreakableProp.m_noGhostCollision = findOffsetByName(j, "C_BreakableProp", "m_noGhostCollision");

// Atribuições para C_Beam
// C_Beam Offsets
C_Beam.m_flFrameRate = findOffsetByName(j, "C_Beam", "m_flFrameRate");
C_Beam.m_flHDRColorScale = findOffsetByName(j, "C_Beam", "m_flHDRColorScale");
C_Beam.m_flFireTime = findOffsetByName(j, "C_Beam", "m_flFireTime");
C_Beam.m_flDamage = findOffsetByName(j, "C_Beam", "m_flDamage");
C_Beam.m_nNumBeamEnts = findOffsetByName(j, "C_Beam", "m_nNumBeamEnts");
C_Beam.m_queryHandleHalo = findOffsetByName(j, "C_Beam", "m_queryHandleHalo");
C_Beam.m_hBaseMaterial = findOffsetByName(j, "C_Beam", "m_hBaseMaterial");
C_Beam.m_nHaloIndex = findOffsetByName(j, "C_Beam", "m_nHaloIndex");
C_Beam.m_nBeamType = findOffsetByName(j, "C_Beam", "m_nBeamType");
C_Beam.m_nBeamFlags = findOffsetByName(j, "C_Beam", "m_nBeamFlags");
C_Beam.m_hAttachEntity = findOffsetByName(j, "C_Beam", "m_hAttachEntity");
C_Beam.m_nAttachIndex = findOffsetByName(j, "C_Beam", "m_nAttachIndex");
C_Beam.m_fWidth = findOffsetByName(j, "C_Beam", "m_fWidth");
C_Beam.m_fEndWidth = findOffsetByName(j, "C_Beam", "m_fEndWidth");
C_Beam.m_fFadeLength = findOffsetByName(j, "C_Beam", "m_fFadeLength");
C_Beam.m_fHaloScale = findOffsetByName(j, "C_Beam", "m_fHaloScale");
C_Beam.m_fAmplitude = findOffsetByName(j, "C_Beam", "m_fAmplitude");
C_Beam.m_fStartFrame = findOffsetByName(j, "C_Beam", "m_fStartFrame");
C_Beam.m_fSpeed = findOffsetByName(j, "C_Beam", "m_fSpeed");
C_Beam.m_flFrame = findOffsetByName(j, "C_Beam", "m_flFrame");
C_Beam.m_nClipStyle = findOffsetByName(j, "C_Beam", "m_nClipStyle");
C_Beam.m_bTurnedOff = findOffsetByName(j, "C_Beam", "m_bTurnedOff");
C_Beam.m_vecEndPos = findOffsetByName(j, "C_Beam", "m_vecEndPos");
C_Beam.m_hEndEntity = findOffsetByName(j, "C_Beam", "m_hEndEntity");

// Atribuições para C_CSGO_TeamPreviewCharacterPosition
// C_CSGO_TeamPreviewCharacterPosition Offsets
C_CSGO_TeamPreviewCharacterPosition.m_nVariant = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_nVariant");
C_CSGO_TeamPreviewCharacterPosition.m_nRandom = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_nRandom");
C_CSGO_TeamPreviewCharacterPosition.m_nOrdinal = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_nOrdinal");
C_CSGO_TeamPreviewCharacterPosition.m_sWeaponName = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_sWeaponName");
C_CSGO_TeamPreviewCharacterPosition.m_xuid = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_xuid");
C_CSGO_TeamPreviewCharacterPosition.m_agentItem = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_agentItem");
C_CSGO_TeamPreviewCharacterPosition.m_glovesItem = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_glovesItem");
C_CSGO_TeamPreviewCharacterPosition.m_weaponItem = findOffsetByName(j, "C_CSGO_TeamPreviewCharacterPosition", "m_weaponItem");

// Atribuições para C_EnvScreenOverlay
// C_EnvScreenOverlay Offsets
C_EnvScreenOverlay.m_iszOverlayNames = findOffsetByName(j, "C_EnvScreenOverlay", "m_iszOverlayNames");
C_EnvScreenOverlay.m_flOverlayTimes = findOffsetByName(j, "C_EnvScreenOverlay", "m_flOverlayTimes");
C_EnvScreenOverlay.m_flStartTime = findOffsetByName(j, "C_EnvScreenOverlay", "m_flStartTime");
C_EnvScreenOverlay.m_iDesiredOverlay = findOffsetByName(j, "C_EnvScreenOverlay", "m_iDesiredOverlay");
C_EnvScreenOverlay.m_bIsActive = findOffsetByName(j, "C_EnvScreenOverlay", "m_bIsActive");
C_EnvScreenOverlay.m_bWasActive = findOffsetByName(j, "C_EnvScreenOverlay", "m_bWasActive");
C_EnvScreenOverlay.m_iCachedDesiredOverlay = findOffsetByName(j, "C_EnvScreenOverlay", "m_iCachedDesiredOverlay");
C_EnvScreenOverlay.m_iCurrentOverlay = findOffsetByName(j, "C_EnvScreenOverlay", "m_iCurrentOverlay");
C_EnvScreenOverlay.m_flCurrentOverlayTime = findOffsetByName(j, "C_EnvScreenOverlay", "m_flCurrentOverlayTime");

// Atribuições para CCSWeaponBaseVData
// CCSWeaponBaseVData Offsets
CCSWeaponBaseVData.m_WeaponType = findOffsetByName(j, "CCSWeaponBaseVData", "m_WeaponType");
CCSWeaponBaseVData.m_WeaponCategory = findOffsetByName(j, "CCSWeaponBaseVData", "m_WeaponCategory");
CCSWeaponBaseVData.m_szViewModel = findOffsetByName(j, "CCSWeaponBaseVData", "m_szViewModel");
CCSWeaponBaseVData.m_szPlayerModel = findOffsetByName(j, "CCSWeaponBaseVData", "m_szPlayerModel");
CCSWeaponBaseVData.m_szWorldDroppedModel = findOffsetByName(j, "CCSWeaponBaseVData", "m_szWorldDroppedModel");
CCSWeaponBaseVData.m_szAimsightLensMaskModel = findOffsetByName(j, "CCSWeaponBaseVData", "m_szAimsightLensMaskModel");
CCSWeaponBaseVData.m_szMagazineModel = findOffsetByName(j, "CCSWeaponBaseVData", "m_szMagazineModel");
CCSWeaponBaseVData.m_szHeatEffect = findOffsetByName(j, "CCSWeaponBaseVData", "m_szHeatEffect");
CCSWeaponBaseVData.m_szEjectBrassEffect = findOffsetByName(j, "CCSWeaponBaseVData", "m_szEjectBrassEffect");
CCSWeaponBaseVData.m_szMuzzleFlashParticleAlt = findOffsetByName(j, "CCSWeaponBaseVData", "m_szMuzzleFlashParticleAlt");
CCSWeaponBaseVData.m_szMuzzleFlashThirdPersonParticle = findOffsetByName(j, "CCSWeaponBaseVData", "m_szMuzzleFlashThirdPersonParticle");
CCSWeaponBaseVData.m_szMuzzleFlashThirdPersonParticleAlt = findOffsetByName(j, "CCSWeaponBaseVData", "m_szMuzzleFlashThirdPersonParticleAlt");
CCSWeaponBaseVData.m_szTracerParticle = findOffsetByName(j, "CCSWeaponBaseVData", "m_szTracerParticle");
CCSWeaponBaseVData.m_GearSlot = findOffsetByName(j, "CCSWeaponBaseVData", "m_GearSlot");
CCSWeaponBaseVData.m_GearSlotPosition = findOffsetByName(j, "CCSWeaponBaseVData", "m_GearSlotPosition");
CCSWeaponBaseVData.m_DefaultLoadoutSlot = findOffsetByName(j, "CCSWeaponBaseVData", "m_DefaultLoadoutSlot");
CCSWeaponBaseVData.m_sWrongTeamMsg = findOffsetByName(j, "CCSWeaponBaseVData", "m_sWrongTeamMsg");
CCSWeaponBaseVData.m_nPrice = findOffsetByName(j, "CCSWeaponBaseVData", "m_nPrice");
CCSWeaponBaseVData.m_nKillAward = findOffsetByName(j, "CCSWeaponBaseVData", "m_nKillAward");
CCSWeaponBaseVData.m_nPrimaryReserveAmmoMax = findOffsetByName(j, "CCSWeaponBaseVData", "m_nPrimaryReserveAmmoMax");
CCSWeaponBaseVData.m_nSecondaryReserveAmmoMax = findOffsetByName(j, "CCSWeaponBaseVData", "m_nSecondaryReserveAmmoMax");
CCSWeaponBaseVData.m_bMeleeWeapon = findOffsetByName(j, "CCSWeaponBaseVData", "m_bMeleeWeapon");
CCSWeaponBaseVData.m_bHasBurstMode = findOffsetByName(j, "CCSWeaponBaseVData", "m_bHasBurstMode");
CCSWeaponBaseVData.m_bIsRevolver = findOffsetByName(j, "CCSWeaponBaseVData", "m_bIsRevolver");
CCSWeaponBaseVData.m_bCannotShootUnderwater = findOffsetByName(j, "CCSWeaponBaseVData", "m_bCannotShootUnderwater");
CCSWeaponBaseVData.m_szName = findOffsetByName(j, "CCSWeaponBaseVData", "m_szName");
CCSWeaponBaseVData.m_szAnimExtension = findOffsetByName(j, "CCSWeaponBaseVData", "m_szAnimExtension");
CCSWeaponBaseVData.m_eSilencerType = findOffsetByName(j, "CCSWeaponBaseVData", "m_eSilencerType");
CCSWeaponBaseVData.m_nCrosshairMinDistance = findOffsetByName(j, "CCSWeaponBaseVData", "m_nCrosshairMinDistance");
CCSWeaponBaseVData.m_nCrosshairDeltaDistance = findOffsetByName(j, "CCSWeaponBaseVData", "m_nCrosshairDeltaDistance");
CCSWeaponBaseVData.m_bIsFullAuto = findOffsetByName(j, "CCSWeaponBaseVData", "m_bIsFullAuto");
CCSWeaponBaseVData.m_nNumBullets = findOffsetByName(j, "CCSWeaponBaseVData", "m_nNumBullets");
CCSWeaponBaseVData.m_flCycleTime = findOffsetByName(j, "CCSWeaponBaseVData", "m_flCycleTime");
CCSWeaponBaseVData.m_flMaxSpeed = findOffsetByName(j, "CCSWeaponBaseVData", "m_flMaxSpeed");
CCSWeaponBaseVData.m_flSpread = findOffsetByName(j, "CCSWeaponBaseVData", "m_flSpread");
CCSWeaponBaseVData.m_flInaccuracyCrouch = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyCrouch");
CCSWeaponBaseVData.m_flInaccuracyStand = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyStand");
CCSWeaponBaseVData.m_flInaccuracyJump = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyJump");
CCSWeaponBaseVData.m_flInaccuracyLand = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyLand");
CCSWeaponBaseVData.m_flInaccuracyLadder = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyLadder");
CCSWeaponBaseVData.m_flInaccuracyFire = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyFire");
CCSWeaponBaseVData.m_flInaccuracyMove = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyMove");
CCSWeaponBaseVData.m_flRecoilAngle = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoilAngle");
CCSWeaponBaseVData.m_flRecoilAngleVariance = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoilAngleVariance");
CCSWeaponBaseVData.m_flRecoilMagnitude = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoilMagnitude");
CCSWeaponBaseVData.m_flRecoilMagnitudeVariance = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoilMagnitudeVariance");
CCSWeaponBaseVData.m_nTracerFrequency = findOffsetByName(j, "CCSWeaponBaseVData", "m_nTracerFrequency");
CCSWeaponBaseVData.m_flInaccuracyJumpInitial = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyJumpInitial");
CCSWeaponBaseVData.m_flInaccuracyJumpApex = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyJumpApex");
CCSWeaponBaseVData.m_flInaccuracyReload = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyReload");
CCSWeaponBaseVData.m_nRecoilSeed = findOffsetByName(j, "CCSWeaponBaseVData", "m_nRecoilSeed");
CCSWeaponBaseVData.m_nSpreadSeed = findOffsetByName(j, "CCSWeaponBaseVData", "m_nSpreadSeed");
CCSWeaponBaseVData.m_flTimeToIdleAfterFire = findOffsetByName(j, "CCSWeaponBaseVData", "m_flTimeToIdleAfterFire");
CCSWeaponBaseVData.m_flIdleInterval = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIdleInterval");
CCSWeaponBaseVData.m_flAttackMovespeedFactor = findOffsetByName(j, "CCSWeaponBaseVData", "m_flAttackMovespeedFactor");
CCSWeaponBaseVData.m_flHeatPerShot = findOffsetByName(j, "CCSWeaponBaseVData", "m_flHeatPerShot");
CCSWeaponBaseVData.m_flInaccuracyPitchShift = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyPitchShift");
CCSWeaponBaseVData.m_flInaccuracyAltSoundThreshold = findOffsetByName(j, "CCSWeaponBaseVData", "m_flInaccuracyAltSoundThreshold");
CCSWeaponBaseVData.m_flBotAudibleRange = findOffsetByName(j, "CCSWeaponBaseVData", "m_flBotAudibleRange");
CCSWeaponBaseVData.m_szUseRadioSubtitle = findOffsetByName(j, "CCSWeaponBaseVData", "m_szUseRadioSubtitle");
CCSWeaponBaseVData.m_bUnzoomsAfterShot = findOffsetByName(j, "CCSWeaponBaseVData", "m_bUnzoomsAfterShot");
CCSWeaponBaseVData.m_bHideViewModelWhenZoomed = findOffsetByName(j, "CCSWeaponBaseVData", "m_bHideViewModelWhenZoomed");
CCSWeaponBaseVData.m_nZoomLevels = findOffsetByName(j, "CCSWeaponBaseVData", "m_nZoomLevels");
CCSWeaponBaseVData.m_nZoomFOV1 = findOffsetByName(j, "CCSWeaponBaseVData", "m_nZoomFOV1");
CCSWeaponBaseVData.m_nZoomFOV2 = findOffsetByName(j, "CCSWeaponBaseVData", "m_nZoomFOV2");
CCSWeaponBaseVData.m_flZoomTime0 = findOffsetByName(j, "CCSWeaponBaseVData", "m_flZoomTime0");
CCSWeaponBaseVData.m_flZoomTime1 = findOffsetByName(j, "CCSWeaponBaseVData", "m_flZoomTime1");
CCSWeaponBaseVData.m_flZoomTime2 = findOffsetByName(j, "CCSWeaponBaseVData", "m_flZoomTime2");
CCSWeaponBaseVData.m_flIronSightPullUpSpeed = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIronSightPullUpSpeed");
CCSWeaponBaseVData.m_flIronSightPutDownSpeed = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIronSightPutDownSpeed");
CCSWeaponBaseVData.m_flIronSightFOV = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIronSightFOV");
CCSWeaponBaseVData.m_flIronSightPivotForward = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIronSightPivotForward");
CCSWeaponBaseVData.m_flIronSightLooseness = findOffsetByName(j, "CCSWeaponBaseVData", "m_flIronSightLooseness");
CCSWeaponBaseVData.m_angPivotAngle = findOffsetByName(j, "CCSWeaponBaseVData", "m_angPivotAngle");
CCSWeaponBaseVData.m_vecIronSightEyePos = findOffsetByName(j, "CCSWeaponBaseVData", "m_vecIronSightEyePos");
CCSWeaponBaseVData.m_nDamage = findOffsetByName(j, "CCSWeaponBaseVData", "m_nDamage");
CCSWeaponBaseVData.m_flHeadshotMultiplier = findOffsetByName(j, "CCSWeaponBaseVData", "m_flHeadshotMultiplier");
CCSWeaponBaseVData.m_flArmorRatio = findOffsetByName(j, "CCSWeaponBaseVData", "m_flArmorRatio");
CCSWeaponBaseVData.m_flPenetration = findOffsetByName(j, "CCSWeaponBaseVData", "m_flPenetration");
CCSWeaponBaseVData.m_flRange = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRange");
CCSWeaponBaseVData.m_flRangeModifier = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRangeModifier");
CCSWeaponBaseVData.m_flFlinchVelocityModifierLarge = findOffsetByName(j, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierLarge");
CCSWeaponBaseVData.m_flFlinchVelocityModifierSmall = findOffsetByName(j, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierSmall");
CCSWeaponBaseVData.m_flRecoveryTimeCrouch = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouch");
CCSWeaponBaseVData.m_flRecoveryTimeStand = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoveryTimeStand");
CCSWeaponBaseVData.m_flRecoveryTimeCrouchFinal = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouchFinal");
CCSWeaponBaseVData.m_flRecoveryTimeStandFinal = findOffsetByName(j, "CCSWeaponBaseVData", "m_flRecoveryTimeStandFinal");
CCSWeaponBaseVData.m_nRecoveryTransitionStartBullet = findOffsetByName(j, "CCSWeaponBaseVData", "m_nRecoveryTransitionStartBullet");
CCSWeaponBaseVData.m_nRecoveryTransitionEndBullet = findOffsetByName(j, "CCSWeaponBaseVData", "m_nRecoveryTransitionEndBullet");
CCSWeaponBaseVData.m_flThrowVelocity = findOffsetByName(j, "CCSWeaponBaseVData", "m_flThrowVelocity");
CCSWeaponBaseVData.m_vSmokeColor = findOffsetByName(j, "CCSWeaponBaseVData", "m_vSmokeColor");
CCSWeaponBaseVData.m_szAnimClass = findOffsetByName(j, "CCSWeaponBaseVData", "m_szAnimClass");

// Atribuições para C_PointWorldText
// C_PointWorldText Offsets
C_PointWorldText.m_bForceRecreateNextUpdate = findOffsetByName(j, "C_PointWorldText", "m_bForceRecreateNextUpdate");
C_PointWorldText.m_messageText = findOffsetByName(j, "C_PointWorldText", "m_messageText");
C_PointWorldText.m_FontName = findOffsetByName(j, "C_PointWorldText", "m_FontName");
C_PointWorldText.m_BackgroundMaterialName = findOffsetByName(j, "C_PointWorldText", "m_BackgroundMaterialName");
C_PointWorldText.m_bEnabled = findOffsetByName(j, "C_PointWorldText", "m_bEnabled");
C_PointWorldText.m_bFullbright = findOffsetByName(j, "C_PointWorldText", "m_bFullbright");
C_PointWorldText.m_flWorldUnitsPerPx = findOffsetByName(j, "C_PointWorldText", "m_flWorldUnitsPerPx");
C_PointWorldText.m_flFontSize = findOffsetByName(j, "C_PointWorldText", "m_flFontSize");
C_PointWorldText.m_flDepthOffset = findOffsetByName(j, "C_PointWorldText", "m_flDepthOffset");
C_PointWorldText.m_bDrawBackground = findOffsetByName(j, "C_PointWorldText", "m_bDrawBackground");
C_PointWorldText.m_flBackgroundBorderWidth = findOffsetByName(j, "C_PointWorldText", "m_flBackgroundBorderWidth");
C_PointWorldText.m_flBackgroundBorderHeight = findOffsetByName(j, "C_PointWorldText", "m_flBackgroundBorderHeight");
C_PointWorldText.m_flBackgroundWorldToUV = findOffsetByName(j, "C_PointWorldText", "m_flBackgroundWorldToUV");
C_PointWorldText.m_Color = findOffsetByName(j, "C_PointWorldText", "m_Color");
C_PointWorldText.m_nJustifyHorizontal = findOffsetByName(j, "C_PointWorldText", "m_nJustifyHorizontal");
C_PointWorldText.m_nJustifyVertical = findOffsetByName(j, "C_PointWorldText", "m_nJustifyVertical");
C_PointWorldText.m_nReorientMode = findOffsetByName(j, "C_PointWorldText", "m_nReorientMode");

// Atribuições para CCSPlayerController
// CCSPlayerController Offsets
CCSPlayerController.m_pInGameMoneyServices = findOffsetByName(j, "CCSPlayerController", "m_pInGameMoneyServices");
CCSPlayerController.m_pInventoryServices = findOffsetByName(j, "CCSPlayerController", "m_pInventoryServices");
CCSPlayerController.m_pActionTrackingServices = findOffsetByName(j, "CCSPlayerController", "m_pActionTrackingServices");
CCSPlayerController.m_pDamageServices = findOffsetByName(j, "CCSPlayerController", "m_pDamageServices");
CCSPlayerController.m_iPing = findOffsetByName(j, "CCSPlayerController", "m_iPing");
CCSPlayerController.m_bHasCommunicationAbuseMute = findOffsetByName(j, "CCSPlayerController", "m_bHasCommunicationAbuseMute");
CCSPlayerController.m_szCrosshairCodes = findOffsetByName(j, "CCSPlayerController", "m_szCrosshairCodes");
CCSPlayerController.m_iPendingTeamNum = findOffsetByName(j, "CCSPlayerController", "m_iPendingTeamNum");
CCSPlayerController.m_flForceTeamTime = findOffsetByName(j, "CCSPlayerController", "m_flForceTeamTime");
CCSPlayerController.m_iCompTeammateColor = findOffsetByName(j, "CCSPlayerController", "m_iCompTeammateColor");
CCSPlayerController.m_bEverPlayedOnTeam = findOffsetByName(j, "CCSPlayerController", "m_bEverPlayedOnTeam");
CCSPlayerController.m_flPreviousForceJoinTeamTime = findOffsetByName(j, "CCSPlayerController", "m_flPreviousForceJoinTeamTime");
CCSPlayerController.m_szClan = findOffsetByName(j, "CCSPlayerController", "m_szClan");
CCSPlayerController.m_sSanitizedPlayerName = findOffsetByName(j, "CCSPlayerController", "m_sSanitizedPlayerName");
CCSPlayerController.m_iCoachingTeam = findOffsetByName(j, "CCSPlayerController", "m_iCoachingTeam");
CCSPlayerController.m_nPlayerDominated = findOffsetByName(j, "CCSPlayerController", "m_nPlayerDominated");
CCSPlayerController.m_nPlayerDominatingMe = findOffsetByName(j, "CCSPlayerController", "m_nPlayerDominatingMe");
CCSPlayerController.m_iCompetitiveRanking = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveRanking");
CCSPlayerController.m_iCompetitiveWins = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveWins");
CCSPlayerController.m_iCompetitiveRankType = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveRankType");
CCSPlayerController.m_iCompetitiveRankingPredicted_Win = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win");
CCSPlayerController.m_iCompetitiveRankingPredicted_Loss = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss");
CCSPlayerController.m_iCompetitiveRankingPredicted_Tie = findOffsetByName(j, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie");
CCSPlayerController.m_nEndMatchNextMapVote = findOffsetByName(j, "CCSPlayerController", "m_nEndMatchNextMapVote");
CCSPlayerController.m_unActiveQuestId = findOffsetByName(j, "CCSPlayerController", "m_unActiveQuestId");
CCSPlayerController.m_nQuestProgressReason = findOffsetByName(j, "CCSPlayerController", "m_nQuestProgressReason");
CCSPlayerController.m_unPlayerTvControlFlags = findOffsetByName(j, "CCSPlayerController", "m_unPlayerTvControlFlags");
CCSPlayerController.m_iDraftIndex = findOffsetByName(j, "CCSPlayerController", "m_iDraftIndex");
CCSPlayerController.m_msQueuedModeDisconnectionTimestamp = findOffsetByName(j, "CCSPlayerController", "m_msQueuedModeDisconnectionTimestamp");
CCSPlayerController.m_uiAbandonRecordedReason = findOffsetByName(j, "CCSPlayerController", "m_uiAbandonRecordedReason");
CCSPlayerController.m_bCannotBeKicked = findOffsetByName(j, "CCSPlayerController", "m_bCannotBeKicked");
CCSPlayerController.m_bEverFullyConnected = findOffsetByName(j, "CCSPlayerController", "m_bEverFullyConnected");
CCSPlayerController.m_bAbandonAllowsSurrender = findOffsetByName(j, "CCSPlayerController", "m_bAbandonAllowsSurrender");
CCSPlayerController.m_bAbandonOffersInstantSurrender = findOffsetByName(j, "CCSPlayerController", "m_bAbandonOffersInstantSurrender");
CCSPlayerController.m_bDisconnection1MinWarningPrinted = findOffsetByName(j, "CCSPlayerController", "m_bDisconnection1MinWarningPrinted");
CCSPlayerController.m_bScoreReported = findOffsetByName(j, "CCSPlayerController", "m_bScoreReported");
CCSPlayerController.m_nDisconnectionTick = findOffsetByName(j, "CCSPlayerController", "m_nDisconnectionTick");
CCSPlayerController.m_bControllingBot = findOffsetByName(j, "CCSPlayerController", "m_bControllingBot");
CCSPlayerController.m_bHasControlledBotThisRound = findOffsetByName(j, "CCSPlayerController", "m_bHasControlledBotThisRound");
CCSPlayerController.m_bHasBeenControlledByPlayerThisRound = findOffsetByName(j, "CCSPlayerController", "m_bHasBeenControlledByPlayerThisRound");
CCSPlayerController.m_nBotsControlledThisRound = findOffsetByName(j, "CCSPlayerController", "m_nBotsControlledThisRound");
CCSPlayerController.m_bCanControlObservedBot = findOffsetByName(j, "CCSPlayerController", "m_bCanControlObservedBot");
CCSPlayerController.m_hPlayerPawn = findOffsetByName(j, "CCSPlayerController", "m_hPlayerPawn");
CCSPlayerController.m_hObserverPawn = findOffsetByName(j, "CCSPlayerController", "m_hObserverPawn");
CCSPlayerController.m_bPawnIsAlive = findOffsetByName(j, "CCSPlayerController", "m_bPawnIsAlive");
CCSPlayerController.m_iPawnHealth = findOffsetByName(j, "CCSPlayerController", "m_iPawnHealth");
CCSPlayerController.m_iPawnArmor = findOffsetByName(j, "CCSPlayerController", "m_iPawnArmor");
CCSPlayerController.m_bPawnHasDefuser = findOffsetByName(j, "CCSPlayerController", "m_bPawnHasDefuser");
CCSPlayerController.m_bPawnHasHelmet = findOffsetByName(j, "CCSPlayerController", "m_bPawnHasHelmet");
CCSPlayerController.m_nPawnCharacterDefIndex = findOffsetByName(j, "CCSPlayerController", "m_nPawnCharacterDefIndex");
CCSPlayerController.m_iPawnLifetimeStart = findOffsetByName(j, "CCSPlayerController", "m_iPawnLifetimeStart");
CCSPlayerController.m_iPawnLifetimeEnd = findOffsetByName(j, "CCSPlayerController", "m_iPawnLifetimeEnd");
CCSPlayerController.m_iPawnBotDifficulty = findOffsetByName(j, "CCSPlayerController", "m_iPawnBotDifficulty");
CCSPlayerController.m_hOriginalControllerOfCurrentPawn = findOffsetByName(j, "CCSPlayerController", "m_hOriginalControllerOfCurrentPawn");
CCSPlayerController.m_iScore = findOffsetByName(j, "CCSPlayerController", "m_iScore");
CCSPlayerController.m_recentKillQueue = findOffsetByName(j, "CCSPlayerController", "m_recentKillQueue");
CCSPlayerController.m_nFirstKill = findOffsetByName(j, "CCSPlayerController", "m_nFirstKill");
CCSPlayerController.m_nKillCount = findOffsetByName(j, "CCSPlayerController", "m_nKillCount");
CCSPlayerController.m_bMvpNoMusic = findOffsetByName(j, "CCSPlayerController", "m_bMvpNoMusic");
CCSPlayerController.m_eMvpReason = findOffsetByName(j, "CCSPlayerController", "m_eMvpReason");
CCSPlayerController.m_iMusicKitID = findOffsetByName(j, "CCSPlayerController", "m_iMusicKitID");
CCSPlayerController.m_iMusicKitMVPs = findOffsetByName(j, "CCSPlayerController", "m_iMusicKitMVPs");
CCSPlayerController.m_iMVPs = findOffsetByName(j, "CCSPlayerController", "m_iMVPs");
CCSPlayerController.m_bIsPlayerNameDirty = findOffsetByName(j, "CCSPlayerController", "m_bIsPlayerNameDirty");
CCSPlayerController.m_bFireBulletsSeedSynchronized = findOffsetByName(j, "CCSPlayerController", "m_bFireBulletsSeedSynchronized");
CCSPlayerController.m_bAttemptedToGetColor = findOffsetByName(j, "CCSPlayerController", "m_bAttemptedToGetColor");
CCSPlayerController.m_iTeammatePreferredColor = findOffsetByName(j, "CCSPlayerController", "m_iTeammatePreferredColor");
CCSPlayerController.m_bTeamChanged = findOffsetByName(j, "CCSPlayerController", "m_bTeamChanged");
CCSPlayerController.m_bInSwitchTeam = findOffsetByName(j, "CCSPlayerController", "m_bInSwitchTeam");
CCSPlayerController.m_bHasSeenJoinGame = findOffsetByName(j, "CCSPlayerController", "m_bHasSeenJoinGame");
CCSPlayerController.m_bJustBecameSpectator = findOffsetByName(j, "CCSPlayerController", "m_bJustBecameSpectator");
CCSPlayerController.m_bSwitchTeamsOnNextRoundReset = findOffsetByName(j, "CCSPlayerController", "m_bSwitchTeamsOnNextRoundReset");
CCSPlayerController.m_bRemoveAllItemsOnNextRoundReset = findOffsetByName(j, "CCSPlayerController", "m_bRemoveAllItemsOnNextRoundReset");
CCSPlayerController.m_flLastJoinTeamTime = findOffsetByName(j, "CCSPlayerController", "m_flLastJoinTeamTime");
CCSPlayerController.m_szClanName = findOffsetByName(j, "CCSPlayerController", "m_szClanName");
CCSPlayerController.m_DesiredObserverMode = findOffsetByName(j, "CCSPlayerController", "m_DesiredObserverMode");
CCSPlayerController.m_hDesiredObserverTarget = findOffsetByName(j, "CCSPlayerController", "m_hDesiredObserverTarget");
CCSPlayerController.m_iRoundScore = findOffsetByName(j, "CCSPlayerController", "m_iRoundScore");
CCSPlayerController.m_iRoundsWon = findOffsetByName(j, "CCSPlayerController", "m_iRoundsWon");
CCSPlayerController.m_nUpdateCounter = findOffsetByName(j, "CCSPlayerController", "m_nUpdateCounter");
CCSPlayerController.m_flSmoothedPing = findOffsetByName(j, "CCSPlayerController", "m_flSmoothedPing");
CCSPlayerController.m_lastHeldVoteTimer = findOffsetByName(j, "CCSPlayerController", "m_lastHeldVoteTimer");
CCSPlayerController.m_bShowHints = findOffsetByName(j, "CCSPlayerController", "m_bShowHints");
CCSPlayerController.m_iNextTimeCheck = findOffsetByName(j, "CCSPlayerController", "m_iNextTimeCheck");
CCSPlayerController.m_bJustDidTeamKill = findOffsetByName(j, "CCSPlayerController", "m_bJustDidTeamKill");
CCSPlayerController.m_bPunishForTeamKill = findOffsetByName(j, "CCSPlayerController", "m_bPunishForTeamKill");
CCSPlayerController.m_bGaveTeamDamageWarning = findOffsetByName(j, "CCSPlayerController", "m_bGaveTeamDamageWarning");
CCSPlayerController.m_bGaveTeamDamageWarningThisRound = findOffsetByName(j, "CCSPlayerController", "m_bGaveTeamDamageWarningThisRound");
CCSPlayerController.m_dblLastReceivedPacketPlatFloatTime = findOffsetByName(j, "CCSPlayerController", "m_dblLastReceivedPacketPlatFloatTime");
CCSPlayerController.m_LastTeamDamageWarningTime = findOffsetByName(j, "CCSPlayerController", "m_LastTeamDamageWarningTime");
CCSPlayerController.m_LastTimePlayerWasDisconnectedForPawnsRemove = findOffsetByName(j, "CCSPlayerController", "m_LastTimePlayerWasDisconnectedForPawnsRemove");
CCSPlayerController.m_nSuspiciousHitCount = findOffsetByName(j, "CCSPlayerController", "m_nSuspiciousHitCount");
CCSPlayerController.m_nNonSuspiciousHitStreak = findOffsetByName(j, "CCSPlayerController", "m_nNonSuspiciousHitStreak");

// Atribuições para C_BasePropDoor
// C_BasePropDoor Offsets
C_BasePropDoor.m_eDoorState = findOffsetByName(j, "C_BasePropDoor", "m_eDoorState");
C_BasePropDoor.m_modelChanged = findOffsetByName(j, "C_BasePropDoor", "m_modelChanged");
C_BasePropDoor.m_bLocked = findOffsetByName(j, "C_BasePropDoor", "m_bLocked");
C_BasePropDoor.m_closedPosition = findOffsetByName(j, "C_BasePropDoor", "m_closedPosition");
C_BasePropDoor.m_closedAngles = findOffsetByName(j, "C_BasePropDoor", "m_closedAngles");
C_BasePropDoor.m_hMaster = findOffsetByName(j, "C_BasePropDoor", "m_hMaster");
C_BasePropDoor.m_vWhereToSetLightingOrigin = findOffsetByName(j, "C_BasePropDoor", "m_vWhereToSetLightingOrigin");

// Atribuições para C_NametagModule
// C_NametagModule Offsets
C_NametagModule.m_strNametagString = findOffsetByName(j, "C_NametagModule", "m_strNametagString");

// Atribuições para C_PhysPropClientside
// C_PhysPropClientside Offsets
C_PhysPropClientside.m_flTouchDelta = findOffsetByName(j, "C_PhysPropClientside", "m_flTouchDelta");
C_PhysPropClientside.m_fDeathTime = findOffsetByName(j, "C_PhysPropClientside", "m_fDeathTime");
C_PhysPropClientside.m_inertiaScale = findOffsetByName(j, "C_PhysPropClientside", "m_inertiaScale");
C_PhysPropClientside.m_vecDamagePosition = findOffsetByName(j, "C_PhysPropClientside", "m_vecDamagePosition");
C_PhysPropClientside.m_vecDamageDirection = findOffsetByName(j, "C_PhysPropClientside", "m_vecDamageDirection");
C_PhysPropClientside.m_nDamageType = findOffsetByName(j, "C_PhysPropClientside", "m_nDamageType");

// Atribuições para C_SoundAreaEntityBase
// C_SoundAreaEntityBase Offsets
C_SoundAreaEntityBase.m_bDisabled = findOffsetByName(j, "C_SoundAreaEntityBase", "m_bDisabled");
C_SoundAreaEntityBase.m_bWasEnabled = findOffsetByName(j, "C_SoundAreaEntityBase", "m_bWasEnabled");
C_SoundAreaEntityBase.m_iszSoundAreaType = findOffsetByName(j, "C_SoundAreaEntityBase", "m_iszSoundAreaType");
C_SoundAreaEntityBase.m_vPos = findOffsetByName(j, "C_SoundAreaEntityBase", "m_vPos");

// Atribuições para C_FogController
// C_FogController Offsets
C_FogController.m_fog = findOffsetByName(j, "C_FogController", "m_fog");
C_FogController.m_bUseAngles = findOffsetByName(j, "C_FogController", "m_bUseAngles");
C_FogController.m_iChangedVariables = findOffsetByName(j, "C_FogController", "m_iChangedVariables");

// Atribuições para CInfoWorldLayer
// CInfoWorldLayer Offsets
CInfoWorldLayer.m_pOutputOnEntitiesSpawned = findOffsetByName(j, "CInfoWorldLayer", "m_pOutputOnEntitiesSpawned");
CInfoWorldLayer.m_worldName = findOffsetByName(j, "CInfoWorldLayer", "m_worldName");
CInfoWorldLayer.m_layerName = findOffsetByName(j, "CInfoWorldLayer", "m_layerName");
CInfoWorldLayer.m_bWorldLayerVisible = findOffsetByName(j, "CInfoWorldLayer", "m_bWorldLayerVisible");
CInfoWorldLayer.m_bEntitiesSpawned = findOffsetByName(j, "CInfoWorldLayer", "m_bEntitiesSpawned");
CInfoWorldLayer.m_bCreateAsChildSpawnGroup = findOffsetByName(j, "CInfoWorldLayer", "m_bCreateAsChildSpawnGroup");
CInfoWorldLayer.m_hLayerSpawnGroup = findOffsetByName(j, "CInfoWorldLayer", "m_hLayerSpawnGroup");
CInfoWorldLayer.m_bWorldLayerActuallyVisible = findOffsetByName(j, "CInfoWorldLayer", "m_bWorldLayerActuallyVisible");

// Atribuições para C_PhysMagnet
// C_PhysMagnet Offsets
C_PhysMagnet.m_aAttachedObjectsFromServer = findOffsetByName(j, "C_PhysMagnet", "m_aAttachedObjectsFromServer");
C_PhysMagnet.m_aAttachedObjects = findOffsetByName(j, "C_PhysMagnet", "m_aAttachedObjects");

// Atribuições para C_FuncConveyor
// C_FuncConveyor Offsets
C_FuncConveyor.m_vecMoveDirEntitySpace = findOffsetByName(j, "C_FuncConveyor", "m_vecMoveDirEntitySpace");
C_FuncConveyor.m_flTargetSpeed = findOffsetByName(j, "C_FuncConveyor", "m_flTargetSpeed");
C_FuncConveyor.m_nTransitionStartTick = findOffsetByName(j, "C_FuncConveyor", "m_nTransitionStartTick");
C_FuncConveyor.m_nTransitionDurationTicks = findOffsetByName(j, "C_FuncConveyor", "m_nTransitionDurationTicks");
C_FuncConveyor.m_flTransitionStartSpeed = findOffsetByName(j, "C_FuncConveyor", "m_flTransitionStartSpeed");
C_FuncConveyor.m_hConveyorModels = findOffsetByName(j, "C_FuncConveyor", "m_hConveyorModels");
C_FuncConveyor.m_flCurrentConveyorOffset = findOffsetByName(j, "C_FuncConveyor", "m_flCurrentConveyorOffset");
C_FuncConveyor.m_flCurrentConveyorSpeed = findOffsetByName(j, "C_FuncConveyor", "m_flCurrentConveyorSpeed");

// Atribuições para CEntityInstance
// CEntityInstance Offsets
CEntityInstance.m_iszPrivateVScripts = findOffsetByName(j, "CEntityInstance", "m_iszPrivateVScripts");
CEntityInstance.m_pEntity = findOffsetByName(j, "CEntityInstance", "m_pEntity");
CEntityInstance.m_CScriptComponent = findOffsetByName(j, "CEntityInstance", "m_CScriptComponent");
CEntityInstance.m_bVisibleinPVS = findOffsetByName(j, "CEntityInstance", "m_bVisibleinPVS");

// Atribuições para ServerAuthoritativeWeaponSlot_t
// ServerAuthoritativeWeaponSlot_t Offsets
ServerAuthoritativeWeaponSlot_t.unClass = findOffsetByName(j, "ServerAuthoritativeWeaponSlot_t", "unClass");
ServerAuthoritativeWeaponSlot_t.unSlot = findOffsetByName(j, "ServerAuthoritativeWeaponSlot_t", "unSlot");
ServerAuthoritativeWeaponSlot_t.unItemDefIdx = findOffsetByName(j, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx");

// Atribuições para C_BaseViewModel
// C_BaseViewModel Offsets
C_BaseViewModel.m_vecLastFacing = findOffsetByName(j, "C_BaseViewModel", "m_vecLastFacing");
C_BaseViewModel.m_nViewModelIndex = findOffsetByName(j, "C_BaseViewModel", "m_nViewModelIndex");
C_BaseViewModel.m_nAnimationParity = findOffsetByName(j, "C_BaseViewModel", "m_nAnimationParity");
C_BaseViewModel.m_flAnimationStartTime = findOffsetByName(j, "C_BaseViewModel", "m_flAnimationStartTime");
C_BaseViewModel.m_hWeapon = findOffsetByName(j, "C_BaseViewModel", "m_hWeapon");
C_BaseViewModel.m_sVMName = findOffsetByName(j, "C_BaseViewModel", "m_sVMName");
C_BaseViewModel.m_sAnimationPrefix = findOffsetByName(j, "C_BaseViewModel", "m_sAnimationPrefix");
C_BaseViewModel.m_iCameraAttachment = findOffsetByName(j, "C_BaseViewModel", "m_iCameraAttachment");
C_BaseViewModel.m_vecLastCameraAngles = findOffsetByName(j, "C_BaseViewModel", "m_vecLastCameraAngles");
C_BaseViewModel.m_previousElapsedDuration = findOffsetByName(j, "C_BaseViewModel", "m_previousElapsedDuration");
C_BaseViewModel.m_previousCycle = findOffsetByName(j, "C_BaseViewModel", "m_previousCycle");
C_BaseViewModel.m_nOldAnimationParity = findOffsetByName(j, "C_BaseViewModel", "m_nOldAnimationParity");
C_BaseViewModel.m_hOldLayerSequence = findOffsetByName(j, "C_BaseViewModel", "m_hOldLayerSequence");
C_BaseViewModel.m_oldLayer = findOffsetByName(j, "C_BaseViewModel", "m_oldLayer");
C_BaseViewModel.m_oldLayerStartTime = findOffsetByName(j, "C_BaseViewModel", "m_oldLayerStartTime");
C_BaseViewModel.m_hControlPanel = findOffsetByName(j, "C_BaseViewModel", "m_hControlPanel");

// Atribuições para CGameSceneNode
// CGameSceneNode Offsets
CGameSceneNode.m_nodeToWorld = findOffsetByName(j, "CGameSceneNode", "m_nodeToWorld");
CGameSceneNode.m_pOwner = findOffsetByName(j, "CGameSceneNode", "m_pOwner");
CGameSceneNode.m_pParent = findOffsetByName(j, "CGameSceneNode", "m_pParent");
CGameSceneNode.m_pChild = findOffsetByName(j, "CGameSceneNode", "m_pChild");
CGameSceneNode.m_pNextSibling = findOffsetByName(j, "CGameSceneNode", "m_pNextSibling");
CGameSceneNode.m_hParent = findOffsetByName(j, "CGameSceneNode", "m_hParent");
CGameSceneNode.m_vecOrigin = findOffsetByName(j, "CGameSceneNode", "m_vecOrigin");
CGameSceneNode.m_angRotation = findOffsetByName(j, "CGameSceneNode", "m_angRotation");
CGameSceneNode.m_flScale = findOffsetByName(j, "CGameSceneNode", "m_flScale");
CGameSceneNode.m_vecAbsOrigin = findOffsetByName(j, "CGameSceneNode", "m_vecAbsOrigin");
CGameSceneNode.m_angAbsRotation = findOffsetByName(j, "CGameSceneNode", "m_angAbsRotation");
CGameSceneNode.m_flAbsScale = findOffsetByName(j, "CGameSceneNode", "m_flAbsScale");
CGameSceneNode.m_nParentAttachmentOrBone = findOffsetByName(j, "CGameSceneNode", "m_nParentAttachmentOrBone");
CGameSceneNode.m_bDebugAbsOriginChanges = findOffsetByName(j, "CGameSceneNode", "m_bDebugAbsOriginChanges");
CGameSceneNode.m_bDormant = findOffsetByName(j, "CGameSceneNode", "m_bDormant");
CGameSceneNode.m_bForceParentToBeNetworked = findOffsetByName(j, "CGameSceneNode", "m_bForceParentToBeNetworked");
CGameSceneNode.m_bDirtyHierarchy = findOffsetByName(j, "CGameSceneNode", "m_bDirtyHierarchy");
CGameSceneNode.m_bDirtyBoneMergeInfo = findOffsetByName(j, "CGameSceneNode", "m_bDirtyBoneMergeInfo");
CGameSceneNode.m_bNetworkedPositionChanged = findOffsetByName(j, "CGameSceneNode", "m_bNetworkedPositionChanged");
CGameSceneNode.m_bNetworkedAnglesChanged = findOffsetByName(j, "CGameSceneNode", "m_bNetworkedAnglesChanged");
CGameSceneNode.m_bNetworkedScaleChanged = findOffsetByName(j, "CGameSceneNode", "m_bNetworkedScaleChanged");
CGameSceneNode.m_bWillBeCallingPostDataUpdate = findOffsetByName(j, "CGameSceneNode", "m_bWillBeCallingPostDataUpdate");
CGameSceneNode.m_bBoneMergeFlex = findOffsetByName(j, "CGameSceneNode", "m_bBoneMergeFlex");
CGameSceneNode.m_nLatchAbsOrigin = findOffsetByName(j, "CGameSceneNode", "m_nLatchAbsOrigin");
CGameSceneNode.m_bDirtyBoneMergeBoneToRoot = findOffsetByName(j, "CGameSceneNode", "m_bDirtyBoneMergeBoneToRoot");
CGameSceneNode.m_nHierarchicalDepth = findOffsetByName(j, "CGameSceneNode", "m_nHierarchicalDepth");
CGameSceneNode.m_nHierarchyType = findOffsetByName(j, "CGameSceneNode", "m_nHierarchyType");
CGameSceneNode.m_nDoNotSetAnimTimeInInvalidatePhysicsCount = findOffsetByName(j, "CGameSceneNode", "m_nDoNotSetAnimTimeInInvalidatePhysicsCount");
CGameSceneNode.m_name = findOffsetByName(j, "CGameSceneNode", "m_name");
CGameSceneNode.m_hierarchyAttachName = findOffsetByName(j, "CGameSceneNode", "m_hierarchyAttachName");
CGameSceneNode.m_flZOffset = findOffsetByName(j, "CGameSceneNode", "m_flZOffset");
CGameSceneNode.m_flClientLocalScale = findOffsetByName(j, "CGameSceneNode", "m_flClientLocalScale");
CGameSceneNode.m_vRenderOrigin = findOffsetByName(j, "CGameSceneNode", "m_vRenderOrigin");

// Atribuições para CCSPointScript
// CCSPointScript Offsets
CCSPointScript.m_pParent = findOffsetByName(j, "CCSPointScript", "m_pParent");

// Atribuições para C_CSObserverPawn
// C_CSObserverPawn Offsets
C_CSObserverPawn.m_hDetectParentChange = findOffsetByName(j, "C_CSObserverPawn", "m_hDetectParentChange");

// Atribuições para C_EntityFlame
// C_EntityFlame Offsets
C_EntityFlame.m_hEntAttached = findOffsetByName(j, "C_EntityFlame", "m_hEntAttached");
C_EntityFlame.m_hOldAttached = findOffsetByName(j, "C_EntityFlame", "m_hOldAttached");
C_EntityFlame.m_bCheapEffect = findOffsetByName(j, "C_EntityFlame", "m_bCheapEffect");

// Atribuições para CCSObserver_ObserverServices
// CCSObserver_ObserverServices Offsets
CCSObserver_ObserverServices.m_hLastObserverTarget = findOffsetByName(j, "CCSObserver_ObserverServices", "m_hLastObserverTarget");
CCSObserver_ObserverServices.m_vecObserverInterpolateOffset = findOffsetByName(j, "CCSObserver_ObserverServices", "m_vecObserverInterpolateOffset");
CCSObserver_ObserverServices.m_vecObserverInterpStartPos = findOffsetByName(j, "CCSObserver_ObserverServices", "m_vecObserverInterpStartPos");
CCSObserver_ObserverServices.m_flObsInterp_PathLength = findOffsetByName(j, "CCSObserver_ObserverServices", "m_flObsInterp_PathLength");
CCSObserver_ObserverServices.m_qObsInterp_OrientationStart = findOffsetByName(j, "CCSObserver_ObserverServices", "m_qObsInterp_OrientationStart");
CCSObserver_ObserverServices.m_qObsInterp_OrientationTravelDir = findOffsetByName(j, "CCSObserver_ObserverServices", "m_qObsInterp_OrientationTravelDir");
CCSObserver_ObserverServices.m_obsInterpState = findOffsetByName(j, "CCSObserver_ObserverServices", "m_obsInterpState");
CCSObserver_ObserverServices.m_bObserverInterpolationNeedsDeferredSetup = findOffsetByName(j, "CCSObserver_ObserverServices", "m_bObserverInterpolationNeedsDeferredSetup");

// Atribuições para C_Hostage
// C_Hostage Offsets
C_Hostage.m_entitySpottedState = findOffsetByName(j, "C_Hostage", "m_entitySpottedState");
C_Hostage.m_leader = findOffsetByName(j, "C_Hostage", "m_leader");
C_Hostage.m_reuseTimer = findOffsetByName(j, "C_Hostage", "m_reuseTimer");
C_Hostage.m_vel = findOffsetByName(j, "C_Hostage", "m_vel");
C_Hostage.m_isRescued = findOffsetByName(j, "C_Hostage", "m_isRescued");
C_Hostage.m_jumpedThisFrame = findOffsetByName(j, "C_Hostage", "m_jumpedThisFrame");
C_Hostage.m_nHostageState = findOffsetByName(j, "C_Hostage", "m_nHostageState");
C_Hostage.m_bHandsHaveBeenCut = findOffsetByName(j, "C_Hostage", "m_bHandsHaveBeenCut");
C_Hostage.m_hHostageGrabber = findOffsetByName(j, "C_Hostage", "m_hHostageGrabber");
C_Hostage.m_fLastGrabTime = findOffsetByName(j, "C_Hostage", "m_fLastGrabTime");
C_Hostage.m_vecGrabbedPos = findOffsetByName(j, "C_Hostage", "m_vecGrabbedPos");
C_Hostage.m_flRescueStartTime = findOffsetByName(j, "C_Hostage", "m_flRescueStartTime");
C_Hostage.m_flGrabSuccessTime = findOffsetByName(j, "C_Hostage", "m_flGrabSuccessTime");
C_Hostage.m_flDropStartTime = findOffsetByName(j, "C_Hostage", "m_flDropStartTime");
C_Hostage.m_flDeadOrRescuedTime = findOffsetByName(j, "C_Hostage", "m_flDeadOrRescuedTime");
C_Hostage.m_blinkTimer = findOffsetByName(j, "C_Hostage", "m_blinkTimer");
C_Hostage.m_lookAt = findOffsetByName(j, "C_Hostage", "m_lookAt");
C_Hostage.m_lookAroundTimer = findOffsetByName(j, "C_Hostage", "m_lookAroundTimer");
C_Hostage.m_isInit = findOffsetByName(j, "C_Hostage", "m_isInit");
C_Hostage.m_eyeAttachment = findOffsetByName(j, "C_Hostage", "m_eyeAttachment");
C_Hostage.m_chestAttachment = findOffsetByName(j, "C_Hostage", "m_chestAttachment");
C_Hostage.m_pPredictionOwner = findOffsetByName(j, "C_Hostage", "m_pPredictionOwner");
C_Hostage.m_fNewestAlphaThinkTime = findOffsetByName(j, "C_Hostage", "m_fNewestAlphaThinkTime");

// Atribuições para C_Sprite
// C_Sprite Offsets
C_Sprite.m_hSpriteMaterial = findOffsetByName(j, "C_Sprite", "m_hSpriteMaterial");
C_Sprite.m_hAttachedToEntity = findOffsetByName(j, "C_Sprite", "m_hAttachedToEntity");
C_Sprite.m_nAttachment = findOffsetByName(j, "C_Sprite", "m_nAttachment");
C_Sprite.m_flSpriteFramerate = findOffsetByName(j, "C_Sprite", "m_flSpriteFramerate");
C_Sprite.m_flFrame = findOffsetByName(j, "C_Sprite", "m_flFrame");
C_Sprite.m_flDieTime = findOffsetByName(j, "C_Sprite", "m_flDieTime");
C_Sprite.m_nBrightness = findOffsetByName(j, "C_Sprite", "m_nBrightness");
C_Sprite.m_flBrightnessDuration = findOffsetByName(j, "C_Sprite", "m_flBrightnessDuration");
C_Sprite.m_flSpriteScale = findOffsetByName(j, "C_Sprite", "m_flSpriteScale");
C_Sprite.m_flScaleDuration = findOffsetByName(j, "C_Sprite", "m_flScaleDuration");
C_Sprite.m_bWorldSpaceScale = findOffsetByName(j, "C_Sprite", "m_bWorldSpaceScale");
C_Sprite.m_flGlowProxySize = findOffsetByName(j, "C_Sprite", "m_flGlowProxySize");
C_Sprite.m_flHDRColorScale = findOffsetByName(j, "C_Sprite", "m_flHDRColorScale");
C_Sprite.m_flLastTime = findOffsetByName(j, "C_Sprite", "m_flLastTime");
C_Sprite.m_flMaxFrame = findOffsetByName(j, "C_Sprite", "m_flMaxFrame");
C_Sprite.m_flStartScale = findOffsetByName(j, "C_Sprite", "m_flStartScale");
C_Sprite.m_flDestScale = findOffsetByName(j, "C_Sprite", "m_flDestScale");
C_Sprite.m_flScaleTimeStart = findOffsetByName(j, "C_Sprite", "m_flScaleTimeStart");
C_Sprite.m_nStartBrightness = findOffsetByName(j, "C_Sprite", "m_nStartBrightness");
C_Sprite.m_nDestBrightness = findOffsetByName(j, "C_Sprite", "m_nDestBrightness");
C_Sprite.m_flBrightnessTimeStart = findOffsetByName(j, "C_Sprite", "m_flBrightnessTimeStart");
C_Sprite.m_hOldSpriteMaterial = findOffsetByName(j, "C_Sprite", "m_hOldSpriteMaterial");
C_Sprite.m_nSpriteWidth = findOffsetByName(j, "C_Sprite", "m_nSpriteWidth");
C_Sprite.m_nSpriteHeight = findOffsetByName(j, "C_Sprite", "m_nSpriteHeight");

// Atribuições para CMapInfo
// CMapInfo Offsets
CMapInfo.m_iBuyingStatus = findOffsetByName(j, "CMapInfo", "m_iBuyingStatus");
CMapInfo.m_flBombRadius = findOffsetByName(j, "CMapInfo", "m_flBombRadius");
CMapInfo.m_iPetPopulation = findOffsetByName(j, "CMapInfo", "m_iPetPopulation");
CMapInfo.m_bUseNormalSpawnsForDM = findOffsetByName(j, "CMapInfo", "m_bUseNormalSpawnsForDM");
CMapInfo.m_bDisableAutoGeneratedDMSpawns = findOffsetByName(j, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns");
CMapInfo.m_flBotMaxVisionDistance = findOffsetByName(j, "CMapInfo", "m_flBotMaxVisionDistance");
CMapInfo.m_iHostageCount = findOffsetByName(j, "CMapInfo", "m_iHostageCount");
CMapInfo.m_bFadePlayerVisibilityFarZ = findOffsetByName(j, "CMapInfo", "m_bFadePlayerVisibilityFarZ");
CMapInfo.m_bRainTraceToSkyEnabled = findOffsetByName(j, "CMapInfo", "m_bRainTraceToSkyEnabled");

// Atribuições para C_PlantedC4
// C_PlantedC4 Offsets
C_PlantedC4.m_bBombTicking = findOffsetByName(j, "C_PlantedC4", "m_bBombTicking");
C_PlantedC4.m_nBombSite = findOffsetByName(j, "C_PlantedC4", "m_nBombSite");
C_PlantedC4.m_nSourceSoundscapeHash = findOffsetByName(j, "C_PlantedC4", "m_nSourceSoundscapeHash");
C_PlantedC4.m_entitySpottedState = findOffsetByName(j, "C_PlantedC4", "m_entitySpottedState");
C_PlantedC4.m_flNextGlow = findOffsetByName(j, "C_PlantedC4", "m_flNextGlow");
C_PlantedC4.m_flNextBeep = findOffsetByName(j, "C_PlantedC4", "m_flNextBeep");
C_PlantedC4.m_flC4Blow = findOffsetByName(j, "C_PlantedC4", "m_flC4Blow");
C_PlantedC4.m_bCannotBeDefused = findOffsetByName(j, "C_PlantedC4", "m_bCannotBeDefused");
C_PlantedC4.m_bHasExploded = findOffsetByName(j, "C_PlantedC4", "m_bHasExploded");
C_PlantedC4.m_flTimerLength = findOffsetByName(j, "C_PlantedC4", "m_flTimerLength");
C_PlantedC4.m_bBeingDefused = findOffsetByName(j, "C_PlantedC4", "m_bBeingDefused");
C_PlantedC4.m_bTriggerWarning = findOffsetByName(j, "C_PlantedC4", "m_bTriggerWarning");
C_PlantedC4.m_bExplodeWarning = findOffsetByName(j, "C_PlantedC4", "m_bExplodeWarning");
C_PlantedC4.m_bC4Activated = findOffsetByName(j, "C_PlantedC4", "m_bC4Activated");
C_PlantedC4.m_bTenSecWarning = findOffsetByName(j, "C_PlantedC4", "m_bTenSecWarning");
C_PlantedC4.m_flDefuseLength = findOffsetByName(j, "C_PlantedC4", "m_flDefuseLength");
C_PlantedC4.m_flDefuseCountDown = findOffsetByName(j, "C_PlantedC4", "m_flDefuseCountDown");
C_PlantedC4.m_bBombDefused = findOffsetByName(j, "C_PlantedC4", "m_bBombDefused");
C_PlantedC4.m_hBombDefuser = findOffsetByName(j, "C_PlantedC4", "m_hBombDefuser");
C_PlantedC4.m_hControlPanel = findOffsetByName(j, "C_PlantedC4", "m_hControlPanel");
C_PlantedC4.m_AttributeManager = findOffsetByName(j, "C_PlantedC4", "m_AttributeManager");
C_PlantedC4.m_hDefuserMultimeter = findOffsetByName(j, "C_PlantedC4", "m_hDefuserMultimeter");
C_PlantedC4.m_flNextRadarFlashTime = findOffsetByName(j, "C_PlantedC4", "m_flNextRadarFlashTime");
C_PlantedC4.m_bRadarFlash = findOffsetByName(j, "C_PlantedC4", "m_bRadarFlash");
C_PlantedC4.m_pBombDefuser = findOffsetByName(j, "C_PlantedC4", "m_pBombDefuser");
C_PlantedC4.m_fLastDefuseTime = findOffsetByName(j, "C_PlantedC4", "m_fLastDefuseTime");
C_PlantedC4.m_pPredictionOwner = findOffsetByName(j, "C_PlantedC4", "m_pPredictionOwner");
C_PlantedC4.m_vecC4ExplodeSpectatePos = findOffsetByName(j, "C_PlantedC4", "m_vecC4ExplodeSpectatePos");
C_PlantedC4.m_vecC4ExplodeSpectateAng = findOffsetByName(j, "C_PlantedC4", "m_vecC4ExplodeSpectateAng");
C_PlantedC4.m_flC4ExplodeSpectateDuration = findOffsetByName(j, "C_PlantedC4", "m_flC4ExplodeSpectateDuration");

// Atribuições para C_RagdollProp
// C_RagdollProp Offsets
C_RagdollProp.m_ragPos = findOffsetByName(j, "C_RagdollProp", "m_ragPos");
C_RagdollProp.m_ragAngles = findOffsetByName(j, "C_RagdollProp", "m_ragAngles");
C_RagdollProp.m_flBlendWeight = findOffsetByName(j, "C_RagdollProp", "m_flBlendWeight");
C_RagdollProp.m_hRagdollSource = findOffsetByName(j, "C_RagdollProp", "m_hRagdollSource");
C_RagdollProp.m_iEyeAttachment = findOffsetByName(j, "C_RagdollProp", "m_iEyeAttachment");
C_RagdollProp.m_flBlendWeightCurrent = findOffsetByName(j, "C_RagdollProp", "m_flBlendWeightCurrent");
C_RagdollProp.m_parentPhysicsBoneIndices = findOffsetByName(j, "C_RagdollProp", "m_parentPhysicsBoneIndices");
C_RagdollProp.m_worldSpaceBoneComputationOrder = findOffsetByName(j, "C_RagdollProp", "m_worldSpaceBoneComputationOrder");

// Atribuições para C_VoteController
// C_VoteController Offsets
C_VoteController.m_iActiveIssueIndex = findOffsetByName(j, "C_VoteController", "m_iActiveIssueIndex");
C_VoteController.m_iOnlyTeamToVote = findOffsetByName(j, "C_VoteController", "m_iOnlyTeamToVote");
C_VoteController.m_nVoteOptionCount = findOffsetByName(j, "C_VoteController", "m_nVoteOptionCount");
C_VoteController.m_nPotentialVotes = findOffsetByName(j, "C_VoteController", "m_nPotentialVotes");
C_VoteController.m_bVotesDirty = findOffsetByName(j, "C_VoteController", "m_bVotesDirty");
C_VoteController.m_bTypeDirty = findOffsetByName(j, "C_VoteController", "m_bTypeDirty");
C_VoteController.m_bIsYesNoVote = findOffsetByName(j, "C_VoteController", "m_bIsYesNoVote");

// Atribuições para ViewAngleServerChange_t
// ViewAngleServerChange_t Offsets
ViewAngleServerChange_t.nType = findOffsetByName(j, "ViewAngleServerChange_t", "nType");
ViewAngleServerChange_t.qAngle = findOffsetByName(j, "ViewAngleServerChange_t", "qAngle");
ViewAngleServerChange_t.nIndex = findOffsetByName(j, "ViewAngleServerChange_t", "nIndex");

// Atribuições para C_Chicken
// C_Chicken Offsets
C_Chicken.m_hHolidayHatAddon = findOffsetByName(j, "C_Chicken", "m_hHolidayHatAddon");
C_Chicken.m_jumpedThisFrame = findOffsetByName(j, "C_Chicken", "m_jumpedThisFrame");
C_Chicken.m_leader = findOffsetByName(j, "C_Chicken", "m_leader");
C_Chicken.m_AttributeManager = findOffsetByName(j, "C_Chicken", "m_AttributeManager");
C_Chicken.m_bAttributesInitialized = findOffsetByName(j, "C_Chicken", "m_bAttributesInitialized");
C_Chicken.m_hWaterWakeParticles = findOffsetByName(j, "C_Chicken", "m_hWaterWakeParticles");
C_Chicken.m_bIsPreviewModel = findOffsetByName(j, "C_Chicken", "m_bIsPreviewModel");

// Atribuições para PhysicsRagdollPose_t
// PhysicsRagdollPose_t Offsets
PhysicsRagdollPose_t.m_Transforms = findOffsetByName(j, "PhysicsRagdollPose_t", "m_Transforms");
PhysicsRagdollPose_t.m_hOwner = findOffsetByName(j, "PhysicsRagdollPose_t", "m_hOwner");

// Atribuições para EventSimpleLoopFrameUpdate_t
// EventSimpleLoopFrameUpdate_t Offsets
EventSimpleLoopFrameUpdate_t.m_LoopState = findOffsetByName(j, "EventSimpleLoopFrameUpdate_t", "m_LoopState");
EventSimpleLoopFrameUpdate_t.m_flRealTime = findOffsetByName(j, "EventSimpleLoopFrameUpdate_t", "m_flRealTime");
EventSimpleLoopFrameUpdate_t.m_flFrameTime = findOffsetByName(j, "EventSimpleLoopFrameUpdate_t", "m_flFrameTime");

// Atribuições para EventPostAdvanceTick_t
// EventPostAdvanceTick_t Offsets
EventPostAdvanceTick_t.m_nCurrentTick = findOffsetByName(j, "EventPostAdvanceTick_t", "m_nCurrentTick");
EventPostAdvanceTick_t.m_nCurrentTickThisFrame = findOffsetByName(j, "EventPostAdvanceTick_t", "m_nCurrentTickThisFrame");
EventPostAdvanceTick_t.m_nTotalTicksThisFrame = findOffsetByName(j, "EventPostAdvanceTick_t", "m_nTotalTicksThisFrame");
EventPostAdvanceTick_t.m_nTotalTicks = findOffsetByName(j, "EventPostAdvanceTick_t", "m_nTotalTicks");

// Atribuições para CEntityIOOutput
// CEntityIOOutput Offsets
CEntityIOOutput.m_Value = findOffsetByName(j, "CEntityIOOutput", "m_Value");

// Atribuições para EventClientSceneSystemThreadStateChange_t
// EventClientSceneSystemThreadStateChange_t Offsets
EventClientSceneSystemThreadStateChange_t.m_bThreadsActive = findOffsetByName(j, "EventClientSceneSystemThreadStateChange_t", "m_bThreadsActive");

// Atribuições para EventClientOutput_t
// EventClientOutput_t Offsets
EventClientOutput_t.m_LoopState = findOffsetByName(j, "EventClientOutput_t", "m_LoopState");
EventClientOutput_t.m_flRenderTime = findOffsetByName(j, "EventClientOutput_t", "m_flRenderTime");
EventClientOutput_t.m_flRealTime = findOffsetByName(j, "EventClientOutput_t", "m_flRealTime");
EventClientOutput_t.m_flRenderFrameTimeUnbounded = findOffsetByName(j, "EventClientOutput_t", "m_flRenderFrameTimeUnbounded");
EventClientOutput_t.m_bRenderOnly = findOffsetByName(j, "EventClientOutput_t", "m_bRenderOnly");

// Atribuições para CEntityComponentHelper
// CEntityComponentHelper Offsets
CEntityComponentHelper.m_flags = findOffsetByName(j, "CEntityComponentHelper", "m_flags");
CEntityComponentHelper.m_pInfo = findOffsetByName(j, "CEntityComponentHelper", "m_pInfo");
CEntityComponentHelper.m_nPriority = findOffsetByName(j, "CEntityComponentHelper", "m_nPriority");
CEntityComponentHelper.m_pNext = findOffsetByName(j, "CEntityComponentHelper", "m_pNext");

// Atribuições para GameTime_t
// GameTime_t Offsets
GameTime_t.m_Value = findOffsetByName(j, "GameTime_t", "m_Value");

// Atribuições para CNetworkVarChainer
// CNetworkVarChainer Offsets
CNetworkVarChainer.m_PathIndex = findOffsetByName(j, "CNetworkVarChainer", "m_PathIndex");

// Atribuições para EventClientPostOutput_t
// EventClientPostOutput_t Offsets
EventClientPostOutput_t.m_LoopState = findOffsetByName(j, "EventClientPostOutput_t", "m_LoopState");
EventClientPostOutput_t.m_flRenderTime = findOffsetByName(j, "EventClientPostOutput_t", "m_flRenderTime");
EventClientPostOutput_t.m_flRenderFrameTime = findOffsetByName(j, "EventClientPostOutput_t", "m_flRenderFrameTime");
EventClientPostOutput_t.m_flRenderFrameTimeUnbounded = findOffsetByName(j, "EventClientPostOutput_t", "m_flRenderFrameTimeUnbounded");
EventClientPostOutput_t.m_bRenderOnly = findOffsetByName(j, "EventClientPostOutput_t", "m_bRenderOnly");

// Atribuições para GameTick_t
// GameTick_t Offsets
GameTick_t.m_Value = findOffsetByName(j, "GameTick_t", "m_Value");

// Atribuições para EventClientPollInput_t
// EventClientPollInput_t Offsets
EventClientPollInput_t.m_LoopState = findOffsetByName(j, "EventClientPollInput_t", "m_LoopState");
EventClientPollInput_t.m_flRealTime = findOffsetByName(j, "EventClientPollInput_t", "m_flRealTime");

// Atribuições para EventPreDataUpdate_t
// EventPreDataUpdate_t Offsets
EventPreDataUpdate_t.m_nCount = findOffsetByName(j, "EventPreDataUpdate_t", "m_nCount");

// Atribuições para EventClientProcessGameInput_t
// EventClientProcessGameInput_t Offsets
EventClientProcessGameInput_t.m_LoopState = findOffsetByName(j, "EventClientProcessGameInput_t", "m_LoopState");
EventClientProcessGameInput_t.m_flRealTime = findOffsetByName(j, "EventClientProcessGameInput_t", "m_flRealTime");
EventClientProcessGameInput_t.m_flFrameTime = findOffsetByName(j, "EventClientProcessGameInput_t", "m_flFrameTime");

// Atribuições para EventFrameBoundary_t
// EventFrameBoundary_t Offsets
EventFrameBoundary_t.m_flFrameTime = findOffsetByName(j, "EventFrameBoundary_t", "m_flFrameTime");

// Atribuições para EventAppShutdown_t
// EventAppShutdown_t Offsets
EventAppShutdown_t.m_nDummy0 = findOffsetByName(j, "EventAppShutdown_t", "m_nDummy0");

// Atribuições para EventProfileStorageAvailable_t
// EventProfileStorageAvailable_t Offsets
EventProfileStorageAvailable_t.m_nSplitScreenSlot = findOffsetByName(j, "EventProfileStorageAvailable_t", "m_nSplitScreenSlot");

// Atribuições para EventPostDataUpdate_t
// EventPostDataUpdate_t Offsets
EventPostDataUpdate_t.m_nCount = findOffsetByName(j, "EventPostDataUpdate_t", "m_nCount");

// Atribuições para EventClientProcessNetworking_t
// EventClientProcessNetworking_t Offsets
EventClientProcessNetworking_t.m_nTickCount = findOffsetByName(j, "EventClientProcessNetworking_t", "m_nTickCount");

// Atribuições para EventAdvanceTick_t
// EventAdvanceTick_t Offsets
EventAdvanceTick_t.m_nCurrentTick = findOffsetByName(j, "EventAdvanceTick_t", "m_nCurrentTick");
EventAdvanceTick_t.m_nCurrentTickThisFrame = findOffsetByName(j, "EventAdvanceTick_t", "m_nCurrentTickThisFrame");
EventAdvanceTick_t.m_nTotalTicksThisFrame = findOffsetByName(j, "EventAdvanceTick_t", "m_nTotalTicksThisFrame");
EventAdvanceTick_t.m_nTotalTicks = findOffsetByName(j, "EventAdvanceTick_t", "m_nTotalTicks");

// Atribuições para EventClientPreOutput_t
// EventClientPreOutput_t Offsets
EventClientPreOutput_t.m_LoopState = findOffsetByName(j, "EventClientPreOutput_t", "m_LoopState");
EventClientPreOutput_t.m_flRenderTime = findOffsetByName(j, "EventClientPreOutput_t", "m_flRenderTime");
EventClientPreOutput_t.m_flRenderFrameTime = findOffsetByName(j, "EventClientPreOutput_t", "m_flRenderFrameTime");
EventClientPreOutput_t.m_flRenderFrameTimeUnbounded = findOffsetByName(j, "EventClientPreOutput_t", "m_flRenderFrameTimeUnbounded");
EventClientPreOutput_t.m_flRealTime = findOffsetByName(j, "EventClientPreOutput_t", "m_flRealTime");
EventClientPreOutput_t.m_bRenderOnly = findOffsetByName(j, "EventClientPreOutput_t", "m_bRenderOnly");

// Atribuições para EventClientFrameSimulate_t
// EventClientFrameSimulate_t Offsets
EventClientFrameSimulate_t.m_LoopState = findOffsetByName(j, "EventClientFrameSimulate_t", "m_LoopState");
EventClientFrameSimulate_t.m_flRealTime = findOffsetByName(j, "EventClientFrameSimulate_t", "m_flRealTime");
EventClientFrameSimulate_t.m_flFrameTime = findOffsetByName(j, "EventClientFrameSimulate_t", "m_flFrameTime");
EventClientFrameSimulate_t.m_bScheduleSendTickPacket = findOffsetByName(j, "EventClientFrameSimulate_t", "m_bScheduleSendTickPacket");

// Atribuições para EventSetTime_t
// EventSetTime_t Offsets
EventSetTime_t.m_LoopState = findOffsetByName(j, "EventSetTime_t", "m_LoopState");
EventSetTime_t.m_nClientOutputFrames = findOffsetByName(j, "EventSetTime_t", "m_nClientOutputFrames");
EventSetTime_t.m_flRealTime = findOffsetByName(j, "EventSetTime_t", "m_flRealTime");
EventSetTime_t.m_flRenderTime = findOffsetByName(j, "EventSetTime_t", "m_flRenderTime");
EventSetTime_t.m_flRenderFrameTime = findOffsetByName(j, "EventSetTime_t", "m_flRenderFrameTime");
EventSetTime_t.m_flRenderFrameTimeUnbounded = findOffsetByName(j, "EventSetTime_t", "m_flRenderFrameTimeUnbounded");
EventSetTime_t.m_flRenderFrameTimeUnscaled = findOffsetByName(j, "EventSetTime_t", "m_flRenderFrameTimeUnscaled");
EventSetTime_t.m_flTickRemainder = findOffsetByName(j, "EventSetTime_t", "m_flTickRemainder");

// Atribuições para EventSimulate_t
// EventSimulate_t Offsets
EventSimulate_t.m_LoopState = findOffsetByName(j, "EventSimulate_t", "m_LoopState");
EventSimulate_t.m_bFirstTick = findOffsetByName(j, "EventSimulate_t", "m_bFirstTick");
EventSimulate_t.m_bLastTick = findOffsetByName(j, "EventSimulate_t", "m_bLastTick");

// Atribuições para EntComponentInfo_t
// EntComponentInfo_t Offsets
EntComponentInfo_t.m_pName = findOffsetByName(j, "EntComponentInfo_t", "m_pName");
EntComponentInfo_t.m_pCPPClassname = findOffsetByName(j, "EntComponentInfo_t", "m_pCPPClassname");
EntComponentInfo_t.m_pNetworkDataReferencedDescription = findOffsetByName(j, "EntComponentInfo_t", "m_pNetworkDataReferencedDescription");
EntComponentInfo_t.m_pNetworkDataReferencedPtrPropDescription = findOffsetByName(j, "EntComponentInfo_t", "m_pNetworkDataReferencedPtrPropDescription");
EntComponentInfo_t.m_nRuntimeIndex = findOffsetByName(j, "EntComponentInfo_t", "m_nRuntimeIndex");
EntComponentInfo_t.m_nFlags = findOffsetByName(j, "EntComponentInfo_t", "m_nFlags");
EntComponentInfo_t.m_pBaseClassComponentHelper = findOffsetByName(j, "EntComponentInfo_t", "m_pBaseClassComponentHelper");

// Atribuições para EngineLoopState_t
// EngineLoopState_t Offsets
EngineLoopState_t.m_nPlatWindowWidth = findOffsetByName(j, "EngineLoopState_t", "m_nPlatWindowWidth");
EngineLoopState_t.m_nPlatWindowHeight = findOffsetByName(j, "EngineLoopState_t", "m_nPlatWindowHeight");
EngineLoopState_t.m_nRenderWidth = findOffsetByName(j, "EngineLoopState_t", "m_nRenderWidth");
EngineLoopState_t.m_nRenderHeight = findOffsetByName(j, "EngineLoopState_t", "m_nRenderHeight");

// Atribuições para EventClientPollNetworking_t
// EventClientPollNetworking_t Offsets
EventClientPollNetworking_t.m_nTickCount = findOffsetByName(j, "EventClientPollNetworking_t", "m_nTickCount");

// Atribuições para EventClientProcessInput_t
// EventClientProcessInput_t Offsets
EventClientProcessInput_t.m_LoopState = findOffsetByName(j, "EventClientProcessInput_t", "m_LoopState");
EventClientProcessInput_t.m_flRealTime = findOffsetByName(j, "EventClientProcessInput_t", "m_flRealTime");
EventClientProcessInput_t.m_flTickInterval = findOffsetByName(j, "EventClientProcessInput_t", "m_flTickInterval");
EventClientProcessInput_t.m_flTickStartTime = findOffsetByName(j, "EventClientProcessInput_t", "m_flTickStartTime");

// Atribuições para EmptyTestScript
// EmptyTestScript Offsets
EmptyTestScript.m_hTest = findOffsetByName(j, "EmptyTestScript", "m_hTest");

// Atribuições para CAnimScriptBase
// CAnimScriptBase Offsets
CAnimScriptBase.m_bIsValid = findOffsetByName(j, "CAnimScriptBase", "m_bIsValid");

// Atribuições para animationsystem_dll
// animationsystem_dll Offsets
animationsystem_dll.AnimationSystemUtils_001 = findOffsetByName(j, "animationsystem_dll", "AnimationSystemUtils_001");
animationsystem_dll.AnimationSystem_001 = findOffsetByName(j, "animationsystem_dll", "AnimationSystem_001");

// Atribuições para client_dll
// client_dll Offsets
client_dll.ClientToolsInfo_001 = findOffsetByName(j, "client_dll", "ClientToolsInfo_001");
client_dll.EmptyWorldService001_Client = findOffsetByName(j, "client_dll", "EmptyWorldService001_Client");
client_dll.GameClientExports001 = findOffsetByName(j, "client_dll", "GameClientExports001");
client_dll.LegacyGameUI001 = findOffsetByName(j, "client_dll", "LegacyGameUI001");
client_dll.Source2Client002 = findOffsetByName(j, "client_dll", "Source2Client002");
client_dll.Source2ClientConfig001 = findOffsetByName(j, "client_dll", "Source2ClientConfig001");
client_dll.Source2ClientPrediction001 = findOffsetByName(j, "client_dll", "Source2ClientPrediction001");
client_dll.Source2ClientUI001 = findOffsetByName(j, "client_dll", "Source2ClientUI001");
client_dll.dwCSGOInput = findOffsetByName(j, "client_dll", "dwCSGOInput");
client_dll.dwEntityList = findOffsetByName(j, "client_dll", "dwEntityList");
client_dll.dwGameEntitySystem = findOffsetByName(j, "client_dll", "dwGameEntitySystem");
client_dll.dwGameEntitySystem_highestEntityIndex = findOffsetByName(j, "client_dll", "dwGameEntitySystem_highestEntityIndex");
client_dll.dwGameRules = findOffsetByName(j, "client_dll", "dwGameRules");
client_dll.dwGlobalVars = findOffsetByName(j, "client_dll", "dwGlobalVars");
client_dll.dwGlowManager = findOffsetByName(j, "client_dll", "dwGlowManager");
client_dll.dwLocalPlayerController = findOffsetByName(j, "client_dll", "dwLocalPlayerController");
client_dll.dwLocalPlayerPawn = findOffsetByName(j, "client_dll", "dwLocalPlayerPawn");
client_dll.dwPlantedC4 = findOffsetByName(j, "client_dll", "dwPlantedC4");
client_dll.dwPrediction = findOffsetByName(j, "client_dll", "dwPrediction");
client_dll.dwSensitivity = findOffsetByName(j, "client_dll", "dwSensitivity");
client_dll.dwSensitivity_sensitivity = findOffsetByName(j, "client_dll", "dwSensitivity_sensitivity");
client_dll.dwViewAngles = findOffsetByName(j, "client_dll", "dwViewAngles");
client_dll.dwViewMatrix = findOffsetByName(j, "client_dll", "dwViewMatrix");
client_dll.dwViewRender = findOffsetByName(j, "client_dll", "dwViewRender");
client_dll.dwWeaponC4 = findOffsetByName(j, "client_dll", "dwWeaponC4");

// Atribuições para engine2_dll
// engine2_dll Offsets
engine2_dll.BenchmarkService001 = findOffsetByName(j, "engine2_dll", "BenchmarkService001");
engine2_dll.BugService001 = findOffsetByName(j, "engine2_dll", "BugService001");
engine2_dll.ClientServerEngineLoopService_001 = findOffsetByName(j, "engine2_dll", "ClientServerEngineLoopService_001");
engine2_dll.EngineGameUI001 = findOffsetByName(j, "engine2_dll", "EngineGameUI001");
engine2_dll.EngineServiceMgr001 = findOffsetByName(j, "engine2_dll", "EngineServiceMgr001");
engine2_dll.GameEventSystemClientV001 = findOffsetByName(j, "engine2_dll", "GameEventSystemClientV001");
engine2_dll.GameEventSystemServerV001 = findOffsetByName(j, "engine2_dll", "GameEventSystemServerV001");
engine2_dll.GameResourceServiceClientV001 = findOffsetByName(j, "engine2_dll", "GameResourceServiceClientV001");
engine2_dll.GameResourceServiceServerV001 = findOffsetByName(j, "engine2_dll", "GameResourceServiceServerV001");
engine2_dll.GameUIService_001 = findOffsetByName(j, "engine2_dll", "GameUIService_001");
engine2_dll.HostStateMgr001 = findOffsetByName(j, "engine2_dll", "HostStateMgr001");
engine2_dll.INETSUPPORT_001 = findOffsetByName(j, "engine2_dll", "INETSUPPORT_001");
engine2_dll.InputService_001 = findOffsetByName(j, "engine2_dll", "InputService_001");
engine2_dll.KeyValueCache001 = findOffsetByName(j, "engine2_dll", "KeyValueCache001");
engine2_dll.MapListService_001 = findOffsetByName(j, "engine2_dll", "MapListService_001");
engine2_dll.NetworkClientService_001 = findOffsetByName(j, "engine2_dll", "NetworkClientService_001");
engine2_dll.NetworkP2PService_001 = findOffsetByName(j, "engine2_dll", "NetworkP2PService_001");
engine2_dll.NetworkServerService_001 = findOffsetByName(j, "engine2_dll", "NetworkServerService_001");
engine2_dll.NetworkService_001 = findOffsetByName(j, "engine2_dll", "NetworkService_001");
engine2_dll.RenderService_001 = findOffsetByName(j, "engine2_dll", "RenderService_001");
engine2_dll.ScreenshotService001 = findOffsetByName(j, "engine2_dll", "ScreenshotService001");
engine2_dll.SimpleEngineLoopService_001 = findOffsetByName(j, "engine2_dll", "SimpleEngineLoopService_001");
engine2_dll.SoundService_001 = findOffsetByName(j, "engine2_dll", "SoundService_001");
engine2_dll.Source2EngineToClient001 = findOffsetByName(j, "engine2_dll", "Source2EngineToClient001");
engine2_dll.Source2EngineToClientStringTable001 = findOffsetByName(j, "engine2_dll", "Source2EngineToClientStringTable001");
engine2_dll.Source2EngineToServer001 = findOffsetByName(j, "engine2_dll", "Source2EngineToServer001");
engine2_dll.Source2EngineToServerStringTable001 = findOffsetByName(j, "engine2_dll", "Source2EngineToServerStringTable001");
engine2_dll.SplitScreenService_001 = findOffsetByName(j, "engine2_dll", "SplitScreenService_001");
engine2_dll.StatsService_001 = findOffsetByName(j, "engine2_dll", "StatsService_001");
engine2_dll.ToolService_001 = findOffsetByName(j, "engine2_dll", "ToolService_001");
engine2_dll.VENGINE_GAMEUIFUNCS_VERSION005 = findOffsetByName(j, "engine2_dll", "VENGINE_GAMEUIFUNCS_VERSION005");
engine2_dll.VProfService_001 = findOffsetByName(j, "engine2_dll", "VProfService_001");
engine2_dll.dwBuildNumber = findOffsetByName(j, "engine2_dll", "dwBuildNumber");
engine2_dll.dwNetworkGameClient = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient");
engine2_dll.dwNetworkGameClient_clientTickCount = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_clientTickCount");
engine2_dll.dwNetworkGameClient_deltaTick = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_deltaTick");
engine2_dll.dwNetworkGameClient_isBackgroundMap = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_isBackgroundMap");
engine2_dll.dwNetworkGameClient_localPlayer = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_localPlayer");
engine2_dll.dwNetworkGameClient_maxClients = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_maxClients");
engine2_dll.dwNetworkGameClient_serverTickCount = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_serverTickCount");
engine2_dll.dwNetworkGameClient_signOnState = findOffsetByName(j, "engine2_dll", "dwNetworkGameClient_signOnState");
engine2_dll.dwWindowHeight = findOffsetByName(j, "engine2_dll", "dwWindowHeight");
engine2_dll.dwWindowWidth = findOffsetByName(j, "engine2_dll", "dwWindowWidth");

// Atribuições para filesystem_stdio_dll
// filesystem_stdio_dll Offsets
filesystem_stdio_dll.VAsyncFileSystem2_001 = findOffsetByName(j, "filesystem_stdio_dll", "VAsyncFileSystem2_001");
filesystem_stdio_dll.VFileSystem017 = findOffsetByName(j, "filesystem_stdio_dll", "VFileSystem017");

// Atribuições para host_dll
// host_dll Offsets
host_dll.DebugDrawQueueManager001 = findOffsetByName(j, "host_dll", "DebugDrawQueueManager001");
host_dll.GameModelInfo001 = findOffsetByName(j, "host_dll", "GameModelInfo001");
host_dll.GameSystem2HostHook = findOffsetByName(j, "host_dll", "GameSystem2HostHook");
host_dll.HostUtils001 = findOffsetByName(j, "host_dll", "HostUtils001");
host_dll.PredictionDiffManager001 = findOffsetByName(j, "host_dll", "PredictionDiffManager001");
host_dll.SaveRestoreDataVersion001 = findOffsetByName(j, "host_dll", "SaveRestoreDataVersion001");
host_dll.SinglePlayerSharedMemory001 = findOffsetByName(j, "host_dll", "SinglePlayerSharedMemory001");
host_dll.Source2Host001 = findOffsetByName(j, "host_dll", "Source2Host001");

// Atribuições para imemanager_dll
// imemanager_dll Offsets
imemanager_dll.IMEManager001 = findOffsetByName(j, "imemanager_dll", "IMEManager001");

// Atribuições para inputsystem_dll
// inputsystem_dll Offsets
inputsystem_dll.InputStackSystemVersion001 = findOffsetByName(j, "inputsystem_dll", "InputStackSystemVersion001");
inputsystem_dll.InputSystemVersion001 = findOffsetByName(j, "inputsystem_dll", "InputSystemVersion001");
inputsystem_dll.dwInputSystem = findOffsetByName(j, "inputsystem_dll", "dwInputSystem");

// Atribuições para localize_dll
// localize_dll Offsets
localize_dll.Localize_001 = findOffsetByName(j, "localize_dll", "Localize_001");

// Atribuições para matchmaking_dll
// matchmaking_dll Offsets
matchmaking_dll.GameTypes001 = findOffsetByName(j, "matchmaking_dll", "GameTypes001");
matchmaking_dll.MATCHFRAMEWORK_001 = findOffsetByName(j, "matchmaking_dll", "MATCHFRAMEWORK_001");
matchmaking_dll.dwGameTypes = findOffsetByName(j, "matchmaking_dll", "dwGameTypes");
matchmaking_dll.dwGameTypes_mapName = findOffsetByName(j, "matchmaking_dll", "dwGameTypes_mapName");

// Atribuições para materialsystem2_dll
// materialsystem2_dll Offsets
materialsystem2_dll.FontManager_001 = findOffsetByName(j, "materialsystem2_dll", "FontManager_001");
materialsystem2_dll.MaterialUtils_001 = findOffsetByName(j, "materialsystem2_dll", "MaterialUtils_001");
materialsystem2_dll.PostProcessingSystem_001 = findOffsetByName(j, "materialsystem2_dll", "PostProcessingSystem_001");
materialsystem2_dll.TextLayout_001 = findOffsetByName(j, "materialsystem2_dll", "TextLayout_001");
materialsystem2_dll.VMaterialSystem2_001 = findOffsetByName(j, "materialsystem2_dll", "VMaterialSystem2_001");

// Atribuições para meshsystem_dll
// meshsystem_dll Offsets
meshsystem_dll.MeshSystem001 = findOffsetByName(j, "meshsystem_dll", "MeshSystem001");

// Atribuições para navsystem_dll
// navsystem_dll Offsets
navsystem_dll.NavSystem001 = findOffsetByName(j, "navsystem_dll", "NavSystem001");

// Atribuições para networksystem_dll
// networksystem_dll Offsets
networksystem_dll.FlattenedSerializersVersion001 = findOffsetByName(j, "networksystem_dll", "FlattenedSerializersVersion001");
networksystem_dll.NetworkMessagesVersion001 = findOffsetByName(j, "networksystem_dll", "NetworkMessagesVersion001");
networksystem_dll.NetworkSystemVersion001 = findOffsetByName(j, "networksystem_dll", "NetworkSystemVersion001");
networksystem_dll.SerializedEntitiesVersion001 = findOffsetByName(j, "networksystem_dll", "SerializedEntitiesVersion001");

// Atribuições para panorama_dll
// panorama_dll Offsets
panorama_dll.PanoramaUIEngine001 = findOffsetByName(j, "panorama_dll", "PanoramaUIEngine001");

// Atribuições para panorama_text_pango_dll
// panorama_text_pango_dll Offsets
panorama_text_pango_dll.PanoramaTextServices001 = findOffsetByName(j, "panorama_text_pango_dll", "PanoramaTextServices001");

// Atribuições para panoramauiclient_dll
// panoramauiclient_dll Offsets
panoramauiclient_dll.PanoramaUIClient001 = findOffsetByName(j, "panoramauiclient_dll", "PanoramaUIClient001");

// Atribuições para particles_dll
// particles_dll Offsets
particles_dll.ParticleSystemMgr003 = findOffsetByName(j, "particles_dll", "ParticleSystemMgr003");

// Atribuições para pulse_system_dll
// pulse_system_dll Offsets
pulse_system_dll.IPulseSystem_001 = findOffsetByName(j, "pulse_system_dll", "IPulseSystem_001");

// Atribuições para rendersystemdx11_dll
// rendersystemdx11_dll Offsets
rendersystemdx11_dll.RenderDeviceMgr001 = findOffsetByName(j, "rendersystemdx11_dll", "RenderDeviceMgr001");
rendersystemdx11_dll.RenderUtils_001 = findOffsetByName(j, "rendersystemdx11_dll", "RenderUtils_001");
rendersystemdx11_dll.VRenderDeviceMgrBackdoor001 = findOffsetByName(j, "rendersystemdx11_dll", "VRenderDeviceMgrBackdoor001");

// Atribuições para resourcesystem_dll
// resourcesystem_dll Offsets
resourcesystem_dll.ResourceSystem013 = findOffsetByName(j, "resourcesystem_dll", "ResourceSystem013");

// Atribuições para scenefilecache_dll
// scenefilecache_dll Offsets
scenefilecache_dll.ResponseRulesCache001 = findOffsetByName(j, "scenefilecache_dll", "ResponseRulesCache001");
scenefilecache_dll.SceneFileCache002 = findOffsetByName(j, "scenefilecache_dll", "SceneFileCache002");

// Atribuições para scenesystem_dll
// scenesystem_dll Offsets
scenesystem_dll.RenderingPipelines_001 = findOffsetByName(j, "scenesystem_dll", "RenderingPipelines_001");
scenesystem_dll.SceneSystem_002 = findOffsetByName(j, "scenesystem_dll", "SceneSystem_002");
scenesystem_dll.SceneUtils_001 = findOffsetByName(j, "scenesystem_dll", "SceneUtils_001");

// Atribuições para schemasystem_dll
// schemasystem_dll Offsets
schemasystem_dll.SchemaSystem_001 = findOffsetByName(j, "schemasystem_dll", "SchemaSystem_001");

// Atribuições para server_dll
// server_dll Offsets
server_dll.EmptyWorldService001_Server = findOffsetByName(j, "server_dll", "EmptyWorldService001_Server");
server_dll.EntitySubclassUtilsV001 = findOffsetByName(j, "server_dll", "EntitySubclassUtilsV001");
server_dll.NavGameTest001 = findOffsetByName(j, "server_dll", "NavGameTest001");
server_dll.ServerToolsInfo_001 = findOffsetByName(j, "server_dll", "ServerToolsInfo_001");
server_dll.Source2GameClients001 = findOffsetByName(j, "server_dll", "Source2GameClients001");
server_dll.Source2GameDirector001 = findOffsetByName(j, "server_dll", "Source2GameDirector001");
server_dll.Source2GameEntities001 = findOffsetByName(j, "server_dll", "Source2GameEntities001");
server_dll.Source2Server001 = findOffsetByName(j, "server_dll", "Source2Server001");
server_dll.Source2ServerConfig001 = findOffsetByName(j, "server_dll", "Source2ServerConfig001");
server_dll.customnavsystem001 = findOffsetByName(j, "server_dll", "customnavsystem001");

// Atribuições para soundsystem_dll
// soundsystem_dll Offsets
soundsystem_dll.SoundOpSystem001 = findOffsetByName(j, "soundsystem_dll", "SoundOpSystem001");
soundsystem_dll.SoundOpSystemEdit001 = findOffsetByName(j, "soundsystem_dll", "SoundOpSystemEdit001");
soundsystem_dll.SoundSystem001 = findOffsetByName(j, "soundsystem_dll", "SoundSystem001");
soundsystem_dll.VMixEditTool001 = findOffsetByName(j, "soundsystem_dll", "VMixEditTool001");
soundsystem_dll.dwSoundSystem = findOffsetByName(j, "soundsystem_dll", "dwSoundSystem");
soundsystem_dll.dwSoundSystem_engineViewData = findOffsetByName(j, "soundsystem_dll", "dwSoundSystem_engineViewData");

// Atribuições para steamaudio_dll
// steamaudio_dll Offsets
steamaudio_dll.SteamAudio001 = findOffsetByName(j, "steamaudio_dll", "SteamAudio001");

// Atribuições para steamclient64_dll
// steamclient64_dll Offsets
steamclient64_dll.CLIENTENGINE_INTERFACE_VERSION005 = findOffsetByName(j, "steamclient64_dll", "CLIENTENGINE_INTERFACE_VERSION005");
steamclient64_dll.IVALIDATE001 = findOffsetByName(j, "steamclient64_dll", "IVALIDATE001");
steamclient64_dll.SteamClient006 = findOffsetByName(j, "steamclient64_dll", "SteamClient006");
steamclient64_dll.SteamClient007 = findOffsetByName(j, "steamclient64_dll", "SteamClient007");
steamclient64_dll.SteamClient008 = findOffsetByName(j, "steamclient64_dll", "SteamClient008");
steamclient64_dll.SteamClient009 = findOffsetByName(j, "steamclient64_dll", "SteamClient009");
steamclient64_dll.SteamClient010 = findOffsetByName(j, "steamclient64_dll", "SteamClient010");
steamclient64_dll.SteamClient011 = findOffsetByName(j, "steamclient64_dll", "SteamClient011");
steamclient64_dll.SteamClient012 = findOffsetByName(j, "steamclient64_dll", "SteamClient012");
steamclient64_dll.SteamClient013 = findOffsetByName(j, "steamclient64_dll", "SteamClient013");
steamclient64_dll.SteamClient014 = findOffsetByName(j, "steamclient64_dll", "SteamClient014");
steamclient64_dll.SteamClient015 = findOffsetByName(j, "steamclient64_dll", "SteamClient015");
steamclient64_dll.SteamClient016 = findOffsetByName(j, "steamclient64_dll", "SteamClient016");
steamclient64_dll.SteamClient017 = findOffsetByName(j, "steamclient64_dll", "SteamClient017");
steamclient64_dll.SteamClient018 = findOffsetByName(j, "steamclient64_dll", "SteamClient018");
steamclient64_dll.SteamClient019 = findOffsetByName(j, "steamclient64_dll", "SteamClient019");
steamclient64_dll.SteamClient020 = findOffsetByName(j, "steamclient64_dll", "SteamClient020");
steamclient64_dll.SteamClient021 = findOffsetByName(j, "steamclient64_dll", "SteamClient021");
steamclient64_dll.p2pvoice002 = findOffsetByName(j, "steamclient64_dll", "p2pvoice002");
steamclient64_dll.p2pvoicesingleton002 = findOffsetByName(j, "steamclient64_dll", "p2pvoicesingleton002");

// Atribuições para tier0_dll
// tier0_dll Offsets
tier0_dll.TestScriptMgr001 = findOffsetByName(j, "tier0_dll", "TestScriptMgr001");
tier0_dll.VEngineCvar007 = findOffsetByName(j, "tier0_dll", "VEngineCvar007");
tier0_dll.VProcessUtils002 = findOffsetByName(j, "tier0_dll", "VProcessUtils002");
tier0_dll.VStringTokenSystem001 = findOffsetByName(j, "tier0_dll", "VStringTokenSystem001");

// Atribuições para v8system_dll
// v8system_dll Offsets
v8system_dll.Source2V8System001 = findOffsetByName(j, "v8system_dll", "Source2V8System001");

// Atribuições para vphysics2_dll
// vphysics2_dll Offsets
vphysics2_dll.VPhysics2_Handle_Interface_001 = findOffsetByName(j, "vphysics2_dll", "VPhysics2_Handle_Interface_001");
vphysics2_dll.VPhysics2_Interface_001 = findOffsetByName(j, "vphysics2_dll", "VPhysics2_Interface_001");

// Atribuições para vscript_dll
// vscript_dll Offsets
vscript_dll.VScriptManager010 = findOffsetByName(j, "vscript_dll", "VScriptManager010");

// Atribuições para vstdlib_s64_dll
// vstdlib_s64_dll Offsets
vstdlib_s64_dll.IVALIDATE001 = findOffsetByName(j, "vstdlib_s64_dll", "IVALIDATE001");
vstdlib_s64_dll.VEngineCvar002 = findOffsetByName(j, "vstdlib_s64_dll", "VEngineCvar002");

// Atribuições para worldrenderer_dll
// worldrenderer_dll Offsets
worldrenderer_dll.WorldRendererMgr001 = findOffsetByName(j, "worldrenderer_dll", "WorldRendererMgr001");

// Atribuições para MaterialParam_t
// MaterialParam_t Offsets
MaterialParam_t.m_name = findOffsetByName(j, "MaterialParam_t", "m_name");

// Atribuições para MaterialParamVector_t
// MaterialParamVector_t Offsets
MaterialParamVector_t.m_value = findOffsetByName(j, "MaterialParamVector_t", "m_value");

// Atribuições para MaterialParamString_t
// MaterialParamString_t Offsets
MaterialParamString_t.m_value = findOffsetByName(j, "MaterialParamString_t", "m_value");

// Atribuições para PostProcessingResource_t
// PostProcessingResource_t Offsets
PostProcessingResource_t.m_bHasTonemapParams = findOffsetByName(j, "PostProcessingResource_t", "m_bHasTonemapParams");
PostProcessingResource_t.m_toneMapParams = findOffsetByName(j, "PostProcessingResource_t", "m_toneMapParams");
PostProcessingResource_t.m_bHasBloomParams = findOffsetByName(j, "PostProcessingResource_t", "m_bHasBloomParams");
PostProcessingResource_t.m_bloomParams = findOffsetByName(j, "PostProcessingResource_t", "m_bloomParams");
PostProcessingResource_t.m_bHasVignetteParams = findOffsetByName(j, "PostProcessingResource_t", "m_bHasVignetteParams");
PostProcessingResource_t.m_vignetteParams = findOffsetByName(j, "PostProcessingResource_t", "m_vignetteParams");
PostProcessingResource_t.m_bHasLocalContrastParams = findOffsetByName(j, "PostProcessingResource_t", "m_bHasLocalContrastParams");
PostProcessingResource_t.m_localConstrastParams = findOffsetByName(j, "PostProcessingResource_t", "m_localConstrastParams");
PostProcessingResource_t.m_nColorCorrectionVolumeDim = findOffsetByName(j, "PostProcessingResource_t", "m_nColorCorrectionVolumeDim");
PostProcessingResource_t.m_colorCorrectionVolumeData = findOffsetByName(j, "PostProcessingResource_t", "m_colorCorrectionVolumeData");
PostProcessingResource_t.m_bHasColorCorrection = findOffsetByName(j, "PostProcessingResource_t", "m_bHasColorCorrection");

// Atribuições para MaterialParamInt_t
// MaterialParamInt_t Offsets
MaterialParamInt_t.m_nValue = findOffsetByName(j, "MaterialParamInt_t", "m_nValue");

// Atribuições para PostProcessingVignetteParameters_t
// PostProcessingVignetteParameters_t Offsets
PostProcessingVignetteParameters_t.m_flVignetteStrength = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_flVignetteStrength");
PostProcessingVignetteParameters_t.m_vCenter = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_vCenter");
PostProcessingVignetteParameters_t.m_flRadius = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_flRadius");
PostProcessingVignetteParameters_t.m_flRoundness = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_flRoundness");
PostProcessingVignetteParameters_t.m_flFeather = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_flFeather");
PostProcessingVignetteParameters_t.m_vColorTint = findOffsetByName(j, "PostProcessingVignetteParameters_t", "m_vColorTint");

// Atribuições para PostProcessingLocalContrastParameters_t
// PostProcessingLocalContrastParameters_t Offsets
PostProcessingLocalContrastParameters_t.m_flLocalContrastStrength = findOffsetByName(j, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastStrength");
PostProcessingLocalContrastParameters_t.m_flLocalContrastEdgeStrength = findOffsetByName(j, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastEdgeStrength");
PostProcessingLocalContrastParameters_t.m_flLocalContrastVignetteStart = findOffsetByName(j, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteStart");
PostProcessingLocalContrastParameters_t.m_flLocalContrastVignetteEnd = findOffsetByName(j, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteEnd");
PostProcessingLocalContrastParameters_t.m_flLocalContrastVignetteBlur = findOffsetByName(j, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteBlur");

// Atribuições para PostProcessingTonemapParameters_t
// PostProcessingTonemapParameters_t Offsets
PostProcessingTonemapParameters_t.m_flExposureBias = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flExposureBias");
PostProcessingTonemapParameters_t.m_flShoulderStrength = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flShoulderStrength");
PostProcessingTonemapParameters_t.m_flLinearStrength = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flLinearStrength");
PostProcessingTonemapParameters_t.m_flLinearAngle = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flLinearAngle");
PostProcessingTonemapParameters_t.m_flToeStrength = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flToeStrength");
PostProcessingTonemapParameters_t.m_flToeNum = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flToeNum");
PostProcessingTonemapParameters_t.m_flToeDenom = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flToeDenom");
PostProcessingTonemapParameters_t.m_flWhitePoint = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flWhitePoint");
PostProcessingTonemapParameters_t.m_flLuminanceSource = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flLuminanceSource");
PostProcessingTonemapParameters_t.m_flExposureBiasShadows = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flExposureBiasShadows");
PostProcessingTonemapParameters_t.m_flExposureBiasHighlights = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flExposureBiasHighlights");
PostProcessingTonemapParameters_t.m_flMinShadowLum = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flMinShadowLum");
PostProcessingTonemapParameters_t.m_flMaxShadowLum = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flMaxShadowLum");
PostProcessingTonemapParameters_t.m_flMinHighlightLum = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flMinHighlightLum");
PostProcessingTonemapParameters_t.m_flMaxHighlightLum = findOffsetByName(j, "PostProcessingTonemapParameters_t", "m_flMaxHighlightLum");

// Atribuições para MaterialParamBuffer_t
// MaterialParamBuffer_t Offsets
MaterialParamBuffer_t.m_value = findOffsetByName(j, "MaterialParamBuffer_t", "m_value");

// Atribuições para MaterialResourceData_t
// MaterialResourceData_t Offsets
MaterialResourceData_t.m_materialName = findOffsetByName(j, "MaterialResourceData_t", "m_materialName");
MaterialResourceData_t.m_shaderName = findOffsetByName(j, "MaterialResourceData_t", "m_shaderName");
MaterialResourceData_t.m_intParams = findOffsetByName(j, "MaterialResourceData_t", "m_intParams");
MaterialResourceData_t.m_floatParams = findOffsetByName(j, "MaterialResourceData_t", "m_floatParams");
MaterialResourceData_t.m_vectorParams = findOffsetByName(j, "MaterialResourceData_t", "m_vectorParams");
MaterialResourceData_t.m_textureParams = findOffsetByName(j, "MaterialResourceData_t", "m_textureParams");
MaterialResourceData_t.m_dynamicParams = findOffsetByName(j, "MaterialResourceData_t", "m_dynamicParams");
MaterialResourceData_t.m_dynamicTextureParams = findOffsetByName(j, "MaterialResourceData_t", "m_dynamicTextureParams");
MaterialResourceData_t.m_intAttributes = findOffsetByName(j, "MaterialResourceData_t", "m_intAttributes");
MaterialResourceData_t.m_floatAttributes = findOffsetByName(j, "MaterialResourceData_t", "m_floatAttributes");
MaterialResourceData_t.m_vectorAttributes = findOffsetByName(j, "MaterialResourceData_t", "m_vectorAttributes");
MaterialResourceData_t.m_textureAttributes = findOffsetByName(j, "MaterialResourceData_t", "m_textureAttributes");
MaterialResourceData_t.m_stringAttributes = findOffsetByName(j, "MaterialResourceData_t", "m_stringAttributes");
MaterialResourceData_t.m_renderAttributesUsed = findOffsetByName(j, "MaterialResourceData_t", "m_renderAttributesUsed");

// Atribuições para PostProcessingBloomParameters_t
// PostProcessingBloomParameters_t Offsets
PostProcessingBloomParameters_t.m_blendMode = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_blendMode");
PostProcessingBloomParameters_t.m_flBloomStrength = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBloomStrength");
PostProcessingBloomParameters_t.m_flScreenBloomStrength = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flScreenBloomStrength");
PostProcessingBloomParameters_t.m_flBlurBloomStrength = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBlurBloomStrength");
PostProcessingBloomParameters_t.m_flBloomThreshold = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBloomThreshold");
PostProcessingBloomParameters_t.m_flBloomThresholdWidth = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBloomThresholdWidth");
PostProcessingBloomParameters_t.m_flSkyboxBloomStrength = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flSkyboxBloomStrength");
PostProcessingBloomParameters_t.m_flBloomStartValue = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBloomStartValue");
PostProcessingBloomParameters_t.m_flBlurWeight = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_flBlurWeight");
PostProcessingBloomParameters_t.m_vBlurTint = findOffsetByName(j, "PostProcessingBloomParameters_t", "m_vBlurTint");

// Atribuições para MaterialParamFloat_t
// MaterialParamFloat_t Offsets
MaterialParamFloat_t.m_flValue = findOffsetByName(j, "MaterialParamFloat_t", "m_flValue");

// Atribuições para MaterialParamTexture_t
// MaterialParamTexture_t Offsets
MaterialParamTexture_t.m_pValue = findOffsetByName(j, "MaterialParamTexture_t", "m_pValue");

// Atribuições para ChangeAccessorFieldPathIndex_t
// ChangeAccessorFieldPathIndex_t Offsets
ChangeAccessorFieldPathIndex_t.m_Value = findOffsetByName(j, "ChangeAccessorFieldPathIndex_t", "m_Value");

// Atribuições para C_OP_RemapGravityToVector
// C_OP_RemapGravityToVector Offsets
C_OP_RemapGravityToVector.m_vInput1 = findOffsetByName(j, "C_OP_RemapGravityToVector", "m_vInput1");
C_OP_RemapGravityToVector.m_nOutputField = findOffsetByName(j, "C_OP_RemapGravityToVector", "m_nOutputField");
C_OP_RemapGravityToVector.m_nSetMethod = findOffsetByName(j, "C_OP_RemapGravityToVector", "m_nSetMethod");
C_OP_RemapGravityToVector.m_bNormalizedOutput = findOffsetByName(j, "C_OP_RemapGravityToVector", "m_bNormalizedOutput");

// Atribuições para C_OP_Decay
// C_OP_Decay Offsets
C_OP_Decay.m_bRopeDecay = findOffsetByName(j, "C_OP_Decay", "m_bRopeDecay");
C_OP_Decay.m_bForcePreserveParticleOrder = findOffsetByName(j, "C_OP_Decay", "m_bForcePreserveParticleOrder");

// Atribuições para C_OP_RenderDeferredLight
// C_OP_RenderDeferredLight Offsets
C_OP_RenderDeferredLight.m_bUseAlphaTestWindow = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_bUseAlphaTestWindow");
C_OP_RenderDeferredLight.m_bUseTexture = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_bUseTexture");
C_OP_RenderDeferredLight.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flRadiusScale");
C_OP_RenderDeferredLight.m_flAlphaScale = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flAlphaScale");
C_OP_RenderDeferredLight.m_nAlpha2Field = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nAlpha2Field");
C_OP_RenderDeferredLight.m_vecColorScale = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_vecColorScale");
C_OP_RenderDeferredLight.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nColorBlendType");
C_OP_RenderDeferredLight.m_flLightDistance = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flLightDistance");
C_OP_RenderDeferredLight.m_flStartFalloff = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flStartFalloff");
C_OP_RenderDeferredLight.m_flDistanceFalloff = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flDistanceFalloff");
C_OP_RenderDeferredLight.m_flSpotFoV = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_flSpotFoV");
C_OP_RenderDeferredLight.m_nAlphaTestPointField = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nAlphaTestPointField");
C_OP_RenderDeferredLight.m_nAlphaTestRangeField = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nAlphaTestRangeField");
C_OP_RenderDeferredLight.m_nAlphaTestSharpnessField = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nAlphaTestSharpnessField");
C_OP_RenderDeferredLight.m_hTexture = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_hTexture");
C_OP_RenderDeferredLight.m_nHSVShiftControlPoint = findOffsetByName(j, "C_OP_RenderDeferredLight", "m_nHSVShiftControlPoint");

// Atribuições para C_OP_RemapSpeedtoCP
// C_OP_RemapSpeedtoCP Offsets
C_OP_RemapSpeedtoCP.m_nInControlPointNumber = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_nInControlPointNumber");
C_OP_RemapSpeedtoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_nOutControlPointNumber");
C_OP_RemapSpeedtoCP.m_nField = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_nField");
C_OP_RemapSpeedtoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_flInputMin");
C_OP_RemapSpeedtoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_flInputMax");
C_OP_RemapSpeedtoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_flOutputMin");
C_OP_RemapSpeedtoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_flOutputMax");
C_OP_RemapSpeedtoCP.m_bUseDeltaV = findOffsetByName(j, "C_OP_RemapSpeedtoCP", "m_bUseDeltaV");

// Atribuições para C_OP_RemapTransformToVelocity
// C_OP_RemapTransformToVelocity Offsets
C_OP_RemapTransformToVelocity.m_TransformInput = findOffsetByName(j, "C_OP_RemapTransformToVelocity", "m_TransformInput");

// Atribuições para CollisionGroupContext_t
// CollisionGroupContext_t Offsets
CollisionGroupContext_t.m_nCollisionGroupNumber = findOffsetByName(j, "CollisionGroupContext_t", "m_nCollisionGroupNumber");

// Atribuições para CParticleModelInput
// CParticleModelInput Offsets
CParticleModelInput.m_nType = findOffsetByName(j, "CParticleModelInput", "m_nType");
CParticleModelInput.m_NamedValue = findOffsetByName(j, "CParticleModelInput", "m_NamedValue");
CParticleModelInput.m_nControlPoint = findOffsetByName(j, "CParticleModelInput", "m_nControlPoint");

// Atribuições para CParticleFunctionPreEmission
// CParticleFunctionPreEmission Offsets
CParticleFunctionPreEmission.m_bRunOnce = findOffsetByName(j, "CParticleFunctionPreEmission", "m_bRunOnce");

// Atribuições para C_OP_FadeOutSimple
// C_OP_FadeOutSimple Offsets
C_OP_FadeOutSimple.m_flFadeOutTime = findOffsetByName(j, "C_OP_FadeOutSimple", "m_flFadeOutTime");
C_OP_FadeOutSimple.m_nFieldOutput = findOffsetByName(j, "C_OP_FadeOutSimple", "m_nFieldOutput");

// Atribuições para C_OP_SpringToVectorConstraint
// C_OP_SpringToVectorConstraint Offsets
C_OP_SpringToVectorConstraint.m_flRestLength = findOffsetByName(j, "C_OP_SpringToVectorConstraint", "m_flRestLength");
C_OP_SpringToVectorConstraint.m_flMinDistance = findOffsetByName(j, "C_OP_SpringToVectorConstraint", "m_flMinDistance");
C_OP_SpringToVectorConstraint.m_flMaxDistance = findOffsetByName(j, "C_OP_SpringToVectorConstraint", "m_flMaxDistance");
C_OP_SpringToVectorConstraint.m_flRestingLength = findOffsetByName(j, "C_OP_SpringToVectorConstraint", "m_flRestingLength");
C_OP_SpringToVectorConstraint.m_vecAnchorVector = findOffsetByName(j, "C_OP_SpringToVectorConstraint", "m_vecAnchorVector");

// Atribuições para C_OP_RenderRopes
// C_OP_RenderRopes Offsets
C_OP_RenderRopes.m_bEnableFadingAndClamping = findOffsetByName(j, "C_OP_RenderRopes", "m_bEnableFadingAndClamping");
C_OP_RenderRopes.m_flMinSize = findOffsetByName(j, "C_OP_RenderRopes", "m_flMinSize");
C_OP_RenderRopes.m_flMaxSize = findOffsetByName(j, "C_OP_RenderRopes", "m_flMaxSize");
C_OP_RenderRopes.m_flStartFadeSize = findOffsetByName(j, "C_OP_RenderRopes", "m_flStartFadeSize");
C_OP_RenderRopes.m_flEndFadeSize = findOffsetByName(j, "C_OP_RenderRopes", "m_flEndFadeSize");
C_OP_RenderRopes.m_flStartFadeDot = findOffsetByName(j, "C_OP_RenderRopes", "m_flStartFadeDot");
C_OP_RenderRopes.m_flEndFadeDot = findOffsetByName(j, "C_OP_RenderRopes", "m_flEndFadeDot");
C_OP_RenderRopes.m_flRadiusTaper = findOffsetByName(j, "C_OP_RenderRopes", "m_flRadiusTaper");
C_OP_RenderRopes.m_nMinTesselation = findOffsetByName(j, "C_OP_RenderRopes", "m_nMinTesselation");
C_OP_RenderRopes.m_nMaxTesselation = findOffsetByName(j, "C_OP_RenderRopes", "m_nMaxTesselation");
C_OP_RenderRopes.m_flTessScale = findOffsetByName(j, "C_OP_RenderRopes", "m_flTessScale");
C_OP_RenderRopes.m_flTextureVWorldSize = findOffsetByName(j, "C_OP_RenderRopes", "m_flTextureVWorldSize");
C_OP_RenderRopes.m_flTextureVScrollRate = findOffsetByName(j, "C_OP_RenderRopes", "m_flTextureVScrollRate");
C_OP_RenderRopes.m_flTextureVOffset = findOffsetByName(j, "C_OP_RenderRopes", "m_flTextureVOffset");
C_OP_RenderRopes.m_nTextureVParamsCP = findOffsetByName(j, "C_OP_RenderRopes", "m_nTextureVParamsCP");
C_OP_RenderRopes.m_bClampV = findOffsetByName(j, "C_OP_RenderRopes", "m_bClampV");
C_OP_RenderRopes.m_nScaleCP1 = findOffsetByName(j, "C_OP_RenderRopes", "m_nScaleCP1");
C_OP_RenderRopes.m_nScaleCP2 = findOffsetByName(j, "C_OP_RenderRopes", "m_nScaleCP2");
C_OP_RenderRopes.m_flScaleVSizeByControlPointDistance = findOffsetByName(j, "C_OP_RenderRopes", "m_flScaleVSizeByControlPointDistance");
C_OP_RenderRopes.m_flScaleVScrollByControlPointDistance = findOffsetByName(j, "C_OP_RenderRopes", "m_flScaleVScrollByControlPointDistance");
C_OP_RenderRopes.m_flScaleVOffsetByControlPointDistance = findOffsetByName(j, "C_OP_RenderRopes", "m_flScaleVOffsetByControlPointDistance");
C_OP_RenderRopes.m_bUseScalarForTextureCoordinate = findOffsetByName(j, "C_OP_RenderRopes", "m_bUseScalarForTextureCoordinate");
C_OP_RenderRopes.m_nScalarFieldForTextureCoordinate = findOffsetByName(j, "C_OP_RenderRopes", "m_nScalarFieldForTextureCoordinate");
C_OP_RenderRopes.m_flScalarAttributeTextureCoordScale = findOffsetByName(j, "C_OP_RenderRopes", "m_flScalarAttributeTextureCoordScale");
C_OP_RenderRopes.m_bReverseOrder = findOffsetByName(j, "C_OP_RenderRopes", "m_bReverseOrder");
C_OP_RenderRopes.m_bClosedLoop = findOffsetByName(j, "C_OP_RenderRopes", "m_bClosedLoop");
C_OP_RenderRopes.m_nOrientationType = findOffsetByName(j, "C_OP_RenderRopes", "m_nOrientationType");
C_OP_RenderRopes.m_nVectorFieldForOrientation = findOffsetByName(j, "C_OP_RenderRopes", "m_nVectorFieldForOrientation");
C_OP_RenderRopes.m_bDrawAsOpaque = findOffsetByName(j, "C_OP_RenderRopes", "m_bDrawAsOpaque");
C_OP_RenderRopes.m_bGenerateNormals = findOffsetByName(j, "C_OP_RenderRopes", "m_bGenerateNormals");

// Atribuições para C_INIT_StatusEffectCitadel
// C_INIT_StatusEffectCitadel Offsets
C_INIT_StatusEffectCitadel.m_flSFXColorWarpAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXColorWarpAmount");
C_INIT_StatusEffectCitadel.m_flSFXNormalAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXNormalAmount");
C_INIT_StatusEffectCitadel.m_flSFXMetalnessAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXMetalnessAmount");
C_INIT_StatusEffectCitadel.m_flSFXRoughnessAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXRoughnessAmount");
C_INIT_StatusEffectCitadel.m_flSFXSelfIllumAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSelfIllumAmount");
C_INIT_StatusEffectCitadel.m_flSFXSScale = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSScale");
C_INIT_StatusEffectCitadel.m_flSFXSScrollX = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSScrollX");
C_INIT_StatusEffectCitadel.m_flSFXSScrollY = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSScrollY");
C_INIT_StatusEffectCitadel.m_flSFXSScrollZ = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSScrollZ");
C_INIT_StatusEffectCitadel.m_flSFXSOffsetX = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSOffsetX");
C_INIT_StatusEffectCitadel.m_flSFXSOffsetY = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSOffsetY");
C_INIT_StatusEffectCitadel.m_flSFXSOffsetZ = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSOffsetZ");
C_INIT_StatusEffectCitadel.m_nDetailCombo = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_nDetailCombo");
C_INIT_StatusEffectCitadel.m_flSFXSDetailAmount = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSDetailAmount");
C_INIT_StatusEffectCitadel.m_flSFXSDetailScale = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSDetailScale");
C_INIT_StatusEffectCitadel.m_flSFXSDetailScrollX = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSDetailScrollX");
C_INIT_StatusEffectCitadel.m_flSFXSDetailScrollY = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSDetailScrollY");
C_INIT_StatusEffectCitadel.m_flSFXSDetailScrollZ = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSDetailScrollZ");
C_INIT_StatusEffectCitadel.m_flSFXSUseModelUVs = findOffsetByName(j, "C_INIT_StatusEffectCitadel", "m_flSFXSUseModelUVs");

// Atribuições para C_OP_RenderSound
// C_OP_RenderSound Offsets
C_OP_RenderSound.m_flDurationScale = findOffsetByName(j, "C_OP_RenderSound", "m_flDurationScale");
C_OP_RenderSound.m_flSndLvlScale = findOffsetByName(j, "C_OP_RenderSound", "m_flSndLvlScale");
C_OP_RenderSound.m_flPitchScale = findOffsetByName(j, "C_OP_RenderSound", "m_flPitchScale");
C_OP_RenderSound.m_flVolumeScale = findOffsetByName(j, "C_OP_RenderSound", "m_flVolumeScale");
C_OP_RenderSound.m_nSndLvlField = findOffsetByName(j, "C_OP_RenderSound", "m_nSndLvlField");
C_OP_RenderSound.m_nDurationField = findOffsetByName(j, "C_OP_RenderSound", "m_nDurationField");
C_OP_RenderSound.m_nPitchField = findOffsetByName(j, "C_OP_RenderSound", "m_nPitchField");
C_OP_RenderSound.m_nVolumeField = findOffsetByName(j, "C_OP_RenderSound", "m_nVolumeField");
C_OP_RenderSound.m_nChannel = findOffsetByName(j, "C_OP_RenderSound", "m_nChannel");
C_OP_RenderSound.m_nCPReference = findOffsetByName(j, "C_OP_RenderSound", "m_nCPReference");
C_OP_RenderSound.m_pszSoundName = findOffsetByName(j, "C_OP_RenderSound", "m_pszSoundName");
C_OP_RenderSound.m_bSuppressStopSoundEvent = findOffsetByName(j, "C_OP_RenderSound", "m_bSuppressStopSoundEvent");

// Atribuições para CParticleVisibilityInputs
// CParticleVisibilityInputs Offsets
CParticleVisibilityInputs.m_flCameraBias = findOffsetByName(j, "CParticleVisibilityInputs", "m_flCameraBias");
CParticleVisibilityInputs.m_nCPin = findOffsetByName(j, "CParticleVisibilityInputs", "m_nCPin");
CParticleVisibilityInputs.m_flProxyRadius = findOffsetByName(j, "CParticleVisibilityInputs", "m_flProxyRadius");
CParticleVisibilityInputs.m_flInputMin = findOffsetByName(j, "CParticleVisibilityInputs", "m_flInputMin");
CParticleVisibilityInputs.m_flInputMax = findOffsetByName(j, "CParticleVisibilityInputs", "m_flInputMax");
CParticleVisibilityInputs.m_flInputPixelVisFade = findOffsetByName(j, "CParticleVisibilityInputs", "m_flInputPixelVisFade");
CParticleVisibilityInputs.m_flNoPixelVisibilityFallback = findOffsetByName(j, "CParticleVisibilityInputs", "m_flNoPixelVisibilityFallback");
CParticleVisibilityInputs.m_flDistanceInputMin = findOffsetByName(j, "CParticleVisibilityInputs", "m_flDistanceInputMin");
CParticleVisibilityInputs.m_flDistanceInputMax = findOffsetByName(j, "CParticleVisibilityInputs", "m_flDistanceInputMax");
CParticleVisibilityInputs.m_flDotInputMin = findOffsetByName(j, "CParticleVisibilityInputs", "m_flDotInputMin");
CParticleVisibilityInputs.m_flDotInputMax = findOffsetByName(j, "CParticleVisibilityInputs", "m_flDotInputMax");
CParticleVisibilityInputs.m_bDotCPAngles = findOffsetByName(j, "CParticleVisibilityInputs", "m_bDotCPAngles");
CParticleVisibilityInputs.m_bDotCameraAngles = findOffsetByName(j, "CParticleVisibilityInputs", "m_bDotCameraAngles");
CParticleVisibilityInputs.m_flAlphaScaleMin = findOffsetByName(j, "CParticleVisibilityInputs", "m_flAlphaScaleMin");
CParticleVisibilityInputs.m_flAlphaScaleMax = findOffsetByName(j, "CParticleVisibilityInputs", "m_flAlphaScaleMax");
CParticleVisibilityInputs.m_flRadiusScaleMin = findOffsetByName(j, "CParticleVisibilityInputs", "m_flRadiusScaleMin");
CParticleVisibilityInputs.m_flRadiusScaleMax = findOffsetByName(j, "CParticleVisibilityInputs", "m_flRadiusScaleMax");
CParticleVisibilityInputs.m_flRadiusScaleFOVBase = findOffsetByName(j, "CParticleVisibilityInputs", "m_flRadiusScaleFOVBase");
CParticleVisibilityInputs.m_bRightEye = findOffsetByName(j, "CParticleVisibilityInputs", "m_bRightEye");

// Atribuições para C_OP_SetControlPointsToParticle
// C_OP_SetControlPointsToParticle Offsets
C_OP_SetControlPointsToParticle.m_nChildGroupID = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nChildGroupID");
C_OP_SetControlPointsToParticle.m_nFirstControlPoint = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nFirstControlPoint");
C_OP_SetControlPointsToParticle.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nNumControlPoints");
C_OP_SetControlPointsToParticle.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nFirstSourcePoint");
C_OP_SetControlPointsToParticle.m_bSetOrientation = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_bSetOrientation");
C_OP_SetControlPointsToParticle.m_nOrientationMode = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nOrientationMode");
C_OP_SetControlPointsToParticle.m_nSetParent = findOffsetByName(j, "C_OP_SetControlPointsToParticle", "m_nSetParent");

// Atribuições para C_OP_RemapSDFDistanceToVectorAttribute
// C_OP_RemapSDFDistanceToVectorAttribute Offsets
C_OP_RemapSDFDistanceToVectorAttribute.m_nVectorFieldOutput = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_nVectorFieldOutput");
C_OP_RemapSDFDistanceToVectorAttribute.m_nVectorFieldInput = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_nVectorFieldInput");
C_OP_RemapSDFDistanceToVectorAttribute.m_flMinDistance = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_flMinDistance");
C_OP_RemapSDFDistanceToVectorAttribute.m_flMaxDistance = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_flMaxDistance");
C_OP_RemapSDFDistanceToVectorAttribute.m_vValueBelowMin = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_vValueBelowMin");
C_OP_RemapSDFDistanceToVectorAttribute.m_vValueAtMin = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_vValueAtMin");
C_OP_RemapSDFDistanceToVectorAttribute.m_vValueAtMax = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_vValueAtMax");
C_OP_RemapSDFDistanceToVectorAttribute.m_vValueAboveMax = findOffsetByName(j, "C_OP_RemapSDFDistanceToVectorAttribute", "m_vValueAboveMax");

// Atribuições para C_OP_RemapCPVelocityToVector
// C_OP_RemapCPVelocityToVector Offsets
C_OP_RemapCPVelocityToVector.m_nControlPoint = findOffsetByName(j, "C_OP_RemapCPVelocityToVector", "m_nControlPoint");
C_OP_RemapCPVelocityToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapCPVelocityToVector", "m_nFieldOutput");
C_OP_RemapCPVelocityToVector.m_flScale = findOffsetByName(j, "C_OP_RemapCPVelocityToVector", "m_flScale");
C_OP_RemapCPVelocityToVector.m_bNormalize = findOffsetByName(j, "C_OP_RemapCPVelocityToVector", "m_bNormalize");

// Atribuições para C_OP_PointVectorAtNextParticle
// C_OP_PointVectorAtNextParticle Offsets
C_OP_PointVectorAtNextParticle.m_nFieldOutput = findOffsetByName(j, "C_OP_PointVectorAtNextParticle", "m_nFieldOutput");
C_OP_PointVectorAtNextParticle.m_flInterpolation = findOffsetByName(j, "C_OP_PointVectorAtNextParticle", "m_flInterpolation");

// Atribuições para ParticlePreviewBodyGroup_t
// ParticlePreviewBodyGroup_t Offsets
ParticlePreviewBodyGroup_t.m_bodyGroupName = findOffsetByName(j, "ParticlePreviewBodyGroup_t", "m_bodyGroupName");
ParticlePreviewBodyGroup_t.m_nValue = findOffsetByName(j, "ParticlePreviewBodyGroup_t", "m_nValue");

// Atribuições para C_OP_OscillateScalarSimple
// C_OP_OscillateScalarSimple Offsets
C_OP_OscillateScalarSimple.m_Rate = findOffsetByName(j, "C_OP_OscillateScalarSimple", "m_Rate");
C_OP_OscillateScalarSimple.m_Frequency = findOffsetByName(j, "C_OP_OscillateScalarSimple", "m_Frequency");
C_OP_OscillateScalarSimple.m_nField = findOffsetByName(j, "C_OP_OscillateScalarSimple", "m_nField");
C_OP_OscillateScalarSimple.m_flOscMult = findOffsetByName(j, "C_OP_OscillateScalarSimple", "m_flOscMult");
C_OP_OscillateScalarSimple.m_flOscAdd = findOffsetByName(j, "C_OP_OscillateScalarSimple", "m_flOscAdd");

// Atribuições para C_INIT_StatusEffect
// C_INIT_StatusEffect Offsets
C_INIT_StatusEffect.m_nDetail2Combo = findOffsetByName(j, "C_INIT_StatusEffect", "m_nDetail2Combo");
C_INIT_StatusEffect.m_flDetail2Rotation = findOffsetByName(j, "C_INIT_StatusEffect", "m_flDetail2Rotation");
C_INIT_StatusEffect.m_flDetail2Scale = findOffsetByName(j, "C_INIT_StatusEffect", "m_flDetail2Scale");
C_INIT_StatusEffect.m_flDetail2BlendFactor = findOffsetByName(j, "C_INIT_StatusEffect", "m_flDetail2BlendFactor");
C_INIT_StatusEffect.m_flColorWarpIntensity = findOffsetByName(j, "C_INIT_StatusEffect", "m_flColorWarpIntensity");
C_INIT_StatusEffect.m_flDiffuseWarpBlendToFull = findOffsetByName(j, "C_INIT_StatusEffect", "m_flDiffuseWarpBlendToFull");
C_INIT_StatusEffect.m_flEnvMapIntensity = findOffsetByName(j, "C_INIT_StatusEffect", "m_flEnvMapIntensity");
C_INIT_StatusEffect.m_flAmbientScale = findOffsetByName(j, "C_INIT_StatusEffect", "m_flAmbientScale");
C_INIT_StatusEffect.m_specularColor = findOffsetByName(j, "C_INIT_StatusEffect", "m_specularColor");
C_INIT_StatusEffect.m_flSpecularScale = findOffsetByName(j, "C_INIT_StatusEffect", "m_flSpecularScale");
C_INIT_StatusEffect.m_flSpecularExponent = findOffsetByName(j, "C_INIT_StatusEffect", "m_flSpecularExponent");
C_INIT_StatusEffect.m_flSpecularExponentBlendToFull = findOffsetByName(j, "C_INIT_StatusEffect", "m_flSpecularExponentBlendToFull");
C_INIT_StatusEffect.m_flSpecularBlendToFull = findOffsetByName(j, "C_INIT_StatusEffect", "m_flSpecularBlendToFull");
C_INIT_StatusEffect.m_rimLightColor = findOffsetByName(j, "C_INIT_StatusEffect", "m_rimLightColor");
C_INIT_StatusEffect.m_flRimLightScale = findOffsetByName(j, "C_INIT_StatusEffect", "m_flRimLightScale");
C_INIT_StatusEffect.m_flReflectionsTintByBaseBlendToNone = findOffsetByName(j, "C_INIT_StatusEffect", "m_flReflectionsTintByBaseBlendToNone");
C_INIT_StatusEffect.m_flMetalnessBlendToFull = findOffsetByName(j, "C_INIT_StatusEffect", "m_flMetalnessBlendToFull");
C_INIT_StatusEffect.m_flSelfIllumBlendToFull = findOffsetByName(j, "C_INIT_StatusEffect", "m_flSelfIllumBlendToFull");

// Atribuições para C_INIT_RtEnvCull
// C_INIT_RtEnvCull Offsets
C_INIT_RtEnvCull.m_vecTestDir = findOffsetByName(j, "C_INIT_RtEnvCull", "m_vecTestDir");
C_INIT_RtEnvCull.m_vecTestNormal = findOffsetByName(j, "C_INIT_RtEnvCull", "m_vecTestNormal");
C_INIT_RtEnvCull.m_bUseVelocity = findOffsetByName(j, "C_INIT_RtEnvCull", "m_bUseVelocity");
C_INIT_RtEnvCull.m_bCullOnMiss = findOffsetByName(j, "C_INIT_RtEnvCull", "m_bCullOnMiss");
C_INIT_RtEnvCull.m_bLifeAdjust = findOffsetByName(j, "C_INIT_RtEnvCull", "m_bLifeAdjust");
C_INIT_RtEnvCull.m_RtEnvName = findOffsetByName(j, "C_INIT_RtEnvCull", "m_RtEnvName");
C_INIT_RtEnvCull.m_nRTEnvCP = findOffsetByName(j, "C_INIT_RtEnvCull", "m_nRTEnvCP");
C_INIT_RtEnvCull.m_nComponent = findOffsetByName(j, "C_INIT_RtEnvCull", "m_nComponent");

// Atribuições para C_OP_ConstrainDistance
// C_OP_ConstrainDistance Offsets
C_OP_ConstrainDistance.m_fMinDistance = findOffsetByName(j, "C_OP_ConstrainDistance", "m_fMinDistance");
C_OP_ConstrainDistance.m_fMaxDistance = findOffsetByName(j, "C_OP_ConstrainDistance", "m_fMaxDistance");
C_OP_ConstrainDistance.m_nControlPointNumber = findOffsetByName(j, "C_OP_ConstrainDistance", "m_nControlPointNumber");
C_OP_ConstrainDistance.m_CenterOffset = findOffsetByName(j, "C_OP_ConstrainDistance", "m_CenterOffset");
C_OP_ConstrainDistance.m_bGlobalCenter = findOffsetByName(j, "C_OP_ConstrainDistance", "m_bGlobalCenter");

// Atribuições para C_INIT_RandomVector
// C_INIT_RandomVector Offsets
C_INIT_RandomVector.m_vecMin = findOffsetByName(j, "C_INIT_RandomVector", "m_vecMin");
C_INIT_RandomVector.m_vecMax = findOffsetByName(j, "C_INIT_RandomVector", "m_vecMax");
C_INIT_RandomVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomVector", "m_nFieldOutput");
C_INIT_RandomVector.m_randomnessParameters = findOffsetByName(j, "C_INIT_RandomVector", "m_randomnessParameters");

// Atribuições para C_INIT_InitialVelocityNoise
// C_INIT_InitialVelocityNoise Offsets
C_INIT_InitialVelocityNoise.m_vecAbsVal = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_vecAbsVal");
C_INIT_InitialVelocityNoise.m_vecAbsValInv = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_vecAbsValInv");
C_INIT_InitialVelocityNoise.m_vecOffsetLoc = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_vecOffsetLoc");
C_INIT_InitialVelocityNoise.m_flOffset = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_flOffset");
C_INIT_InitialVelocityNoise.m_vecOutputMin = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_vecOutputMin");
C_INIT_InitialVelocityNoise.m_vecOutputMax = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_vecOutputMax");
C_INIT_InitialVelocityNoise.m_flNoiseScale = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_flNoiseScale");
C_INIT_InitialVelocityNoise.m_flNoiseScaleLoc = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_flNoiseScaleLoc");
C_INIT_InitialVelocityNoise.m_TransformInput = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_TransformInput");
C_INIT_InitialVelocityNoise.m_bIgnoreDt = findOffsetByName(j, "C_INIT_InitialVelocityNoise", "m_bIgnoreDt");

// Atribuições para ParticleChildrenInfo_t
// ParticleChildrenInfo_t Offsets
ParticleChildrenInfo_t.m_ChildRef = findOffsetByName(j, "ParticleChildrenInfo_t", "m_ChildRef");
ParticleChildrenInfo_t.m_flDelay = findOffsetByName(j, "ParticleChildrenInfo_t", "m_flDelay");
ParticleChildrenInfo_t.m_bEndCap = findOffsetByName(j, "ParticleChildrenInfo_t", "m_bEndCap");
ParticleChildrenInfo_t.m_bDisableChild = findOffsetByName(j, "ParticleChildrenInfo_t", "m_bDisableChild");
ParticleChildrenInfo_t.m_nDetailLevel = findOffsetByName(j, "ParticleChildrenInfo_t", "m_nDetailLevel");

// Atribuições para C_OP_RemapScalarOnceTimed
// C_OP_RemapScalarOnceTimed Offsets
C_OP_RemapScalarOnceTimed.m_bProportional = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_bProportional");
C_OP_RemapScalarOnceTimed.m_nFieldInput = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_nFieldInput");
C_OP_RemapScalarOnceTimed.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_nFieldOutput");
C_OP_RemapScalarOnceTimed.m_flInputMin = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_flInputMin");
C_OP_RemapScalarOnceTimed.m_flInputMax = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_flInputMax");
C_OP_RemapScalarOnceTimed.m_flOutputMin = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_flOutputMin");
C_OP_RemapScalarOnceTimed.m_flOutputMax = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_flOutputMax");
C_OP_RemapScalarOnceTimed.m_flRemapTime = findOffsetByName(j, "C_OP_RemapScalarOnceTimed", "m_flRemapTime");

// Atribuições para C_OP_PlaneCull
// C_OP_PlaneCull Offsets
C_OP_PlaneCull.m_nPlaneControlPoint = findOffsetByName(j, "C_OP_PlaneCull", "m_nPlaneControlPoint");
C_OP_PlaneCull.m_vecPlaneDirection = findOffsetByName(j, "C_OP_PlaneCull", "m_vecPlaneDirection");
C_OP_PlaneCull.m_bLocalSpace = findOffsetByName(j, "C_OP_PlaneCull", "m_bLocalSpace");
C_OP_PlaneCull.m_flPlaneOffset = findOffsetByName(j, "C_OP_PlaneCull", "m_flPlaneOffset");

// Atribuições para C_INIT_VelocityRandom
// C_INIT_VelocityRandom Offsets
C_INIT_VelocityRandom.m_nControlPointNumber = findOffsetByName(j, "C_INIT_VelocityRandom", "m_nControlPointNumber");
C_INIT_VelocityRandom.m_fSpeedMin = findOffsetByName(j, "C_INIT_VelocityRandom", "m_fSpeedMin");
C_INIT_VelocityRandom.m_fSpeedMax = findOffsetByName(j, "C_INIT_VelocityRandom", "m_fSpeedMax");
C_INIT_VelocityRandom.m_LocalCoordinateSystemSpeedMin = findOffsetByName(j, "C_INIT_VelocityRandom", "m_LocalCoordinateSystemSpeedMin");
C_INIT_VelocityRandom.m_LocalCoordinateSystemSpeedMax = findOffsetByName(j, "C_INIT_VelocityRandom", "m_LocalCoordinateSystemSpeedMax");
C_INIT_VelocityRandom.m_bIgnoreDT = findOffsetByName(j, "C_INIT_VelocityRandom", "m_bIgnoreDT");
C_INIT_VelocityRandom.m_randomnessParameters = findOffsetByName(j, "C_INIT_VelocityRandom", "m_randomnessParameters");

// Atribuições para C_OP_ModelDampenMovement
// C_OP_ModelDampenMovement Offsets
C_OP_ModelDampenMovement.m_nControlPointNumber = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_nControlPointNumber");
C_OP_ModelDampenMovement.m_bBoundBox = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_bBoundBox");
C_OP_ModelDampenMovement.m_bOutside = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_bOutside");
C_OP_ModelDampenMovement.m_bUseBones = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_bUseBones");
C_OP_ModelDampenMovement.m_HitboxSetName = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_HitboxSetName");
C_OP_ModelDampenMovement.m_vecPosOffset = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_vecPosOffset");
C_OP_ModelDampenMovement.m_fDrag = findOffsetByName(j, "C_OP_ModelDampenMovement", "m_fDrag");

// Atribuições para C_OP_TwistAroundAxis
// C_OP_TwistAroundAxis Offsets
C_OP_TwistAroundAxis.m_fForceAmount = findOffsetByName(j, "C_OP_TwistAroundAxis", "m_fForceAmount");
C_OP_TwistAroundAxis.m_TwistAxis = findOffsetByName(j, "C_OP_TwistAroundAxis", "m_TwistAxis");
C_OP_TwistAroundAxis.m_bLocalSpace = findOffsetByName(j, "C_OP_TwistAroundAxis", "m_bLocalSpace");
C_OP_TwistAroundAxis.m_nControlPointNumber = findOffsetByName(j, "C_OP_TwistAroundAxis", "m_nControlPointNumber");

// Atribuições para C_OP_TeleportBeam
// C_OP_TeleportBeam Offsets
C_OP_TeleportBeam.m_nCPPosition = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPPosition");
C_OP_TeleportBeam.m_nCPVelocity = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPVelocity");
C_OP_TeleportBeam.m_nCPMisc = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPMisc");
C_OP_TeleportBeam.m_nCPColor = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPColor");
C_OP_TeleportBeam.m_nCPInvalidColor = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPInvalidColor");
C_OP_TeleportBeam.m_nCPExtraArcData = findOffsetByName(j, "C_OP_TeleportBeam", "m_nCPExtraArcData");
C_OP_TeleportBeam.m_vGravity = findOffsetByName(j, "C_OP_TeleportBeam", "m_vGravity");
C_OP_TeleportBeam.m_flArcMaxDuration = findOffsetByName(j, "C_OP_TeleportBeam", "m_flArcMaxDuration");
C_OP_TeleportBeam.m_flSegmentBreak = findOffsetByName(j, "C_OP_TeleportBeam", "m_flSegmentBreak");
C_OP_TeleportBeam.m_flArcSpeed = findOffsetByName(j, "C_OP_TeleportBeam", "m_flArcSpeed");
C_OP_TeleportBeam.m_flAlpha = findOffsetByName(j, "C_OP_TeleportBeam", "m_flAlpha");

// Atribuições para C_OP_RemapExternalWindToCP
// C_OP_RemapExternalWindToCP Offsets
C_OP_RemapExternalWindToCP.m_nCP = findOffsetByName(j, "C_OP_RemapExternalWindToCP", "m_nCP");
C_OP_RemapExternalWindToCP.m_nCPOutput = findOffsetByName(j, "C_OP_RemapExternalWindToCP", "m_nCPOutput");
C_OP_RemapExternalWindToCP.m_vecScale = findOffsetByName(j, "C_OP_RemapExternalWindToCP", "m_vecScale");
C_OP_RemapExternalWindToCP.m_bSetMagnitude = findOffsetByName(j, "C_OP_RemapExternalWindToCP", "m_bSetMagnitude");
C_OP_RemapExternalWindToCP.m_nOutVectorField = findOffsetByName(j, "C_OP_RemapExternalWindToCP", "m_nOutVectorField");

// Atribuições para CBaseRendererSource2
// CBaseRendererSource2 Offsets
CBaseRendererSource2.m_flRadiusScale = findOffsetByName(j, "CBaseRendererSource2", "m_flRadiusScale");
CBaseRendererSource2.m_flAlphaScale = findOffsetByName(j, "CBaseRendererSource2", "m_flAlphaScale");
CBaseRendererSource2.m_flRollScale = findOffsetByName(j, "CBaseRendererSource2", "m_flRollScale");
CBaseRendererSource2.m_nAlpha2Field = findOffsetByName(j, "CBaseRendererSource2", "m_nAlpha2Field");
CBaseRendererSource2.m_vecColorScale = findOffsetByName(j, "CBaseRendererSource2", "m_vecColorScale");
CBaseRendererSource2.m_nColorBlendType = findOffsetByName(j, "CBaseRendererSource2", "m_nColorBlendType");
CBaseRendererSource2.m_nShaderType = findOffsetByName(j, "CBaseRendererSource2", "m_nShaderType");
CBaseRendererSource2.m_strShaderOverride = findOffsetByName(j, "CBaseRendererSource2", "m_strShaderOverride");
CBaseRendererSource2.m_flCenterXOffset = findOffsetByName(j, "CBaseRendererSource2", "m_flCenterXOffset");
CBaseRendererSource2.m_flCenterYOffset = findOffsetByName(j, "CBaseRendererSource2", "m_flCenterYOffset");
CBaseRendererSource2.m_flBumpStrength = findOffsetByName(j, "CBaseRendererSource2", "m_flBumpStrength");
CBaseRendererSource2.m_nCropTextureOverride = findOffsetByName(j, "CBaseRendererSource2", "m_nCropTextureOverride");
CBaseRendererSource2.m_vecTexturesInput = findOffsetByName(j, "CBaseRendererSource2", "m_vecTexturesInput");
CBaseRendererSource2.m_flAnimationRate = findOffsetByName(j, "CBaseRendererSource2", "m_flAnimationRate");
CBaseRendererSource2.m_nAnimationType = findOffsetByName(j, "CBaseRendererSource2", "m_nAnimationType");
CBaseRendererSource2.m_bAnimateInFPS = findOffsetByName(j, "CBaseRendererSource2", "m_bAnimateInFPS");
CBaseRendererSource2.m_flMotionVectorScaleU = findOffsetByName(j, "CBaseRendererSource2", "m_flMotionVectorScaleU");
CBaseRendererSource2.m_flMotionVectorScaleV = findOffsetByName(j, "CBaseRendererSource2", "m_flMotionVectorScaleV");
CBaseRendererSource2.m_flSelfIllumAmount = findOffsetByName(j, "CBaseRendererSource2", "m_flSelfIllumAmount");
CBaseRendererSource2.m_flDiffuseAmount = findOffsetByName(j, "CBaseRendererSource2", "m_flDiffuseAmount");
CBaseRendererSource2.m_flDiffuseClamp = findOffsetByName(j, "CBaseRendererSource2", "m_flDiffuseClamp");
CBaseRendererSource2.m_nLightingControlPoint = findOffsetByName(j, "CBaseRendererSource2", "m_nLightingControlPoint");
CBaseRendererSource2.m_nSelfIllumPerParticle = findOffsetByName(j, "CBaseRendererSource2", "m_nSelfIllumPerParticle");
CBaseRendererSource2.m_nOutputBlendMode = findOffsetByName(j, "CBaseRendererSource2", "m_nOutputBlendMode");
CBaseRendererSource2.m_bGammaCorrectVertexColors = findOffsetByName(j, "CBaseRendererSource2", "m_bGammaCorrectVertexColors");
CBaseRendererSource2.m_bSaturateColorPreAlphaBlend = findOffsetByName(j, "CBaseRendererSource2", "m_bSaturateColorPreAlphaBlend");
CBaseRendererSource2.m_flAddSelfAmount = findOffsetByName(j, "CBaseRendererSource2", "m_flAddSelfAmount");
CBaseRendererSource2.m_flDesaturation = findOffsetByName(j, "CBaseRendererSource2", "m_flDesaturation");
CBaseRendererSource2.m_flOverbrightFactor = findOffsetByName(j, "CBaseRendererSource2", "m_flOverbrightFactor");
CBaseRendererSource2.m_nHSVShiftControlPoint = findOffsetByName(j, "CBaseRendererSource2", "m_nHSVShiftControlPoint");
CBaseRendererSource2.m_nFogType = findOffsetByName(j, "CBaseRendererSource2", "m_nFogType");
CBaseRendererSource2.m_flFogAmount = findOffsetByName(j, "CBaseRendererSource2", "m_flFogAmount");
CBaseRendererSource2.m_bTintByFOW = findOffsetByName(j, "CBaseRendererSource2", "m_bTintByFOW");
CBaseRendererSource2.m_bTintByGlobalLight = findOffsetByName(j, "CBaseRendererSource2", "m_bTintByGlobalLight");
CBaseRendererSource2.m_nPerParticleAlphaReference = findOffsetByName(j, "CBaseRendererSource2", "m_nPerParticleAlphaReference");
CBaseRendererSource2.m_nPerParticleAlphaRefWindow = findOffsetByName(j, "CBaseRendererSource2", "m_nPerParticleAlphaRefWindow");
CBaseRendererSource2.m_nAlphaReferenceType = findOffsetByName(j, "CBaseRendererSource2", "m_nAlphaReferenceType");
CBaseRendererSource2.m_flAlphaReferenceSoftness = findOffsetByName(j, "CBaseRendererSource2", "m_flAlphaReferenceSoftness");
CBaseRendererSource2.m_flSourceAlphaValueToMapToZero = findOffsetByName(j, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToZero");
CBaseRendererSource2.m_flSourceAlphaValueToMapToOne = findOffsetByName(j, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToOne");
CBaseRendererSource2.m_bRefract = findOffsetByName(j, "CBaseRendererSource2", "m_bRefract");
CBaseRendererSource2.m_bRefractSolid = findOffsetByName(j, "CBaseRendererSource2", "m_bRefractSolid");
CBaseRendererSource2.m_flRefractAmount = findOffsetByName(j, "CBaseRendererSource2", "m_flRefractAmount");
CBaseRendererSource2.m_nRefractBlurRadius = findOffsetByName(j, "CBaseRendererSource2", "m_nRefractBlurRadius");
CBaseRendererSource2.m_nRefractBlurType = findOffsetByName(j, "CBaseRendererSource2", "m_nRefractBlurType");
CBaseRendererSource2.m_bOnlyRenderInEffectsBloomPass = findOffsetByName(j, "CBaseRendererSource2", "m_bOnlyRenderInEffectsBloomPass");
CBaseRendererSource2.m_bOnlyRenderInEffectsWaterPass = findOffsetByName(j, "CBaseRendererSource2", "m_bOnlyRenderInEffectsWaterPass");
CBaseRendererSource2.m_bUseMixedResolutionRendering = findOffsetByName(j, "CBaseRendererSource2", "m_bUseMixedResolutionRendering");
CBaseRendererSource2.m_bOnlyRenderInEffecsGameOverlay = findOffsetByName(j, "CBaseRendererSource2", "m_bOnlyRenderInEffecsGameOverlay");
CBaseRendererSource2.m_stencilTestID = findOffsetByName(j, "CBaseRendererSource2", "m_stencilTestID");
CBaseRendererSource2.m_bStencilTestExclude = findOffsetByName(j, "CBaseRendererSource2", "m_bStencilTestExclude");
CBaseRendererSource2.m_stencilWriteID = findOffsetByName(j, "CBaseRendererSource2", "m_stencilWriteID");
CBaseRendererSource2.m_bWriteStencilOnDepthPass = findOffsetByName(j, "CBaseRendererSource2", "m_bWriteStencilOnDepthPass");
CBaseRendererSource2.m_bWriteStencilOnDepthFail = findOffsetByName(j, "CBaseRendererSource2", "m_bWriteStencilOnDepthFail");
CBaseRendererSource2.m_bReverseZBuffering = findOffsetByName(j, "CBaseRendererSource2", "m_bReverseZBuffering");
CBaseRendererSource2.m_bDisableZBuffering = findOffsetByName(j, "CBaseRendererSource2", "m_bDisableZBuffering");
CBaseRendererSource2.m_nFeatheringMode = findOffsetByName(j, "CBaseRendererSource2", "m_nFeatheringMode");
CBaseRendererSource2.m_flFeatheringMinDist = findOffsetByName(j, "CBaseRendererSource2", "m_flFeatheringMinDist");
CBaseRendererSource2.m_flFeatheringMaxDist = findOffsetByName(j, "CBaseRendererSource2", "m_flFeatheringMaxDist");
CBaseRendererSource2.m_flFeatheringFilter = findOffsetByName(j, "CBaseRendererSource2", "m_flFeatheringFilter");
CBaseRendererSource2.m_flDepthBias = findOffsetByName(j, "CBaseRendererSource2", "m_flDepthBias");
CBaseRendererSource2.m_nSortMethod = findOffsetByName(j, "CBaseRendererSource2", "m_nSortMethod");
CBaseRendererSource2.m_bBlendFramesSeq0 = findOffsetByName(j, "CBaseRendererSource2", "m_bBlendFramesSeq0");
CBaseRendererSource2.m_bMaxLuminanceBlendingSequence0 = findOffsetByName(j, "CBaseRendererSource2", "m_bMaxLuminanceBlendingSequence0");

// Atribuições para C_OP_OrientTo2dDirection
// C_OP_OrientTo2dDirection Offsets
C_OP_OrientTo2dDirection.m_flRotOffset = findOffsetByName(j, "C_OP_OrientTo2dDirection", "m_flRotOffset");
C_OP_OrientTo2dDirection.m_flSpinStrength = findOffsetByName(j, "C_OP_OrientTo2dDirection", "m_flSpinStrength");
C_OP_OrientTo2dDirection.m_nFieldOutput = findOffsetByName(j, "C_OP_OrientTo2dDirection", "m_nFieldOutput");

// Atribuições para C_OP_RemapDotProductToCP
// C_OP_RemapDotProductToCP Offsets
C_OP_RemapDotProductToCP.m_nInputCP1 = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_nInputCP1");
C_OP_RemapDotProductToCP.m_nInputCP2 = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_nInputCP2");
C_OP_RemapDotProductToCP.m_nOutputCP = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_nOutputCP");
C_OP_RemapDotProductToCP.m_nOutVectorField = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_nOutVectorField");
C_OP_RemapDotProductToCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_flInputMin");
C_OP_RemapDotProductToCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_flInputMax");
C_OP_RemapDotProductToCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_flOutputMin");
C_OP_RemapDotProductToCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapDotProductToCP", "m_flOutputMax");

// Atribuições para C_INIT_RemapParticleCountToNamedModelElementScalar
// C_INIT_RemapParticleCountToNamedModelElementScalar Offsets
C_INIT_RemapParticleCountToNamedModelElementScalar.m_hModel = findOffsetByName(j, "C_INIT_RemapParticleCountToNamedModelElementScalar", "m_hModel");
C_INIT_RemapParticleCountToNamedModelElementScalar.m_outputMinName = findOffsetByName(j, "C_INIT_RemapParticleCountToNamedModelElementScalar", "m_outputMinName");
C_INIT_RemapParticleCountToNamedModelElementScalar.m_outputMaxName = findOffsetByName(j, "C_INIT_RemapParticleCountToNamedModelElementScalar", "m_outputMaxName");
C_INIT_RemapParticleCountToNamedModelElementScalar.m_bModelFromRenderer = findOffsetByName(j, "C_INIT_RemapParticleCountToNamedModelElementScalar", "m_bModelFromRenderer");

// Atribuições para C_OP_RenderTrails
// C_OP_RenderTrails Offsets
C_OP_RenderTrails.m_bEnableFadingAndClamping = findOffsetByName(j, "C_OP_RenderTrails", "m_bEnableFadingAndClamping");
C_OP_RenderTrails.m_flStartFadeDot = findOffsetByName(j, "C_OP_RenderTrails", "m_flStartFadeDot");
C_OP_RenderTrails.m_flEndFadeDot = findOffsetByName(j, "C_OP_RenderTrails", "m_flEndFadeDot");
C_OP_RenderTrails.m_nPrevPntSource = findOffsetByName(j, "C_OP_RenderTrails", "m_nPrevPntSource");
C_OP_RenderTrails.m_flMaxLength = findOffsetByName(j, "C_OP_RenderTrails", "m_flMaxLength");
C_OP_RenderTrails.m_flMinLength = findOffsetByName(j, "C_OP_RenderTrails", "m_flMinLength");
C_OP_RenderTrails.m_bIgnoreDT = findOffsetByName(j, "C_OP_RenderTrails", "m_bIgnoreDT");
C_OP_RenderTrails.m_flConstrainRadiusToLengthRatio = findOffsetByName(j, "C_OP_RenderTrails", "m_flConstrainRadiusToLengthRatio");
C_OP_RenderTrails.m_flLengthScale = findOffsetByName(j, "C_OP_RenderTrails", "m_flLengthScale");
C_OP_RenderTrails.m_flLengthFadeInTime = findOffsetByName(j, "C_OP_RenderTrails", "m_flLengthFadeInTime");
C_OP_RenderTrails.m_flRadiusHeadTaper = findOffsetByName(j, "C_OP_RenderTrails", "m_flRadiusHeadTaper");
C_OP_RenderTrails.m_vecHeadColorScale = findOffsetByName(j, "C_OP_RenderTrails", "m_vecHeadColorScale");
C_OP_RenderTrails.m_flHeadAlphaScale = findOffsetByName(j, "C_OP_RenderTrails", "m_flHeadAlphaScale");
C_OP_RenderTrails.m_flRadiusTaper = findOffsetByName(j, "C_OP_RenderTrails", "m_flRadiusTaper");
C_OP_RenderTrails.m_vecTailColorScale = findOffsetByName(j, "C_OP_RenderTrails", "m_vecTailColorScale");
C_OP_RenderTrails.m_flTailAlphaScale = findOffsetByName(j, "C_OP_RenderTrails", "m_flTailAlphaScale");
C_OP_RenderTrails.m_nHorizCropField = findOffsetByName(j, "C_OP_RenderTrails", "m_nHorizCropField");
C_OP_RenderTrails.m_nVertCropField = findOffsetByName(j, "C_OP_RenderTrails", "m_nVertCropField");
C_OP_RenderTrails.m_flForwardShift = findOffsetByName(j, "C_OP_RenderTrails", "m_flForwardShift");
C_OP_RenderTrails.m_bFlipUVBasedOnPitchYaw = findOffsetByName(j, "C_OP_RenderTrails", "m_bFlipUVBasedOnPitchYaw");

// Atribuições para C_OP_SetControlPointPositionToTimeOfDayValue
// C_OP_SetControlPointPositionToTimeOfDayValue Offsets
C_OP_SetControlPointPositionToTimeOfDayValue.m_nControlPointNumber = findOffsetByName(j, "C_OP_SetControlPointPositionToTimeOfDayValue", "m_nControlPointNumber");
C_OP_SetControlPointPositionToTimeOfDayValue.m_pszTimeOfDayParameter = findOffsetByName(j, "C_OP_SetControlPointPositionToTimeOfDayValue", "m_pszTimeOfDayParameter");
C_OP_SetControlPointPositionToTimeOfDayValue.m_vecDefaultValue = findOffsetByName(j, "C_OP_SetControlPointPositionToTimeOfDayValue", "m_vecDefaultValue");

// Atribuições para C_OP_DecayMaintainCount
// C_OP_DecayMaintainCount Offsets
C_OP_DecayMaintainCount.m_nParticlesToMaintain = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_nParticlesToMaintain");
C_OP_DecayMaintainCount.m_flDecayDelay = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_flDecayDelay");
C_OP_DecayMaintainCount.m_nSnapshotControlPoint = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_nSnapshotControlPoint");
C_OP_DecayMaintainCount.m_bLifespanDecay = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_bLifespanDecay");
C_OP_DecayMaintainCount.m_flScale = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_flScale");
C_OP_DecayMaintainCount.m_bKillNewest = findOffsetByName(j, "C_OP_DecayMaintainCount", "m_bKillNewest");

// Atribuições para C_INIT_RandomModelSequence
// C_INIT_RandomModelSequence Offsets
C_INIT_RandomModelSequence.m_ActivityName = findOffsetByName(j, "C_INIT_RandomModelSequence", "m_ActivityName");
C_INIT_RandomModelSequence.m_SequenceName = findOffsetByName(j, "C_INIT_RandomModelSequence", "m_SequenceName");
C_INIT_RandomModelSequence.m_hModel = findOffsetByName(j, "C_INIT_RandomModelSequence", "m_hModel");

// Atribuições para C_OP_ExternalGameImpulseForce
// C_OP_ExternalGameImpulseForce Offsets
C_OP_ExternalGameImpulseForce.m_flForceScale = findOffsetByName(j, "C_OP_ExternalGameImpulseForce", "m_flForceScale");
C_OP_ExternalGameImpulseForce.m_bRopes = findOffsetByName(j, "C_OP_ExternalGameImpulseForce", "m_bRopes");
C_OP_ExternalGameImpulseForce.m_bRopesZOnly = findOffsetByName(j, "C_OP_ExternalGameImpulseForce", "m_bRopesZOnly");
C_OP_ExternalGameImpulseForce.m_bExplosions = findOffsetByName(j, "C_OP_ExternalGameImpulseForce", "m_bExplosions");
C_OP_ExternalGameImpulseForce.m_bParticles = findOffsetByName(j, "C_OP_ExternalGameImpulseForce", "m_bParticles");

// Atribuições para C_OP_RemapAverageHitboxSpeedtoCP
// C_OP_RemapAverageHitboxSpeedtoCP Offsets
C_OP_RemapAverageHitboxSpeedtoCP.m_nInControlPointNumber = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_nInControlPointNumber");
C_OP_RemapAverageHitboxSpeedtoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_nOutControlPointNumber");
C_OP_RemapAverageHitboxSpeedtoCP.m_nField = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_nField");
C_OP_RemapAverageHitboxSpeedtoCP.m_nHitboxDataType = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_nHitboxDataType");
C_OP_RemapAverageHitboxSpeedtoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_flInputMin");
C_OP_RemapAverageHitboxSpeedtoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_flInputMax");
C_OP_RemapAverageHitboxSpeedtoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_flOutputMin");
C_OP_RemapAverageHitboxSpeedtoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_flOutputMax");
C_OP_RemapAverageHitboxSpeedtoCP.m_nHeightControlPointNumber = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_nHeightControlPointNumber");
C_OP_RemapAverageHitboxSpeedtoCP.m_vecComparisonVelocity = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_vecComparisonVelocity");
C_OP_RemapAverageHitboxSpeedtoCP.m_HitboxSetName = findOffsetByName(j, "C_OP_RemapAverageHitboxSpeedtoCP", "m_HitboxSetName");

// Atribuições para C_INIT_RandomAlpha
// C_INIT_RandomAlpha Offsets
C_INIT_RandomAlpha.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomAlpha", "m_nFieldOutput");
C_INIT_RandomAlpha.m_nAlphaMin = findOffsetByName(j, "C_INIT_RandomAlpha", "m_nAlphaMin");
C_INIT_RandomAlpha.m_nAlphaMax = findOffsetByName(j, "C_INIT_RandomAlpha", "m_nAlphaMax");
C_INIT_RandomAlpha.m_flAlphaRandExponent = findOffsetByName(j, "C_INIT_RandomAlpha", "m_flAlphaRandExponent");

// Atribuições para C_OP_NormalizeVector
// C_OP_NormalizeVector Offsets
C_OP_NormalizeVector.m_nFieldOutput = findOffsetByName(j, "C_OP_NormalizeVector", "m_nFieldOutput");
C_OP_NormalizeVector.m_flScale = findOffsetByName(j, "C_OP_NormalizeVector", "m_flScale");

// Atribuições para C_OP_FadeInSimple
// C_OP_FadeInSimple Offsets
C_OP_FadeInSimple.m_flFadeInTime = findOffsetByName(j, "C_OP_FadeInSimple", "m_flFadeInTime");
C_OP_FadeInSimple.m_nFieldOutput = findOffsetByName(j, "C_OP_FadeInSimple", "m_nFieldOutput");

// Atribuições para C_OP_RepeatedTriggerChildGroup
// C_OP_RepeatedTriggerChildGroup Offsets
C_OP_RepeatedTriggerChildGroup.m_nChildGroupID = findOffsetByName(j, "C_OP_RepeatedTriggerChildGroup", "m_nChildGroupID");
C_OP_RepeatedTriggerChildGroup.m_flClusterRefireTime = findOffsetByName(j, "C_OP_RepeatedTriggerChildGroup", "m_flClusterRefireTime");
C_OP_RepeatedTriggerChildGroup.m_flClusterSize = findOffsetByName(j, "C_OP_RepeatedTriggerChildGroup", "m_flClusterSize");
C_OP_RepeatedTriggerChildGroup.m_flClusterCooldown = findOffsetByName(j, "C_OP_RepeatedTriggerChildGroup", "m_flClusterCooldown");
C_OP_RepeatedTriggerChildGroup.m_bLimitChildCount = findOffsetByName(j, "C_OP_RepeatedTriggerChildGroup", "m_bLimitChildCount");

// Atribuições para C_OP_RenderTonemapController
// C_OP_RenderTonemapController Offsets
C_OP_RenderTonemapController.m_flTonemapLevel = findOffsetByName(j, "C_OP_RenderTonemapController", "m_flTonemapLevel");
C_OP_RenderTonemapController.m_flTonemapWeight = findOffsetByName(j, "C_OP_RenderTonemapController", "m_flTonemapWeight");
C_OP_RenderTonemapController.m_nTonemapLevelField = findOffsetByName(j, "C_OP_RenderTonemapController", "m_nTonemapLevelField");
C_OP_RenderTonemapController.m_nTonemapWeightField = findOffsetByName(j, "C_OP_RenderTonemapController", "m_nTonemapWeightField");

// Atribuições para C_OP_RemapVelocityToVector
// C_OP_RemapVelocityToVector Offsets
C_OP_RemapVelocityToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapVelocityToVector", "m_nFieldOutput");
C_OP_RemapVelocityToVector.m_flScale = findOffsetByName(j, "C_OP_RemapVelocityToVector", "m_flScale");
C_OP_RemapVelocityToVector.m_bNormalize = findOffsetByName(j, "C_OP_RemapVelocityToVector", "m_bNormalize");

// Atribuições para C_INIT_SetHitboxToClosest
// C_INIT_SetHitboxToClosest Offsets
C_INIT_SetHitboxToClosest.m_nControlPointNumber = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_nControlPointNumber");
C_INIT_SetHitboxToClosest.m_nDesiredHitbox = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_nDesiredHitbox");
C_INIT_SetHitboxToClosest.m_vecHitBoxScale = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_vecHitBoxScale");
C_INIT_SetHitboxToClosest.m_HitboxSetName = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_HitboxSetName");
C_INIT_SetHitboxToClosest.m_bUseBones = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_bUseBones");
C_INIT_SetHitboxToClosest.m_bUseClosestPointOnHitbox = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_bUseClosestPointOnHitbox");
C_INIT_SetHitboxToClosest.m_nTestType = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_nTestType");
C_INIT_SetHitboxToClosest.m_flHybridRatio = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_flHybridRatio");
C_INIT_SetHitboxToClosest.m_bUpdatePosition = findOffsetByName(j, "C_INIT_SetHitboxToClosest", "m_bUpdatePosition");

// Atribuições para C_INIT_RingWave
// C_INIT_RingWave Offsets
C_INIT_RingWave.m_TransformInput = findOffsetByName(j, "C_INIT_RingWave", "m_TransformInput");
C_INIT_RingWave.m_flParticlesPerOrbit = findOffsetByName(j, "C_INIT_RingWave", "m_flParticlesPerOrbit");
C_INIT_RingWave.m_flInitialRadius = findOffsetByName(j, "C_INIT_RingWave", "m_flInitialRadius");
C_INIT_RingWave.m_flThickness = findOffsetByName(j, "C_INIT_RingWave", "m_flThickness");
C_INIT_RingWave.m_flInitialSpeedMin = findOffsetByName(j, "C_INIT_RingWave", "m_flInitialSpeedMin");
C_INIT_RingWave.m_flInitialSpeedMax = findOffsetByName(j, "C_INIT_RingWave", "m_flInitialSpeedMax");
C_INIT_RingWave.m_flRoll = findOffsetByName(j, "C_INIT_RingWave", "m_flRoll");
C_INIT_RingWave.m_flPitch = findOffsetByName(j, "C_INIT_RingWave", "m_flPitch");
C_INIT_RingWave.m_flYaw = findOffsetByName(j, "C_INIT_RingWave", "m_flYaw");
C_INIT_RingWave.m_bEvenDistribution = findOffsetByName(j, "C_INIT_RingWave", "m_bEvenDistribution");
C_INIT_RingWave.m_bXYVelocityOnly = findOffsetByName(j, "C_INIT_RingWave", "m_bXYVelocityOnly");

// Atribuições para C_INIT_RandomTrailLength
// C_INIT_RandomTrailLength Offsets
C_INIT_RandomTrailLength.m_flMinLength = findOffsetByName(j, "C_INIT_RandomTrailLength", "m_flMinLength");
C_INIT_RandomTrailLength.m_flMaxLength = findOffsetByName(j, "C_INIT_RandomTrailLength", "m_flMaxLength");
C_INIT_RandomTrailLength.m_flLengthRandExponent = findOffsetByName(j, "C_INIT_RandomTrailLength", "m_flLengthRandExponent");

// Atribuições para C_OP_RemapScalar
// C_OP_RemapScalar Offsets
C_OP_RemapScalar.m_nFieldInput = findOffsetByName(j, "C_OP_RemapScalar", "m_nFieldInput");
C_OP_RemapScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapScalar", "m_nFieldOutput");
C_OP_RemapScalar.m_flInputMin = findOffsetByName(j, "C_OP_RemapScalar", "m_flInputMin");
C_OP_RemapScalar.m_flInputMax = findOffsetByName(j, "C_OP_RemapScalar", "m_flInputMax");
C_OP_RemapScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapScalar", "m_flOutputMin");
C_OP_RemapScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapScalar", "m_flOutputMax");
C_OP_RemapScalar.m_bOldCode = findOffsetByName(j, "C_OP_RemapScalar", "m_bOldCode");

// Atribuições para C_OP_DistanceBetweenTransforms
// C_OP_DistanceBetweenTransforms Offsets
C_OP_DistanceBetweenTransforms.m_nFieldOutput = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_nFieldOutput");
C_OP_DistanceBetweenTransforms.m_TransformStart = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_TransformStart");
C_OP_DistanceBetweenTransforms.m_TransformEnd = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_TransformEnd");
C_OP_DistanceBetweenTransforms.m_flInputMin = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flInputMin");
C_OP_DistanceBetweenTransforms.m_flInputMax = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flInputMax");
C_OP_DistanceBetweenTransforms.m_flOutputMin = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flOutputMin");
C_OP_DistanceBetweenTransforms.m_flOutputMax = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flOutputMax");
C_OP_DistanceBetweenTransforms.m_flMaxTraceLength = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flMaxTraceLength");
C_OP_DistanceBetweenTransforms.m_flLOSScale = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_flLOSScale");
C_OP_DistanceBetweenTransforms.m_CollisionGroupName = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_CollisionGroupName");
C_OP_DistanceBetweenTransforms.m_nTraceSet = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_nTraceSet");
C_OP_DistanceBetweenTransforms.m_bLOS = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_bLOS");
C_OP_DistanceBetweenTransforms.m_nSetMethod = findOffsetByName(j, "C_OP_DistanceBetweenTransforms", "m_nSetMethod");

// Atribuições para C_OP_DecayOffscreen
// C_OP_DecayOffscreen Offsets
C_OP_DecayOffscreen.m_flOffscreenTime = findOffsetByName(j, "C_OP_DecayOffscreen", "m_flOffscreenTime");

// Atribuições para C_INIT_CreateSequentialPath
// C_INIT_CreateSequentialPath Offsets
C_INIT_CreateSequentialPath.m_fMaxDistance = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_fMaxDistance");
C_INIT_CreateSequentialPath.m_flNumToAssign = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_flNumToAssign");
C_INIT_CreateSequentialPath.m_bLoop = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_bLoop");
C_INIT_CreateSequentialPath.m_bCPPairs = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_bCPPairs");
C_INIT_CreateSequentialPath.m_bSaveOffset = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_bSaveOffset");
C_INIT_CreateSequentialPath.m_PathParams = findOffsetByName(j, "C_INIT_CreateSequentialPath", "m_PathParams");

// Atribuições para C_OP_EndCapTimedDecay
// C_OP_EndCapTimedDecay Offsets
C_OP_EndCapTimedDecay.m_flDecayTime = findOffsetByName(j, "C_OP_EndCapTimedDecay", "m_flDecayTime");

// Atribuições para C_OP_RemapDistanceToLineSegmentBase
// C_OP_RemapDistanceToLineSegmentBase Offsets
C_OP_RemapDistanceToLineSegmentBase.m_nCP0 = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentBase", "m_nCP0");
C_OP_RemapDistanceToLineSegmentBase.m_nCP1 = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentBase", "m_nCP1");
C_OP_RemapDistanceToLineSegmentBase.m_flMinInputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentBase", "m_flMinInputValue");
C_OP_RemapDistanceToLineSegmentBase.m_flMaxInputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentBase", "m_flMaxInputValue");
C_OP_RemapDistanceToLineSegmentBase.m_bInfiniteLine = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentBase", "m_bInfiniteLine");

// Atribuições para C_OP_ContinuousEmitter
// C_OP_ContinuousEmitter Offsets
C_OP_ContinuousEmitter.m_flEmissionDuration = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_flEmissionDuration");
C_OP_ContinuousEmitter.m_flStartTime = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_flStartTime");
C_OP_ContinuousEmitter.m_flEmitRate = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_flEmitRate");
C_OP_ContinuousEmitter.m_flEmissionScale = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_flEmissionScale");
C_OP_ContinuousEmitter.m_flScalePerParentParticle = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_flScalePerParentParticle");
C_OP_ContinuousEmitter.m_bInitFromKilledParentParticles = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_bInitFromKilledParentParticles");
C_OP_ContinuousEmitter.m_nEventType = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_nEventType");
C_OP_ContinuousEmitter.m_nSnapshotControlPoint = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_nSnapshotControlPoint");
C_OP_ContinuousEmitter.m_nLimitPerUpdate = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_nLimitPerUpdate");
C_OP_ContinuousEmitter.m_bForceEmitOnFirstUpdate = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_bForceEmitOnFirstUpdate");
C_OP_ContinuousEmitter.m_bForceEmitOnLastUpdate = findOffsetByName(j, "C_OP_ContinuousEmitter", "m_bForceEmitOnLastUpdate");

// Atribuições para C_OP_OscillateVectorSimple
// C_OP_OscillateVectorSimple Offsets
C_OP_OscillateVectorSimple.m_Rate = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_Rate");
C_OP_OscillateVectorSimple.m_Frequency = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_Frequency");
C_OP_OscillateVectorSimple.m_nField = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_nField");
C_OP_OscillateVectorSimple.m_flOscMult = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_flOscMult");
C_OP_OscillateVectorSimple.m_flOscAdd = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_flOscAdd");
C_OP_OscillateVectorSimple.m_bOffset = findOffsetByName(j, "C_OP_OscillateVectorSimple", "m_bOffset");

// Atribuições para C_INIT_SequenceLifeTime
// C_INIT_SequenceLifeTime Offsets
C_INIT_SequenceLifeTime.m_flFramerate = findOffsetByName(j, "C_INIT_SequenceLifeTime", "m_flFramerate");

// Atribuições para C_INIT_MoveBetweenPoints
// C_INIT_MoveBetweenPoints Offsets
C_INIT_MoveBetweenPoints.m_flSpeedMin = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_flSpeedMin");
C_INIT_MoveBetweenPoints.m_flSpeedMax = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_flSpeedMax");
C_INIT_MoveBetweenPoints.m_flEndSpread = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_flEndSpread");
C_INIT_MoveBetweenPoints.m_flStartOffset = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_flStartOffset");
C_INIT_MoveBetweenPoints.m_flEndOffset = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_flEndOffset");
C_INIT_MoveBetweenPoints.m_nEndControlPointNumber = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_nEndControlPointNumber");
C_INIT_MoveBetweenPoints.m_bTrailBias = findOffsetByName(j, "C_INIT_MoveBetweenPoints", "m_bTrailBias");

// Atribuições para C_INIT_RemapScalar
// C_INIT_RemapScalar Offsets
C_INIT_RemapScalar.m_nFieldInput = findOffsetByName(j, "C_INIT_RemapScalar", "m_nFieldInput");
C_INIT_RemapScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapScalar", "m_nFieldOutput");
C_INIT_RemapScalar.m_flInputMin = findOffsetByName(j, "C_INIT_RemapScalar", "m_flInputMin");
C_INIT_RemapScalar.m_flInputMax = findOffsetByName(j, "C_INIT_RemapScalar", "m_flInputMax");
C_INIT_RemapScalar.m_flOutputMin = findOffsetByName(j, "C_INIT_RemapScalar", "m_flOutputMin");
C_INIT_RemapScalar.m_flOutputMax = findOffsetByName(j, "C_INIT_RemapScalar", "m_flOutputMax");
C_INIT_RemapScalar.m_flStartTime = findOffsetByName(j, "C_INIT_RemapScalar", "m_flStartTime");
C_INIT_RemapScalar.m_flEndTime = findOffsetByName(j, "C_INIT_RemapScalar", "m_flEndTime");
C_INIT_RemapScalar.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapScalar", "m_nSetMethod");
C_INIT_RemapScalar.m_bActiveRange = findOffsetByName(j, "C_INIT_RemapScalar", "m_bActiveRange");
C_INIT_RemapScalar.m_flRemapBias = findOffsetByName(j, "C_INIT_RemapScalar", "m_flRemapBias");

// Atribuições para C_OP_SetUserEvent
// C_OP_SetUserEvent Offsets
C_OP_SetUserEvent.m_flInput = findOffsetByName(j, "C_OP_SetUserEvent", "m_flInput");
C_OP_SetUserEvent.m_flRisingEdge = findOffsetByName(j, "C_OP_SetUserEvent", "m_flRisingEdge");
C_OP_SetUserEvent.m_nRisingEventType = findOffsetByName(j, "C_OP_SetUserEvent", "m_nRisingEventType");
C_OP_SetUserEvent.m_flFallingEdge = findOffsetByName(j, "C_OP_SetUserEvent", "m_flFallingEdge");
C_OP_SetUserEvent.m_nFallingEventType = findOffsetByName(j, "C_OP_SetUserEvent", "m_nFallingEventType");

// Atribuições para C_OP_QuantizeFloat
// C_OP_QuantizeFloat Offsets
C_OP_QuantizeFloat.m_InputValue = findOffsetByName(j, "C_OP_QuantizeFloat", "m_InputValue");
C_OP_QuantizeFloat.m_nOutputField = findOffsetByName(j, "C_OP_QuantizeFloat", "m_nOutputField");

// Atribuições para C_OP_BasicMovement
// C_OP_BasicMovement Offsets
C_OP_BasicMovement.m_Gravity = findOffsetByName(j, "C_OP_BasicMovement", "m_Gravity");
C_OP_BasicMovement.m_fDrag = findOffsetByName(j, "C_OP_BasicMovement", "m_fDrag");
C_OP_BasicMovement.m_massControls = findOffsetByName(j, "C_OP_BasicMovement", "m_massControls");
C_OP_BasicMovement.m_nMaxConstraintPasses = findOffsetByName(j, "C_OP_BasicMovement", "m_nMaxConstraintPasses");
C_OP_BasicMovement.m_bUseNewCode = findOffsetByName(j, "C_OP_BasicMovement", "m_bUseNewCode");

// Atribuições para C_INIT_RandomNamedModelElement
// C_INIT_RandomNamedModelElement Offsets
C_INIT_RandomNamedModelElement.m_hModel = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_hModel");
C_INIT_RandomNamedModelElement.m_names = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_names");
C_INIT_RandomNamedModelElement.m_bShuffle = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_bShuffle");
C_INIT_RandomNamedModelElement.m_bLinear = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_bLinear");
C_INIT_RandomNamedModelElement.m_bModelFromRenderer = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_bModelFromRenderer");
C_INIT_RandomNamedModelElement.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomNamedModelElement", "m_nFieldOutput");

// Atribuições para C_INIT_InitFromParentKilled
// C_INIT_InitFromParentKilled Offsets
C_INIT_InitFromParentKilled.m_nAttributeToCopy = findOffsetByName(j, "C_INIT_InitFromParentKilled", "m_nAttributeToCopy");
C_INIT_InitFromParentKilled.m_nEventType = findOffsetByName(j, "C_INIT_InitFromParentKilled", "m_nEventType");

// Atribuições para CParticleFunction
// CParticleFunction Offsets
CParticleFunction.m_flOpStrength = findOffsetByName(j, "CParticleFunction", "m_flOpStrength");
CParticleFunction.m_nOpEndCapState = findOffsetByName(j, "CParticleFunction", "m_nOpEndCapState");
CParticleFunction.m_flOpStartFadeInTime = findOffsetByName(j, "CParticleFunction", "m_flOpStartFadeInTime");
CParticleFunction.m_flOpEndFadeInTime = findOffsetByName(j, "CParticleFunction", "m_flOpEndFadeInTime");
CParticleFunction.m_flOpStartFadeOutTime = findOffsetByName(j, "CParticleFunction", "m_flOpStartFadeOutTime");
CParticleFunction.m_flOpEndFadeOutTime = findOffsetByName(j, "CParticleFunction", "m_flOpEndFadeOutTime");
CParticleFunction.m_flOpFadeOscillatePeriod = findOffsetByName(j, "CParticleFunction", "m_flOpFadeOscillatePeriod");
CParticleFunction.m_bNormalizeToStopTime = findOffsetByName(j, "CParticleFunction", "m_bNormalizeToStopTime");
CParticleFunction.m_flOpTimeOffsetMin = findOffsetByName(j, "CParticleFunction", "m_flOpTimeOffsetMin");
CParticleFunction.m_flOpTimeOffsetMax = findOffsetByName(j, "CParticleFunction", "m_flOpTimeOffsetMax");
CParticleFunction.m_nOpTimeOffsetSeed = findOffsetByName(j, "CParticleFunction", "m_nOpTimeOffsetSeed");
CParticleFunction.m_nOpTimeScaleSeed = findOffsetByName(j, "CParticleFunction", "m_nOpTimeScaleSeed");
CParticleFunction.m_flOpTimeScaleMin = findOffsetByName(j, "CParticleFunction", "m_flOpTimeScaleMin");
CParticleFunction.m_flOpTimeScaleMax = findOffsetByName(j, "CParticleFunction", "m_flOpTimeScaleMax");
CParticleFunction.m_bDisableOperator = findOffsetByName(j, "CParticleFunction", "m_bDisableOperator");
CParticleFunction.m_Notes = findOffsetByName(j, "CParticleFunction", "m_Notes");

// Atribuições para C_OP_GlobalLight
// C_OP_GlobalLight Offsets
C_OP_GlobalLight.m_flScale = findOffsetByName(j, "C_OP_GlobalLight", "m_flScale");
C_OP_GlobalLight.m_bClampLowerRange = findOffsetByName(j, "C_OP_GlobalLight", "m_bClampLowerRange");
C_OP_GlobalLight.m_bClampUpperRange = findOffsetByName(j, "C_OP_GlobalLight", "m_bClampUpperRange");

// Atribuições para C_INIT_OffsetVectorToVector
// C_INIT_OffsetVectorToVector Offsets
C_INIT_OffsetVectorToVector.m_nFieldInput = findOffsetByName(j, "C_INIT_OffsetVectorToVector", "m_nFieldInput");
C_INIT_OffsetVectorToVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_OffsetVectorToVector", "m_nFieldOutput");
C_INIT_OffsetVectorToVector.m_vecOutputMin = findOffsetByName(j, "C_INIT_OffsetVectorToVector", "m_vecOutputMin");
C_INIT_OffsetVectorToVector.m_vecOutputMax = findOffsetByName(j, "C_INIT_OffsetVectorToVector", "m_vecOutputMax");
C_INIT_OffsetVectorToVector.m_randomnessParameters = findOffsetByName(j, "C_INIT_OffsetVectorToVector", "m_randomnessParameters");

// Atribuições para C_OP_SetPerChildControlPointFromAttribute
// C_OP_SetPerChildControlPointFromAttribute Offsets
C_OP_SetPerChildControlPointFromAttribute.m_nChildGroupID = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nChildGroupID");
C_OP_SetPerChildControlPointFromAttribute.m_nFirstControlPoint = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nFirstControlPoint");
C_OP_SetPerChildControlPointFromAttribute.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nNumControlPoints");
C_OP_SetPerChildControlPointFromAttribute.m_nParticleIncrement = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nParticleIncrement");
C_OP_SetPerChildControlPointFromAttribute.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nFirstSourcePoint");
C_OP_SetPerChildControlPointFromAttribute.m_bNumBasedOnParticleCount = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_bNumBasedOnParticleCount");
C_OP_SetPerChildControlPointFromAttribute.m_nAttributeToRead = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nAttributeToRead");
C_OP_SetPerChildControlPointFromAttribute.m_nCPField = findOffsetByName(j, "C_OP_SetPerChildControlPointFromAttribute", "m_nCPField");

// Atribuições para C_OP_SetParentControlPointsToChildCP
// C_OP_SetParentControlPointsToChildCP Offsets
C_OP_SetParentControlPointsToChildCP.m_nChildGroupID = findOffsetByName(j, "C_OP_SetParentControlPointsToChildCP", "m_nChildGroupID");
C_OP_SetParentControlPointsToChildCP.m_nChildControlPoint = findOffsetByName(j, "C_OP_SetParentControlPointsToChildCP", "m_nChildControlPoint");
C_OP_SetParentControlPointsToChildCP.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetParentControlPointsToChildCP", "m_nNumControlPoints");
C_OP_SetParentControlPointsToChildCP.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetParentControlPointsToChildCP", "m_nFirstSourcePoint");
C_OP_SetParentControlPointsToChildCP.m_bSetOrientation = findOffsetByName(j, "C_OP_SetParentControlPointsToChildCP", "m_bSetOrientation");

// Atribuições para C_OP_SDFForce
// C_OP_SDFForce Offsets
C_OP_SDFForce.m_flForceScale = findOffsetByName(j, "C_OP_SDFForce", "m_flForceScale");

// Atribuições para C_OP_BoxConstraint
// C_OP_BoxConstraint Offsets
C_OP_BoxConstraint.m_vecMin = findOffsetByName(j, "C_OP_BoxConstraint", "m_vecMin");
C_OP_BoxConstraint.m_vecMax = findOffsetByName(j, "C_OP_BoxConstraint", "m_vecMax");
C_OP_BoxConstraint.m_nCP = findOffsetByName(j, "C_OP_BoxConstraint", "m_nCP");
C_OP_BoxConstraint.m_bLocalSpace = findOffsetByName(j, "C_OP_BoxConstraint", "m_bLocalSpace");
C_OP_BoxConstraint.m_bAccountForRadius = findOffsetByName(j, "C_OP_BoxConstraint", "m_bAccountForRadius");

// Atribuições para C_INIT_CreatePhyllotaxis
// C_INIT_CreatePhyllotaxis Offsets
C_INIT_CreatePhyllotaxis.m_nControlPointNumber = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_nControlPointNumber");
C_INIT_CreatePhyllotaxis.m_nScaleCP = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_nScaleCP");
C_INIT_CreatePhyllotaxis.m_nComponent = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_nComponent");
C_INIT_CreatePhyllotaxis.m_fRadCentCore = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fRadCentCore");
C_INIT_CreatePhyllotaxis.m_fRadPerPoint = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fRadPerPoint");
C_INIT_CreatePhyllotaxis.m_fRadPerPointTo = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fRadPerPointTo");
C_INIT_CreatePhyllotaxis.m_fpointAngle = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fpointAngle");
C_INIT_CreatePhyllotaxis.m_fsizeOverall = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fsizeOverall");
C_INIT_CreatePhyllotaxis.m_fRadBias = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fRadBias");
C_INIT_CreatePhyllotaxis.m_fMinRad = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fMinRad");
C_INIT_CreatePhyllotaxis.m_fDistBias = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_fDistBias");
C_INIT_CreatePhyllotaxis.m_bUseLocalCoords = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_bUseLocalCoords");
C_INIT_CreatePhyllotaxis.m_bUseWithContEmit = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_bUseWithContEmit");
C_INIT_CreatePhyllotaxis.m_bUseOrigRadius = findOffsetByName(j, "C_INIT_CreatePhyllotaxis", "m_bUseOrigRadius");

// Atribuições para C_OP_AttractToControlPoint
// C_OP_AttractToControlPoint Offsets
C_OP_AttractToControlPoint.m_vecComponentScale = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_vecComponentScale");
C_OP_AttractToControlPoint.m_fForceAmount = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_fForceAmount");
C_OP_AttractToControlPoint.m_fFalloffPower = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_fFalloffPower");
C_OP_AttractToControlPoint.m_TransformInput = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_TransformInput");
C_OP_AttractToControlPoint.m_fForceAmountMin = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_fForceAmountMin");
C_OP_AttractToControlPoint.m_bApplyMinForce = findOffsetByName(j, "C_OP_AttractToControlPoint", "m_bApplyMinForce");

// Atribuições para C_INIT_RandomLifeTime
// C_INIT_RandomLifeTime Offsets
C_INIT_RandomLifeTime.m_fLifetimeMin = findOffsetByName(j, "C_INIT_RandomLifeTime", "m_fLifetimeMin");
C_INIT_RandomLifeTime.m_fLifetimeMax = findOffsetByName(j, "C_INIT_RandomLifeTime", "m_fLifetimeMax");
C_INIT_RandomLifeTime.m_fLifetimeRandExponent = findOffsetByName(j, "C_INIT_RandomLifeTime", "m_fLifetimeRandExponent");

// Atribuições para C_INIT_VelocityRadialRandom
// C_INIT_VelocityRadialRandom Offsets
C_INIT_VelocityRadialRandom.m_nControlPointNumber = findOffsetByName(j, "C_INIT_VelocityRadialRandom", "m_nControlPointNumber");
C_INIT_VelocityRadialRandom.m_fSpeedMin = findOffsetByName(j, "C_INIT_VelocityRadialRandom", "m_fSpeedMin");
C_INIT_VelocityRadialRandom.m_fSpeedMax = findOffsetByName(j, "C_INIT_VelocityRadialRandom", "m_fSpeedMax");
C_INIT_VelocityRadialRandom.m_vecLocalCoordinateSystemSpeedScale = findOffsetByName(j, "C_INIT_VelocityRadialRandom", "m_vecLocalCoordinateSystemSpeedScale");
C_INIT_VelocityRadialRandom.m_bIgnoreDelta = findOffsetByName(j, "C_INIT_VelocityRadialRandom", "m_bIgnoreDelta");

// Atribuições para C_INIT_RandomRadius
// C_INIT_RandomRadius Offsets
C_INIT_RandomRadius.m_flRadiusMin = findOffsetByName(j, "C_INIT_RandomRadius", "m_flRadiusMin");
C_INIT_RandomRadius.m_flRadiusMax = findOffsetByName(j, "C_INIT_RandomRadius", "m_flRadiusMax");
C_INIT_RandomRadius.m_flRadiusRandExponent = findOffsetByName(j, "C_INIT_RandomRadius", "m_flRadiusRandExponent");

// Atribuições para C_OP_Orient2DRelToCP
// C_OP_Orient2DRelToCP Offsets
C_OP_Orient2DRelToCP.m_flRotOffset = findOffsetByName(j, "C_OP_Orient2DRelToCP", "m_flRotOffset");
C_OP_Orient2DRelToCP.m_flSpinStrength = findOffsetByName(j, "C_OP_Orient2DRelToCP", "m_flSpinStrength");
C_OP_Orient2DRelToCP.m_nCP = findOffsetByName(j, "C_OP_Orient2DRelToCP", "m_nCP");
C_OP_Orient2DRelToCP.m_nFieldOutput = findOffsetByName(j, "C_OP_Orient2DRelToCP", "m_nFieldOutput");

// Atribuições para TextureControls_t
// TextureControls_t Offsets
TextureControls_t.m_flFinalTextureScaleU = findOffsetByName(j, "TextureControls_t", "m_flFinalTextureScaleU");
TextureControls_t.m_flFinalTextureScaleV = findOffsetByName(j, "TextureControls_t", "m_flFinalTextureScaleV");
TextureControls_t.m_flFinalTextureOffsetU = findOffsetByName(j, "TextureControls_t", "m_flFinalTextureOffsetU");
TextureControls_t.m_flFinalTextureOffsetV = findOffsetByName(j, "TextureControls_t", "m_flFinalTextureOffsetV");
TextureControls_t.m_flFinalTextureUVRotation = findOffsetByName(j, "TextureControls_t", "m_flFinalTextureUVRotation");
TextureControls_t.m_flZoomScale = findOffsetByName(j, "TextureControls_t", "m_flZoomScale");
TextureControls_t.m_flDistortion = findOffsetByName(j, "TextureControls_t", "m_flDistortion");
TextureControls_t.m_bRandomizeOffsets = findOffsetByName(j, "TextureControls_t", "m_bRandomizeOffsets");
TextureControls_t.m_bClampUVs = findOffsetByName(j, "TextureControls_t", "m_bClampUVs");
TextureControls_t.m_nPerParticleBlend = findOffsetByName(j, "TextureControls_t", "m_nPerParticleBlend");
TextureControls_t.m_nPerParticleScale = findOffsetByName(j, "TextureControls_t", "m_nPerParticleScale");
TextureControls_t.m_nPerParticleOffsetU = findOffsetByName(j, "TextureControls_t", "m_nPerParticleOffsetU");
TextureControls_t.m_nPerParticleOffsetV = findOffsetByName(j, "TextureControls_t", "m_nPerParticleOffsetV");
TextureControls_t.m_nPerParticleRotation = findOffsetByName(j, "TextureControls_t", "m_nPerParticleRotation");
TextureControls_t.m_nPerParticleZoom = findOffsetByName(j, "TextureControls_t", "m_nPerParticleZoom");
TextureControls_t.m_nPerParticleDistortion = findOffsetByName(j, "TextureControls_t", "m_nPerParticleDistortion");

// Atribuições para ControlPointReference_t
// ControlPointReference_t Offsets
ControlPointReference_t.m_controlPointNameString = findOffsetByName(j, "ControlPointReference_t", "m_controlPointNameString");
ControlPointReference_t.m_vOffsetFromControlPoint = findOffsetByName(j, "ControlPointReference_t", "m_vOffsetFromControlPoint");
ControlPointReference_t.m_bOffsetInLocalSpace = findOffsetByName(j, "ControlPointReference_t", "m_bOffsetInLocalSpace");

// Atribuições para C_OP_SetControlPointToVectorExpression
// C_OP_SetControlPointToVectorExpression Offsets
C_OP_SetControlPointToVectorExpression.m_nExpression = findOffsetByName(j, "C_OP_SetControlPointToVectorExpression", "m_nExpression");
C_OP_SetControlPointToVectorExpression.m_nOutputCP = findOffsetByName(j, "C_OP_SetControlPointToVectorExpression", "m_nOutputCP");
C_OP_SetControlPointToVectorExpression.m_vInput1 = findOffsetByName(j, "C_OP_SetControlPointToVectorExpression", "m_vInput1");
C_OP_SetControlPointToVectorExpression.m_vInput2 = findOffsetByName(j, "C_OP_SetControlPointToVectorExpression", "m_vInput2");
C_OP_SetControlPointToVectorExpression.m_bNormalizedOutput = findOffsetByName(j, "C_OP_SetControlPointToVectorExpression", "m_bNormalizedOutput");

// Atribuições para C_OP_LightningSnapshotGenerator
// C_OP_LightningSnapshotGenerator Offsets
C_OP_LightningSnapshotGenerator.m_nCPSnapshot = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_nCPSnapshot");
C_OP_LightningSnapshotGenerator.m_nCPStartPnt = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_nCPStartPnt");
C_OP_LightningSnapshotGenerator.m_nCPEndPnt = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_nCPEndPnt");
C_OP_LightningSnapshotGenerator.m_flSegments = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flSegments");
C_OP_LightningSnapshotGenerator.m_flOffset = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flOffset");
C_OP_LightningSnapshotGenerator.m_flOffsetDecay = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flOffsetDecay");
C_OP_LightningSnapshotGenerator.m_flRecalcRate = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flRecalcRate");
C_OP_LightningSnapshotGenerator.m_flUVScale = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flUVScale");
C_OP_LightningSnapshotGenerator.m_flUVOffset = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flUVOffset");
C_OP_LightningSnapshotGenerator.m_flSplitRate = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flSplitRate");
C_OP_LightningSnapshotGenerator.m_flBranchTwist = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flBranchTwist");
C_OP_LightningSnapshotGenerator.m_nBranchBehavior = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_nBranchBehavior");
C_OP_LightningSnapshotGenerator.m_flRadiusStart = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flRadiusStart");
C_OP_LightningSnapshotGenerator.m_flRadiusEnd = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flRadiusEnd");
C_OP_LightningSnapshotGenerator.m_flDedicatedPool = findOffsetByName(j, "C_OP_LightningSnapshotGenerator", "m_flDedicatedPool");

// Atribuições para C_INIT_RemapSpeedToScalar
// C_INIT_RemapSpeedToScalar Offsets
C_INIT_RemapSpeedToScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_nFieldOutput");
C_INIT_RemapSpeedToScalar.m_nControlPointNumber = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_nControlPointNumber");
C_INIT_RemapSpeedToScalar.m_flStartTime = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flStartTime");
C_INIT_RemapSpeedToScalar.m_flEndTime = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flEndTime");
C_INIT_RemapSpeedToScalar.m_flInputMin = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flInputMin");
C_INIT_RemapSpeedToScalar.m_flInputMax = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flInputMax");
C_INIT_RemapSpeedToScalar.m_flOutputMin = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flOutputMin");
C_INIT_RemapSpeedToScalar.m_flOutputMax = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_flOutputMax");
C_INIT_RemapSpeedToScalar.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_nSetMethod");
C_INIT_RemapSpeedToScalar.m_bPerParticle = findOffsetByName(j, "C_INIT_RemapSpeedToScalar", "m_bPerParticle");

// Atribuições para C_INIT_RemapQAnglesToRotation
// C_INIT_RemapQAnglesToRotation Offsets
C_INIT_RemapQAnglesToRotation.m_TransformInput = findOffsetByName(j, "C_INIT_RemapQAnglesToRotation", "m_TransformInput");

// Atribuições para C_INIT_PositionWarp
// C_INIT_PositionWarp Offsets
C_INIT_PositionWarp.m_vecWarpMin = findOffsetByName(j, "C_INIT_PositionWarp", "m_vecWarpMin");
C_INIT_PositionWarp.m_vecWarpMax = findOffsetByName(j, "C_INIT_PositionWarp", "m_vecWarpMax");
C_INIT_PositionWarp.m_nScaleControlPointNumber = findOffsetByName(j, "C_INIT_PositionWarp", "m_nScaleControlPointNumber");
C_INIT_PositionWarp.m_nControlPointNumber = findOffsetByName(j, "C_INIT_PositionWarp", "m_nControlPointNumber");
C_INIT_PositionWarp.m_nRadiusComponent = findOffsetByName(j, "C_INIT_PositionWarp", "m_nRadiusComponent");
C_INIT_PositionWarp.m_flWarpTime = findOffsetByName(j, "C_INIT_PositionWarp", "m_flWarpTime");
C_INIT_PositionWarp.m_flWarpStartTime = findOffsetByName(j, "C_INIT_PositionWarp", "m_flWarpStartTime");
C_INIT_PositionWarp.m_flPrevPosScale = findOffsetByName(j, "C_INIT_PositionWarp", "m_flPrevPosScale");
C_INIT_PositionWarp.m_bInvertWarp = findOffsetByName(j, "C_INIT_PositionWarp", "m_bInvertWarp");
C_INIT_PositionWarp.m_bUseCount = findOffsetByName(j, "C_INIT_PositionWarp", "m_bUseCount");

// Atribuições para C_OP_SDFConstraint
// C_OP_SDFConstraint Offsets
C_OP_SDFConstraint.m_flMinDist = findOffsetByName(j, "C_OP_SDFConstraint", "m_flMinDist");
C_OP_SDFConstraint.m_flMaxDist = findOffsetByName(j, "C_OP_SDFConstraint", "m_flMaxDist");
C_OP_SDFConstraint.m_nMaxIterations = findOffsetByName(j, "C_OP_SDFConstraint", "m_nMaxIterations");

// Atribuições para C_OP_SetControlPointFieldToScalarExpression
// C_OP_SetControlPointFieldToScalarExpression Offsets
C_OP_SetControlPointFieldToScalarExpression.m_nExpression = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_nExpression");
C_OP_SetControlPointFieldToScalarExpression.m_flInput1 = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_flInput1");
C_OP_SetControlPointFieldToScalarExpression.m_flInput2 = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_flInput2");
C_OP_SetControlPointFieldToScalarExpression.m_flOutputRemap = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_flOutputRemap");
C_OP_SetControlPointFieldToScalarExpression.m_nOutputCP = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_nOutputCP");
C_OP_SetControlPointFieldToScalarExpression.m_nOutVectorField = findOffsetByName(j, "C_OP_SetControlPointFieldToScalarExpression", "m_nOutVectorField");

// Atribuições para C_INIT_RandomVectorComponent
// C_INIT_RandomVectorComponent Offsets
C_INIT_RandomVectorComponent.m_flMin = findOffsetByName(j, "C_INIT_RandomVectorComponent", "m_flMin");
C_INIT_RandomVectorComponent.m_flMax = findOffsetByName(j, "C_INIT_RandomVectorComponent", "m_flMax");
C_INIT_RandomVectorComponent.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomVectorComponent", "m_nFieldOutput");
C_INIT_RandomVectorComponent.m_nComponent = findOffsetByName(j, "C_INIT_RandomVectorComponent", "m_nComponent");

// Atribuições para C_OP_InheritFromParentParticles
// C_OP_InheritFromParentParticles Offsets
C_OP_InheritFromParentParticles.m_flScale = findOffsetByName(j, "C_OP_InheritFromParentParticles", "m_flScale");
C_OP_InheritFromParentParticles.m_nFieldOutput = findOffsetByName(j, "C_OP_InheritFromParentParticles", "m_nFieldOutput");
C_OP_InheritFromParentParticles.m_nIncrement = findOffsetByName(j, "C_OP_InheritFromParentParticles", "m_nIncrement");
C_OP_InheritFromParentParticles.m_bRandomDistribution = findOffsetByName(j, "C_OP_InheritFromParentParticles", "m_bRandomDistribution");

// Atribuições para C_INIT_SetVectorAttributeToVectorExpression
// C_INIT_SetVectorAttributeToVectorExpression Offsets
C_INIT_SetVectorAttributeToVectorExpression.m_nExpression = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_nExpression");
C_INIT_SetVectorAttributeToVectorExpression.m_vInput1 = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_vInput1");
C_INIT_SetVectorAttributeToVectorExpression.m_vInput2 = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_vInput2");
C_INIT_SetVectorAttributeToVectorExpression.m_nOutputField = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_nOutputField");
C_INIT_SetVectorAttributeToVectorExpression.m_nSetMethod = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_nSetMethod");
C_INIT_SetVectorAttributeToVectorExpression.m_bNormalizedOutput = findOffsetByName(j, "C_INIT_SetVectorAttributeToVectorExpression", "m_bNormalizedOutput");

// Atribuições para C_OP_RemapTransformVisibilityToVector
// C_OP_RemapTransformVisibilityToVector Offsets
C_OP_RemapTransformVisibilityToVector.m_nSetMethod = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_nSetMethod");
C_OP_RemapTransformVisibilityToVector.m_TransformInput = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_TransformInput");
C_OP_RemapTransformVisibilityToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_nFieldOutput");
C_OP_RemapTransformVisibilityToVector.m_flInputMin = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_flInputMin");
C_OP_RemapTransformVisibilityToVector.m_flInputMax = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_flInputMax");
C_OP_RemapTransformVisibilityToVector.m_vecOutputMin = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_vecOutputMin");
C_OP_RemapTransformVisibilityToVector.m_vecOutputMax = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_vecOutputMax");
C_OP_RemapTransformVisibilityToVector.m_flRadius = findOffsetByName(j, "C_OP_RemapTransformVisibilityToVector", "m_flRadius");

// Atribuições para C_OP_DirectionBetweenVecsToVec
// C_OP_DirectionBetweenVecsToVec Offsets
C_OP_DirectionBetweenVecsToVec.m_nFieldOutput = findOffsetByName(j, "C_OP_DirectionBetweenVecsToVec", "m_nFieldOutput");
C_OP_DirectionBetweenVecsToVec.m_vecPoint1 = findOffsetByName(j, "C_OP_DirectionBetweenVecsToVec", "m_vecPoint1");
C_OP_DirectionBetweenVecsToVec.m_vecPoint2 = findOffsetByName(j, "C_OP_DirectionBetweenVecsToVec", "m_vecPoint2");

// Atribuições para C_OP_MovementLoopInsideSphere
// C_OP_MovementLoopInsideSphere Offsets
C_OP_MovementLoopInsideSphere.m_nCP = findOffsetByName(j, "C_OP_MovementLoopInsideSphere", "m_nCP");
C_OP_MovementLoopInsideSphere.m_flDistance = findOffsetByName(j, "C_OP_MovementLoopInsideSphere", "m_flDistance");
C_OP_MovementLoopInsideSphere.m_vecScale = findOffsetByName(j, "C_OP_MovementLoopInsideSphere", "m_vecScale");
C_OP_MovementLoopInsideSphere.m_nDistSqrAttr = findOffsetByName(j, "C_OP_MovementLoopInsideSphere", "m_nDistSqrAttr");

// Atribuições para C_OP_RenderSimpleModelCollection
// C_OP_RenderSimpleModelCollection Offsets
C_OP_RenderSimpleModelCollection.m_bCenterOffset = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_bCenterOffset");
C_OP_RenderSimpleModelCollection.m_hModel = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_hModel");
C_OP_RenderSimpleModelCollection.m_modelInput = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_modelInput");
C_OP_RenderSimpleModelCollection.m_fSizeCullScale = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_fSizeCullScale");
C_OP_RenderSimpleModelCollection.m_bDisableShadows = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_bDisableShadows");
C_OP_RenderSimpleModelCollection.m_bDisableMotionBlur = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_bDisableMotionBlur");
C_OP_RenderSimpleModelCollection.m_bAcceptsDecals = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_bAcceptsDecals");
C_OP_RenderSimpleModelCollection.m_nAngularVelocityField = findOffsetByName(j, "C_OP_RenderSimpleModelCollection", "m_nAngularVelocityField");

// Atribuições para C_OP_QuantizeCPComponent
// C_OP_QuantizeCPComponent Offsets
C_OP_QuantizeCPComponent.m_flInputValue = findOffsetByName(j, "C_OP_QuantizeCPComponent", "m_flInputValue");
C_OP_QuantizeCPComponent.m_nCPOutput = findOffsetByName(j, "C_OP_QuantizeCPComponent", "m_nCPOutput");
C_OP_QuantizeCPComponent.m_nOutVectorField = findOffsetByName(j, "C_OP_QuantizeCPComponent", "m_nOutVectorField");
C_OP_QuantizeCPComponent.m_flQuantizeValue = findOffsetByName(j, "C_OP_QuantizeCPComponent", "m_flQuantizeValue");

// Atribuições para C_OP_PlayEndCapWhenFinished
// C_OP_PlayEndCapWhenFinished Offsets
C_OP_PlayEndCapWhenFinished.m_bFireOnEmissionEnd = findOffsetByName(j, "C_OP_PlayEndCapWhenFinished", "m_bFireOnEmissionEnd");
C_OP_PlayEndCapWhenFinished.m_bIncludeChildren = findOffsetByName(j, "C_OP_PlayEndCapWhenFinished", "m_bIncludeChildren");

// Atribuições para C_INIT_InitFloatCollection
// C_INIT_InitFloatCollection Offsets
C_INIT_InitFloatCollection.m_InputValue = findOffsetByName(j, "C_INIT_InitFloatCollection", "m_InputValue");
C_INIT_InitFloatCollection.m_nOutputField = findOffsetByName(j, "C_INIT_InitFloatCollection", "m_nOutputField");

// Atribuições para CPathParameters
// CPathParameters Offsets
CPathParameters.m_nStartControlPointNumber = findOffsetByName(j, "CPathParameters", "m_nStartControlPointNumber");
CPathParameters.m_nEndControlPointNumber = findOffsetByName(j, "CPathParameters", "m_nEndControlPointNumber");
CPathParameters.m_nBulgeControl = findOffsetByName(j, "CPathParameters", "m_nBulgeControl");
CPathParameters.m_flBulge = findOffsetByName(j, "CPathParameters", "m_flBulge");
CPathParameters.m_flMidPoint = findOffsetByName(j, "CPathParameters", "m_flMidPoint");
CPathParameters.m_vStartPointOffset = findOffsetByName(j, "CPathParameters", "m_vStartPointOffset");
CPathParameters.m_vMidPointOffset = findOffsetByName(j, "CPathParameters", "m_vMidPointOffset");
CPathParameters.m_vEndOffset = findOffsetByName(j, "CPathParameters", "m_vEndOffset");

// Atribuições para C_OP_RemapScalarEndCap
// C_OP_RemapScalarEndCap Offsets
C_OP_RemapScalarEndCap.m_nFieldInput = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_nFieldInput");
C_OP_RemapScalarEndCap.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_nFieldOutput");
C_OP_RemapScalarEndCap.m_flInputMin = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_flInputMin");
C_OP_RemapScalarEndCap.m_flInputMax = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_flInputMax");
C_OP_RemapScalarEndCap.m_flOutputMin = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_flOutputMin");
C_OP_RemapScalarEndCap.m_flOutputMax = findOffsetByName(j, "C_OP_RemapScalarEndCap", "m_flOutputMax");

// Atribuições para C_INIT_CreateFromPlaneCache
// C_INIT_CreateFromPlaneCache Offsets
C_INIT_CreateFromPlaneCache.m_vecOffsetMin = findOffsetByName(j, "C_INIT_CreateFromPlaneCache", "m_vecOffsetMin");
C_INIT_CreateFromPlaneCache.m_vecOffsetMax = findOffsetByName(j, "C_INIT_CreateFromPlaneCache", "m_vecOffsetMax");
C_INIT_CreateFromPlaneCache.m_bUseNormal = findOffsetByName(j, "C_INIT_CreateFromPlaneCache", "m_bUseNormal");

// Atribuições para C_OP_ControlPointToRadialScreenSpace
// C_OP_ControlPointToRadialScreenSpace Offsets
C_OP_ControlPointToRadialScreenSpace.m_nCPIn = findOffsetByName(j, "C_OP_ControlPointToRadialScreenSpace", "m_nCPIn");
C_OP_ControlPointToRadialScreenSpace.m_vecCP1Pos = findOffsetByName(j, "C_OP_ControlPointToRadialScreenSpace", "m_vecCP1Pos");
C_OP_ControlPointToRadialScreenSpace.m_nCPOut = findOffsetByName(j, "C_OP_ControlPointToRadialScreenSpace", "m_nCPOut");
C_OP_ControlPointToRadialScreenSpace.m_nCPOutField = findOffsetByName(j, "C_OP_ControlPointToRadialScreenSpace", "m_nCPOutField");
C_OP_ControlPointToRadialScreenSpace.m_nCPSSPosOut = findOffsetByName(j, "C_OP_ControlPointToRadialScreenSpace", "m_nCPSSPosOut");

// Atribuições para C_INIT_NormalOffset
// C_INIT_NormalOffset Offsets
C_INIT_NormalOffset.m_OffsetMin = findOffsetByName(j, "C_INIT_NormalOffset", "m_OffsetMin");
C_INIT_NormalOffset.m_OffsetMax = findOffsetByName(j, "C_INIT_NormalOffset", "m_OffsetMax");
C_INIT_NormalOffset.m_nControlPointNumber = findOffsetByName(j, "C_INIT_NormalOffset", "m_nControlPointNumber");
C_INIT_NormalOffset.m_bLocalCoords = findOffsetByName(j, "C_INIT_NormalOffset", "m_bLocalCoords");
C_INIT_NormalOffset.m_bNormalize = findOffsetByName(j, "C_INIT_NormalOffset", "m_bNormalize");

// Atribuições para C_OP_RemapDistanceToLineSegmentToVector
// C_OP_RemapDistanceToLineSegmentToVector Offsets
C_OP_RemapDistanceToLineSegmentToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToVector", "m_nFieldOutput");
C_OP_RemapDistanceToLineSegmentToVector.m_vMinOutputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToVector", "m_vMinOutputValue");
C_OP_RemapDistanceToLineSegmentToVector.m_vMaxOutputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToVector", "m_vMaxOutputValue");

// Atribuições para C_OP_RenderAsModels
// C_OP_RenderAsModels Offsets
C_OP_RenderAsModels.m_ModelList = findOffsetByName(j, "C_OP_RenderAsModels", "m_ModelList");
C_OP_RenderAsModels.m_flModelScale = findOffsetByName(j, "C_OP_RenderAsModels", "m_flModelScale");
C_OP_RenderAsModels.m_bFitToModelSize = findOffsetByName(j, "C_OP_RenderAsModels", "m_bFitToModelSize");
C_OP_RenderAsModels.m_bNonUniformScaling = findOffsetByName(j, "C_OP_RenderAsModels", "m_bNonUniformScaling");
C_OP_RenderAsModels.m_nXAxisScalingAttribute = findOffsetByName(j, "C_OP_RenderAsModels", "m_nXAxisScalingAttribute");
C_OP_RenderAsModels.m_nYAxisScalingAttribute = findOffsetByName(j, "C_OP_RenderAsModels", "m_nYAxisScalingAttribute");
C_OP_RenderAsModels.m_nZAxisScalingAttribute = findOffsetByName(j, "C_OP_RenderAsModels", "m_nZAxisScalingAttribute");
C_OP_RenderAsModels.m_nSizeCullBloat = findOffsetByName(j, "C_OP_RenderAsModels", "m_nSizeCullBloat");

// Atribuições para C_INIT_CreationNoise
// C_INIT_CreationNoise Offsets
C_INIT_CreationNoise.m_nFieldOutput = findOffsetByName(j, "C_INIT_CreationNoise", "m_nFieldOutput");
C_INIT_CreationNoise.m_bAbsVal = findOffsetByName(j, "C_INIT_CreationNoise", "m_bAbsVal");
C_INIT_CreationNoise.m_bAbsValInv = findOffsetByName(j, "C_INIT_CreationNoise", "m_bAbsValInv");
C_INIT_CreationNoise.m_flOffset = findOffsetByName(j, "C_INIT_CreationNoise", "m_flOffset");
C_INIT_CreationNoise.m_flOutputMin = findOffsetByName(j, "C_INIT_CreationNoise", "m_flOutputMin");
C_INIT_CreationNoise.m_flOutputMax = findOffsetByName(j, "C_INIT_CreationNoise", "m_flOutputMax");
C_INIT_CreationNoise.m_flNoiseScale = findOffsetByName(j, "C_INIT_CreationNoise", "m_flNoiseScale");
C_INIT_CreationNoise.m_flNoiseScaleLoc = findOffsetByName(j, "C_INIT_CreationNoise", "m_flNoiseScaleLoc");
C_INIT_CreationNoise.m_vecOffsetLoc = findOffsetByName(j, "C_INIT_CreationNoise", "m_vecOffsetLoc");
C_INIT_CreationNoise.m_flWorldTimeScale = findOffsetByName(j, "C_INIT_CreationNoise", "m_flWorldTimeScale");

// Atribuições para ParticleNamedValueConfiguration_t
// ParticleNamedValueConfiguration_t Offsets
ParticleNamedValueConfiguration_t.m_ConfigName = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_ConfigName");
ParticleNamedValueConfiguration_t.m_ConfigValue = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_ConfigValue");
ParticleNamedValueConfiguration_t.m_iAttachType = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_iAttachType");
ParticleNamedValueConfiguration_t.m_BoundEntityPath = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_BoundEntityPath");
ParticleNamedValueConfiguration_t.m_strEntityScope = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_strEntityScope");
ParticleNamedValueConfiguration_t.m_strAttachmentName = findOffsetByName(j, "ParticleNamedValueConfiguration_t", "m_strAttachmentName");

// Atribuições para CParticleVecInput
// CParticleVecInput Offsets
CParticleVecInput.m_nType = findOffsetByName(j, "CParticleVecInput", "m_nType");
CParticleVecInput.m_vLiteralValue = findOffsetByName(j, "CParticleVecInput", "m_vLiteralValue");
CParticleVecInput.m_LiteralColor = findOffsetByName(j, "CParticleVecInput", "m_LiteralColor");
CParticleVecInput.m_NamedValue = findOffsetByName(j, "CParticleVecInput", "m_NamedValue");
CParticleVecInput.m_bFollowNamedValue = findOffsetByName(j, "CParticleVecInput", "m_bFollowNamedValue");
CParticleVecInput.m_nVectorAttribute = findOffsetByName(j, "CParticleVecInput", "m_nVectorAttribute");
CParticleVecInput.m_vVectorAttributeScale = findOffsetByName(j, "CParticleVecInput", "m_vVectorAttributeScale");
CParticleVecInput.m_nControlPoint = findOffsetByName(j, "CParticleVecInput", "m_nControlPoint");
CParticleVecInput.m_nDeltaControlPoint = findOffsetByName(j, "CParticleVecInput", "m_nDeltaControlPoint");
CParticleVecInput.m_vCPValueScale = findOffsetByName(j, "CParticleVecInput", "m_vCPValueScale");
CParticleVecInput.m_vCPRelativePosition = findOffsetByName(j, "CParticleVecInput", "m_vCPRelativePosition");
CParticleVecInput.m_vCPRelativeDir = findOffsetByName(j, "CParticleVecInput", "m_vCPRelativeDir");
CParticleVecInput.m_FloatComponentX = findOffsetByName(j, "CParticleVecInput", "m_FloatComponentX");
CParticleVecInput.m_FloatComponentY = findOffsetByName(j, "CParticleVecInput", "m_FloatComponentY");
CParticleVecInput.m_FloatComponentZ = findOffsetByName(j, "CParticleVecInput", "m_FloatComponentZ");
CParticleVecInput.m_FloatInterp = findOffsetByName(j, "CParticleVecInput", "m_FloatInterp");
CParticleVecInput.m_flInterpInput0 = findOffsetByName(j, "CParticleVecInput", "m_flInterpInput0");
CParticleVecInput.m_flInterpInput1 = findOffsetByName(j, "CParticleVecInput", "m_flInterpInput1");
CParticleVecInput.m_vInterpOutput0 = findOffsetByName(j, "CParticleVecInput", "m_vInterpOutput0");
CParticleVecInput.m_vInterpOutput1 = findOffsetByName(j, "CParticleVecInput", "m_vInterpOutput1");
CParticleVecInput.m_Gradient = findOffsetByName(j, "CParticleVecInput", "m_Gradient");
CParticleVecInput.m_vRandomMin = findOffsetByName(j, "CParticleVecInput", "m_vRandomMin");
CParticleVecInput.m_vRandomMax = findOffsetByName(j, "CParticleVecInput", "m_vRandomMax");

// Atribuições para C_OP_InstantaneousEmitter
// C_OP_InstantaneousEmitter Offsets
C_OP_InstantaneousEmitter.m_nParticlesToEmit = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_nParticlesToEmit");
C_OP_InstantaneousEmitter.m_flStartTime = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_flStartTime");
C_OP_InstantaneousEmitter.m_flInitFromKilledParentParticles = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_flInitFromKilledParentParticles");
C_OP_InstantaneousEmitter.m_nEventType = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_nEventType");
C_OP_InstantaneousEmitter.m_flParentParticleScale = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_flParentParticleScale");
C_OP_InstantaneousEmitter.m_nMaxEmittedPerFrame = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_nMaxEmittedPerFrame");
C_OP_InstantaneousEmitter.m_nSnapshotControlPoint = findOffsetByName(j, "C_OP_InstantaneousEmitter", "m_nSnapshotControlPoint");

// Atribuições para C_OP_ConstrainLineLength
// C_OP_ConstrainLineLength Offsets
C_OP_ConstrainLineLength.m_flMinDistance = findOffsetByName(j, "C_OP_ConstrainLineLength", "m_flMinDistance");
C_OP_ConstrainLineLength.m_flMaxDistance = findOffsetByName(j, "C_OP_ConstrainLineLength", "m_flMaxDistance");

// Atribuições para C_INIT_LifespanFromVelocity
// C_INIT_LifespanFromVelocity Offsets
C_INIT_LifespanFromVelocity.m_vecComponentScale = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_vecComponentScale");
C_INIT_LifespanFromVelocity.m_flTraceOffset = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_flTraceOffset");
C_INIT_LifespanFromVelocity.m_flMaxTraceLength = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_flMaxTraceLength");
C_INIT_LifespanFromVelocity.m_flTraceTolerance = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_flTraceTolerance");
C_INIT_LifespanFromVelocity.m_nMaxPlanes = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_nMaxPlanes");
C_INIT_LifespanFromVelocity.m_CollisionGroupName = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_CollisionGroupName");
C_INIT_LifespanFromVelocity.m_nTraceSet = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_nTraceSet");
C_INIT_LifespanFromVelocity.m_bIncludeWater = findOffsetByName(j, "C_INIT_LifespanFromVelocity", "m_bIncludeWater");

// Atribuições para CBaseTrailRenderer
// CBaseTrailRenderer Offsets
CBaseTrailRenderer.m_nOrientationType = findOffsetByName(j, "CBaseTrailRenderer", "m_nOrientationType");
CBaseTrailRenderer.m_nOrientationControlPoint = findOffsetByName(j, "CBaseTrailRenderer", "m_nOrientationControlPoint");
CBaseTrailRenderer.m_flMinSize = findOffsetByName(j, "CBaseTrailRenderer", "m_flMinSize");
CBaseTrailRenderer.m_flMaxSize = findOffsetByName(j, "CBaseTrailRenderer", "m_flMaxSize");
CBaseTrailRenderer.m_flStartFadeSize = findOffsetByName(j, "CBaseTrailRenderer", "m_flStartFadeSize");
CBaseTrailRenderer.m_flEndFadeSize = findOffsetByName(j, "CBaseTrailRenderer", "m_flEndFadeSize");
CBaseTrailRenderer.m_bClampV = findOffsetByName(j, "CBaseTrailRenderer", "m_bClampV");

// Atribuições para C_INIT_VelocityFromCP
// C_INIT_VelocityFromCP Offsets
C_INIT_VelocityFromCP.m_velocityInput = findOffsetByName(j, "C_INIT_VelocityFromCP", "m_velocityInput");
C_INIT_VelocityFromCP.m_transformInput = findOffsetByName(j, "C_INIT_VelocityFromCP", "m_transformInput");
C_INIT_VelocityFromCP.m_flVelocityScale = findOffsetByName(j, "C_INIT_VelocityFromCP", "m_flVelocityScale");
C_INIT_VelocityFromCP.m_bDirectionOnly = findOffsetByName(j, "C_INIT_VelocityFromCP", "m_bDirectionOnly");

// Atribuições para C_OP_SetControlPointOrientation
// C_OP_SetControlPointOrientation Offsets
C_OP_SetControlPointOrientation.m_bUseWorldLocation = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_bUseWorldLocation");
C_OP_SetControlPointOrientation.m_bRandomize = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_bRandomize");
C_OP_SetControlPointOrientation.m_bSetOnce = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_bSetOnce");
C_OP_SetControlPointOrientation.m_nCP = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_nCP");
C_OP_SetControlPointOrientation.m_nHeadLocation = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_nHeadLocation");
C_OP_SetControlPointOrientation.m_vecRotation = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_vecRotation");
C_OP_SetControlPointOrientation.m_vecRotationB = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_vecRotationB");
C_OP_SetControlPointOrientation.m_flInterpolation = findOffsetByName(j, "C_OP_SetControlPointOrientation", "m_flInterpolation");

// Atribuições para C_OP_MovementSkinnedPositionFromCPSnapshot
// C_OP_MovementSkinnedPositionFromCPSnapshot Offsets
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nSnapshotControlPointNumber = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nSnapshotControlPointNumber");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nControlPointNumber");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_bRandom = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_bRandom");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nRandomSeed = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nRandomSeed");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_bSetNormal = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_bSetNormal");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_bSetRadius = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_bSetRadius");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nIndexType = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nIndexType");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_flReadIndex = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_flReadIndex");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_flIncrement = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_flIncrement");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nFullLoopIncrement = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nFullLoopIncrement");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_nSnapShotStartPoint = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_nSnapShotStartPoint");
C_OP_MovementSkinnedPositionFromCPSnapshot.m_flInterpolation = findOffsetByName(j, "C_OP_MovementSkinnedPositionFromCPSnapshot", "m_flInterpolation");

// Atribuições para C_OP_OscillateVector
// C_OP_OscillateVector Offsets
C_OP_OscillateVector.m_RateMin = findOffsetByName(j, "C_OP_OscillateVector", "m_RateMin");
C_OP_OscillateVector.m_RateMax = findOffsetByName(j, "C_OP_OscillateVector", "m_RateMax");
C_OP_OscillateVector.m_FrequencyMin = findOffsetByName(j, "C_OP_OscillateVector", "m_FrequencyMin");
C_OP_OscillateVector.m_FrequencyMax = findOffsetByName(j, "C_OP_OscillateVector", "m_FrequencyMax");
C_OP_OscillateVector.m_nField = findOffsetByName(j, "C_OP_OscillateVector", "m_nField");
C_OP_OscillateVector.m_bProportional = findOffsetByName(j, "C_OP_OscillateVector", "m_bProportional");
C_OP_OscillateVector.m_bProportionalOp = findOffsetByName(j, "C_OP_OscillateVector", "m_bProportionalOp");
C_OP_OscillateVector.m_bOffset = findOffsetByName(j, "C_OP_OscillateVector", "m_bOffset");
C_OP_OscillateVector.m_flStartTime_min = findOffsetByName(j, "C_OP_OscillateVector", "m_flStartTime_min");
C_OP_OscillateVector.m_flStartTime_max = findOffsetByName(j, "C_OP_OscillateVector", "m_flStartTime_max");
C_OP_OscillateVector.m_flEndTime_min = findOffsetByName(j, "C_OP_OscillateVector", "m_flEndTime_min");
C_OP_OscillateVector.m_flEndTime_max = findOffsetByName(j, "C_OP_OscillateVector", "m_flEndTime_max");
C_OP_OscillateVector.m_flOscMult = findOffsetByName(j, "C_OP_OscillateVector", "m_flOscMult");
C_OP_OscillateVector.m_flOscAdd = findOffsetByName(j, "C_OP_OscillateVector", "m_flOscAdd");
C_OP_OscillateVector.m_flRateScale = findOffsetByName(j, "C_OP_OscillateVector", "m_flRateScale");

// Atribuições para C_OP_PositionLock
// C_OP_PositionLock Offsets
C_OP_PositionLock.m_TransformInput = findOffsetByName(j, "C_OP_PositionLock", "m_TransformInput");
C_OP_PositionLock.m_flStartTime_min = findOffsetByName(j, "C_OP_PositionLock", "m_flStartTime_min");
C_OP_PositionLock.m_flStartTime_max = findOffsetByName(j, "C_OP_PositionLock", "m_flStartTime_max");
C_OP_PositionLock.m_flStartTime_exp = findOffsetByName(j, "C_OP_PositionLock", "m_flStartTime_exp");
C_OP_PositionLock.m_flEndTime_min = findOffsetByName(j, "C_OP_PositionLock", "m_flEndTime_min");
C_OP_PositionLock.m_flEndTime_max = findOffsetByName(j, "C_OP_PositionLock", "m_flEndTime_max");
C_OP_PositionLock.m_flEndTime_exp = findOffsetByName(j, "C_OP_PositionLock", "m_flEndTime_exp");
C_OP_PositionLock.m_flRange = findOffsetByName(j, "C_OP_PositionLock", "m_flRange");
C_OP_PositionLock.m_flRangeBias = findOffsetByName(j, "C_OP_PositionLock", "m_flRangeBias");
C_OP_PositionLock.m_flJumpThreshold = findOffsetByName(j, "C_OP_PositionLock", "m_flJumpThreshold");
C_OP_PositionLock.m_flPrevPosScale = findOffsetByName(j, "C_OP_PositionLock", "m_flPrevPosScale");
C_OP_PositionLock.m_bLockRot = findOffsetByName(j, "C_OP_PositionLock", "m_bLockRot");
C_OP_PositionLock.m_vecScale = findOffsetByName(j, "C_OP_PositionLock", "m_vecScale");
C_OP_PositionLock.m_nFieldOutput = findOffsetByName(j, "C_OP_PositionLock", "m_nFieldOutput");
C_OP_PositionLock.m_nFieldOutputPrev = findOffsetByName(j, "C_OP_PositionLock", "m_nFieldOutputPrev");

// Atribuições para C_OP_RenderVRHapticEvent
// C_OP_RenderVRHapticEvent Offsets
C_OP_RenderVRHapticEvent.m_nHand = findOffsetByName(j, "C_OP_RenderVRHapticEvent", "m_nHand");
C_OP_RenderVRHapticEvent.m_nOutputHandCP = findOffsetByName(j, "C_OP_RenderVRHapticEvent", "m_nOutputHandCP");
C_OP_RenderVRHapticEvent.m_nOutputField = findOffsetByName(j, "C_OP_RenderVRHapticEvent", "m_nOutputField");
C_OP_RenderVRHapticEvent.m_flAmplitude = findOffsetByName(j, "C_OP_RenderVRHapticEvent", "m_flAmplitude");

// Atribuições para C_OP_SetControlPointToImpactPoint
// C_OP_SetControlPointToImpactPoint Offsets
C_OP_SetControlPointToImpactPoint.m_nCPOut = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_nCPOut");
C_OP_SetControlPointToImpactPoint.m_nCPIn = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_nCPIn");
C_OP_SetControlPointToImpactPoint.m_flUpdateRate = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_flUpdateRate");
C_OP_SetControlPointToImpactPoint.m_flTraceLength = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_flTraceLength");
C_OP_SetControlPointToImpactPoint.m_flStartOffset = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_flStartOffset");
C_OP_SetControlPointToImpactPoint.m_flOffset = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_flOffset");
C_OP_SetControlPointToImpactPoint.m_vecTraceDir = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_vecTraceDir");
C_OP_SetControlPointToImpactPoint.m_CollisionGroupName = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_CollisionGroupName");
C_OP_SetControlPointToImpactPoint.m_nTraceSet = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_nTraceSet");
C_OP_SetControlPointToImpactPoint.m_bSetToEndpoint = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_bSetToEndpoint");
C_OP_SetControlPointToImpactPoint.m_bTraceToClosestSurface = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_bTraceToClosestSurface");
C_OP_SetControlPointToImpactPoint.m_bIncludeWater = findOffsetByName(j, "C_OP_SetControlPointToImpactPoint", "m_bIncludeWater");

// Atribuições para C_OP_InterpolateRadius
// C_OP_InterpolateRadius Offsets
C_OP_InterpolateRadius.m_flStartTime = findOffsetByName(j, "C_OP_InterpolateRadius", "m_flStartTime");
C_OP_InterpolateRadius.m_flEndTime = findOffsetByName(j, "C_OP_InterpolateRadius", "m_flEndTime");
C_OP_InterpolateRadius.m_flStartScale = findOffsetByName(j, "C_OP_InterpolateRadius", "m_flStartScale");
C_OP_InterpolateRadius.m_flEndScale = findOffsetByName(j, "C_OP_InterpolateRadius", "m_flEndScale");
C_OP_InterpolateRadius.m_bEaseInAndOut = findOffsetByName(j, "C_OP_InterpolateRadius", "m_bEaseInAndOut");
C_OP_InterpolateRadius.m_flBias = findOffsetByName(j, "C_OP_InterpolateRadius", "m_flBias");

// Atribuições para ParticleAttributeIndex_t
// ParticleAttributeIndex_t Offsets
ParticleAttributeIndex_t.m_Value = findOffsetByName(j, "ParticleAttributeIndex_t", "m_Value");

// Atribuições para C_OP_ReinitializeScalarEndCap
// C_OP_ReinitializeScalarEndCap Offsets
C_OP_ReinitializeScalarEndCap.m_nFieldOutput = findOffsetByName(j, "C_OP_ReinitializeScalarEndCap", "m_nFieldOutput");
C_OP_ReinitializeScalarEndCap.m_flOutputMin = findOffsetByName(j, "C_OP_ReinitializeScalarEndCap", "m_flOutputMin");
C_OP_ReinitializeScalarEndCap.m_flOutputMax = findOffsetByName(j, "C_OP_ReinitializeScalarEndCap", "m_flOutputMax");

// Atribuições para C_OP_TurbulenceForce
// C_OP_TurbulenceForce Offsets
C_OP_TurbulenceForce.m_flNoiseCoordScale0 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_flNoiseCoordScale0");
C_OP_TurbulenceForce.m_flNoiseCoordScale1 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_flNoiseCoordScale1");
C_OP_TurbulenceForce.m_flNoiseCoordScale2 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_flNoiseCoordScale2");
C_OP_TurbulenceForce.m_flNoiseCoordScale3 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_flNoiseCoordScale3");
C_OP_TurbulenceForce.m_vecNoiseAmount0 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_vecNoiseAmount0");
C_OP_TurbulenceForce.m_vecNoiseAmount1 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_vecNoiseAmount1");
C_OP_TurbulenceForce.m_vecNoiseAmount2 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_vecNoiseAmount2");
C_OP_TurbulenceForce.m_vecNoiseAmount3 = findOffsetByName(j, "C_OP_TurbulenceForce", "m_vecNoiseAmount3");

// Atribuições para C_OP_RemapNamedModelElementOnceTimed
// C_OP_RemapNamedModelElementOnceTimed Offsets
C_OP_RemapNamedModelElementOnceTimed.m_hModel = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_hModel");
C_OP_RemapNamedModelElementOnceTimed.m_inNames = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_inNames");
C_OP_RemapNamedModelElementOnceTimed.m_outNames = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_outNames");
C_OP_RemapNamedModelElementOnceTimed.m_fallbackNames = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_fallbackNames");
C_OP_RemapNamedModelElementOnceTimed.m_bModelFromRenderer = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_bModelFromRenderer");
C_OP_RemapNamedModelElementOnceTimed.m_bProportional = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_bProportional");
C_OP_RemapNamedModelElementOnceTimed.m_nFieldInput = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_nFieldInput");
C_OP_RemapNamedModelElementOnceTimed.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_nFieldOutput");
C_OP_RemapNamedModelElementOnceTimed.m_flRemapTime = findOffsetByName(j, "C_OP_RemapNamedModelElementOnceTimed", "m_flRemapTime");

// Atribuições para C_OP_SetControlPointToPlayer
// C_OP_SetControlPointToPlayer Offsets
C_OP_SetControlPointToPlayer.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointToPlayer", "m_nCP1");
C_OP_SetControlPointToPlayer.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetControlPointToPlayer", "m_vecCP1Pos");
C_OP_SetControlPointToPlayer.m_bOrientToEyes = findOffsetByName(j, "C_OP_SetControlPointToPlayer", "m_bOrientToEyes");

// Atribuições para C_OP_EndCapTimedFreeze
// C_OP_EndCapTimedFreeze Offsets
C_OP_EndCapTimedFreeze.m_flFreezeTime = findOffsetByName(j, "C_OP_EndCapTimedFreeze", "m_flFreezeTime");

// Atribuições para C_OP_RenderGpuImplicit
// C_OP_RenderGpuImplicit Offsets
C_OP_RenderGpuImplicit.m_bUsePerParticleRadius = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_bUsePerParticleRadius");
C_OP_RenderGpuImplicit.m_nVertexCountKb = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_nVertexCountKb");
C_OP_RenderGpuImplicit.m_nIndexCountKb = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_nIndexCountKb");
C_OP_RenderGpuImplicit.m_fGridSize = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_fGridSize");
C_OP_RenderGpuImplicit.m_fRadiusScale = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_fRadiusScale");
C_OP_RenderGpuImplicit.m_fIsosurfaceThreshold = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_fIsosurfaceThreshold");
C_OP_RenderGpuImplicit.m_nScaleCP = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_nScaleCP");
C_OP_RenderGpuImplicit.m_hMaterial = findOffsetByName(j, "C_OP_RenderGpuImplicit", "m_hMaterial");

// Atribuições para CNewParticleEffect
// CNewParticleEffect Offsets
CNewParticleEffect.m_pNext = findOffsetByName(j, "CNewParticleEffect", "m_pNext");
CNewParticleEffect.m_pPrev = findOffsetByName(j, "CNewParticleEffect", "m_pPrev");
CNewParticleEffect.m_pParticles = findOffsetByName(j, "CNewParticleEffect", "m_pParticles");
CNewParticleEffect.m_pDebugName = findOffsetByName(j, "CNewParticleEffect", "m_pDebugName");
CNewParticleEffect.m_bDontRemove = findOffsetByName(j, "CNewParticleEffect", "m_bDontRemove");
CNewParticleEffect.m_bRemove = findOffsetByName(j, "CNewParticleEffect", "m_bRemove");
CNewParticleEffect.m_bNeedsBBoxUpdate = findOffsetByName(j, "CNewParticleEffect", "m_bNeedsBBoxUpdate");
CNewParticleEffect.m_bIsFirstFrame = findOffsetByName(j, "CNewParticleEffect", "m_bIsFirstFrame");
CNewParticleEffect.m_bAutoUpdateBBox = findOffsetByName(j, "CNewParticleEffect", "m_bAutoUpdateBBox");
CNewParticleEffect.m_bAllocated = findOffsetByName(j, "CNewParticleEffect", "m_bAllocated");
CNewParticleEffect.m_bSimulate = findOffsetByName(j, "CNewParticleEffect", "m_bSimulate");
CNewParticleEffect.m_bShouldPerformCullCheck = findOffsetByName(j, "CNewParticleEffect", "m_bShouldPerformCullCheck");
CNewParticleEffect.m_bForceNoDraw = findOffsetByName(j, "CNewParticleEffect", "m_bForceNoDraw");
CNewParticleEffect.m_bShouldSave = findOffsetByName(j, "CNewParticleEffect", "m_bShouldSave");
CNewParticleEffect.m_bDisableAggregation = findOffsetByName(j, "CNewParticleEffect", "m_bDisableAggregation");
CNewParticleEffect.m_bShouldSimulateDuringGamePaused = findOffsetByName(j, "CNewParticleEffect", "m_bShouldSimulateDuringGamePaused");
CNewParticleEffect.m_bShouldCheckFoW = findOffsetByName(j, "CNewParticleEffect", "m_bShouldCheckFoW");
CNewParticleEffect.m_vSortOrigin = findOffsetByName(j, "CNewParticleEffect", "m_vSortOrigin");
CNewParticleEffect.m_flScale = findOffsetByName(j, "CNewParticleEffect", "m_flScale");
CNewParticleEffect.m_hOwner = findOffsetByName(j, "CNewParticleEffect", "m_hOwner");
CNewParticleEffect.m_pOwningParticleProperty = findOffsetByName(j, "CNewParticleEffect", "m_pOwningParticleProperty");
CNewParticleEffect.m_flFreezeTransitionStart = findOffsetByName(j, "CNewParticleEffect", "m_flFreezeTransitionStart");
CNewParticleEffect.m_flFreezeTransitionDuration = findOffsetByName(j, "CNewParticleEffect", "m_flFreezeTransitionDuration");
CNewParticleEffect.m_flFreezeTransitionOverride = findOffsetByName(j, "CNewParticleEffect", "m_flFreezeTransitionOverride");
CNewParticleEffect.m_bFreezeTransitionActive = findOffsetByName(j, "CNewParticleEffect", "m_bFreezeTransitionActive");
CNewParticleEffect.m_bFreezeTargetState = findOffsetByName(j, "CNewParticleEffect", "m_bFreezeTargetState");
CNewParticleEffect.m_bCanFreeze = findOffsetByName(j, "CNewParticleEffect", "m_bCanFreeze");
CNewParticleEffect.m_LastMin = findOffsetByName(j, "CNewParticleEffect", "m_LastMin");
CNewParticleEffect.m_LastMax = findOffsetByName(j, "CNewParticleEffect", "m_LastMax");
CNewParticleEffect.m_nSplitScreenUser = findOffsetByName(j, "CNewParticleEffect", "m_nSplitScreenUser");
CNewParticleEffect.m_vecAggregationCenter = findOffsetByName(j, "CNewParticleEffect", "m_vecAggregationCenter");
CNewParticleEffect.m_RefCount = findOffsetByName(j, "CNewParticleEffect", "m_RefCount");

// Atribuições para C_OP_SetRandomControlPointPosition
// C_OP_SetRandomControlPointPosition Offsets
C_OP_SetRandomControlPointPosition.m_bUseWorldLocation = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_bUseWorldLocation");
C_OP_SetRandomControlPointPosition.m_bOrient = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_bOrient");
C_OP_SetRandomControlPointPosition.m_nCP1 = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_nCP1");
C_OP_SetRandomControlPointPosition.m_nHeadLocation = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_nHeadLocation");
C_OP_SetRandomControlPointPosition.m_flReRandomRate = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_flReRandomRate");
C_OP_SetRandomControlPointPosition.m_vecCPMinPos = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_vecCPMinPos");
C_OP_SetRandomControlPointPosition.m_vecCPMaxPos = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_vecCPMaxPos");
C_OP_SetRandomControlPointPosition.m_flInterpolation = findOffsetByName(j, "C_OP_SetRandomControlPointPosition", "m_flInterpolation");

// Atribuições para C_OP_RemapTransformVisibilityToScalar
// C_OP_RemapTransformVisibilityToScalar Offsets
C_OP_RemapTransformVisibilityToScalar.m_nSetMethod = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_nSetMethod");
C_OP_RemapTransformVisibilityToScalar.m_TransformInput = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_TransformInput");
C_OP_RemapTransformVisibilityToScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_nFieldOutput");
C_OP_RemapTransformVisibilityToScalar.m_flInputMin = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_flInputMin");
C_OP_RemapTransformVisibilityToScalar.m_flInputMax = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_flInputMax");
C_OP_RemapTransformVisibilityToScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_flOutputMin");
C_OP_RemapTransformVisibilityToScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_flOutputMax");
C_OP_RemapTransformVisibilityToScalar.m_flRadius = findOffsetByName(j, "C_OP_RemapTransformVisibilityToScalar", "m_flRadius");

// Atribuições para C_OP_RemapControlPointDirectionToVector
// C_OP_RemapControlPointDirectionToVector Offsets
C_OP_RemapControlPointDirectionToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapControlPointDirectionToVector", "m_nFieldOutput");
C_OP_RemapControlPointDirectionToVector.m_flScale = findOffsetByName(j, "C_OP_RemapControlPointDirectionToVector", "m_flScale");
C_OP_RemapControlPointDirectionToVector.m_nControlPointNumber = findOffsetByName(j, "C_OP_RemapControlPointDirectionToVector", "m_nControlPointNumber");

// Atribuições para C_OP_DragRelativeToPlane
// C_OP_DragRelativeToPlane Offsets
C_OP_DragRelativeToPlane.m_flDragAtPlane = findOffsetByName(j, "C_OP_DragRelativeToPlane", "m_flDragAtPlane");
C_OP_DragRelativeToPlane.m_flFalloff = findOffsetByName(j, "C_OP_DragRelativeToPlane", "m_flFalloff");
C_OP_DragRelativeToPlane.m_bDirectional = findOffsetByName(j, "C_OP_DragRelativeToPlane", "m_bDirectional");
C_OP_DragRelativeToPlane.m_vecPlaneNormal = findOffsetByName(j, "C_OP_DragRelativeToPlane", "m_vecPlaneNormal");
C_OP_DragRelativeToPlane.m_nControlPointNumber = findOffsetByName(j, "C_OP_DragRelativeToPlane", "m_nControlPointNumber");

// Atribuições para C_OP_SetCPtoVector
// C_OP_SetCPtoVector Offsets
C_OP_SetCPtoVector.m_nCPInput = findOffsetByName(j, "C_OP_SetCPtoVector", "m_nCPInput");
C_OP_SetCPtoVector.m_nFieldOutput = findOffsetByName(j, "C_OP_SetCPtoVector", "m_nFieldOutput");

// Atribuições para ParticleNamedValueSource_t
// ParticleNamedValueSource_t Offsets
ParticleNamedValueSource_t.m_Name = findOffsetByName(j, "ParticleNamedValueSource_t", "m_Name");
ParticleNamedValueSource_t.m_IsPublic = findOffsetByName(j, "ParticleNamedValueSource_t", "m_IsPublic");
ParticleNamedValueSource_t.m_ValueType = findOffsetByName(j, "ParticleNamedValueSource_t", "m_ValueType");
ParticleNamedValueSource_t.m_DefaultConfig = findOffsetByName(j, "ParticleNamedValueSource_t", "m_DefaultConfig");
ParticleNamedValueSource_t.m_NamedConfigs = findOffsetByName(j, "ParticleNamedValueSource_t", "m_NamedConfigs");

// Atribuições para C_OP_SnapshotRigidSkinToBones
// C_OP_SnapshotRigidSkinToBones Offsets
C_OP_SnapshotRigidSkinToBones.m_bTransformNormals = findOffsetByName(j, "C_OP_SnapshotRigidSkinToBones", "m_bTransformNormals");
C_OP_SnapshotRigidSkinToBones.m_bTransformRadii = findOffsetByName(j, "C_OP_SnapshotRigidSkinToBones", "m_bTransformRadii");
C_OP_SnapshotRigidSkinToBones.m_nControlPointNumber = findOffsetByName(j, "C_OP_SnapshotRigidSkinToBones", "m_nControlPointNumber");

// Atribuições para C_OP_SetSingleControlPointPosition
// C_OP_SetSingleControlPointPosition Offsets
C_OP_SetSingleControlPointPosition.m_bSetOnce = findOffsetByName(j, "C_OP_SetSingleControlPointPosition", "m_bSetOnce");
C_OP_SetSingleControlPointPosition.m_nCP1 = findOffsetByName(j, "C_OP_SetSingleControlPointPosition", "m_nCP1");
C_OP_SetSingleControlPointPosition.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetSingleControlPointPosition", "m_vecCP1Pos");
C_OP_SetSingleControlPointPosition.m_transformInput = findOffsetByName(j, "C_OP_SetSingleControlPointPosition", "m_transformInput");

// Atribuições para C_INIT_DistanceToNeighborCull
// C_INIT_DistanceToNeighborCull Offsets
C_INIT_DistanceToNeighborCull.m_flDistance = findOffsetByName(j, "C_INIT_DistanceToNeighborCull", "m_flDistance");
C_INIT_DistanceToNeighborCull.m_bIncludeRadii = findOffsetByName(j, "C_INIT_DistanceToNeighborCull", "m_bIncludeRadii");

// Atribuições para C_OP_RemapCPtoScalar
// C_OP_RemapCPtoScalar Offsets
C_OP_RemapCPtoScalar.m_nCPInput = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_nCPInput");
C_OP_RemapCPtoScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_nFieldOutput");
C_OP_RemapCPtoScalar.m_nField = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_nField");
C_OP_RemapCPtoScalar.m_flInputMin = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flInputMin");
C_OP_RemapCPtoScalar.m_flInputMax = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flInputMax");
C_OP_RemapCPtoScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flOutputMin");
C_OP_RemapCPtoScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flOutputMax");
C_OP_RemapCPtoScalar.m_flStartTime = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flStartTime");
C_OP_RemapCPtoScalar.m_flEndTime = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flEndTime");
C_OP_RemapCPtoScalar.m_flInterpRate = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_flInterpRate");
C_OP_RemapCPtoScalar.m_nSetMethod = findOffsetByName(j, "C_OP_RemapCPtoScalar", "m_nSetMethod");

// Atribuições para CParticleFunctionRenderer
// CParticleFunctionRenderer Offsets
CParticleFunctionRenderer.VisibilityInputs = findOffsetByName(j, "CParticleFunctionRenderer", "VisibilityInputs");
CParticleFunctionRenderer.m_bCannotBeRefracted = findOffsetByName(j, "CParticleFunctionRenderer", "m_bCannotBeRefracted");
CParticleFunctionRenderer.m_bSkipRenderingOnMobile = findOffsetByName(j, "CParticleFunctionRenderer", "m_bSkipRenderingOnMobile");

// Atribuições para CParticleSystemDefinition
// CParticleSystemDefinition Offsets
CParticleSystemDefinition.m_nBehaviorVersion = findOffsetByName(j, "CParticleSystemDefinition", "m_nBehaviorVersion");
CParticleSystemDefinition.m_PreEmissionOperators = findOffsetByName(j, "CParticleSystemDefinition", "m_PreEmissionOperators");
CParticleSystemDefinition.m_Emitters = findOffsetByName(j, "CParticleSystemDefinition", "m_Emitters");
CParticleSystemDefinition.m_Initializers = findOffsetByName(j, "CParticleSystemDefinition", "m_Initializers");
CParticleSystemDefinition.m_Operators = findOffsetByName(j, "CParticleSystemDefinition", "m_Operators");
CParticleSystemDefinition.m_ForceGenerators = findOffsetByName(j, "CParticleSystemDefinition", "m_ForceGenerators");
CParticleSystemDefinition.m_Constraints = findOffsetByName(j, "CParticleSystemDefinition", "m_Constraints");
CParticleSystemDefinition.m_Renderers = findOffsetByName(j, "CParticleSystemDefinition", "m_Renderers");
CParticleSystemDefinition.m_Children = findOffsetByName(j, "CParticleSystemDefinition", "m_Children");
CParticleSystemDefinition.m_nFirstMultipleOverride_BackwardCompat = findOffsetByName(j, "CParticleSystemDefinition", "m_nFirstMultipleOverride_BackwardCompat");
CParticleSystemDefinition.m_nInitialParticles = findOffsetByName(j, "CParticleSystemDefinition", "m_nInitialParticles");
CParticleSystemDefinition.m_nMaxParticles = findOffsetByName(j, "CParticleSystemDefinition", "m_nMaxParticles");
CParticleSystemDefinition.m_nGroupID = findOffsetByName(j, "CParticleSystemDefinition", "m_nGroupID");
CParticleSystemDefinition.m_BoundingBoxMin = findOffsetByName(j, "CParticleSystemDefinition", "m_BoundingBoxMin");
CParticleSystemDefinition.m_BoundingBoxMax = findOffsetByName(j, "CParticleSystemDefinition", "m_BoundingBoxMax");
CParticleSystemDefinition.m_flDepthSortBias = findOffsetByName(j, "CParticleSystemDefinition", "m_flDepthSortBias");
CParticleSystemDefinition.m_nSortOverridePositionCP = findOffsetByName(j, "CParticleSystemDefinition", "m_nSortOverridePositionCP");
CParticleSystemDefinition.m_bInfiniteBounds = findOffsetByName(j, "CParticleSystemDefinition", "m_bInfiniteBounds");
CParticleSystemDefinition.m_bEnableNamedValues = findOffsetByName(j, "CParticleSystemDefinition", "m_bEnableNamedValues");
CParticleSystemDefinition.m_NamedValueDomain = findOffsetByName(j, "CParticleSystemDefinition", "m_NamedValueDomain");
CParticleSystemDefinition.m_NamedValueLocals = findOffsetByName(j, "CParticleSystemDefinition", "m_NamedValueLocals");
CParticleSystemDefinition.m_ConstantColor = findOffsetByName(j, "CParticleSystemDefinition", "m_ConstantColor");
CParticleSystemDefinition.m_ConstantNormal = findOffsetByName(j, "CParticleSystemDefinition", "m_ConstantNormal");
CParticleSystemDefinition.m_flConstantRadius = findOffsetByName(j, "CParticleSystemDefinition", "m_flConstantRadius");
CParticleSystemDefinition.m_flConstantRotation = findOffsetByName(j, "CParticleSystemDefinition", "m_flConstantRotation");
CParticleSystemDefinition.m_flConstantRotationSpeed = findOffsetByName(j, "CParticleSystemDefinition", "m_flConstantRotationSpeed");
CParticleSystemDefinition.m_flConstantLifespan = findOffsetByName(j, "CParticleSystemDefinition", "m_flConstantLifespan");
CParticleSystemDefinition.m_nConstantSequenceNumber = findOffsetByName(j, "CParticleSystemDefinition", "m_nConstantSequenceNumber");
CParticleSystemDefinition.m_nConstantSequenceNumber1 = findOffsetByName(j, "CParticleSystemDefinition", "m_nConstantSequenceNumber1");
CParticleSystemDefinition.m_nSnapshotControlPoint = findOffsetByName(j, "CParticleSystemDefinition", "m_nSnapshotControlPoint");
CParticleSystemDefinition.m_hSnapshot = findOffsetByName(j, "CParticleSystemDefinition", "m_hSnapshot");
CParticleSystemDefinition.m_pszCullReplacementName = findOffsetByName(j, "CParticleSystemDefinition", "m_pszCullReplacementName");
CParticleSystemDefinition.m_flCullRadius = findOffsetByName(j, "CParticleSystemDefinition", "m_flCullRadius");
CParticleSystemDefinition.m_flCullFillCost = findOffsetByName(j, "CParticleSystemDefinition", "m_flCullFillCost");
CParticleSystemDefinition.m_nCullControlPoint = findOffsetByName(j, "CParticleSystemDefinition", "m_nCullControlPoint");
CParticleSystemDefinition.m_hFallback = findOffsetByName(j, "CParticleSystemDefinition", "m_hFallback");
CParticleSystemDefinition.m_nFallbackMaxCount = findOffsetByName(j, "CParticleSystemDefinition", "m_nFallbackMaxCount");
CParticleSystemDefinition.m_hLowViolenceDef = findOffsetByName(j, "CParticleSystemDefinition", "m_hLowViolenceDef");
CParticleSystemDefinition.m_hReferenceReplacement = findOffsetByName(j, "CParticleSystemDefinition", "m_hReferenceReplacement");
CParticleSystemDefinition.m_flPreSimulationTime = findOffsetByName(j, "CParticleSystemDefinition", "m_flPreSimulationTime");
CParticleSystemDefinition.m_flStopSimulationAfterTime = findOffsetByName(j, "CParticleSystemDefinition", "m_flStopSimulationAfterTime");
CParticleSystemDefinition.m_flMaximumTimeStep = findOffsetByName(j, "CParticleSystemDefinition", "m_flMaximumTimeStep");
CParticleSystemDefinition.m_flMaximumSimTime = findOffsetByName(j, "CParticleSystemDefinition", "m_flMaximumSimTime");
CParticleSystemDefinition.m_flMinimumSimTime = findOffsetByName(j, "CParticleSystemDefinition", "m_flMinimumSimTime");
CParticleSystemDefinition.m_flMinimumTimeStep = findOffsetByName(j, "CParticleSystemDefinition", "m_flMinimumTimeStep");
CParticleSystemDefinition.m_nMinimumFrames = findOffsetByName(j, "CParticleSystemDefinition", "m_nMinimumFrames");
CParticleSystemDefinition.m_nMinCPULevel = findOffsetByName(j, "CParticleSystemDefinition", "m_nMinCPULevel");
CParticleSystemDefinition.m_nMinGPULevel = findOffsetByName(j, "CParticleSystemDefinition", "m_nMinGPULevel");
CParticleSystemDefinition.m_flNoDrawTimeToGoToSleep = findOffsetByName(j, "CParticleSystemDefinition", "m_flNoDrawTimeToGoToSleep");
CParticleSystemDefinition.m_flMaxDrawDistance = findOffsetByName(j, "CParticleSystemDefinition", "m_flMaxDrawDistance");
CParticleSystemDefinition.m_flStartFadeDistance = findOffsetByName(j, "CParticleSystemDefinition", "m_flStartFadeDistance");
CParticleSystemDefinition.m_flMaxCreationDistance = findOffsetByName(j, "CParticleSystemDefinition", "m_flMaxCreationDistance");
CParticleSystemDefinition.m_nAggregationMinAvailableParticles = findOffsetByName(j, "CParticleSystemDefinition", "m_nAggregationMinAvailableParticles");
CParticleSystemDefinition.m_flAggregateRadius = findOffsetByName(j, "CParticleSystemDefinition", "m_flAggregateRadius");
CParticleSystemDefinition.m_bShouldBatch = findOffsetByName(j, "CParticleSystemDefinition", "m_bShouldBatch");
CParticleSystemDefinition.m_bShouldHitboxesFallbackToRenderBounds = findOffsetByName(j, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToRenderBounds");
CParticleSystemDefinition.m_bShouldHitboxesFallbackToSnapshot = findOffsetByName(j, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToSnapshot");
CParticleSystemDefinition.m_bShouldHitboxesFallbackToCollisionHulls = findOffsetByName(j, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToCollisionHulls");
CParticleSystemDefinition.m_nViewModelEffect = findOffsetByName(j, "CParticleSystemDefinition", "m_nViewModelEffect");
CParticleSystemDefinition.m_bScreenSpaceEffect = findOffsetByName(j, "CParticleSystemDefinition", "m_bScreenSpaceEffect");
CParticleSystemDefinition.m_pszTargetLayerID = findOffsetByName(j, "CParticleSystemDefinition", "m_pszTargetLayerID");
CParticleSystemDefinition.m_nSkipRenderControlPoint = findOffsetByName(j, "CParticleSystemDefinition", "m_nSkipRenderControlPoint");
CParticleSystemDefinition.m_nAllowRenderControlPoint = findOffsetByName(j, "CParticleSystemDefinition", "m_nAllowRenderControlPoint");
CParticleSystemDefinition.m_bShouldSort = findOffsetByName(j, "CParticleSystemDefinition", "m_bShouldSort");
CParticleSystemDefinition.m_controlPointConfigurations = findOffsetByName(j, "CParticleSystemDefinition", "m_controlPointConfigurations");

// Atribuições para C_OP_PercentageBetweenTransformsVector
// C_OP_PercentageBetweenTransformsVector Offsets
C_OP_PercentageBetweenTransformsVector.m_nFieldOutput = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_nFieldOutput");
C_OP_PercentageBetweenTransformsVector.m_flInputMin = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_flInputMin");
C_OP_PercentageBetweenTransformsVector.m_flInputMax = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_flInputMax");
C_OP_PercentageBetweenTransformsVector.m_vecOutputMin = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_vecOutputMin");
C_OP_PercentageBetweenTransformsVector.m_vecOutputMax = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_vecOutputMax");
C_OP_PercentageBetweenTransformsVector.m_TransformStart = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_TransformStart");
C_OP_PercentageBetweenTransformsVector.m_TransformEnd = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_TransformEnd");
C_OP_PercentageBetweenTransformsVector.m_nSetMethod = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_nSetMethod");
C_OP_PercentageBetweenTransformsVector.m_bActiveRange = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_bActiveRange");
C_OP_PercentageBetweenTransformsVector.m_bRadialCheck = findOffsetByName(j, "C_OP_PercentageBetweenTransformsVector", "m_bRadialCheck");

// Atribuições para C_OP_RenderScreenVelocityRotate
// C_OP_RenderScreenVelocityRotate Offsets
C_OP_RenderScreenVelocityRotate.m_flRotateRateDegrees = findOffsetByName(j, "C_OP_RenderScreenVelocityRotate", "m_flRotateRateDegrees");
C_OP_RenderScreenVelocityRotate.m_flForwardDegrees = findOffsetByName(j, "C_OP_RenderScreenVelocityRotate", "m_flForwardDegrees");

// Atribuições para C_OP_UpdateLightSource
// C_OP_UpdateLightSource Offsets
C_OP_UpdateLightSource.m_vColorTint = findOffsetByName(j, "C_OP_UpdateLightSource", "m_vColorTint");
C_OP_UpdateLightSource.m_flBrightnessScale = findOffsetByName(j, "C_OP_UpdateLightSource", "m_flBrightnessScale");
C_OP_UpdateLightSource.m_flRadiusScale = findOffsetByName(j, "C_OP_UpdateLightSource", "m_flRadiusScale");
C_OP_UpdateLightSource.m_flMinimumLightingRadius = findOffsetByName(j, "C_OP_UpdateLightSource", "m_flMinimumLightingRadius");
C_OP_UpdateLightSource.m_flMaximumLightingRadius = findOffsetByName(j, "C_OP_UpdateLightSource", "m_flMaximumLightingRadius");
C_OP_UpdateLightSource.m_flPositionDampingConstant = findOffsetByName(j, "C_OP_UpdateLightSource", "m_flPositionDampingConstant");

// Atribuições para C_INIT_CreateWithinBox
// C_INIT_CreateWithinBox Offsets
C_INIT_CreateWithinBox.m_vecMin = findOffsetByName(j, "C_INIT_CreateWithinBox", "m_vecMin");
C_INIT_CreateWithinBox.m_vecMax = findOffsetByName(j, "C_INIT_CreateWithinBox", "m_vecMax");
C_INIT_CreateWithinBox.m_nControlPointNumber = findOffsetByName(j, "C_INIT_CreateWithinBox", "m_nControlPointNumber");
C_INIT_CreateWithinBox.m_bLocalSpace = findOffsetByName(j, "C_INIT_CreateWithinBox", "m_bLocalSpace");
C_INIT_CreateWithinBox.m_randomnessParameters = findOffsetByName(j, "C_INIT_CreateWithinBox", "m_randomnessParameters");

// Atribuições para C_OP_ChooseRandomChildrenInGroup
// C_OP_ChooseRandomChildrenInGroup Offsets
C_OP_ChooseRandomChildrenInGroup.m_nChildGroupID = findOffsetByName(j, "C_OP_ChooseRandomChildrenInGroup", "m_nChildGroupID");
C_OP_ChooseRandomChildrenInGroup.m_flNumberOfChildren = findOffsetByName(j, "C_OP_ChooseRandomChildrenInGroup", "m_flNumberOfChildren");

// Atribuições para C_OP_ControlpointLight
// C_OP_ControlpointLight Offsets
C_OP_ControlpointLight.m_flScale = findOffsetByName(j, "C_OP_ControlpointLight", "m_flScale");
C_OP_ControlpointLight.m_nControlPoint1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_nControlPoint1");
C_OP_ControlpointLight.m_nControlPoint2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_nControlPoint2");
C_OP_ControlpointLight.m_nControlPoint3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_nControlPoint3");
C_OP_ControlpointLight.m_nControlPoint4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_nControlPoint4");
C_OP_ControlpointLight.m_vecCPOffset1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_vecCPOffset1");
C_OP_ControlpointLight.m_vecCPOffset2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_vecCPOffset2");
C_OP_ControlpointLight.m_vecCPOffset3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_vecCPOffset3");
C_OP_ControlpointLight.m_vecCPOffset4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_vecCPOffset4");
C_OP_ControlpointLight.m_LightFiftyDist1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightFiftyDist1");
C_OP_ControlpointLight.m_LightZeroDist1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightZeroDist1");
C_OP_ControlpointLight.m_LightFiftyDist2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightFiftyDist2");
C_OP_ControlpointLight.m_LightZeroDist2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightZeroDist2");
C_OP_ControlpointLight.m_LightFiftyDist3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightFiftyDist3");
C_OP_ControlpointLight.m_LightZeroDist3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightZeroDist3");
C_OP_ControlpointLight.m_LightFiftyDist4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightFiftyDist4");
C_OP_ControlpointLight.m_LightZeroDist4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightZeroDist4");
C_OP_ControlpointLight.m_LightColor1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightColor1");
C_OP_ControlpointLight.m_LightColor2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightColor2");
C_OP_ControlpointLight.m_LightColor3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightColor3");
C_OP_ControlpointLight.m_LightColor4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_LightColor4");
C_OP_ControlpointLight.m_bLightType1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightType1");
C_OP_ControlpointLight.m_bLightType2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightType2");
C_OP_ControlpointLight.m_bLightType3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightType3");
C_OP_ControlpointLight.m_bLightType4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightType4");
C_OP_ControlpointLight.m_bLightDynamic1 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightDynamic1");
C_OP_ControlpointLight.m_bLightDynamic2 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightDynamic2");
C_OP_ControlpointLight.m_bLightDynamic3 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightDynamic3");
C_OP_ControlpointLight.m_bLightDynamic4 = findOffsetByName(j, "C_OP_ControlpointLight", "m_bLightDynamic4");
C_OP_ControlpointLight.m_bUseNormal = findOffsetByName(j, "C_OP_ControlpointLight", "m_bUseNormal");
C_OP_ControlpointLight.m_bUseHLambert = findOffsetByName(j, "C_OP_ControlpointLight", "m_bUseHLambert");
C_OP_ControlpointLight.m_bClampLowerRange = findOffsetByName(j, "C_OP_ControlpointLight", "m_bClampLowerRange");
C_OP_ControlpointLight.m_bClampUpperRange = findOffsetByName(j, "C_OP_ControlpointLight", "m_bClampUpperRange");

// Atribuições para C_OP_VectorFieldSnapshot
// C_OP_VectorFieldSnapshot Offsets
C_OP_VectorFieldSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_nControlPointNumber");
C_OP_VectorFieldSnapshot.m_nAttributeToWrite = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_nAttributeToWrite");
C_OP_VectorFieldSnapshot.m_nLocalSpaceCP = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_nLocalSpaceCP");
C_OP_VectorFieldSnapshot.m_flInterpolation = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_flInterpolation");
C_OP_VectorFieldSnapshot.m_vecScale = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_vecScale");
C_OP_VectorFieldSnapshot.m_flBoundaryDampening = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_flBoundaryDampening");
C_OP_VectorFieldSnapshot.m_bSetVelocity = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_bSetVelocity");
C_OP_VectorFieldSnapshot.m_bLockToSurface = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_bLockToSurface");
C_OP_VectorFieldSnapshot.m_flGridSpacing = findOffsetByName(j, "C_OP_VectorFieldSnapshot", "m_flGridSpacing");

// Atribuições para C_OP_CylindricalDistanceToTransform
// C_OP_CylindricalDistanceToTransform Offsets
C_OP_CylindricalDistanceToTransform.m_nFieldOutput = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_nFieldOutput");
C_OP_CylindricalDistanceToTransform.m_flInputMin = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_flInputMin");
C_OP_CylindricalDistanceToTransform.m_flInputMax = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_flInputMax");
C_OP_CylindricalDistanceToTransform.m_flOutputMin = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_flOutputMin");
C_OP_CylindricalDistanceToTransform.m_flOutputMax = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_flOutputMax");
C_OP_CylindricalDistanceToTransform.m_TransformStart = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_TransformStart");
C_OP_CylindricalDistanceToTransform.m_TransformEnd = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_TransformEnd");
C_OP_CylindricalDistanceToTransform.m_nSetMethod = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_nSetMethod");
C_OP_CylindricalDistanceToTransform.m_bActiveRange = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_bActiveRange");
C_OP_CylindricalDistanceToTransform.m_bAdditive = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_bAdditive");
C_OP_CylindricalDistanceToTransform.m_bCapsule = findOffsetByName(j, "C_OP_CylindricalDistanceToTransform", "m_bCapsule");

// Atribuições para C_INIT_PositionPlaceOnGround
// C_INIT_PositionPlaceOnGround Offsets
C_INIT_PositionPlaceOnGround.m_flOffset = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_flOffset");
C_INIT_PositionPlaceOnGround.m_flMaxTraceLength = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_flMaxTraceLength");
C_INIT_PositionPlaceOnGround.m_CollisionGroupName = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_CollisionGroupName");
C_INIT_PositionPlaceOnGround.m_nTraceSet = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_nTraceSet");
C_INIT_PositionPlaceOnGround.m_nTraceMissBehavior = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_nTraceMissBehavior");
C_INIT_PositionPlaceOnGround.m_bIncludeWater = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_bIncludeWater");
C_INIT_PositionPlaceOnGround.m_bSetNormal = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_bSetNormal");
C_INIT_PositionPlaceOnGround.m_bSetPXYZOnly = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_bSetPXYZOnly");
C_INIT_PositionPlaceOnGround.m_bTraceAlongNormal = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_bTraceAlongNormal");
C_INIT_PositionPlaceOnGround.m_bOffsetonColOnly = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_bOffsetonColOnly");
C_INIT_PositionPlaceOnGround.m_flOffsetByRadiusFactor = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_flOffsetByRadiusFactor");
C_INIT_PositionPlaceOnGround.m_nPreserveOffsetCP = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_nPreserveOffsetCP");
C_INIT_PositionPlaceOnGround.m_nIgnoreCP = findOffsetByName(j, "C_INIT_PositionPlaceOnGround", "m_nIgnoreCP");

// Atribuições para C_INIT_RandomScalar
// C_INIT_RandomScalar Offsets
C_INIT_RandomScalar.m_flMin = findOffsetByName(j, "C_INIT_RandomScalar", "m_flMin");
C_INIT_RandomScalar.m_flMax = findOffsetByName(j, "C_INIT_RandomScalar", "m_flMax");
C_INIT_RandomScalar.m_flExponent = findOffsetByName(j, "C_INIT_RandomScalar", "m_flExponent");
C_INIT_RandomScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomScalar", "m_nFieldOutput");

// Atribuições para C_OP_RenderPostProcessing
// C_OP_RenderPostProcessing Offsets
C_OP_RenderPostProcessing.m_flPostProcessStrength = findOffsetByName(j, "C_OP_RenderPostProcessing", "m_flPostProcessStrength");
C_OP_RenderPostProcessing.m_hPostTexture = findOffsetByName(j, "C_OP_RenderPostProcessing", "m_hPostTexture");
C_OP_RenderPostProcessing.m_nPriority = findOffsetByName(j, "C_OP_RenderPostProcessing", "m_nPriority");

// Atribuições para C_OP_WorldTraceConstraint
// C_OP_WorldTraceConstraint Offsets
C_OP_WorldTraceConstraint.m_nCP = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nCP");
C_OP_WorldTraceConstraint.m_vecCpOffset = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_vecCpOffset");
C_OP_WorldTraceConstraint.m_nCollisionMode = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nCollisionMode");
C_OP_WorldTraceConstraint.m_nCollisionModeMin = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nCollisionModeMin");
C_OP_WorldTraceConstraint.m_nTraceSet = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nTraceSet");
C_OP_WorldTraceConstraint.m_CollisionGroupName = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_CollisionGroupName");
C_OP_WorldTraceConstraint.m_bWorldOnly = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bWorldOnly");
C_OP_WorldTraceConstraint.m_bBrushOnly = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bBrushOnly");
C_OP_WorldTraceConstraint.m_bIncludeWater = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bIncludeWater");
C_OP_WorldTraceConstraint.m_nIgnoreCP = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nIgnoreCP");
C_OP_WorldTraceConstraint.m_flCpMovementTolerance = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flCpMovementTolerance");
C_OP_WorldTraceConstraint.m_flRetestRate = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flRetestRate");
C_OP_WorldTraceConstraint.m_flTraceTolerance = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flTraceTolerance");
C_OP_WorldTraceConstraint.m_flCollisionConfirmationSpeed = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flCollisionConfirmationSpeed");
C_OP_WorldTraceConstraint.m_nMaxTracesPerFrame = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nMaxTracesPerFrame");
C_OP_WorldTraceConstraint.m_flRadiusScale = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flRadiusScale");
C_OP_WorldTraceConstraint.m_flBounceAmount = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flBounceAmount");
C_OP_WorldTraceConstraint.m_flSlideAmount = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flSlideAmount");
C_OP_WorldTraceConstraint.m_flRandomDirScale = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flRandomDirScale");
C_OP_WorldTraceConstraint.m_bDecayBounce = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bDecayBounce");
C_OP_WorldTraceConstraint.m_bKillonContact = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bKillonContact");
C_OP_WorldTraceConstraint.m_flMinSpeed = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flMinSpeed");
C_OP_WorldTraceConstraint.m_bSetNormal = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_bSetNormal");
C_OP_WorldTraceConstraint.m_nStickOnCollisionField = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nStickOnCollisionField");
C_OP_WorldTraceConstraint.m_flStopSpeed = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_flStopSpeed");
C_OP_WorldTraceConstraint.m_nEntityStickDataField = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nEntityStickDataField");
C_OP_WorldTraceConstraint.m_nEntityStickNormalField = findOffsetByName(j, "C_OP_WorldTraceConstraint", "m_nEntityStickNormalField");

// Atribuições para C_OP_RenderBlobs
// C_OP_RenderBlobs Offsets
C_OP_RenderBlobs.m_cubeWidth = findOffsetByName(j, "C_OP_RenderBlobs", "m_cubeWidth");
C_OP_RenderBlobs.m_cutoffRadius = findOffsetByName(j, "C_OP_RenderBlobs", "m_cutoffRadius");
C_OP_RenderBlobs.m_renderRadius = findOffsetByName(j, "C_OP_RenderBlobs", "m_renderRadius");
C_OP_RenderBlobs.m_nVertexCountKb = findOffsetByName(j, "C_OP_RenderBlobs", "m_nVertexCountKb");
C_OP_RenderBlobs.m_nIndexCountKb = findOffsetByName(j, "C_OP_RenderBlobs", "m_nIndexCountKb");
C_OP_RenderBlobs.m_nScaleCP = findOffsetByName(j, "C_OP_RenderBlobs", "m_nScaleCP");
C_OP_RenderBlobs.m_MaterialVars = findOffsetByName(j, "C_OP_RenderBlobs", "m_MaterialVars");
C_OP_RenderBlobs.m_hMaterial = findOffsetByName(j, "C_OP_RenderBlobs", "m_hMaterial");

// Atribuições para C_OP_OscillateScalar
// C_OP_OscillateScalar Offsets
C_OP_OscillateScalar.m_RateMin = findOffsetByName(j, "C_OP_OscillateScalar", "m_RateMin");
C_OP_OscillateScalar.m_RateMax = findOffsetByName(j, "C_OP_OscillateScalar", "m_RateMax");
C_OP_OscillateScalar.m_FrequencyMin = findOffsetByName(j, "C_OP_OscillateScalar", "m_FrequencyMin");
C_OP_OscillateScalar.m_FrequencyMax = findOffsetByName(j, "C_OP_OscillateScalar", "m_FrequencyMax");
C_OP_OscillateScalar.m_nField = findOffsetByName(j, "C_OP_OscillateScalar", "m_nField");
C_OP_OscillateScalar.m_bProportional = findOffsetByName(j, "C_OP_OscillateScalar", "m_bProportional");
C_OP_OscillateScalar.m_bProportionalOp = findOffsetByName(j, "C_OP_OscillateScalar", "m_bProportionalOp");
C_OP_OscillateScalar.m_flStartTime_min = findOffsetByName(j, "C_OP_OscillateScalar", "m_flStartTime_min");
C_OP_OscillateScalar.m_flStartTime_max = findOffsetByName(j, "C_OP_OscillateScalar", "m_flStartTime_max");
C_OP_OscillateScalar.m_flEndTime_min = findOffsetByName(j, "C_OP_OscillateScalar", "m_flEndTime_min");
C_OP_OscillateScalar.m_flEndTime_max = findOffsetByName(j, "C_OP_OscillateScalar", "m_flEndTime_max");
C_OP_OscillateScalar.m_flOscMult = findOffsetByName(j, "C_OP_OscillateScalar", "m_flOscMult");
C_OP_OscillateScalar.m_flOscAdd = findOffsetByName(j, "C_OP_OscillateScalar", "m_flOscAdd");

// Atribuições para C_OP_FadeOut
// C_OP_FadeOut Offsets
C_OP_FadeOut.m_flFadeOutTimeMin = findOffsetByName(j, "C_OP_FadeOut", "m_flFadeOutTimeMin");
C_OP_FadeOut.m_flFadeOutTimeMax = findOffsetByName(j, "C_OP_FadeOut", "m_flFadeOutTimeMax");
C_OP_FadeOut.m_flFadeOutTimeExp = findOffsetByName(j, "C_OP_FadeOut", "m_flFadeOutTimeExp");
C_OP_FadeOut.m_flFadeBias = findOffsetByName(j, "C_OP_FadeOut", "m_flFadeBias");
C_OP_FadeOut.m_bProportional = findOffsetByName(j, "C_OP_FadeOut", "m_bProportional");
C_OP_FadeOut.m_bEaseInAndOut = findOffsetByName(j, "C_OP_FadeOut", "m_bEaseInAndOut");

// Atribuições para C_INIT_RandomSequence
// C_INIT_RandomSequence Offsets
C_INIT_RandomSequence.m_nSequenceMin = findOffsetByName(j, "C_INIT_RandomSequence", "m_nSequenceMin");
C_INIT_RandomSequence.m_nSequenceMax = findOffsetByName(j, "C_INIT_RandomSequence", "m_nSequenceMax");
C_INIT_RandomSequence.m_bShuffle = findOffsetByName(j, "C_INIT_RandomSequence", "m_bShuffle");
C_INIT_RandomSequence.m_bLinear = findOffsetByName(j, "C_INIT_RandomSequence", "m_bLinear");
C_INIT_RandomSequence.m_WeightedList = findOffsetByName(j, "C_INIT_RandomSequence", "m_WeightedList");

// Atribuições para C_OP_RampScalarSplineSimple
// C_OP_RampScalarSplineSimple Offsets
C_OP_RampScalarSplineSimple.m_Rate = findOffsetByName(j, "C_OP_RampScalarSplineSimple", "m_Rate");
C_OP_RampScalarSplineSimple.m_flStartTime = findOffsetByName(j, "C_OP_RampScalarSplineSimple", "m_flStartTime");
C_OP_RampScalarSplineSimple.m_flEndTime = findOffsetByName(j, "C_OP_RampScalarSplineSimple", "m_flEndTime");
C_OP_RampScalarSplineSimple.m_nField = findOffsetByName(j, "C_OP_RampScalarSplineSimple", "m_nField");
C_OP_RampScalarSplineSimple.m_bEaseOut = findOffsetByName(j, "C_OP_RampScalarSplineSimple", "m_bEaseOut");

// Atribuições para C_INIT_DistanceCull
// C_INIT_DistanceCull Offsets
C_INIT_DistanceCull.m_nControlPoint = findOffsetByName(j, "C_INIT_DistanceCull", "m_nControlPoint");
C_INIT_DistanceCull.m_flDistance = findOffsetByName(j, "C_INIT_DistanceCull", "m_flDistance");
C_INIT_DistanceCull.m_bCullInside = findOffsetByName(j, "C_INIT_DistanceCull", "m_bCullInside");

// Atribuições para C_OP_CollideWithParentParticles
// C_OP_CollideWithParentParticles Offsets
C_OP_CollideWithParentParticles.m_flParentRadiusScale = findOffsetByName(j, "C_OP_CollideWithParentParticles", "m_flParentRadiusScale");
C_OP_CollideWithParentParticles.m_flRadiusScale = findOffsetByName(j, "C_OP_CollideWithParentParticles", "m_flRadiusScale");

// Atribuições para C_INIT_InitFromVectorFieldSnapshot
// C_INIT_InitFromVectorFieldSnapshot Offsets
C_INIT_InitFromVectorFieldSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitFromVectorFieldSnapshot", "m_nControlPointNumber");
C_INIT_InitFromVectorFieldSnapshot.m_nLocalSpaceCP = findOffsetByName(j, "C_INIT_InitFromVectorFieldSnapshot", "m_nLocalSpaceCP");
C_INIT_InitFromVectorFieldSnapshot.m_nWeightUpdateCP = findOffsetByName(j, "C_INIT_InitFromVectorFieldSnapshot", "m_nWeightUpdateCP");
C_INIT_InitFromVectorFieldSnapshot.m_bUseVerticalVelocity = findOffsetByName(j, "C_INIT_InitFromVectorFieldSnapshot", "m_bUseVerticalVelocity");
C_INIT_InitFromVectorFieldSnapshot.m_vecScale = findOffsetByName(j, "C_INIT_InitFromVectorFieldSnapshot", "m_vecScale");

// Atribuições para C_OP_SetVectorAttributeToVectorExpression
// C_OP_SetVectorAttributeToVectorExpression Offsets
C_OP_SetVectorAttributeToVectorExpression.m_nExpression = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_nExpression");
C_OP_SetVectorAttributeToVectorExpression.m_vInput1 = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_vInput1");
C_OP_SetVectorAttributeToVectorExpression.m_vInput2 = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_vInput2");
C_OP_SetVectorAttributeToVectorExpression.m_nOutputField = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_nOutputField");
C_OP_SetVectorAttributeToVectorExpression.m_nSetMethod = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_nSetMethod");
C_OP_SetVectorAttributeToVectorExpression.m_bNormalizedOutput = findOffsetByName(j, "C_OP_SetVectorAttributeToVectorExpression", "m_bNormalizedOutput");

// Atribuições para C_INIT_AddVectorToVector
// C_INIT_AddVectorToVector Offsets
C_INIT_AddVectorToVector.m_vecScale = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_vecScale");
C_INIT_AddVectorToVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_nFieldOutput");
C_INIT_AddVectorToVector.m_nFieldInput = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_nFieldInput");
C_INIT_AddVectorToVector.m_vOffsetMin = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_vOffsetMin");
C_INIT_AddVectorToVector.m_vOffsetMax = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_vOffsetMax");
C_INIT_AddVectorToVector.m_randomnessParameters = findOffsetByName(j, "C_INIT_AddVectorToVector", "m_randomnessParameters");

// Atribuições para C_INIT_RemapInitialVisibilityScalar
// C_INIT_RemapInitialVisibilityScalar Offsets
C_INIT_RemapInitialVisibilityScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapInitialVisibilityScalar", "m_nFieldOutput");
C_INIT_RemapInitialVisibilityScalar.m_flInputMin = findOffsetByName(j, "C_INIT_RemapInitialVisibilityScalar", "m_flInputMin");
C_INIT_RemapInitialVisibilityScalar.m_flInputMax = findOffsetByName(j, "C_INIT_RemapInitialVisibilityScalar", "m_flInputMax");
C_INIT_RemapInitialVisibilityScalar.m_flOutputMin = findOffsetByName(j, "C_INIT_RemapInitialVisibilityScalar", "m_flOutputMin");
C_INIT_RemapInitialVisibilityScalar.m_flOutputMax = findOffsetByName(j, "C_INIT_RemapInitialVisibilityScalar", "m_flOutputMax");

// Atribuições para C_OP_RemapTransformOrientationToYaw
// C_OP_RemapTransformOrientationToYaw Offsets
C_OP_RemapTransformOrientationToYaw.m_TransformInput = findOffsetByName(j, "C_OP_RemapTransformOrientationToYaw", "m_TransformInput");
C_OP_RemapTransformOrientationToYaw.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapTransformOrientationToYaw", "m_nFieldOutput");
C_OP_RemapTransformOrientationToYaw.m_flRotOffset = findOffsetByName(j, "C_OP_RemapTransformOrientationToYaw", "m_flRotOffset");
C_OP_RemapTransformOrientationToYaw.m_flSpinStrength = findOffsetByName(j, "C_OP_RemapTransformOrientationToYaw", "m_flSpinStrength");

// Atribuições para C_OP_RenderStatusEffect
// C_OP_RenderStatusEffect Offsets
C_OP_RenderStatusEffect.m_pTextureColorWarp = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureColorWarp");
C_OP_RenderStatusEffect.m_pTextureDetail2 = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureDetail2");
C_OP_RenderStatusEffect.m_pTextureDiffuseWarp = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureDiffuseWarp");
C_OP_RenderStatusEffect.m_pTextureFresnelColorWarp = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureFresnelColorWarp");
C_OP_RenderStatusEffect.m_pTextureFresnelWarp = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureFresnelWarp");
C_OP_RenderStatusEffect.m_pTextureSpecularWarp = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureSpecularWarp");
C_OP_RenderStatusEffect.m_pTextureEnvMap = findOffsetByName(j, "C_OP_RenderStatusEffect", "m_pTextureEnvMap");

// Atribuições para C_OP_RandomForce
// C_OP_RandomForce Offsets
C_OP_RandomForce.m_MinForce = findOffsetByName(j, "C_OP_RandomForce", "m_MinForce");
C_OP_RandomForce.m_MaxForce = findOffsetByName(j, "C_OP_RandomForce", "m_MaxForce");

// Atribuições para C_OP_RemapParticleCountOnScalarEndCap
// C_OP_RemapParticleCountOnScalarEndCap Offsets
C_OP_RemapParticleCountOnScalarEndCap.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_nFieldOutput");
C_OP_RemapParticleCountOnScalarEndCap.m_nInputMin = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_nInputMin");
C_OP_RemapParticleCountOnScalarEndCap.m_nInputMax = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_nInputMax");
C_OP_RemapParticleCountOnScalarEndCap.m_flOutputMin = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_flOutputMin");
C_OP_RemapParticleCountOnScalarEndCap.m_flOutputMax = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_flOutputMax");
C_OP_RemapParticleCountOnScalarEndCap.m_bBackwards = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_bBackwards");
C_OP_RemapParticleCountOnScalarEndCap.m_nSetMethod = findOffsetByName(j, "C_OP_RemapParticleCountOnScalarEndCap", "m_nSetMethod");

// Atribuições para ParticlePreviewState_t
// ParticlePreviewState_t Offsets
ParticlePreviewState_t.m_previewModel = findOffsetByName(j, "ParticlePreviewState_t", "m_previewModel");
ParticlePreviewState_t.m_nModSpecificData = findOffsetByName(j, "ParticlePreviewState_t", "m_nModSpecificData");
ParticlePreviewState_t.m_groundType = findOffsetByName(j, "ParticlePreviewState_t", "m_groundType");
ParticlePreviewState_t.m_sequenceName = findOffsetByName(j, "ParticlePreviewState_t", "m_sequenceName");
ParticlePreviewState_t.m_nFireParticleOnSequenceFrame = findOffsetByName(j, "ParticlePreviewState_t", "m_nFireParticleOnSequenceFrame");
ParticlePreviewState_t.m_hitboxSetName = findOffsetByName(j, "ParticlePreviewState_t", "m_hitboxSetName");
ParticlePreviewState_t.m_materialGroupName = findOffsetByName(j, "ParticlePreviewState_t", "m_materialGroupName");
ParticlePreviewState_t.m_vecBodyGroups = findOffsetByName(j, "ParticlePreviewState_t", "m_vecBodyGroups");
ParticlePreviewState_t.m_flPlaybackSpeed = findOffsetByName(j, "ParticlePreviewState_t", "m_flPlaybackSpeed");
ParticlePreviewState_t.m_flParticleSimulationRate = findOffsetByName(j, "ParticlePreviewState_t", "m_flParticleSimulationRate");
ParticlePreviewState_t.m_bShouldDrawHitboxes = findOffsetByName(j, "ParticlePreviewState_t", "m_bShouldDrawHitboxes");
ParticlePreviewState_t.m_bShouldDrawAttachments = findOffsetByName(j, "ParticlePreviewState_t", "m_bShouldDrawAttachments");
ParticlePreviewState_t.m_bShouldDrawAttachmentNames = findOffsetByName(j, "ParticlePreviewState_t", "m_bShouldDrawAttachmentNames");
ParticlePreviewState_t.m_bShouldDrawControlPointAxes = findOffsetByName(j, "ParticlePreviewState_t", "m_bShouldDrawControlPointAxes");
ParticlePreviewState_t.m_bAnimationNonLooping = findOffsetByName(j, "ParticlePreviewState_t", "m_bAnimationNonLooping");
ParticlePreviewState_t.m_vecPreviewGravity = findOffsetByName(j, "ParticlePreviewState_t", "m_vecPreviewGravity");

// Atribuições para C_OP_LocalAccelerationForce
// C_OP_LocalAccelerationForce Offsets
C_OP_LocalAccelerationForce.m_nCP = findOffsetByName(j, "C_OP_LocalAccelerationForce", "m_nCP");
C_OP_LocalAccelerationForce.m_nScaleCP = findOffsetByName(j, "C_OP_LocalAccelerationForce", "m_nScaleCP");
C_OP_LocalAccelerationForce.m_vecAccel = findOffsetByName(j, "C_OP_LocalAccelerationForce", "m_vecAccel");

// Atribuições para C_OP_ModelCull
// C_OP_ModelCull Offsets
C_OP_ModelCull.m_nControlPointNumber = findOffsetByName(j, "C_OP_ModelCull", "m_nControlPointNumber");
C_OP_ModelCull.m_bBoundBox = findOffsetByName(j, "C_OP_ModelCull", "m_bBoundBox");
C_OP_ModelCull.m_bCullOutside = findOffsetByName(j, "C_OP_ModelCull", "m_bCullOutside");
C_OP_ModelCull.m_bUseBones = findOffsetByName(j, "C_OP_ModelCull", "m_bUseBones");
C_OP_ModelCull.m_HitboxSetName = findOffsetByName(j, "C_OP_ModelCull", "m_HitboxSetName");

// Atribuições para C_OP_SetFloat
// C_OP_SetFloat Offsets
C_OP_SetFloat.m_InputValue = findOffsetByName(j, "C_OP_SetFloat", "m_InputValue");
C_OP_SetFloat.m_nOutputField = findOffsetByName(j, "C_OP_SetFloat", "m_nOutputField");
C_OP_SetFloat.m_nSetMethod = findOffsetByName(j, "C_OP_SetFloat", "m_nSetMethod");
C_OP_SetFloat.m_Lerp = findOffsetByName(j, "C_OP_SetFloat", "m_Lerp");

// Atribuições para C_INIT_RemapTransformToVector
// C_INIT_RemapTransformToVector Offsets
C_INIT_RemapTransformToVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_nFieldOutput");
C_INIT_RemapTransformToVector.m_vInputMin = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_vInputMin");
C_INIT_RemapTransformToVector.m_vInputMax = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_vInputMax");
C_INIT_RemapTransformToVector.m_vOutputMin = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_vOutputMin");
C_INIT_RemapTransformToVector.m_vOutputMax = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_vOutputMax");
C_INIT_RemapTransformToVector.m_TransformInput = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_TransformInput");
C_INIT_RemapTransformToVector.m_LocalSpaceTransform = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_LocalSpaceTransform");
C_INIT_RemapTransformToVector.m_flStartTime = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_flStartTime");
C_INIT_RemapTransformToVector.m_flEndTime = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_flEndTime");
C_INIT_RemapTransformToVector.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_nSetMethod");
C_INIT_RemapTransformToVector.m_bOffset = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_bOffset");
C_INIT_RemapTransformToVector.m_bAccelerate = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_bAccelerate");
C_INIT_RemapTransformToVector.m_flRemapBias = findOffsetByName(j, "C_INIT_RemapTransformToVector", "m_flRemapBias");

// Atribuições para C_OP_SDFLighting
// C_OP_SDFLighting Offsets
C_OP_SDFLighting.m_vLightingDir = findOffsetByName(j, "C_OP_SDFLighting", "m_vLightingDir");
C_OP_SDFLighting.m_vTint_0 = findOffsetByName(j, "C_OP_SDFLighting", "m_vTint_0");
C_OP_SDFLighting.m_vTint_1 = findOffsetByName(j, "C_OP_SDFLighting", "m_vTint_1");

// Atribuições para C_OP_RemapDistanceToLineSegmentToScalar
// C_OP_RemapDistanceToLineSegmentToScalar Offsets
C_OP_RemapDistanceToLineSegmentToScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToScalar", "m_nFieldOutput");
C_OP_RemapDistanceToLineSegmentToScalar.m_flMinOutputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToScalar", "m_flMinOutputValue");
C_OP_RemapDistanceToLineSegmentToScalar.m_flMaxOutputValue = findOffsetByName(j, "C_OP_RemapDistanceToLineSegmentToScalar", "m_flMaxOutputValue");

// Atribuições para C_OP_RemapVectortoCP
// C_OP_RemapVectortoCP Offsets
C_OP_RemapVectortoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapVectortoCP", "m_nOutControlPointNumber");
C_OP_RemapVectortoCP.m_nFieldInput = findOffsetByName(j, "C_OP_RemapVectortoCP", "m_nFieldInput");
C_OP_RemapVectortoCP.m_nParticleNumber = findOffsetByName(j, "C_OP_RemapVectortoCP", "m_nParticleNumber");

// Atribuições para C_OP_SetFromCPSnapshot
// C_OP_SetFromCPSnapshot Offsets
C_OP_SetFromCPSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nControlPointNumber");
C_OP_SetFromCPSnapshot.m_nAttributeToRead = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nAttributeToRead");
C_OP_SetFromCPSnapshot.m_nAttributeToWrite = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nAttributeToWrite");
C_OP_SetFromCPSnapshot.m_nLocalSpaceCP = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nLocalSpaceCP");
C_OP_SetFromCPSnapshot.m_bRandom = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_bRandom");
C_OP_SetFromCPSnapshot.m_bReverse = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_bReverse");
C_OP_SetFromCPSnapshot.m_nRandomSeed = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nRandomSeed");
C_OP_SetFromCPSnapshot.m_nSnapShotStartPoint = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nSnapShotStartPoint");
C_OP_SetFromCPSnapshot.m_nSnapShotIncrement = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_nSnapShotIncrement");
C_OP_SetFromCPSnapshot.m_flInterpolation = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_flInterpolation");
C_OP_SetFromCPSnapshot.m_bSubSample = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_bSubSample");
C_OP_SetFromCPSnapshot.m_bPrev = findOffsetByName(j, "C_OP_SetFromCPSnapshot", "m_bPrev");

// Atribuições para C_OP_DistanceBetweenCPsToCP
// C_OP_DistanceBetweenCPsToCP Offsets
C_OP_DistanceBetweenCPsToCP.m_nStartCP = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nStartCP");
C_OP_DistanceBetweenCPsToCP.m_nEndCP = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nEndCP");
C_OP_DistanceBetweenCPsToCP.m_nOutputCP = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nOutputCP");
C_OP_DistanceBetweenCPsToCP.m_nOutputCPField = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nOutputCPField");
C_OP_DistanceBetweenCPsToCP.m_bSetOnce = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_bSetOnce");
C_OP_DistanceBetweenCPsToCP.m_flInputMin = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flInputMin");
C_OP_DistanceBetweenCPsToCP.m_flInputMax = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flInputMax");
C_OP_DistanceBetweenCPsToCP.m_flOutputMin = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flOutputMin");
C_OP_DistanceBetweenCPsToCP.m_flOutputMax = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flOutputMax");
C_OP_DistanceBetweenCPsToCP.m_flMaxTraceLength = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flMaxTraceLength");
C_OP_DistanceBetweenCPsToCP.m_flLOSScale = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_flLOSScale");
C_OP_DistanceBetweenCPsToCP.m_bLOS = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_bLOS");
C_OP_DistanceBetweenCPsToCP.m_CollisionGroupName = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_CollisionGroupName");
C_OP_DistanceBetweenCPsToCP.m_nTraceSet = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nTraceSet");
C_OP_DistanceBetweenCPsToCP.m_nSetParent = findOffsetByName(j, "C_OP_DistanceBetweenCPsToCP", "m_nSetParent");

// Atribuições para C_OP_SetControlPointToHand
// C_OP_SetControlPointToHand Offsets
C_OP_SetControlPointToHand.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointToHand", "m_nCP1");
C_OP_SetControlPointToHand.m_nHand = findOffsetByName(j, "C_OP_SetControlPointToHand", "m_nHand");
C_OP_SetControlPointToHand.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetControlPointToHand", "m_vecCP1Pos");
C_OP_SetControlPointToHand.m_bOrientToHand = findOffsetByName(j, "C_OP_SetControlPointToHand", "m_bOrientToHand");

// Atribuições para C_OP_ConstrainDistanceToPath
// C_OP_ConstrainDistanceToPath Offsets
C_OP_ConstrainDistanceToPath.m_fMinDistance = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_fMinDistance");
C_OP_ConstrainDistanceToPath.m_flMaxDistance0 = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_flMaxDistance0");
C_OP_ConstrainDistanceToPath.m_flMaxDistanceMid = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_flMaxDistanceMid");
C_OP_ConstrainDistanceToPath.m_flMaxDistance1 = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_flMaxDistance1");
C_OP_ConstrainDistanceToPath.m_PathParameters = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_PathParameters");
C_OP_ConstrainDistanceToPath.m_flTravelTime = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_flTravelTime");
C_OP_ConstrainDistanceToPath.m_nFieldScale = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_nFieldScale");
C_OP_ConstrainDistanceToPath.m_nManualTField = findOffsetByName(j, "C_OP_ConstrainDistanceToPath", "m_nManualTField");

// Atribuições para C_OP_DistanceCull
// C_OP_DistanceCull Offsets
C_OP_DistanceCull.m_nControlPoint = findOffsetByName(j, "C_OP_DistanceCull", "m_nControlPoint");
C_OP_DistanceCull.m_vecPointOffset = findOffsetByName(j, "C_OP_DistanceCull", "m_vecPointOffset");
C_OP_DistanceCull.m_flDistance = findOffsetByName(j, "C_OP_DistanceCull", "m_flDistance");
C_OP_DistanceCull.m_bCullInside = findOffsetByName(j, "C_OP_DistanceCull", "m_bCullInside");

// Atribuições para C_OP_RemapSDFDistanceToScalarAttribute
// C_OP_RemapSDFDistanceToScalarAttribute Offsets
C_OP_RemapSDFDistanceToScalarAttribute.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_nFieldOutput");
C_OP_RemapSDFDistanceToScalarAttribute.m_nVectorFieldInput = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_nVectorFieldInput");
C_OP_RemapSDFDistanceToScalarAttribute.m_flMinDistance = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flMinDistance");
C_OP_RemapSDFDistanceToScalarAttribute.m_flMaxDistance = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flMaxDistance");
C_OP_RemapSDFDistanceToScalarAttribute.m_flValueBelowMin = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flValueBelowMin");
C_OP_RemapSDFDistanceToScalarAttribute.m_flValueAtMin = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flValueAtMin");
C_OP_RemapSDFDistanceToScalarAttribute.m_flValueAtMax = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flValueAtMax");
C_OP_RemapSDFDistanceToScalarAttribute.m_flValueAboveMax = findOffsetByName(j, "C_OP_RemapSDFDistanceToScalarAttribute", "m_flValueAboveMax");

// Atribuições para C_INIT_CreateAlongPath
// C_INIT_CreateAlongPath Offsets
C_INIT_CreateAlongPath.m_fMaxDistance = findOffsetByName(j, "C_INIT_CreateAlongPath", "m_fMaxDistance");
C_INIT_CreateAlongPath.m_PathParams = findOffsetByName(j, "C_INIT_CreateAlongPath", "m_PathParams");
C_INIT_CreateAlongPath.m_bUseRandomCPs = findOffsetByName(j, "C_INIT_CreateAlongPath", "m_bUseRandomCPs");
C_INIT_CreateAlongPath.m_vEndOffset = findOffsetByName(j, "C_INIT_CreateAlongPath", "m_vEndOffset");
C_INIT_CreateAlongPath.m_bSaveOffset = findOffsetByName(j, "C_INIT_CreateAlongPath", "m_bSaveOffset");

// Atribuições para C_OP_SetControlPointsToModelParticles
// C_OP_SetControlPointsToModelParticles Offsets
C_OP_SetControlPointsToModelParticles.m_HitboxSetName = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_HitboxSetName");
C_OP_SetControlPointsToModelParticles.m_AttachmentName = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_AttachmentName");
C_OP_SetControlPointsToModelParticles.m_nFirstControlPoint = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_nFirstControlPoint");
C_OP_SetControlPointsToModelParticles.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_nNumControlPoints");
C_OP_SetControlPointsToModelParticles.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_nFirstSourcePoint");
C_OP_SetControlPointsToModelParticles.m_bSkin = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_bSkin");
C_OP_SetControlPointsToModelParticles.m_bAttachment = findOffsetByName(j, "C_OP_SetControlPointsToModelParticles", "m_bAttachment");

// Atribuições para C_OP_ColorInterpolateRandom
// C_OP_ColorInterpolateRandom Offsets
C_OP_ColorInterpolateRandom.m_ColorFadeMin = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_ColorFadeMin");
C_OP_ColorInterpolateRandom.m_ColorFadeMax = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_ColorFadeMax");
C_OP_ColorInterpolateRandom.m_flFadeStartTime = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_flFadeStartTime");
C_OP_ColorInterpolateRandom.m_flFadeEndTime = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_flFadeEndTime");
C_OP_ColorInterpolateRandom.m_nFieldOutput = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_nFieldOutput");
C_OP_ColorInterpolateRandom.m_bEaseInOut = findOffsetByName(j, "C_OP_ColorInterpolateRandom", "m_bEaseInOut");

// Atribuições para C_OP_RenderLights
// C_OP_RenderLights Offsets
C_OP_RenderLights.m_flAnimationRate = findOffsetByName(j, "C_OP_RenderLights", "m_flAnimationRate");
C_OP_RenderLights.m_nAnimationType = findOffsetByName(j, "C_OP_RenderLights", "m_nAnimationType");
C_OP_RenderLights.m_bAnimateInFPS = findOffsetByName(j, "C_OP_RenderLights", "m_bAnimateInFPS");
C_OP_RenderLights.m_flMinSize = findOffsetByName(j, "C_OP_RenderLights", "m_flMinSize");
C_OP_RenderLights.m_flMaxSize = findOffsetByName(j, "C_OP_RenderLights", "m_flMaxSize");
C_OP_RenderLights.m_flStartFadeSize = findOffsetByName(j, "C_OP_RenderLights", "m_flStartFadeSize");
C_OP_RenderLights.m_flEndFadeSize = findOffsetByName(j, "C_OP_RenderLights", "m_flEndFadeSize");

// Atribuições para C_OP_DecayClampCount
// C_OP_DecayClampCount Offsets
C_OP_DecayClampCount.m_nCount = findOffsetByName(j, "C_OP_DecayClampCount", "m_nCount");

// Atribuições para CRandomNumberGeneratorParameters
// CRandomNumberGeneratorParameters Offsets
CRandomNumberGeneratorParameters.m_bDistributeEvenly = findOffsetByName(j, "CRandomNumberGeneratorParameters", "m_bDistributeEvenly");
CRandomNumberGeneratorParameters.m_nSeed = findOffsetByName(j, "CRandomNumberGeneratorParameters", "m_nSeed");

// Atribuições para C_INIT_ColorLitPerParticle
// C_INIT_ColorLitPerParticle Offsets
C_INIT_ColorLitPerParticle.m_ColorMin = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_ColorMin");
C_INIT_ColorLitPerParticle.m_ColorMax = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_ColorMax");
C_INIT_ColorLitPerParticle.m_TintMin = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_TintMin");
C_INIT_ColorLitPerParticle.m_TintMax = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_TintMax");
C_INIT_ColorLitPerParticle.m_flTintPerc = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_flTintPerc");
C_INIT_ColorLitPerParticle.m_nTintBlendMode = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_nTintBlendMode");
C_INIT_ColorLitPerParticle.m_flLightAmplification = findOffsetByName(j, "C_INIT_ColorLitPerParticle", "m_flLightAmplification");

// Atribuições para C_OP_RenderPoints
// C_OP_RenderPoints Offsets
C_OP_RenderPoints.m_hMaterial = findOffsetByName(j, "C_OP_RenderPoints", "m_hMaterial");

// Atribuições para C_INIT_SetAttributeToScalarExpression
// C_INIT_SetAttributeToScalarExpression Offsets
C_INIT_SetAttributeToScalarExpression.m_nExpression = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_nExpression");
C_INIT_SetAttributeToScalarExpression.m_flInput1 = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_flInput1");
C_INIT_SetAttributeToScalarExpression.m_flInput2 = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_flInput2");
C_INIT_SetAttributeToScalarExpression.m_flOutputRemap = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_flOutputRemap");
C_INIT_SetAttributeToScalarExpression.m_nOutputField = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_nOutputField");
C_INIT_SetAttributeToScalarExpression.m_nSetMethod = findOffsetByName(j, "C_INIT_SetAttributeToScalarExpression", "m_nSetMethod");

// Atribuições para C_INIT_CreateOnGrid
// C_INIT_CreateOnGrid Offsets
C_INIT_CreateOnGrid.m_nXCount = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nXCount");
C_INIT_CreateOnGrid.m_nYCount = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nYCount");
C_INIT_CreateOnGrid.m_nZCount = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nZCount");
C_INIT_CreateOnGrid.m_nXSpacing = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nXSpacing");
C_INIT_CreateOnGrid.m_nYSpacing = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nYSpacing");
C_INIT_CreateOnGrid.m_nZSpacing = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nZSpacing");
C_INIT_CreateOnGrid.m_nControlPointNumber = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_nControlPointNumber");
C_INIT_CreateOnGrid.m_bLocalSpace = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_bLocalSpace");
C_INIT_CreateOnGrid.m_bCenter = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_bCenter");
C_INIT_CreateOnGrid.m_bHollow = findOffsetByName(j, "C_INIT_CreateOnGrid", "m_bHollow");

// Atribuições para C_OP_RampCPLinearRandom
// C_OP_RampCPLinearRandom Offsets
C_OP_RampCPLinearRandom.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RampCPLinearRandom", "m_nOutControlPointNumber");
C_OP_RampCPLinearRandom.m_vecRateMin = findOffsetByName(j, "C_OP_RampCPLinearRandom", "m_vecRateMin");
C_OP_RampCPLinearRandom.m_vecRateMax = findOffsetByName(j, "C_OP_RampCPLinearRandom", "m_vecRateMax");

// Atribuições para C_OP_VelocityMatchingForce
// C_OP_VelocityMatchingForce Offsets
C_OP_VelocityMatchingForce.m_flDirScale = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_flDirScale");
C_OP_VelocityMatchingForce.m_flSpdScale = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_flSpdScale");
C_OP_VelocityMatchingForce.m_flNeighborDistance = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_flNeighborDistance");
C_OP_VelocityMatchingForce.m_flFacingStrength = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_flFacingStrength");
C_OP_VelocityMatchingForce.m_bUseAABB = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_bUseAABB");
C_OP_VelocityMatchingForce.m_nCPBroadcast = findOffsetByName(j, "C_OP_VelocityMatchingForce", "m_nCPBroadcast");

// Atribuições para C_INIT_RandomAlphaWindowThreshold
// C_INIT_RandomAlphaWindowThreshold Offsets
C_INIT_RandomAlphaWindowThreshold.m_flMin = findOffsetByName(j, "C_INIT_RandomAlphaWindowThreshold", "m_flMin");
C_INIT_RandomAlphaWindowThreshold.m_flMax = findOffsetByName(j, "C_INIT_RandomAlphaWindowThreshold", "m_flMax");
C_INIT_RandomAlphaWindowThreshold.m_flExponent = findOffsetByName(j, "C_INIT_RandomAlphaWindowThreshold", "m_flExponent");

// Atribuições para C_INIT_CreateOnModelAtHeight
// C_INIT_CreateOnModelAtHeight Offsets
C_INIT_CreateOnModelAtHeight.m_bUseBones = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_bUseBones");
C_INIT_CreateOnModelAtHeight.m_bForceZ = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_bForceZ");
C_INIT_CreateOnModelAtHeight.m_nControlPointNumber = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_nControlPointNumber");
C_INIT_CreateOnModelAtHeight.m_nHeightCP = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_nHeightCP");
C_INIT_CreateOnModelAtHeight.m_bUseWaterHeight = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_bUseWaterHeight");
C_INIT_CreateOnModelAtHeight.m_flDesiredHeight = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_flDesiredHeight");
C_INIT_CreateOnModelAtHeight.m_vecHitBoxScale = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_vecHitBoxScale");
C_INIT_CreateOnModelAtHeight.m_vecDirectionBias = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_vecDirectionBias");
C_INIT_CreateOnModelAtHeight.m_nBiasType = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_nBiasType");
C_INIT_CreateOnModelAtHeight.m_bLocalCoords = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_bLocalCoords");
C_INIT_CreateOnModelAtHeight.m_bPreferMovingBoxes = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_bPreferMovingBoxes");
C_INIT_CreateOnModelAtHeight.m_HitboxSetName = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_HitboxSetName");
C_INIT_CreateOnModelAtHeight.m_flHitboxVelocityScale = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_flHitboxVelocityScale");
C_INIT_CreateOnModelAtHeight.m_flMaxBoneVelocity = findOffsetByName(j, "C_INIT_CreateOnModelAtHeight", "m_flMaxBoneVelocity");

// Atribuições para CParticleVariableRef
// CParticleVariableRef Offsets
CParticleVariableRef.m_variableName = findOffsetByName(j, "CParticleVariableRef", "m_variableName");
CParticleVariableRef.m_variableType = findOffsetByName(j, "CParticleVariableRef", "m_variableType");

// Atribuições para C_OP_RestartAfterDuration
// C_OP_RestartAfterDuration Offsets
C_OP_RestartAfterDuration.m_flDurationMin = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_flDurationMin");
C_OP_RestartAfterDuration.m_flDurationMax = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_flDurationMax");
C_OP_RestartAfterDuration.m_nCP = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_nCP");
C_OP_RestartAfterDuration.m_nCPField = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_nCPField");
C_OP_RestartAfterDuration.m_nChildGroupID = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_nChildGroupID");
C_OP_RestartAfterDuration.m_bOnlyChildren = findOffsetByName(j, "C_OP_RestartAfterDuration", "m_bOnlyChildren");

// Atribuições para C_OP_RemapVisibilityScalar
// C_OP_RemapVisibilityScalar Offsets
C_OP_RemapVisibilityScalar.m_nFieldInput = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_nFieldInput");
C_OP_RemapVisibilityScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_nFieldOutput");
C_OP_RemapVisibilityScalar.m_flInputMin = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_flInputMin");
C_OP_RemapVisibilityScalar.m_flInputMax = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_flInputMax");
C_OP_RemapVisibilityScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_flOutputMin");
C_OP_RemapVisibilityScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_flOutputMax");
C_OP_RemapVisibilityScalar.m_flRadiusScale = findOffsetByName(j, "C_OP_RemapVisibilityScalar", "m_flRadiusScale");

// Atribuições para C_INIT_CreateSequentialPathV2
// C_INIT_CreateSequentialPathV2 Offsets
C_INIT_CreateSequentialPathV2.m_fMaxDistance = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_fMaxDistance");
C_INIT_CreateSequentialPathV2.m_flNumToAssign = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_flNumToAssign");
C_INIT_CreateSequentialPathV2.m_bLoop = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_bLoop");
C_INIT_CreateSequentialPathV2.m_bCPPairs = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_bCPPairs");
C_INIT_CreateSequentialPathV2.m_bSaveOffset = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_bSaveOffset");
C_INIT_CreateSequentialPathV2.m_PathParams = findOffsetByName(j, "C_INIT_CreateSequentialPathV2", "m_PathParams");

// Atribuições para VecInputMaterialVariable_t
// VecInputMaterialVariable_t Offsets
VecInputMaterialVariable_t.m_strVariable = findOffsetByName(j, "VecInputMaterialVariable_t", "m_strVariable");
VecInputMaterialVariable_t.m_vecInput = findOffsetByName(j, "VecInputMaterialVariable_t", "m_vecInput");

// Atribuições para C_INIT_RemapInitialDirectionToTransformToVector
// C_INIT_RemapInitialDirectionToTransformToVector Offsets
C_INIT_RemapInitialDirectionToTransformToVector.m_TransformInput = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_TransformInput");
C_INIT_RemapInitialDirectionToTransformToVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_nFieldOutput");
C_INIT_RemapInitialDirectionToTransformToVector.m_flScale = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_flScale");
C_INIT_RemapInitialDirectionToTransformToVector.m_flOffsetRot = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_flOffsetRot");
C_INIT_RemapInitialDirectionToTransformToVector.m_vecOffsetAxis = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_vecOffsetAxis");
C_INIT_RemapInitialDirectionToTransformToVector.m_bNormalize = findOffsetByName(j, "C_INIT_RemapInitialDirectionToTransformToVector", "m_bNormalize");

// Atribuições para C_OP_LockToSavedSequentialPathV2
// C_OP_LockToSavedSequentialPathV2 Offsets
C_OP_LockToSavedSequentialPathV2.m_flFadeStart = findOffsetByName(j, "C_OP_LockToSavedSequentialPathV2", "m_flFadeStart");
C_OP_LockToSavedSequentialPathV2.m_flFadeEnd = findOffsetByName(j, "C_OP_LockToSavedSequentialPathV2", "m_flFadeEnd");
C_OP_LockToSavedSequentialPathV2.m_bCPPairs = findOffsetByName(j, "C_OP_LockToSavedSequentialPathV2", "m_bCPPairs");
C_OP_LockToSavedSequentialPathV2.m_PathParams = findOffsetByName(j, "C_OP_LockToSavedSequentialPathV2", "m_PathParams");

// Atribuições para C_OP_NormalLock
// C_OP_NormalLock Offsets
C_OP_NormalLock.m_nControlPointNumber = findOffsetByName(j, "C_OP_NormalLock", "m_nControlPointNumber");

// Atribuições para C_INIT_RemapTransformOrientationToRotations
// C_INIT_RemapTransformOrientationToRotations Offsets
C_INIT_RemapTransformOrientationToRotations.m_TransformInput = findOffsetByName(j, "C_INIT_RemapTransformOrientationToRotations", "m_TransformInput");
C_INIT_RemapTransformOrientationToRotations.m_vecRotation = findOffsetByName(j, "C_INIT_RemapTransformOrientationToRotations", "m_vecRotation");
C_INIT_RemapTransformOrientationToRotations.m_bUseQuat = findOffsetByName(j, "C_INIT_RemapTransformOrientationToRotations", "m_bUseQuat");
C_INIT_RemapTransformOrientationToRotations.m_bWriteNormal = findOffsetByName(j, "C_INIT_RemapTransformOrientationToRotations", "m_bWriteNormal");

// Atribuições para C_OP_Cull
// C_OP_Cull Offsets
C_OP_Cull.m_flCullPerc = findOffsetByName(j, "C_OP_Cull", "m_flCullPerc");
C_OP_Cull.m_flCullStart = findOffsetByName(j, "C_OP_Cull", "m_flCullStart");
C_OP_Cull.m_flCullEnd = findOffsetByName(j, "C_OP_Cull", "m_flCullEnd");
C_OP_Cull.m_flCullExp = findOffsetByName(j, "C_OP_Cull", "m_flCullExp");

// Atribuições para C_INIT_RandomYawFlip
// C_INIT_RandomYawFlip Offsets
C_INIT_RandomYawFlip.m_flPercent = findOffsetByName(j, "C_INIT_RandomYawFlip", "m_flPercent");

// Atribuições para C_OP_RemapSDFGradientToVectorAttribute
// C_OP_RemapSDFGradientToVectorAttribute Offsets
C_OP_RemapSDFGradientToVectorAttribute.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapSDFGradientToVectorAttribute", "m_nFieldOutput");

// Atribuições para SequenceWeightedList_t
// SequenceWeightedList_t Offsets
SequenceWeightedList_t.m_nSequence = findOffsetByName(j, "SequenceWeightedList_t", "m_nSequence");
SequenceWeightedList_t.m_flRelativeWeight = findOffsetByName(j, "SequenceWeightedList_t", "m_flRelativeWeight");

// Atribuições para C_OP_ReadFromNeighboringParticle
// C_OP_ReadFromNeighboringParticle Offsets
C_OP_ReadFromNeighboringParticle.m_nFieldInput = findOffsetByName(j, "C_OP_ReadFromNeighboringParticle", "m_nFieldInput");
C_OP_ReadFromNeighboringParticle.m_nFieldOutput = findOffsetByName(j, "C_OP_ReadFromNeighboringParticle", "m_nFieldOutput");
C_OP_ReadFromNeighboringParticle.m_nIncrement = findOffsetByName(j, "C_OP_ReadFromNeighboringParticle", "m_nIncrement");
C_OP_ReadFromNeighboringParticle.m_DistanceCheck = findOffsetByName(j, "C_OP_ReadFromNeighboringParticle", "m_DistanceCheck");
C_OP_ReadFromNeighboringParticle.m_flInterpolation = findOffsetByName(j, "C_OP_ReadFromNeighboringParticle", "m_flInterpolation");

// Atribuições para C_OP_RenderText
// C_OP_RenderText Offsets
C_OP_RenderText.m_OutlineColor = findOffsetByName(j, "C_OP_RenderText", "m_OutlineColor");
C_OP_RenderText.m_DefaultText = findOffsetByName(j, "C_OP_RenderText", "m_DefaultText");

// Atribuições para C_OP_LerpToInitialPosition
// C_OP_LerpToInitialPosition Offsets
C_OP_LerpToInitialPosition.m_nControlPointNumber = findOffsetByName(j, "C_OP_LerpToInitialPosition", "m_nControlPointNumber");
C_OP_LerpToInitialPosition.m_flInterpolation = findOffsetByName(j, "C_OP_LerpToInitialPosition", "m_flInterpolation");
C_OP_LerpToInitialPosition.m_nCacheField = findOffsetByName(j, "C_OP_LerpToInitialPosition", "m_nCacheField");
C_OP_LerpToInitialPosition.m_flScale = findOffsetByName(j, "C_OP_LerpToInitialPosition", "m_flScale");
C_OP_LerpToInitialPosition.m_vecScale = findOffsetByName(j, "C_OP_LerpToInitialPosition", "m_vecScale");

// Atribuições para C_OP_LerpEndCapVector
// C_OP_LerpEndCapVector Offsets
C_OP_LerpEndCapVector.m_nFieldOutput = findOffsetByName(j, "C_OP_LerpEndCapVector", "m_nFieldOutput");
C_OP_LerpEndCapVector.m_vecOutput = findOffsetByName(j, "C_OP_LerpEndCapVector", "m_vecOutput");
C_OP_LerpEndCapVector.m_flLerpTime = findOffsetByName(j, "C_OP_LerpEndCapVector", "m_flLerpTime");

// Atribuições para C_OP_VelocityDecay
// C_OP_VelocityDecay Offsets
C_OP_VelocityDecay.m_flMinVelocity = findOffsetByName(j, "C_OP_VelocityDecay", "m_flMinVelocity");

// Atribuições para C_OP_SetCPOrientationToPointAtCP
// C_OP_SetCPOrientationToPointAtCP Offsets
C_OP_SetCPOrientationToPointAtCP.m_nInputCP = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_nInputCP");
C_OP_SetCPOrientationToPointAtCP.m_nOutputCP = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_nOutputCP");
C_OP_SetCPOrientationToPointAtCP.m_flInterpolation = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_flInterpolation");
C_OP_SetCPOrientationToPointAtCP.m_b2DOrientation = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_b2DOrientation");
C_OP_SetCPOrientationToPointAtCP.m_bAvoidSingularity = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_bAvoidSingularity");
C_OP_SetCPOrientationToPointAtCP.m_bPointAway = findOffsetByName(j, "C_OP_SetCPOrientationToPointAtCP", "m_bPointAway");

// Atribuições para C_OP_LockToPointList
// C_OP_LockToPointList Offsets
C_OP_LockToPointList.m_nFieldOutput = findOffsetByName(j, "C_OP_LockToPointList", "m_nFieldOutput");
C_OP_LockToPointList.m_pointList = findOffsetByName(j, "C_OP_LockToPointList", "m_pointList");
C_OP_LockToPointList.m_bPlaceAlongPath = findOffsetByName(j, "C_OP_LockToPointList", "m_bPlaceAlongPath");
C_OP_LockToPointList.m_bClosedLoop = findOffsetByName(j, "C_OP_LockToPointList", "m_bClosedLoop");
C_OP_LockToPointList.m_nNumPointsAlongPath = findOffsetByName(j, "C_OP_LockToPointList", "m_nNumPointsAlongPath");

// Atribuições para C_OP_MovementPlaceOnGround
// C_OP_MovementPlaceOnGround Offsets
C_OP_MovementPlaceOnGround.m_flOffset = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_flOffset");
C_OP_MovementPlaceOnGround.m_flMaxTraceLength = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_flMaxTraceLength");
C_OP_MovementPlaceOnGround.m_flTolerance = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_flTolerance");
C_OP_MovementPlaceOnGround.m_flTraceOffset = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_flTraceOffset");
C_OP_MovementPlaceOnGround.m_flLerpRate = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_flLerpRate");
C_OP_MovementPlaceOnGround.m_CollisionGroupName = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_CollisionGroupName");
C_OP_MovementPlaceOnGround.m_nTraceSet = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nTraceSet");
C_OP_MovementPlaceOnGround.m_nRefCP1 = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nRefCP1");
C_OP_MovementPlaceOnGround.m_nRefCP2 = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nRefCP2");
C_OP_MovementPlaceOnGround.m_nLerpCP = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nLerpCP");
C_OP_MovementPlaceOnGround.m_nTraceMissBehavior = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nTraceMissBehavior");
C_OP_MovementPlaceOnGround.m_bIncludeShotHull = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_bIncludeShotHull");
C_OP_MovementPlaceOnGround.m_bIncludeWater = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_bIncludeWater");
C_OP_MovementPlaceOnGround.m_bSetNormal = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_bSetNormal");
C_OP_MovementPlaceOnGround.m_bScaleOffset = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_bScaleOffset");
C_OP_MovementPlaceOnGround.m_nPreserveOffsetCP = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nPreserveOffsetCP");
C_OP_MovementPlaceOnGround.m_nIgnoreCP = findOffsetByName(j, "C_OP_MovementPlaceOnGround", "m_nIgnoreCP");

// Atribuições para C_OP_SetCPOrientationToDirection
// C_OP_SetCPOrientationToDirection Offsets
C_OP_SetCPOrientationToDirection.m_nInputControlPoint = findOffsetByName(j, "C_OP_SetCPOrientationToDirection", "m_nInputControlPoint");
C_OP_SetCPOrientationToDirection.m_nOutputControlPoint = findOffsetByName(j, "C_OP_SetCPOrientationToDirection", "m_nOutputControlPoint");

// Atribuições para C_OP_RemapCrossProductOfTwoVectorsToVector
// C_OP_RemapCrossProductOfTwoVectorsToVector Offsets
C_OP_RemapCrossProductOfTwoVectorsToVector.m_InputVec1 = findOffsetByName(j, "C_OP_RemapCrossProductOfTwoVectorsToVector", "m_InputVec1");
C_OP_RemapCrossProductOfTwoVectorsToVector.m_InputVec2 = findOffsetByName(j, "C_OP_RemapCrossProductOfTwoVectorsToVector", "m_InputVec2");
C_OP_RemapCrossProductOfTwoVectorsToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapCrossProductOfTwoVectorsToVector", "m_nFieldOutput");
C_OP_RemapCrossProductOfTwoVectorsToVector.m_bNormalize = findOffsetByName(j, "C_OP_RemapCrossProductOfTwoVectorsToVector", "m_bNormalize");

// Atribuições para C_OP_RemapTransformOrientationToRotations
// C_OP_RemapTransformOrientationToRotations Offsets
C_OP_RemapTransformOrientationToRotations.m_TransformInput = findOffsetByName(j, "C_OP_RemapTransformOrientationToRotations", "m_TransformInput");
C_OP_RemapTransformOrientationToRotations.m_vecRotation = findOffsetByName(j, "C_OP_RemapTransformOrientationToRotations", "m_vecRotation");
C_OP_RemapTransformOrientationToRotations.m_bUseQuat = findOffsetByName(j, "C_OP_RemapTransformOrientationToRotations", "m_bUseQuat");
C_OP_RemapTransformOrientationToRotations.m_bWriteNormal = findOffsetByName(j, "C_OP_RemapTransformOrientationToRotations", "m_bWriteNormal");

// Atribuições para C_OP_InheritFromParentParticlesV2
// C_OP_InheritFromParentParticlesV2 Offsets
C_OP_InheritFromParentParticlesV2.m_flScale = findOffsetByName(j, "C_OP_InheritFromParentParticlesV2", "m_flScale");
C_OP_InheritFromParentParticlesV2.m_nFieldOutput = findOffsetByName(j, "C_OP_InheritFromParentParticlesV2", "m_nFieldOutput");
C_OP_InheritFromParentParticlesV2.m_nIncrement = findOffsetByName(j, "C_OP_InheritFromParentParticlesV2", "m_nIncrement");
C_OP_InheritFromParentParticlesV2.m_bRandomDistribution = findOffsetByName(j, "C_OP_InheritFromParentParticlesV2", "m_bRandomDistribution");
C_OP_InheritFromParentParticlesV2.m_nMissingParentBehavior = findOffsetByName(j, "C_OP_InheritFromParentParticlesV2", "m_nMissingParentBehavior");

// Atribuições para C_INIT_RandomSecondSequence
// C_INIT_RandomSecondSequence Offsets
C_INIT_RandomSecondSequence.m_nSequenceMin = findOffsetByName(j, "C_INIT_RandomSecondSequence", "m_nSequenceMin");
C_INIT_RandomSecondSequence.m_nSequenceMax = findOffsetByName(j, "C_INIT_RandomSecondSequence", "m_nSequenceMax");

// Atribuições para C_OP_SetFloatCollection
// C_OP_SetFloatCollection Offsets
C_OP_SetFloatCollection.m_InputValue = findOffsetByName(j, "C_OP_SetFloatCollection", "m_InputValue");
C_OP_SetFloatCollection.m_nOutputField = findOffsetByName(j, "C_OP_SetFloatCollection", "m_nOutputField");
C_OP_SetFloatCollection.m_nSetMethod = findOffsetByName(j, "C_OP_SetFloatCollection", "m_nSetMethod");
C_OP_SetFloatCollection.m_Lerp = findOffsetByName(j, "C_OP_SetFloatCollection", "m_Lerp");

// Atribuições para PointDefinition_t
// PointDefinition_t Offsets
PointDefinition_t.m_nControlPoint = findOffsetByName(j, "PointDefinition_t", "m_nControlPoint");
PointDefinition_t.m_bLocalCoords = findOffsetByName(j, "PointDefinition_t", "m_bLocalCoords");
PointDefinition_t.m_vOffset = findOffsetByName(j, "PointDefinition_t", "m_vOffset");

// Atribuições para C_OP_SetControlPointPositionToRandomActiveCP
// C_OP_SetControlPointPositionToRandomActiveCP Offsets
C_OP_SetControlPointPositionToRandomActiveCP.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointPositionToRandomActiveCP", "m_nCP1");
C_OP_SetControlPointPositionToRandomActiveCP.m_nHeadLocationMin = findOffsetByName(j, "C_OP_SetControlPointPositionToRandomActiveCP", "m_nHeadLocationMin");
C_OP_SetControlPointPositionToRandomActiveCP.m_nHeadLocationMax = findOffsetByName(j, "C_OP_SetControlPointPositionToRandomActiveCP", "m_nHeadLocationMax");
C_OP_SetControlPointPositionToRandomActiveCP.m_flResetRate = findOffsetByName(j, "C_OP_SetControlPointPositionToRandomActiveCP", "m_flResetRate");

// Atribuições para C_OP_Diffusion
// C_OP_Diffusion Offsets
C_OP_Diffusion.m_flRadiusScale = findOffsetByName(j, "C_OP_Diffusion", "m_flRadiusScale");
C_OP_Diffusion.m_nFieldOutput = findOffsetByName(j, "C_OP_Diffusion", "m_nFieldOutput");
C_OP_Diffusion.m_nVoxelGridResolution = findOffsetByName(j, "C_OP_Diffusion", "m_nVoxelGridResolution");

// Atribuições para C_INIT_AgeNoise
// C_INIT_AgeNoise Offsets
C_INIT_AgeNoise.m_bAbsVal = findOffsetByName(j, "C_INIT_AgeNoise", "m_bAbsVal");
C_INIT_AgeNoise.m_bAbsValInv = findOffsetByName(j, "C_INIT_AgeNoise", "m_bAbsValInv");
C_INIT_AgeNoise.m_flOffset = findOffsetByName(j, "C_INIT_AgeNoise", "m_flOffset");
C_INIT_AgeNoise.m_flAgeMin = findOffsetByName(j, "C_INIT_AgeNoise", "m_flAgeMin");
C_INIT_AgeNoise.m_flAgeMax = findOffsetByName(j, "C_INIT_AgeNoise", "m_flAgeMax");
C_INIT_AgeNoise.m_flNoiseScale = findOffsetByName(j, "C_INIT_AgeNoise", "m_flNoiseScale");
C_INIT_AgeNoise.m_flNoiseScaleLoc = findOffsetByName(j, "C_INIT_AgeNoise", "m_flNoiseScaleLoc");
C_INIT_AgeNoise.m_vecOffsetLoc = findOffsetByName(j, "C_INIT_AgeNoise", "m_vecOffsetLoc");

// Atribuições para C_OP_RemapVectorComponentToScalar
// C_OP_RemapVectorComponentToScalar Offsets
C_OP_RemapVectorComponentToScalar.m_nFieldInput = findOffsetByName(j, "C_OP_RemapVectorComponentToScalar", "m_nFieldInput");
C_OP_RemapVectorComponentToScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapVectorComponentToScalar", "m_nFieldOutput");
C_OP_RemapVectorComponentToScalar.m_nComponent = findOffsetByName(j, "C_OP_RemapVectorComponentToScalar", "m_nComponent");

// Atribuições para CGeneralRandomRotation
// CGeneralRandomRotation Offsets
CGeneralRandomRotation.m_nFieldOutput = findOffsetByName(j, "CGeneralRandomRotation", "m_nFieldOutput");
CGeneralRandomRotation.m_flDegrees = findOffsetByName(j, "CGeneralRandomRotation", "m_flDegrees");
CGeneralRandomRotation.m_flDegreesMin = findOffsetByName(j, "CGeneralRandomRotation", "m_flDegreesMin");
CGeneralRandomRotation.m_flDegreesMax = findOffsetByName(j, "CGeneralRandomRotation", "m_flDegreesMax");
CGeneralRandomRotation.m_flRotationRandExponent = findOffsetByName(j, "CGeneralRandomRotation", "m_flRotationRandExponent");
CGeneralRandomRotation.m_bRandomlyFlipDirection = findOffsetByName(j, "CGeneralRandomRotation", "m_bRandomlyFlipDirection");

// Atribuições para C_OP_DistanceBetweenVecs
// C_OP_DistanceBetweenVecs Offsets
C_OP_DistanceBetweenVecs.m_nFieldOutput = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_nFieldOutput");
C_OP_DistanceBetweenVecs.m_vecPoint1 = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_vecPoint1");
C_OP_DistanceBetweenVecs.m_vecPoint2 = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_vecPoint2");
C_OP_DistanceBetweenVecs.m_flInputMin = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_flInputMin");
C_OP_DistanceBetweenVecs.m_flInputMax = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_flInputMax");
C_OP_DistanceBetweenVecs.m_flOutputMin = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_flOutputMin");
C_OP_DistanceBetweenVecs.m_flOutputMax = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_flOutputMax");
C_OP_DistanceBetweenVecs.m_nSetMethod = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_nSetMethod");
C_OP_DistanceBetweenVecs.m_bDeltaTime = findOffsetByName(j, "C_OP_DistanceBetweenVecs", "m_bDeltaTime");

// Atribuições para C_OP_DampenToCP
// C_OP_DampenToCP Offsets
C_OP_DampenToCP.m_nControlPointNumber = findOffsetByName(j, "C_OP_DampenToCP", "m_nControlPointNumber");
C_OP_DampenToCP.m_flRange = findOffsetByName(j, "C_OP_DampenToCP", "m_flRange");
C_OP_DampenToCP.m_flScale = findOffsetByName(j, "C_OP_DampenToCP", "m_flScale");

// Atribuições para C_OP_CalculateVectorAttribute
// C_OP_CalculateVectorAttribute Offsets
C_OP_CalculateVectorAttribute.m_vStartValue = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_vStartValue");
C_OP_CalculateVectorAttribute.m_nFieldInput1 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_nFieldInput1");
C_OP_CalculateVectorAttribute.m_flInputScale1 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_flInputScale1");
C_OP_CalculateVectorAttribute.m_nFieldInput2 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_nFieldInput2");
C_OP_CalculateVectorAttribute.m_flInputScale2 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_flInputScale2");
C_OP_CalculateVectorAttribute.m_nControlPointInput1 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_nControlPointInput1");
C_OP_CalculateVectorAttribute.m_flControlPointScale1 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_flControlPointScale1");
C_OP_CalculateVectorAttribute.m_nControlPointInput2 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_nControlPointInput2");
C_OP_CalculateVectorAttribute.m_flControlPointScale2 = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_flControlPointScale2");
C_OP_CalculateVectorAttribute.m_nFieldOutput = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_nFieldOutput");
C_OP_CalculateVectorAttribute.m_vFinalOutputScale = findOffsetByName(j, "C_OP_CalculateVectorAttribute", "m_vFinalOutputScale");

// Atribuições para CParticleTransformInput
// CParticleTransformInput Offsets
CParticleTransformInput.m_nType = findOffsetByName(j, "CParticleTransformInput", "m_nType");
CParticleTransformInput.m_NamedValue = findOffsetByName(j, "CParticleTransformInput", "m_NamedValue");
CParticleTransformInput.m_bFollowNamedValue = findOffsetByName(j, "CParticleTransformInput", "m_bFollowNamedValue");
CParticleTransformInput.m_bSupportsDisabled = findOffsetByName(j, "CParticleTransformInput", "m_bSupportsDisabled");
CParticleTransformInput.m_bUseOrientation = findOffsetByName(j, "CParticleTransformInput", "m_bUseOrientation");
CParticleTransformInput.m_nControlPoint = findOffsetByName(j, "CParticleTransformInput", "m_nControlPoint");
CParticleTransformInput.m_nControlPointRangeMax = findOffsetByName(j, "CParticleTransformInput", "m_nControlPointRangeMax");
CParticleTransformInput.m_flEndCPGrowthTime = findOffsetByName(j, "CParticleTransformInput", "m_flEndCPGrowthTime");

// Atribuições para C_OP_LockToBone
// C_OP_LockToBone Offsets
C_OP_LockToBone.m_modelInput = findOffsetByName(j, "C_OP_LockToBone", "m_modelInput");
C_OP_LockToBone.m_transformInput = findOffsetByName(j, "C_OP_LockToBone", "m_transformInput");
C_OP_LockToBone.m_flLifeTimeFadeStart = findOffsetByName(j, "C_OP_LockToBone", "m_flLifeTimeFadeStart");
C_OP_LockToBone.m_flLifeTimeFadeEnd = findOffsetByName(j, "C_OP_LockToBone", "m_flLifeTimeFadeEnd");
C_OP_LockToBone.m_flJumpThreshold = findOffsetByName(j, "C_OP_LockToBone", "m_flJumpThreshold");
C_OP_LockToBone.m_flPrevPosScale = findOffsetByName(j, "C_OP_LockToBone", "m_flPrevPosScale");
C_OP_LockToBone.m_HitboxSetName = findOffsetByName(j, "C_OP_LockToBone", "m_HitboxSetName");
C_OP_LockToBone.m_bRigid = findOffsetByName(j, "C_OP_LockToBone", "m_bRigid");
C_OP_LockToBone.m_bUseBones = findOffsetByName(j, "C_OP_LockToBone", "m_bUseBones");
C_OP_LockToBone.m_nFieldOutput = findOffsetByName(j, "C_OP_LockToBone", "m_nFieldOutput");
C_OP_LockToBone.m_nFieldOutputPrev = findOffsetByName(j, "C_OP_LockToBone", "m_nFieldOutputPrev");
C_OP_LockToBone.m_nRotationSetType = findOffsetByName(j, "C_OP_LockToBone", "m_nRotationSetType");
C_OP_LockToBone.m_bRigidRotationLock = findOffsetByName(j, "C_OP_LockToBone", "m_bRigidRotationLock");
C_OP_LockToBone.m_vecRotation = findOffsetByName(j, "C_OP_LockToBone", "m_vecRotation");
C_OP_LockToBone.m_flRotLerp = findOffsetByName(j, "C_OP_LockToBone", "m_flRotLerp");

// Atribuições para C_OP_MovementMaintainOffset
// C_OP_MovementMaintainOffset Offsets
C_OP_MovementMaintainOffset.m_vecOffset = findOffsetByName(j, "C_OP_MovementMaintainOffset", "m_vecOffset");
C_OP_MovementMaintainOffset.m_nCP = findOffsetByName(j, "C_OP_MovementMaintainOffset", "m_nCP");
C_OP_MovementMaintainOffset.m_bRadiusScale = findOffsetByName(j, "C_OP_MovementMaintainOffset", "m_bRadiusScale");

// Atribuições para C_OP_SetVec
// C_OP_SetVec Offsets
C_OP_SetVec.m_InputValue = findOffsetByName(j, "C_OP_SetVec", "m_InputValue");
C_OP_SetVec.m_nOutputField = findOffsetByName(j, "C_OP_SetVec", "m_nOutputField");
C_OP_SetVec.m_nSetMethod = findOffsetByName(j, "C_OP_SetVec", "m_nSetMethod");
C_OP_SetVec.m_Lerp = findOffsetByName(j, "C_OP_SetVec", "m_Lerp");
C_OP_SetVec.m_bNormalizedOutput = findOffsetByName(j, "C_OP_SetVec", "m_bNormalizedOutput");

// Atribuições para C_INIT_CreateFromParentParticles
// C_INIT_CreateFromParentParticles Offsets
C_INIT_CreateFromParentParticles.m_flVelocityScale = findOffsetByName(j, "C_INIT_CreateFromParentParticles", "m_flVelocityScale");
C_INIT_CreateFromParentParticles.m_flIncrement = findOffsetByName(j, "C_INIT_CreateFromParentParticles", "m_flIncrement");
C_INIT_CreateFromParentParticles.m_bRandomDistribution = findOffsetByName(j, "C_INIT_CreateFromParentParticles", "m_bRandomDistribution");
C_INIT_CreateFromParentParticles.m_nRandomSeed = findOffsetByName(j, "C_INIT_CreateFromParentParticles", "m_nRandomSeed");
C_INIT_CreateFromParentParticles.m_bSubFrame = findOffsetByName(j, "C_INIT_CreateFromParentParticles", "m_bSubFrame");

// Atribuições para PARTICLE_EHANDLE__
// PARTICLE_EHANDLE__ Offsets
PARTICLE_EHANDLE__.unused = findOffsetByName(j, "PARTICLE_EHANDLE__", "unused");

// Atribuições para C_OP_RenderOmni2Light
// C_OP_RenderOmni2Light Offsets
C_OP_RenderOmni2Light.m_nLightType = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_nLightType");
C_OP_RenderOmni2Light.m_vColorBlend = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_vColorBlend");
C_OP_RenderOmni2Light.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_nColorBlendType");
C_OP_RenderOmni2Light.m_nBrightnessUnit = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_nBrightnessUnit");
C_OP_RenderOmni2Light.m_flBrightnessLumens = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flBrightnessLumens");
C_OP_RenderOmni2Light.m_flBrightnessCandelas = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flBrightnessCandelas");
C_OP_RenderOmni2Light.m_bCastShadows = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_bCastShadows");
C_OP_RenderOmni2Light.m_bFog = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_bFog");
C_OP_RenderOmni2Light.m_flFogScale = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flFogScale");
C_OP_RenderOmni2Light.m_flLuminaireRadius = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flLuminaireRadius");
C_OP_RenderOmni2Light.m_flSkirt = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flSkirt");
C_OP_RenderOmni2Light.m_flRange = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flRange");
C_OP_RenderOmni2Light.m_flInnerConeAngle = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flInnerConeAngle");
C_OP_RenderOmni2Light.m_flOuterConeAngle = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_flOuterConeAngle");
C_OP_RenderOmni2Light.m_hLightCookie = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_hLightCookie");
C_OP_RenderOmni2Light.m_bSphericalCookie = findOffsetByName(j, "C_OP_RenderOmni2Light", "m_bSphericalCookie");

// Atribuições para C_OP_ConnectParentParticleToNearest
// C_OP_ConnectParentParticleToNearest Offsets
C_OP_ConnectParentParticleToNearest.m_nFirstControlPoint = findOffsetByName(j, "C_OP_ConnectParentParticleToNearest", "m_nFirstControlPoint");
C_OP_ConnectParentParticleToNearest.m_nSecondControlPoint = findOffsetByName(j, "C_OP_ConnectParentParticleToNearest", "m_nSecondControlPoint");
C_OP_ConnectParentParticleToNearest.m_bUseRadius = findOffsetByName(j, "C_OP_ConnectParentParticleToNearest", "m_bUseRadius");
C_OP_ConnectParentParticleToNearest.m_flRadiusScale = findOffsetByName(j, "C_OP_ConnectParentParticleToNearest", "m_flRadiusScale");
C_OP_ConnectParentParticleToNearest.m_flParentRadiusScale = findOffsetByName(j, "C_OP_ConnectParentParticleToNearest", "m_flParentRadiusScale");

// Atribuições para C_INIT_InitSkinnedPositionFromCPSnapshot
// C_INIT_InitSkinnedPositionFromCPSnapshot Offsets
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nSnapshotControlPointNumber = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nSnapshotControlPointNumber");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nControlPointNumber");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bRandom = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bRandom");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nRandomSeed = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nRandomSeed");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bRigid = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bRigid");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bSetNormal = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bSetNormal");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bIgnoreDt = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bIgnoreDt");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flMinNormalVelocity = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flMinNormalVelocity");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flMaxNormalVelocity = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flMaxNormalVelocity");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nIndexType = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nIndexType");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flReadIndex = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flReadIndex");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flIncrement = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flIncrement");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nFullLoopIncrement = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nFullLoopIncrement");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_nSnapShotStartPoint = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_nSnapShotStartPoint");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flBoneVelocity = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flBoneVelocity");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_flBoneVelocityMax = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_flBoneVelocityMax");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bCopyColor = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bCopyColor");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bCopyAlpha = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bCopyAlpha");
C_INIT_InitSkinnedPositionFromCPSnapshot.m_bSetRadius = findOffsetByName(j, "C_INIT_InitSkinnedPositionFromCPSnapshot", "m_bSetRadius");

// Atribuições para C_OP_LagCompensation
// C_OP_LagCompensation Offsets
C_OP_LagCompensation.m_nDesiredVelocityCP = findOffsetByName(j, "C_OP_LagCompensation", "m_nDesiredVelocityCP");
C_OP_LagCompensation.m_nLatencyCP = findOffsetByName(j, "C_OP_LagCompensation", "m_nLatencyCP");
C_OP_LagCompensation.m_nLatencyCPField = findOffsetByName(j, "C_OP_LagCompensation", "m_nLatencyCPField");
C_OP_LagCompensation.m_nDesiredVelocityCPField = findOffsetByName(j, "C_OP_LagCompensation", "m_nDesiredVelocityCPField");

// Atribuições para C_OP_CollideWithSelf
// C_OP_CollideWithSelf Offsets
C_OP_CollideWithSelf.m_flRadiusScale = findOffsetByName(j, "C_OP_CollideWithSelf", "m_flRadiusScale");
C_OP_CollideWithSelf.m_flMinimumSpeed = findOffsetByName(j, "C_OP_CollideWithSelf", "m_flMinimumSpeed");

// Atribuições para C_OP_Noise
// C_OP_Noise Offsets
C_OP_Noise.m_nFieldOutput = findOffsetByName(j, "C_OP_Noise", "m_nFieldOutput");
C_OP_Noise.m_flOutputMin = findOffsetByName(j, "C_OP_Noise", "m_flOutputMin");
C_OP_Noise.m_flOutputMax = findOffsetByName(j, "C_OP_Noise", "m_flOutputMax");
C_OP_Noise.m_fl4NoiseScale = findOffsetByName(j, "C_OP_Noise", "m_fl4NoiseScale");
C_OP_Noise.m_bAdditive = findOffsetByName(j, "C_OP_Noise", "m_bAdditive");
C_OP_Noise.m_flNoiseAnimationTimeScale = findOffsetByName(j, "C_OP_Noise", "m_flNoiseAnimationTimeScale");

// Atribuições para C_OP_FadeAndKillForTracers
// C_OP_FadeAndKillForTracers Offsets
C_OP_FadeAndKillForTracers.m_flStartFadeInTime = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flStartFadeInTime");
C_OP_FadeAndKillForTracers.m_flEndFadeInTime = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flEndFadeInTime");
C_OP_FadeAndKillForTracers.m_flStartFadeOutTime = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flStartFadeOutTime");
C_OP_FadeAndKillForTracers.m_flEndFadeOutTime = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flEndFadeOutTime");
C_OP_FadeAndKillForTracers.m_flStartAlpha = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flStartAlpha");
C_OP_FadeAndKillForTracers.m_flEndAlpha = findOffsetByName(j, "C_OP_FadeAndKillForTracers", "m_flEndAlpha");

// Atribuições para C_OP_ColorAdjustHSL
// C_OP_ColorAdjustHSL Offsets
C_OP_ColorAdjustHSL.m_flHueAdjust = findOffsetByName(j, "C_OP_ColorAdjustHSL", "m_flHueAdjust");
C_OP_ColorAdjustHSL.m_flSaturationAdjust = findOffsetByName(j, "C_OP_ColorAdjustHSL", "m_flSaturationAdjust");
C_OP_ColorAdjustHSL.m_flLightnessAdjust = findOffsetByName(j, "C_OP_ColorAdjustHSL", "m_flLightnessAdjust");

// Atribuições para CParticleMassCalculationParameters
// CParticleMassCalculationParameters Offsets
CParticleMassCalculationParameters.m_nMassMode = findOffsetByName(j, "CParticleMassCalculationParameters", "m_nMassMode");
CParticleMassCalculationParameters.m_flRadius = findOffsetByName(j, "CParticleMassCalculationParameters", "m_flRadius");
CParticleMassCalculationParameters.m_flNominalRadius = findOffsetByName(j, "CParticleMassCalculationParameters", "m_flNominalRadius");
CParticleMassCalculationParameters.m_flScale = findOffsetByName(j, "CParticleMassCalculationParameters", "m_flScale");

// Atribuições para C_OP_SequenceFromModel
// C_OP_SequenceFromModel Offsets
C_OP_SequenceFromModel.m_nControlPointNumber = findOffsetByName(j, "C_OP_SequenceFromModel", "m_nControlPointNumber");
C_OP_SequenceFromModel.m_nFieldOutput = findOffsetByName(j, "C_OP_SequenceFromModel", "m_nFieldOutput");
C_OP_SequenceFromModel.m_nFieldOutputAnim = findOffsetByName(j, "C_OP_SequenceFromModel", "m_nFieldOutputAnim");
C_OP_SequenceFromModel.m_flInputMin = findOffsetByName(j, "C_OP_SequenceFromModel", "m_flInputMin");
C_OP_SequenceFromModel.m_flInputMax = findOffsetByName(j, "C_OP_SequenceFromModel", "m_flInputMax");
C_OP_SequenceFromModel.m_flOutputMin = findOffsetByName(j, "C_OP_SequenceFromModel", "m_flOutputMin");
C_OP_SequenceFromModel.m_flOutputMax = findOffsetByName(j, "C_OP_SequenceFromModel", "m_flOutputMax");
C_OP_SequenceFromModel.m_nSetMethod = findOffsetByName(j, "C_OP_SequenceFromModel", "m_nSetMethod");

// Atribuições para C_OP_AlphaDecay
// C_OP_AlphaDecay Offsets
C_OP_AlphaDecay.m_flMinAlpha = findOffsetByName(j, "C_OP_AlphaDecay", "m_flMinAlpha");

// Atribuições para C_OP_RemapDensityGradientToVectorAttribute
// C_OP_RemapDensityGradientToVectorAttribute Offsets
C_OP_RemapDensityGradientToVectorAttribute.m_flRadiusScale = findOffsetByName(j, "C_OP_RemapDensityGradientToVectorAttribute", "m_flRadiusScale");
C_OP_RemapDensityGradientToVectorAttribute.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDensityGradientToVectorAttribute", "m_nFieldOutput");

// Atribuições para C_INIT_InitVec
// C_INIT_InitVec Offsets
C_INIT_InitVec.m_InputValue = findOffsetByName(j, "C_INIT_InitVec", "m_InputValue");
C_INIT_InitVec.m_nOutputField = findOffsetByName(j, "C_INIT_InitVec", "m_nOutputField");
C_INIT_InitVec.m_nSetMethod = findOffsetByName(j, "C_INIT_InitVec", "m_nSetMethod");
C_INIT_InitVec.m_bNormalizedOutput = findOffsetByName(j, "C_INIT_InitVec", "m_bNormalizedOutput");
C_INIT_InitVec.m_bWritePreviousPosition = findOffsetByName(j, "C_INIT_InitVec", "m_bWritePreviousPosition");

// Atribuições para C_INIT_SetHitboxToModel
// C_INIT_SetHitboxToModel Offsets
C_INIT_SetHitboxToModel.m_nControlPointNumber = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_nControlPointNumber");
C_INIT_SetHitboxToModel.m_nForceInModel = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_nForceInModel");
C_INIT_SetHitboxToModel.m_bEvenDistribution = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_bEvenDistribution");
C_INIT_SetHitboxToModel.m_nDesiredHitbox = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_nDesiredHitbox");
C_INIT_SetHitboxToModel.m_vecHitBoxScale = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_vecHitBoxScale");
C_INIT_SetHitboxToModel.m_vecDirectionBias = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_vecDirectionBias");
C_INIT_SetHitboxToModel.m_bMaintainHitbox = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_bMaintainHitbox");
C_INIT_SetHitboxToModel.m_bUseBones = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_bUseBones");
C_INIT_SetHitboxToModel.m_HitboxSetName = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_HitboxSetName");
C_INIT_SetHitboxToModel.m_flShellSize = findOffsetByName(j, "C_INIT_SetHitboxToModel", "m_flShellSize");

// Atribuições para C_OP_MovementMoveAlongSkinnedCPSnapshot
// C_OP_MovementMoveAlongSkinnedCPSnapshot Offsets
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_nControlPointNumber");
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_nSnapshotControlPointNumber = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_nSnapshotControlPointNumber");
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_bSetNormal = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_bSetNormal");
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_bSetRadius = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_bSetRadius");
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_flInterpolation = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_flInterpolation");
C_OP_MovementMoveAlongSkinnedCPSnapshot.m_flTValue = findOffsetByName(j, "C_OP_MovementMoveAlongSkinnedCPSnapshot", "m_flTValue");

// Atribuições para C_OP_LerpScalar
// C_OP_LerpScalar Offsets
C_OP_LerpScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_LerpScalar", "m_nFieldOutput");
C_OP_LerpScalar.m_flOutput = findOffsetByName(j, "C_OP_LerpScalar", "m_flOutput");
C_OP_LerpScalar.m_flStartTime = findOffsetByName(j, "C_OP_LerpScalar", "m_flStartTime");
C_OP_LerpScalar.m_flEndTime = findOffsetByName(j, "C_OP_LerpScalar", "m_flEndTime");

// Atribuições para C_INIT_InitialRepulsionVelocity
// C_INIT_InitialRepulsionVelocity Offsets
C_INIT_InitialRepulsionVelocity.m_CollisionGroupName = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_CollisionGroupName");
C_INIT_InitialRepulsionVelocity.m_nTraceSet = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_nTraceSet");
C_INIT_InitialRepulsionVelocity.m_vecOutputMin = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_vecOutputMin");
C_INIT_InitialRepulsionVelocity.m_vecOutputMax = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_vecOutputMax");
C_INIT_InitialRepulsionVelocity.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_nControlPointNumber");
C_INIT_InitialRepulsionVelocity.m_bPerParticle = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_bPerParticle");
C_INIT_InitialRepulsionVelocity.m_bTranslate = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_bTranslate");
C_INIT_InitialRepulsionVelocity.m_bProportional = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_bProportional");
C_INIT_InitialRepulsionVelocity.m_flTraceLength = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_flTraceLength");
C_INIT_InitialRepulsionVelocity.m_bPerParticleTR = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_bPerParticleTR");
C_INIT_InitialRepulsionVelocity.m_bInherit = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_bInherit");
C_INIT_InitialRepulsionVelocity.m_nChildCP = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_nChildCP");
C_INIT_InitialRepulsionVelocity.m_nChildGroupID = findOffsetByName(j, "C_INIT_InitialRepulsionVelocity", "m_nChildGroupID");

// Atribuições para C_OP_ClampScalar
// C_OP_ClampScalar Offsets
C_OP_ClampScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_ClampScalar", "m_nFieldOutput");
C_OP_ClampScalar.m_flOutputMin = findOffsetByName(j, "C_OP_ClampScalar", "m_flOutputMin");
C_OP_ClampScalar.m_flOutputMax = findOffsetByName(j, "C_OP_ClampScalar", "m_flOutputMax");

// Atribuições para C_OP_SetControlPointToHMD
// C_OP_SetControlPointToHMD Offsets
C_OP_SetControlPointToHMD.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointToHMD", "m_nCP1");
C_OP_SetControlPointToHMD.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetControlPointToHMD", "m_vecCP1Pos");
C_OP_SetControlPointToHMD.m_bOrientToHMD = findOffsetByName(j, "C_OP_SetControlPointToHMD", "m_bOrientToHMD");

// Atribuições para C_OP_DifferencePreviousParticle
// C_OP_DifferencePreviousParticle Offsets
C_OP_DifferencePreviousParticle.m_nFieldInput = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_nFieldInput");
C_OP_DifferencePreviousParticle.m_nFieldOutput = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_nFieldOutput");
C_OP_DifferencePreviousParticle.m_flInputMin = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_flInputMin");
C_OP_DifferencePreviousParticle.m_flInputMax = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_flInputMax");
C_OP_DifferencePreviousParticle.m_flOutputMin = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_flOutputMin");
C_OP_DifferencePreviousParticle.m_flOutputMax = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_flOutputMax");
C_OP_DifferencePreviousParticle.m_nSetMethod = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_nSetMethod");
C_OP_DifferencePreviousParticle.m_bActiveRange = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_bActiveRange");
C_OP_DifferencePreviousParticle.m_bSetPreviousParticle = findOffsetByName(j, "C_OP_DifferencePreviousParticle", "m_bSetPreviousParticle");

// Atribuições para C_OP_SetControlPointFieldFromVectorExpression
// C_OP_SetControlPointFieldFromVectorExpression Offsets
C_OP_SetControlPointFieldFromVectorExpression.m_nExpression = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_nExpression");
C_OP_SetControlPointFieldFromVectorExpression.m_vecInput1 = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_vecInput1");
C_OP_SetControlPointFieldFromVectorExpression.m_vecInput2 = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_vecInput2");
C_OP_SetControlPointFieldFromVectorExpression.m_flOutputRemap = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_flOutputRemap");
C_OP_SetControlPointFieldFromVectorExpression.m_nOutputCP = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_nOutputCP");
C_OP_SetControlPointFieldFromVectorExpression.m_nOutVectorField = findOffsetByName(j, "C_OP_SetControlPointFieldFromVectorExpression", "m_nOutVectorField");

// Atribuições para C_OP_PercentageBetweenTransforms
// C_OP_PercentageBetweenTransforms Offsets
C_OP_PercentageBetweenTransforms.m_nFieldOutput = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_nFieldOutput");
C_OP_PercentageBetweenTransforms.m_flInputMin = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_flInputMin");
C_OP_PercentageBetweenTransforms.m_flInputMax = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_flInputMax");
C_OP_PercentageBetweenTransforms.m_flOutputMin = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_flOutputMin");
C_OP_PercentageBetweenTransforms.m_flOutputMax = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_flOutputMax");
C_OP_PercentageBetweenTransforms.m_TransformStart = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_TransformStart");
C_OP_PercentageBetweenTransforms.m_TransformEnd = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_TransformEnd");
C_OP_PercentageBetweenTransforms.m_nSetMethod = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_nSetMethod");
C_OP_PercentageBetweenTransforms.m_bActiveRange = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_bActiveRange");
C_OP_PercentageBetweenTransforms.m_bRadialCheck = findOffsetByName(j, "C_OP_PercentageBetweenTransforms", "m_bRadialCheck");

// Atribuições para C_INIT_PlaneCull
// C_INIT_PlaneCull Offsets
C_INIT_PlaneCull.m_nControlPoint = findOffsetByName(j, "C_INIT_PlaneCull", "m_nControlPoint");
C_INIT_PlaneCull.m_flDistance = findOffsetByName(j, "C_INIT_PlaneCull", "m_flDistance");
C_INIT_PlaneCull.m_bCullInside = findOffsetByName(j, "C_INIT_PlaneCull", "m_bCullInside");

// Atribuições para C_INIT_InitFromCPSnapshot
// C_INIT_InitFromCPSnapshot Offsets
C_INIT_InitFromCPSnapshot.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nControlPointNumber");
C_INIT_InitFromCPSnapshot.m_nAttributeToRead = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nAttributeToRead");
C_INIT_InitFromCPSnapshot.m_nAttributeToWrite = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nAttributeToWrite");
C_INIT_InitFromCPSnapshot.m_nLocalSpaceCP = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nLocalSpaceCP");
C_INIT_InitFromCPSnapshot.m_bRandom = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_bRandom");
C_INIT_InitFromCPSnapshot.m_bReverse = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_bReverse");
C_INIT_InitFromCPSnapshot.m_nSnapShotIncrement = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nSnapShotIncrement");
C_INIT_InitFromCPSnapshot.m_nManualSnapshotIndex = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nManualSnapshotIndex");
C_INIT_InitFromCPSnapshot.m_nRandomSeed = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_nRandomSeed");
C_INIT_InitFromCPSnapshot.m_bLocalSpaceAngles = findOffsetByName(j, "C_INIT_InitFromCPSnapshot", "m_bLocalSpaceAngles");

// Atribuições para C_OP_RenderCables
// C_OP_RenderCables Offsets
C_OP_RenderCables.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderCables", "m_flRadiusScale");
C_OP_RenderCables.m_flAlphaScale = findOffsetByName(j, "C_OP_RenderCables", "m_flAlphaScale");
C_OP_RenderCables.m_vecColorScale = findOffsetByName(j, "C_OP_RenderCables", "m_vecColorScale");
C_OP_RenderCables.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderCables", "m_nColorBlendType");
C_OP_RenderCables.m_hMaterial = findOffsetByName(j, "C_OP_RenderCables", "m_hMaterial");
C_OP_RenderCables.m_nTextureRepetitionMode = findOffsetByName(j, "C_OP_RenderCables", "m_nTextureRepetitionMode");
C_OP_RenderCables.m_flTextureRepeatsPerSegment = findOffsetByName(j, "C_OP_RenderCables", "m_flTextureRepeatsPerSegment");
C_OP_RenderCables.m_flTextureRepeatsCircumference = findOffsetByName(j, "C_OP_RenderCables", "m_flTextureRepeatsCircumference");
C_OP_RenderCables.m_flColorMapOffsetV = findOffsetByName(j, "C_OP_RenderCables", "m_flColorMapOffsetV");
C_OP_RenderCables.m_flColorMapOffsetU = findOffsetByName(j, "C_OP_RenderCables", "m_flColorMapOffsetU");
C_OP_RenderCables.m_flNormalMapOffsetV = findOffsetByName(j, "C_OP_RenderCables", "m_flNormalMapOffsetV");
C_OP_RenderCables.m_flNormalMapOffsetU = findOffsetByName(j, "C_OP_RenderCables", "m_flNormalMapOffsetU");
C_OP_RenderCables.m_bDrawCableCaps = findOffsetByName(j, "C_OP_RenderCables", "m_bDrawCableCaps");
C_OP_RenderCables.m_flCapRoundness = findOffsetByName(j, "C_OP_RenderCables", "m_flCapRoundness");
C_OP_RenderCables.m_flCapOffsetAmount = findOffsetByName(j, "C_OP_RenderCables", "m_flCapOffsetAmount");
C_OP_RenderCables.m_flTessScale = findOffsetByName(j, "C_OP_RenderCables", "m_flTessScale");
C_OP_RenderCables.m_nMinTesselation = findOffsetByName(j, "C_OP_RenderCables", "m_nMinTesselation");
C_OP_RenderCables.m_nMaxTesselation = findOffsetByName(j, "C_OP_RenderCables", "m_nMaxTesselation");
C_OP_RenderCables.m_nRoundness = findOffsetByName(j, "C_OP_RenderCables", "m_nRoundness");
C_OP_RenderCables.m_LightingTransform = findOffsetByName(j, "C_OP_RenderCables", "m_LightingTransform");
C_OP_RenderCables.m_MaterialFloatVars = findOffsetByName(j, "C_OP_RenderCables", "m_MaterialFloatVars");
C_OP_RenderCables.m_MaterialVecVars = findOffsetByName(j, "C_OP_RenderCables", "m_MaterialVecVars");

// Atribuições para C_INIT_InheritVelocity
// C_INIT_InheritVelocity Offsets
C_INIT_InheritVelocity.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InheritVelocity", "m_nControlPointNumber");
C_INIT_InheritVelocity.m_flVelocityScale = findOffsetByName(j, "C_INIT_InheritVelocity", "m_flVelocityScale");

// Atribuições para C_OP_SetControlPointToWaterSurface
// C_OP_SetControlPointToWaterSurface Offsets
C_OP_SetControlPointToWaterSurface.m_nSourceCP = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_nSourceCP");
C_OP_SetControlPointToWaterSurface.m_nDestCP = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_nDestCP");
C_OP_SetControlPointToWaterSurface.m_nFlowCP = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_nFlowCP");
C_OP_SetControlPointToWaterSurface.m_nActiveCP = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_nActiveCP");
C_OP_SetControlPointToWaterSurface.m_nActiveCPField = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_nActiveCPField");
C_OP_SetControlPointToWaterSurface.m_flRetestRate = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_flRetestRate");
C_OP_SetControlPointToWaterSurface.m_bAdaptiveThreshold = findOffsetByName(j, "C_OP_SetControlPointToWaterSurface", "m_bAdaptiveThreshold");

// Atribuições para C_INIT_PositionOffset
// C_INIT_PositionOffset Offsets
C_INIT_PositionOffset.m_OffsetMin = findOffsetByName(j, "C_INIT_PositionOffset", "m_OffsetMin");
C_INIT_PositionOffset.m_OffsetMax = findOffsetByName(j, "C_INIT_PositionOffset", "m_OffsetMax");
C_INIT_PositionOffset.m_TransformInput = findOffsetByName(j, "C_INIT_PositionOffset", "m_TransformInput");
C_INIT_PositionOffset.m_bLocalCoords = findOffsetByName(j, "C_INIT_PositionOffset", "m_bLocalCoords");
C_INIT_PositionOffset.m_bProportional = findOffsetByName(j, "C_INIT_PositionOffset", "m_bProportional");
C_INIT_PositionOffset.m_randomnessParameters = findOffsetByName(j, "C_INIT_PositionOffset", "m_randomnessParameters");

// Atribuições para C_INIT_NormalAlignToCP
// C_INIT_NormalAlignToCP Offsets
C_INIT_NormalAlignToCP.m_transformInput = findOffsetByName(j, "C_INIT_NormalAlignToCP", "m_transformInput");
C_INIT_NormalAlignToCP.m_nControlPointAxis = findOffsetByName(j, "C_INIT_NormalAlignToCP", "m_nControlPointAxis");

// Atribuições para C_OP_ShapeMatchingConstraint
// C_OP_ShapeMatchingConstraint Offsets
C_OP_ShapeMatchingConstraint.m_flShapeRestorationTime = findOffsetByName(j, "C_OP_ShapeMatchingConstraint", "m_flShapeRestorationTime");

// Atribuições para C_OP_SetChildControlPoints
// C_OP_SetChildControlPoints Offsets
C_OP_SetChildControlPoints.m_nChildGroupID = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_nChildGroupID");
C_OP_SetChildControlPoints.m_nFirstControlPoint = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_nFirstControlPoint");
C_OP_SetChildControlPoints.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_nNumControlPoints");
C_OP_SetChildControlPoints.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_nFirstSourcePoint");
C_OP_SetChildControlPoints.m_bReverse = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_bReverse");
C_OP_SetChildControlPoints.m_bSetOrientation = findOffsetByName(j, "C_OP_SetChildControlPoints", "m_bSetOrientation");

// Atribuições para C_OP_ChladniWave
// C_OP_ChladniWave Offsets
C_OP_ChladniWave.m_nFieldOutput = findOffsetByName(j, "C_OP_ChladniWave", "m_nFieldOutput");
C_OP_ChladniWave.m_flInputMin = findOffsetByName(j, "C_OP_ChladniWave", "m_flInputMin");
C_OP_ChladniWave.m_flInputMax = findOffsetByName(j, "C_OP_ChladniWave", "m_flInputMax");
C_OP_ChladniWave.m_flOutputMin = findOffsetByName(j, "C_OP_ChladniWave", "m_flOutputMin");
C_OP_ChladniWave.m_flOutputMax = findOffsetByName(j, "C_OP_ChladniWave", "m_flOutputMax");
C_OP_ChladniWave.m_vecWaveLength = findOffsetByName(j, "C_OP_ChladniWave", "m_vecWaveLength");
C_OP_ChladniWave.m_vecHarmonics = findOffsetByName(j, "C_OP_ChladniWave", "m_vecHarmonics");
C_OP_ChladniWave.m_nSetMethod = findOffsetByName(j, "C_OP_ChladniWave", "m_nSetMethod");
C_OP_ChladniWave.m_nLocalSpaceControlPoint = findOffsetByName(j, "C_OP_ChladniWave", "m_nLocalSpaceControlPoint");
C_OP_ChladniWave.m_b3D = findOffsetByName(j, "C_OP_ChladniWave", "m_b3D");

// Atribuições para C_OP_RemapDirectionToCPToVector
// C_OP_RemapDirectionToCPToVector Offsets
C_OP_RemapDirectionToCPToVector.m_nCP = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_nCP");
C_OP_RemapDirectionToCPToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_nFieldOutput");
C_OP_RemapDirectionToCPToVector.m_flScale = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_flScale");
C_OP_RemapDirectionToCPToVector.m_flOffsetRot = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_flOffsetRot");
C_OP_RemapDirectionToCPToVector.m_vecOffsetAxis = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_vecOffsetAxis");
C_OP_RemapDirectionToCPToVector.m_bNormalize = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_bNormalize");
C_OP_RemapDirectionToCPToVector.m_nFieldStrength = findOffsetByName(j, "C_OP_RemapDirectionToCPToVector", "m_nFieldStrength");

// Atribuições para C_OP_DriveCPFromGlobalSoundFloat
// C_OP_DriveCPFromGlobalSoundFloat Offsets
C_OP_DriveCPFromGlobalSoundFloat.m_nOutputControlPoint = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_nOutputControlPoint");
C_OP_DriveCPFromGlobalSoundFloat.m_nOutputField = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_nOutputField");
C_OP_DriveCPFromGlobalSoundFloat.m_flInputMin = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_flInputMin");
C_OP_DriveCPFromGlobalSoundFloat.m_flInputMax = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_flInputMax");
C_OP_DriveCPFromGlobalSoundFloat.m_flOutputMin = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_flOutputMin");
C_OP_DriveCPFromGlobalSoundFloat.m_flOutputMax = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_flOutputMax");
C_OP_DriveCPFromGlobalSoundFloat.m_StackName = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_StackName");
C_OP_DriveCPFromGlobalSoundFloat.m_OperatorName = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_OperatorName");
C_OP_DriveCPFromGlobalSoundFloat.m_FieldName = findOffsetByName(j, "C_OP_DriveCPFromGlobalSoundFloat", "m_FieldName");

// Atribuições para C_OP_RtEnvCull
// C_OP_RtEnvCull Offsets
C_OP_RtEnvCull.m_vecTestDir = findOffsetByName(j, "C_OP_RtEnvCull", "m_vecTestDir");
C_OP_RtEnvCull.m_vecTestNormal = findOffsetByName(j, "C_OP_RtEnvCull", "m_vecTestNormal");
C_OP_RtEnvCull.m_bCullOnMiss = findOffsetByName(j, "C_OP_RtEnvCull", "m_bCullOnMiss");
C_OP_RtEnvCull.m_bStickInsteadOfCull = findOffsetByName(j, "C_OP_RtEnvCull", "m_bStickInsteadOfCull");
C_OP_RtEnvCull.m_RtEnvName = findOffsetByName(j, "C_OP_RtEnvCull", "m_RtEnvName");
C_OP_RtEnvCull.m_nRTEnvCP = findOffsetByName(j, "C_OP_RtEnvCull", "m_nRTEnvCP");
C_OP_RtEnvCull.m_nComponent = findOffsetByName(j, "C_OP_RtEnvCull", "m_nComponent");

// Atribuições para C_OP_PinParticleToCP
// C_OP_PinParticleToCP Offsets
C_OP_PinParticleToCP.m_nControlPointNumber = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nControlPointNumber");
C_OP_PinParticleToCP.m_vecOffset = findOffsetByName(j, "C_OP_PinParticleToCP", "m_vecOffset");
C_OP_PinParticleToCP.m_bOffsetLocal = findOffsetByName(j, "C_OP_PinParticleToCP", "m_bOffsetLocal");
C_OP_PinParticleToCP.m_nParticleSelection = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nParticleSelection");
C_OP_PinParticleToCP.m_nParticleNumber = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nParticleNumber");
C_OP_PinParticleToCP.m_nPinBreakType = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nPinBreakType");
C_OP_PinParticleToCP.m_flBreakDistance = findOffsetByName(j, "C_OP_PinParticleToCP", "m_flBreakDistance");
C_OP_PinParticleToCP.m_flBreakSpeed = findOffsetByName(j, "C_OP_PinParticleToCP", "m_flBreakSpeed");
C_OP_PinParticleToCP.m_flAge = findOffsetByName(j, "C_OP_PinParticleToCP", "m_flAge");
C_OP_PinParticleToCP.m_nBreakControlPointNumber = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nBreakControlPointNumber");
C_OP_PinParticleToCP.m_nBreakControlPointNumber2 = findOffsetByName(j, "C_OP_PinParticleToCP", "m_nBreakControlPointNumber2");
C_OP_PinParticleToCP.m_flBreakValue = findOffsetByName(j, "C_OP_PinParticleToCP", "m_flBreakValue");
C_OP_PinParticleToCP.m_flInterpolation = findOffsetByName(j, "C_OP_PinParticleToCP", "m_flInterpolation");

// Atribuições para C_OP_RemapCPtoVector
// C_OP_RemapCPtoVector Offsets
C_OP_RemapCPtoVector.m_nCPInput = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_nCPInput");
C_OP_RemapCPtoVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_nFieldOutput");
C_OP_RemapCPtoVector.m_nLocalSpaceCP = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_nLocalSpaceCP");
C_OP_RemapCPtoVector.m_vInputMin = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_vInputMin");
C_OP_RemapCPtoVector.m_vInputMax = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_vInputMax");
C_OP_RemapCPtoVector.m_vOutputMin = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_vOutputMin");
C_OP_RemapCPtoVector.m_vOutputMax = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_vOutputMax");
C_OP_RemapCPtoVector.m_flStartTime = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_flStartTime");
C_OP_RemapCPtoVector.m_flEndTime = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_flEndTime");
C_OP_RemapCPtoVector.m_flInterpRate = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_flInterpRate");
C_OP_RemapCPtoVector.m_nSetMethod = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_nSetMethod");
C_OP_RemapCPtoVector.m_bOffset = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_bOffset");
C_OP_RemapCPtoVector.m_bAccelerate = findOffsetByName(j, "C_OP_RemapCPtoVector", "m_bAccelerate");

// Atribuições para C_INIT_CreateParticleImpulse
// C_INIT_CreateParticleImpulse Offsets
C_INIT_CreateParticleImpulse.m_InputRadius = findOffsetByName(j, "C_INIT_CreateParticleImpulse", "m_InputRadius");
C_INIT_CreateParticleImpulse.m_InputMagnitude = findOffsetByName(j, "C_INIT_CreateParticleImpulse", "m_InputMagnitude");
C_INIT_CreateParticleImpulse.m_nFalloffFunction = findOffsetByName(j, "C_INIT_CreateParticleImpulse", "m_nFalloffFunction");
C_INIT_CreateParticleImpulse.m_InputFalloffExp = findOffsetByName(j, "C_INIT_CreateParticleImpulse", "m_InputFalloffExp");
C_INIT_CreateParticleImpulse.m_nImpulseType = findOffsetByName(j, "C_INIT_CreateParticleImpulse", "m_nImpulseType");

// Atribuições para C_OP_DensityForce
// C_OP_DensityForce Offsets
C_OP_DensityForce.m_flRadiusScale = findOffsetByName(j, "C_OP_DensityForce", "m_flRadiusScale");
C_OP_DensityForce.m_flForceScale = findOffsetByName(j, "C_OP_DensityForce", "m_flForceScale");
C_OP_DensityForce.m_flTargetDensity = findOffsetByName(j, "C_OP_DensityForce", "m_flTargetDensity");

// Atribuições para C_INIT_CreateInEpitrochoid
// C_INIT_CreateInEpitrochoid Offsets
C_INIT_CreateInEpitrochoid.m_nComponent1 = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_nComponent1");
C_INIT_CreateInEpitrochoid.m_nComponent2 = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_nComponent2");
C_INIT_CreateInEpitrochoid.m_TransformInput = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_TransformInput");
C_INIT_CreateInEpitrochoid.m_flParticleDensity = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_flParticleDensity");
C_INIT_CreateInEpitrochoid.m_flOffset = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_flOffset");
C_INIT_CreateInEpitrochoid.m_flRadius1 = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_flRadius1");
C_INIT_CreateInEpitrochoid.m_flRadius2 = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_flRadius2");
C_INIT_CreateInEpitrochoid.m_bUseCount = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_bUseCount");
C_INIT_CreateInEpitrochoid.m_bUseLocalCoords = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_bUseLocalCoords");
C_INIT_CreateInEpitrochoid.m_bOffsetExistingPos = findOffsetByName(j, "C_INIT_CreateInEpitrochoid", "m_bOffsetExistingPos");

// Atribuições para C_OP_ConstrainDistanceToUserSpecifiedPath
// C_OP_ConstrainDistanceToUserSpecifiedPath Offsets
C_OP_ConstrainDistanceToUserSpecifiedPath.m_fMinDistance = findOffsetByName(j, "C_OP_ConstrainDistanceToUserSpecifiedPath", "m_fMinDistance");
C_OP_ConstrainDistanceToUserSpecifiedPath.m_flMaxDistance = findOffsetByName(j, "C_OP_ConstrainDistanceToUserSpecifiedPath", "m_flMaxDistance");
C_OP_ConstrainDistanceToUserSpecifiedPath.m_flTimeScale = findOffsetByName(j, "C_OP_ConstrainDistanceToUserSpecifiedPath", "m_flTimeScale");
C_OP_ConstrainDistanceToUserSpecifiedPath.m_bLoopedPath = findOffsetByName(j, "C_OP_ConstrainDistanceToUserSpecifiedPath", "m_bLoopedPath");
C_OP_ConstrainDistanceToUserSpecifiedPath.m_pointList = findOffsetByName(j, "C_OP_ConstrainDistanceToUserSpecifiedPath", "m_pointList");

// Atribuições para C_OP_SetControlPointPositions
// C_OP_SetControlPointPositions Offsets
C_OP_SetControlPointPositions.m_bUseWorldLocation = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_bUseWorldLocation");
C_OP_SetControlPointPositions.m_bOrient = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_bOrient");
C_OP_SetControlPointPositions.m_bSetOnce = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_bSetOnce");
C_OP_SetControlPointPositions.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_nCP1");
C_OP_SetControlPointPositions.m_nCP2 = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_nCP2");
C_OP_SetControlPointPositions.m_nCP3 = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_nCP3");
C_OP_SetControlPointPositions.m_nCP4 = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_nCP4");
C_OP_SetControlPointPositions.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_vecCP1Pos");
C_OP_SetControlPointPositions.m_vecCP2Pos = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_vecCP2Pos");
C_OP_SetControlPointPositions.m_vecCP3Pos = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_vecCP3Pos");
C_OP_SetControlPointPositions.m_vecCP4Pos = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_vecCP4Pos");
C_OP_SetControlPointPositions.m_nHeadLocation = findOffsetByName(j, "C_OP_SetControlPointPositions", "m_nHeadLocation");

// Atribuições para C_OP_SetFloatAttributeToVectorExpression
// C_OP_SetFloatAttributeToVectorExpression Offsets
C_OP_SetFloatAttributeToVectorExpression.m_nExpression = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_nExpression");
C_OP_SetFloatAttributeToVectorExpression.m_vInput1 = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_vInput1");
C_OP_SetFloatAttributeToVectorExpression.m_vInput2 = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_vInput2");
C_OP_SetFloatAttributeToVectorExpression.m_flOutputRemap = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_flOutputRemap");
C_OP_SetFloatAttributeToVectorExpression.m_nOutputField = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_nOutputField");
C_OP_SetFloatAttributeToVectorExpression.m_nSetMethod = findOffsetByName(j, "C_OP_SetFloatAttributeToVectorExpression", "m_nSetMethod");

// Atribuições para C_OP_MovementRotateParticleAroundAxis
// C_OP_MovementRotateParticleAroundAxis Offsets
C_OP_MovementRotateParticleAroundAxis.m_vecRotAxis = findOffsetByName(j, "C_OP_MovementRotateParticleAroundAxis", "m_vecRotAxis");
C_OP_MovementRotateParticleAroundAxis.m_flRotRate = findOffsetByName(j, "C_OP_MovementRotateParticleAroundAxis", "m_flRotRate");
C_OP_MovementRotateParticleAroundAxis.m_TransformInput = findOffsetByName(j, "C_OP_MovementRotateParticleAroundAxis", "m_TransformInput");
C_OP_MovementRotateParticleAroundAxis.m_bLocalSpace = findOffsetByName(j, "C_OP_MovementRotateParticleAroundAxis", "m_bLocalSpace");

// Atribuições para C_OP_IntraParticleForce
// C_OP_IntraParticleForce Offsets
C_OP_IntraParticleForce.m_flAttractionMinDistance = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flAttractionMinDistance");
C_OP_IntraParticleForce.m_flAttractionMaxDistance = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flAttractionMaxDistance");
C_OP_IntraParticleForce.m_flAttractionMaxStrength = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flAttractionMaxStrength");
C_OP_IntraParticleForce.m_flRepulsionMinDistance = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flRepulsionMinDistance");
C_OP_IntraParticleForce.m_flRepulsionMaxDistance = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flRepulsionMaxDistance");
C_OP_IntraParticleForce.m_flRepulsionMaxStrength = findOffsetByName(j, "C_OP_IntraParticleForce", "m_flRepulsionMaxStrength");
C_OP_IntraParticleForce.m_bUseAABB = findOffsetByName(j, "C_OP_IntraParticleForce", "m_bUseAABB");
C_OP_IntraParticleForce.m_bThreadIt = findOffsetByName(j, "C_OP_IntraParticleForce", "m_bThreadIt");

// Atribuições para C_INIT_InitFloat
// C_INIT_InitFloat Offsets
C_INIT_InitFloat.m_InputValue = findOffsetByName(j, "C_INIT_InitFloat", "m_InputValue");
C_INIT_InitFloat.m_nOutputField = findOffsetByName(j, "C_INIT_InitFloat", "m_nOutputField");
C_INIT_InitFloat.m_nSetMethod = findOffsetByName(j, "C_INIT_InitFloat", "m_nSetMethod");
C_INIT_InitFloat.m_InputStrength = findOffsetByName(j, "C_INIT_InitFloat", "m_InputStrength");

// Atribuições para C_INIT_CreateOnModel
// C_INIT_CreateOnModel Offsets
C_INIT_CreateOnModel.m_modelInput = findOffsetByName(j, "C_INIT_CreateOnModel", "m_modelInput");
C_INIT_CreateOnModel.m_transformInput = findOffsetByName(j, "C_INIT_CreateOnModel", "m_transformInput");
C_INIT_CreateOnModel.m_nForceInModel = findOffsetByName(j, "C_INIT_CreateOnModel", "m_nForceInModel");
C_INIT_CreateOnModel.m_bScaleToVolume = findOffsetByName(j, "C_INIT_CreateOnModel", "m_bScaleToVolume");
C_INIT_CreateOnModel.m_bEvenDistribution = findOffsetByName(j, "C_INIT_CreateOnModel", "m_bEvenDistribution");
C_INIT_CreateOnModel.m_nDesiredHitbox = findOffsetByName(j, "C_INIT_CreateOnModel", "m_nDesiredHitbox");
C_INIT_CreateOnModel.m_nHitboxValueFromControlPointIndex = findOffsetByName(j, "C_INIT_CreateOnModel", "m_nHitboxValueFromControlPointIndex");
C_INIT_CreateOnModel.m_vecHitBoxScale = findOffsetByName(j, "C_INIT_CreateOnModel", "m_vecHitBoxScale");
C_INIT_CreateOnModel.m_flBoneVelocity = findOffsetByName(j, "C_INIT_CreateOnModel", "m_flBoneVelocity");
C_INIT_CreateOnModel.m_flMaxBoneVelocity = findOffsetByName(j, "C_INIT_CreateOnModel", "m_flMaxBoneVelocity");
C_INIT_CreateOnModel.m_vecDirectionBias = findOffsetByName(j, "C_INIT_CreateOnModel", "m_vecDirectionBias");
C_INIT_CreateOnModel.m_HitboxSetName = findOffsetByName(j, "C_INIT_CreateOnModel", "m_HitboxSetName");
C_INIT_CreateOnModel.m_bLocalCoords = findOffsetByName(j, "C_INIT_CreateOnModel", "m_bLocalCoords");
C_INIT_CreateOnModel.m_bUseBones = findOffsetByName(j, "C_INIT_CreateOnModel", "m_bUseBones");
C_INIT_CreateOnModel.m_bUseMesh = findOffsetByName(j, "C_INIT_CreateOnModel", "m_bUseMesh");
C_INIT_CreateOnModel.m_flShellSize = findOffsetByName(j, "C_INIT_CreateOnModel", "m_flShellSize");

// Atribuições para C_OP_InheritFromPeerSystem
// C_OP_InheritFromPeerSystem Offsets
C_OP_InheritFromPeerSystem.m_nFieldOutput = findOffsetByName(j, "C_OP_InheritFromPeerSystem", "m_nFieldOutput");
C_OP_InheritFromPeerSystem.m_nFieldInput = findOffsetByName(j, "C_OP_InheritFromPeerSystem", "m_nFieldInput");
C_OP_InheritFromPeerSystem.m_nIncrement = findOffsetByName(j, "C_OP_InheritFromPeerSystem", "m_nIncrement");
C_OP_InheritFromPeerSystem.m_nGroupID = findOffsetByName(j, "C_OP_InheritFromPeerSystem", "m_nGroupID");

// Atribuições para C_OP_PerParticleForce
// C_OP_PerParticleForce Offsets
C_OP_PerParticleForce.m_flForceScale = findOffsetByName(j, "C_OP_PerParticleForce", "m_flForceScale");
C_OP_PerParticleForce.m_vForce = findOffsetByName(j, "C_OP_PerParticleForce", "m_vForce");
C_OP_PerParticleForce.m_nCP = findOffsetByName(j, "C_OP_PerParticleForce", "m_nCP");

// Atribuições para C_OP_RenderProjected
// C_OP_RenderProjected Offsets
C_OP_RenderProjected.m_bProjectCharacter = findOffsetByName(j, "C_OP_RenderProjected", "m_bProjectCharacter");
C_OP_RenderProjected.m_bProjectWorld = findOffsetByName(j, "C_OP_RenderProjected", "m_bProjectWorld");
C_OP_RenderProjected.m_bProjectWater = findOffsetByName(j, "C_OP_RenderProjected", "m_bProjectWater");
C_OP_RenderProjected.m_bFlipHorizontal = findOffsetByName(j, "C_OP_RenderProjected", "m_bFlipHorizontal");
C_OP_RenderProjected.m_bEnableProjectedDepthControls = findOffsetByName(j, "C_OP_RenderProjected", "m_bEnableProjectedDepthControls");
C_OP_RenderProjected.m_flMinProjectionDepth = findOffsetByName(j, "C_OP_RenderProjected", "m_flMinProjectionDepth");
C_OP_RenderProjected.m_flMaxProjectionDepth = findOffsetByName(j, "C_OP_RenderProjected", "m_flMaxProjectionDepth");
C_OP_RenderProjected.m_vecProjectedMaterials = findOffsetByName(j, "C_OP_RenderProjected", "m_vecProjectedMaterials");
C_OP_RenderProjected.m_flMaterialSelection = findOffsetByName(j, "C_OP_RenderProjected", "m_flMaterialSelection");
C_OP_RenderProjected.m_flAnimationTimeScale = findOffsetByName(j, "C_OP_RenderProjected", "m_flAnimationTimeScale");
C_OP_RenderProjected.m_bOrientToNormal = findOffsetByName(j, "C_OP_RenderProjected", "m_bOrientToNormal");
C_OP_RenderProjected.m_MaterialVars = findOffsetByName(j, "C_OP_RenderProjected", "m_MaterialVars");
C_OP_RenderProjected.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderProjected", "m_flRadiusScale");
C_OP_RenderProjected.m_flAlphaScale = findOffsetByName(j, "C_OP_RenderProjected", "m_flAlphaScale");
C_OP_RenderProjected.m_flRollScale = findOffsetByName(j, "C_OP_RenderProjected", "m_flRollScale");
C_OP_RenderProjected.m_nAlpha2Field = findOffsetByName(j, "C_OP_RenderProjected", "m_nAlpha2Field");
C_OP_RenderProjected.m_vecColorScale = findOffsetByName(j, "C_OP_RenderProjected", "m_vecColorScale");
C_OP_RenderProjected.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderProjected", "m_nColorBlendType");

// Atribuições para C_OP_MaxVelocity
// C_OP_MaxVelocity Offsets
C_OP_MaxVelocity.m_flMaxVelocity = findOffsetByName(j, "C_OP_MaxVelocity", "m_flMaxVelocity");
C_OP_MaxVelocity.m_flMinVelocity = findOffsetByName(j, "C_OP_MaxVelocity", "m_flMinVelocity");
C_OP_MaxVelocity.m_nOverrideCP = findOffsetByName(j, "C_OP_MaxVelocity", "m_nOverrideCP");
C_OP_MaxVelocity.m_nOverrideCPField = findOffsetByName(j, "C_OP_MaxVelocity", "m_nOverrideCPField");

// Atribuições para C_INIT_VelocityFromNormal
// C_INIT_VelocityFromNormal Offsets
C_INIT_VelocityFromNormal.m_fSpeedMin = findOffsetByName(j, "C_INIT_VelocityFromNormal", "m_fSpeedMin");
C_INIT_VelocityFromNormal.m_fSpeedMax = findOffsetByName(j, "C_INIT_VelocityFromNormal", "m_fSpeedMax");
C_INIT_VelocityFromNormal.m_bIgnoreDt = findOffsetByName(j, "C_INIT_VelocityFromNormal", "m_bIgnoreDt");

// Atribuições para C_OP_MaintainEmitter
// C_OP_MaintainEmitter Offsets
C_OP_MaintainEmitter.m_nParticlesToMaintain = findOffsetByName(j, "C_OP_MaintainEmitter", "m_nParticlesToMaintain");
C_OP_MaintainEmitter.m_flStartTime = findOffsetByName(j, "C_OP_MaintainEmitter", "m_flStartTime");
C_OP_MaintainEmitter.m_flEmissionDuration = findOffsetByName(j, "C_OP_MaintainEmitter", "m_flEmissionDuration");
C_OP_MaintainEmitter.m_flEmissionRate = findOffsetByName(j, "C_OP_MaintainEmitter", "m_flEmissionRate");
C_OP_MaintainEmitter.m_nSnapshotControlPoint = findOffsetByName(j, "C_OP_MaintainEmitter", "m_nSnapshotControlPoint");
C_OP_MaintainEmitter.m_bEmitInstantaneously = findOffsetByName(j, "C_OP_MaintainEmitter", "m_bEmitInstantaneously");
C_OP_MaintainEmitter.m_bFinalEmitOnStop = findOffsetByName(j, "C_OP_MaintainEmitter", "m_bFinalEmitOnStop");
C_OP_MaintainEmitter.m_flScale = findOffsetByName(j, "C_OP_MaintainEmitter", "m_flScale");

// Atribuições para C_INIT_PositionOffsetToCP
// C_INIT_PositionOffsetToCP Offsets
C_INIT_PositionOffsetToCP.m_nControlPointNumberStart = findOffsetByName(j, "C_INIT_PositionOffsetToCP", "m_nControlPointNumberStart");
C_INIT_PositionOffsetToCP.m_nControlPointNumberEnd = findOffsetByName(j, "C_INIT_PositionOffsetToCP", "m_nControlPointNumberEnd");
C_INIT_PositionOffsetToCP.m_bLocalCoords = findOffsetByName(j, "C_INIT_PositionOffsetToCP", "m_bLocalCoords");

// Atribuições para C_INIT_RemapInitialTransformDirectionToRotation
// C_INIT_RemapInitialTransformDirectionToRotation Offsets
C_INIT_RemapInitialTransformDirectionToRotation.m_TransformInput = findOffsetByName(j, "C_INIT_RemapInitialTransformDirectionToRotation", "m_TransformInput");
C_INIT_RemapInitialTransformDirectionToRotation.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapInitialTransformDirectionToRotation", "m_nFieldOutput");
C_INIT_RemapInitialTransformDirectionToRotation.m_flOffsetRot = findOffsetByName(j, "C_INIT_RemapInitialTransformDirectionToRotation", "m_flOffsetRot");
C_INIT_RemapInitialTransformDirectionToRotation.m_nComponent = findOffsetByName(j, "C_INIT_RemapInitialTransformDirectionToRotation", "m_nComponent");

// Atribuições para C_OP_FadeAndKill
// C_OP_FadeAndKill Offsets
C_OP_FadeAndKill.m_flStartFadeInTime = findOffsetByName(j, "C_OP_FadeAndKill", "m_flStartFadeInTime");
C_OP_FadeAndKill.m_flEndFadeInTime = findOffsetByName(j, "C_OP_FadeAndKill", "m_flEndFadeInTime");
C_OP_FadeAndKill.m_flStartFadeOutTime = findOffsetByName(j, "C_OP_FadeAndKill", "m_flStartFadeOutTime");
C_OP_FadeAndKill.m_flEndFadeOutTime = findOffsetByName(j, "C_OP_FadeAndKill", "m_flEndFadeOutTime");
C_OP_FadeAndKill.m_flStartAlpha = findOffsetByName(j, "C_OP_FadeAndKill", "m_flStartAlpha");
C_OP_FadeAndKill.m_flEndAlpha = findOffsetByName(j, "C_OP_FadeAndKill", "m_flEndAlpha");
C_OP_FadeAndKill.m_bForcePreserveParticleOrder = findOffsetByName(j, "C_OP_FadeAndKill", "m_bForcePreserveParticleOrder");

// Atribuições para PARTICLE_WORLD_HANDLE__
// PARTICLE_WORLD_HANDLE__ Offsets
PARTICLE_WORLD_HANDLE__.unused = findOffsetByName(j, "PARTICLE_WORLD_HANDLE__", "unused");

// Atribuições para C_OP_ColorInterpolate
// C_OP_ColorInterpolate Offsets
C_OP_ColorInterpolate.m_ColorFade = findOffsetByName(j, "C_OP_ColorInterpolate", "m_ColorFade");
C_OP_ColorInterpolate.m_flFadeStartTime = findOffsetByName(j, "C_OP_ColorInterpolate", "m_flFadeStartTime");
C_OP_ColorInterpolate.m_flFadeEndTime = findOffsetByName(j, "C_OP_ColorInterpolate", "m_flFadeEndTime");
C_OP_ColorInterpolate.m_nFieldOutput = findOffsetByName(j, "C_OP_ColorInterpolate", "m_nFieldOutput");
C_OP_ColorInterpolate.m_bEaseInOut = findOffsetByName(j, "C_OP_ColorInterpolate", "m_bEaseInOut");

// Atribuições para C_OP_RampScalarSpline
// C_OP_RampScalarSpline Offsets
C_OP_RampScalarSpline.m_RateMin = findOffsetByName(j, "C_OP_RampScalarSpline", "m_RateMin");
C_OP_RampScalarSpline.m_RateMax = findOffsetByName(j, "C_OP_RampScalarSpline", "m_RateMax");
C_OP_RampScalarSpline.m_flStartTime_min = findOffsetByName(j, "C_OP_RampScalarSpline", "m_flStartTime_min");
C_OP_RampScalarSpline.m_flStartTime_max = findOffsetByName(j, "C_OP_RampScalarSpline", "m_flStartTime_max");
C_OP_RampScalarSpline.m_flEndTime_min = findOffsetByName(j, "C_OP_RampScalarSpline", "m_flEndTime_min");
C_OP_RampScalarSpline.m_flEndTime_max = findOffsetByName(j, "C_OP_RampScalarSpline", "m_flEndTime_max");
C_OP_RampScalarSpline.m_flBias = findOffsetByName(j, "C_OP_RampScalarSpline", "m_flBias");
C_OP_RampScalarSpline.m_nField = findOffsetByName(j, "C_OP_RampScalarSpline", "m_nField");
C_OP_RampScalarSpline.m_bProportionalOp = findOffsetByName(j, "C_OP_RampScalarSpline", "m_bProportionalOp");
C_OP_RampScalarSpline.m_bEaseOut = findOffsetByName(j, "C_OP_RampScalarSpline", "m_bEaseOut");

// Atribuições para C_OP_SetControlPointFromObjectScale
// C_OP_SetControlPointFromObjectScale Offsets
C_OP_SetControlPointFromObjectScale.m_nCPInput = findOffsetByName(j, "C_OP_SetControlPointFromObjectScale", "m_nCPInput");
C_OP_SetControlPointFromObjectScale.m_nCPOutput = findOffsetByName(j, "C_OP_SetControlPointFromObjectScale", "m_nCPOutput");

// Atribuições para C_OP_MaintainSequentialPath
// C_OP_MaintainSequentialPath Offsets
C_OP_MaintainSequentialPath.m_fMaxDistance = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_fMaxDistance");
C_OP_MaintainSequentialPath.m_flNumToAssign = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_flNumToAssign");
C_OP_MaintainSequentialPath.m_flCohesionStrength = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_flCohesionStrength");
C_OP_MaintainSequentialPath.m_flTolerance = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_flTolerance");
C_OP_MaintainSequentialPath.m_bLoop = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_bLoop");
C_OP_MaintainSequentialPath.m_bUseParticleCount = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_bUseParticleCount");
C_OP_MaintainSequentialPath.m_PathParams = findOffsetByName(j, "C_OP_MaintainSequentialPath", "m_PathParams");

// Atribuições para C_OP_StopAfterCPDuration
// C_OP_StopAfterCPDuration Offsets
C_OP_StopAfterCPDuration.m_flDuration = findOffsetByName(j, "C_OP_StopAfterCPDuration", "m_flDuration");
C_OP_StopAfterCPDuration.m_bDestroyImmediately = findOffsetByName(j, "C_OP_StopAfterCPDuration", "m_bDestroyImmediately");
C_OP_StopAfterCPDuration.m_bPlayEndCap = findOffsetByName(j, "C_OP_StopAfterCPDuration", "m_bPlayEndCap");

// Atribuições para CGeneralSpin
// CGeneralSpin Offsets
CGeneralSpin.m_nSpinRateDegrees = findOffsetByName(j, "CGeneralSpin", "m_nSpinRateDegrees");
CGeneralSpin.m_nSpinRateMinDegrees = findOffsetByName(j, "CGeneralSpin", "m_nSpinRateMinDegrees");
CGeneralSpin.m_fSpinRateStopTime = findOffsetByName(j, "CGeneralSpin", "m_fSpinRateStopTime");

// Atribuições para C_OP_LockToSavedSequentialPath
// C_OP_LockToSavedSequentialPath Offsets
C_OP_LockToSavedSequentialPath.m_flFadeStart = findOffsetByName(j, "C_OP_LockToSavedSequentialPath", "m_flFadeStart");
C_OP_LockToSavedSequentialPath.m_flFadeEnd = findOffsetByName(j, "C_OP_LockToSavedSequentialPath", "m_flFadeEnd");
C_OP_LockToSavedSequentialPath.m_bCPPairs = findOffsetByName(j, "C_OP_LockToSavedSequentialPath", "m_bCPPairs");
C_OP_LockToSavedSequentialPath.m_PathParams = findOffsetByName(j, "C_OP_LockToSavedSequentialPath", "m_PathParams");

// Atribuições para C_INIT_RemapNamedModelElementToScalar
// C_INIT_RemapNamedModelElementToScalar Offsets
C_INIT_RemapNamedModelElementToScalar.m_hModel = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_hModel");
C_INIT_RemapNamedModelElementToScalar.m_names = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_names");
C_INIT_RemapNamedModelElementToScalar.m_values = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_values");
C_INIT_RemapNamedModelElementToScalar.m_nFieldInput = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_nFieldInput");
C_INIT_RemapNamedModelElementToScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_nFieldOutput");
C_INIT_RemapNamedModelElementToScalar.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_nSetMethod");
C_INIT_RemapNamedModelElementToScalar.m_bModelFromRenderer = findOffsetByName(j, "C_INIT_RemapNamedModelElementToScalar", "m_bModelFromRenderer");

// Atribuições para C_OP_ClampVector
// C_OP_ClampVector Offsets
C_OP_ClampVector.m_nFieldOutput = findOffsetByName(j, "C_OP_ClampVector", "m_nFieldOutput");
C_OP_ClampVector.m_vecOutputMin = findOffsetByName(j, "C_OP_ClampVector", "m_vecOutputMin");
C_OP_ClampVector.m_vecOutputMax = findOffsetByName(j, "C_OP_ClampVector", "m_vecOutputMax");

// Atribuições para C_OP_RenderStatusEffectCitadel
// C_OP_RenderStatusEffectCitadel Offsets
C_OP_RenderStatusEffectCitadel.m_pTextureColorWarp = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureColorWarp");
C_OP_RenderStatusEffectCitadel.m_pTextureNormal = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureNormal");
C_OP_RenderStatusEffectCitadel.m_pTextureMetalness = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureMetalness");
C_OP_RenderStatusEffectCitadel.m_pTextureRoughness = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureRoughness");
C_OP_RenderStatusEffectCitadel.m_pTextureSelfIllum = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureSelfIllum");
C_OP_RenderStatusEffectCitadel.m_pTextureDetail = findOffsetByName(j, "C_OP_RenderStatusEffectCitadel", "m_pTextureDetail");

// Atribuições para C_INIT_RemapCPtoScalar
// C_INIT_RemapCPtoScalar Offsets
C_INIT_RemapCPtoScalar.m_nCPInput = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_nCPInput");
C_INIT_RemapCPtoScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_nFieldOutput");
C_INIT_RemapCPtoScalar.m_nField = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_nField");
C_INIT_RemapCPtoScalar.m_flInputMin = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flInputMin");
C_INIT_RemapCPtoScalar.m_flInputMax = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flInputMax");
C_INIT_RemapCPtoScalar.m_flOutputMin = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flOutputMin");
C_INIT_RemapCPtoScalar.m_flOutputMax = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flOutputMax");
C_INIT_RemapCPtoScalar.m_flStartTime = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flStartTime");
C_INIT_RemapCPtoScalar.m_flEndTime = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flEndTime");
C_INIT_RemapCPtoScalar.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_nSetMethod");
C_INIT_RemapCPtoScalar.m_flRemapBias = findOffsetByName(j, "C_INIT_RemapCPtoScalar", "m_flRemapBias");

// Atribuições para C_OP_WindForce
// C_OP_WindForce Offsets
C_OP_WindForce.m_vForce = findOffsetByName(j, "C_OP_WindForce", "m_vForce");

// Atribuições para C_OP_SetVariable
// C_OP_SetVariable Offsets
C_OP_SetVariable.m_variableReference = findOffsetByName(j, "C_OP_SetVariable", "m_variableReference");
C_OP_SetVariable.m_transformInput = findOffsetByName(j, "C_OP_SetVariable", "m_transformInput");
C_OP_SetVariable.m_positionOffset = findOffsetByName(j, "C_OP_SetVariable", "m_positionOffset");
C_OP_SetVariable.m_rotationOffset = findOffsetByName(j, "C_OP_SetVariable", "m_rotationOffset");
C_OP_SetVariable.m_vecInput = findOffsetByName(j, "C_OP_SetVariable", "m_vecInput");
C_OP_SetVariable.m_floatInput = findOffsetByName(j, "C_OP_SetVariable", "m_floatInput");

// Atribuições para C_OP_RenderStandardLight
// C_OP_RenderStandardLight Offsets
C_OP_RenderStandardLight.m_nLightType = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nLightType");
C_OP_RenderStandardLight.m_vecColorScale = findOffsetByName(j, "C_OP_RenderStandardLight", "m_vecColorScale");
C_OP_RenderStandardLight.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nColorBlendType");
C_OP_RenderStandardLight.m_flIntensity = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flIntensity");
C_OP_RenderStandardLight.m_bCastShadows = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bCastShadows");
C_OP_RenderStandardLight.m_flTheta = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flTheta");
C_OP_RenderStandardLight.m_flPhi = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flPhi");
C_OP_RenderStandardLight.m_flRadiusMultiplier = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flRadiusMultiplier");
C_OP_RenderStandardLight.m_nAttenuationStyle = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nAttenuationStyle");
C_OP_RenderStandardLight.m_flFalloffLinearity = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flFalloffLinearity");
C_OP_RenderStandardLight.m_flFiftyPercentFalloff = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flFiftyPercentFalloff");
C_OP_RenderStandardLight.m_flZeroPercentFalloff = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flZeroPercentFalloff");
C_OP_RenderStandardLight.m_bRenderDiffuse = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bRenderDiffuse");
C_OP_RenderStandardLight.m_bRenderSpecular = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bRenderSpecular");
C_OP_RenderStandardLight.m_lightCookie = findOffsetByName(j, "C_OP_RenderStandardLight", "m_lightCookie");
C_OP_RenderStandardLight.m_nPriority = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nPriority");
C_OP_RenderStandardLight.m_nFogLightingMode = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nFogLightingMode");
C_OP_RenderStandardLight.m_flFogContribution = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flFogContribution");
C_OP_RenderStandardLight.m_nCapsuleLightBehavior = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nCapsuleLightBehavior");
C_OP_RenderStandardLight.m_flCapsuleLength = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flCapsuleLength");
C_OP_RenderStandardLight.m_bReverseOrder = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bReverseOrder");
C_OP_RenderStandardLight.m_bClosedLoop = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bClosedLoop");
C_OP_RenderStandardLight.m_nPrevPntSource = findOffsetByName(j, "C_OP_RenderStandardLight", "m_nPrevPntSource");
C_OP_RenderStandardLight.m_flMaxLength = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flMaxLength");
C_OP_RenderStandardLight.m_flMinLength = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flMinLength");
C_OP_RenderStandardLight.m_bIgnoreDT = findOffsetByName(j, "C_OP_RenderStandardLight", "m_bIgnoreDT");
C_OP_RenderStandardLight.m_flConstrainRadiusToLengthRatio = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flConstrainRadiusToLengthRatio");
C_OP_RenderStandardLight.m_flLengthScale = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flLengthScale");
C_OP_RenderStandardLight.m_flLengthFadeInTime = findOffsetByName(j, "C_OP_RenderStandardLight", "m_flLengthFadeInTime");

// Atribuições para C_OP_DistanceToTransform
// C_OP_DistanceToTransform Offsets
C_OP_DistanceToTransform.m_nFieldOutput = findOffsetByName(j, "C_OP_DistanceToTransform", "m_nFieldOutput");
C_OP_DistanceToTransform.m_flInputMin = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flInputMin");
C_OP_DistanceToTransform.m_flInputMax = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flInputMax");
C_OP_DistanceToTransform.m_flOutputMin = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flOutputMin");
C_OP_DistanceToTransform.m_flOutputMax = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flOutputMax");
C_OP_DistanceToTransform.m_TransformStart = findOffsetByName(j, "C_OP_DistanceToTransform", "m_TransformStart");
C_OP_DistanceToTransform.m_bLOS = findOffsetByName(j, "C_OP_DistanceToTransform", "m_bLOS");
C_OP_DistanceToTransform.m_CollisionGroupName = findOffsetByName(j, "C_OP_DistanceToTransform", "m_CollisionGroupName");
C_OP_DistanceToTransform.m_nTraceSet = findOffsetByName(j, "C_OP_DistanceToTransform", "m_nTraceSet");
C_OP_DistanceToTransform.m_flMaxTraceLength = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flMaxTraceLength");
C_OP_DistanceToTransform.m_flLOSScale = findOffsetByName(j, "C_OP_DistanceToTransform", "m_flLOSScale");
C_OP_DistanceToTransform.m_nSetMethod = findOffsetByName(j, "C_OP_DistanceToTransform", "m_nSetMethod");
C_OP_DistanceToTransform.m_bActiveRange = findOffsetByName(j, "C_OP_DistanceToTransform", "m_bActiveRange");
C_OP_DistanceToTransform.m_bAdditive = findOffsetByName(j, "C_OP_DistanceToTransform", "m_bAdditive");
C_OP_DistanceToTransform.m_vecComponentScale = findOffsetByName(j, "C_OP_DistanceToTransform", "m_vecComponentScale");

// Atribuições para C_OP_RemapControlPointOrientationToRotation
// C_OP_RemapControlPointOrientationToRotation Offsets
C_OP_RemapControlPointOrientationToRotation.m_nCP = findOffsetByName(j, "C_OP_RemapControlPointOrientationToRotation", "m_nCP");
C_OP_RemapControlPointOrientationToRotation.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapControlPointOrientationToRotation", "m_nFieldOutput");
C_OP_RemapControlPointOrientationToRotation.m_flOffsetRot = findOffsetByName(j, "C_OP_RemapControlPointOrientationToRotation", "m_flOffsetRot");
C_OP_RemapControlPointOrientationToRotation.m_nComponent = findOffsetByName(j, "C_OP_RemapControlPointOrientationToRotation", "m_nComponent");

// Atribuições para C_OP_SetControlPointToCenter
// C_OP_SetControlPointToCenter Offsets
C_OP_SetControlPointToCenter.m_nCP1 = findOffsetByName(j, "C_OP_SetControlPointToCenter", "m_nCP1");
C_OP_SetControlPointToCenter.m_vecCP1Pos = findOffsetByName(j, "C_OP_SetControlPointToCenter", "m_vecCP1Pos");
C_OP_SetControlPointToCenter.m_bUseAvgParticlePos = findOffsetByName(j, "C_OP_SetControlPointToCenter", "m_bUseAvgParticlePos");
C_OP_SetControlPointToCenter.m_nSetParent = findOffsetByName(j, "C_OP_SetControlPointToCenter", "m_nSetParent");

// Atribuições para C_OP_RemapAverageScalarValuetoCP
// C_OP_RemapAverageScalarValuetoCP Offsets
C_OP_RemapAverageScalarValuetoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_nOutControlPointNumber");
C_OP_RemapAverageScalarValuetoCP.m_nOutVectorField = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_nOutVectorField");
C_OP_RemapAverageScalarValuetoCP.m_nField = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_nField");
C_OP_RemapAverageScalarValuetoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_flInputMin");
C_OP_RemapAverageScalarValuetoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_flInputMax");
C_OP_RemapAverageScalarValuetoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_flOutputMin");
C_OP_RemapAverageScalarValuetoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapAverageScalarValuetoCP", "m_flOutputMax");

// Atribuições para C_OP_RemapDotProductToScalar
// C_OP_RemapDotProductToScalar Offsets
C_OP_RemapDotProductToScalar.m_nInputCP1 = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_nInputCP1");
C_OP_RemapDotProductToScalar.m_nInputCP2 = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_nInputCP2");
C_OP_RemapDotProductToScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_nFieldOutput");
C_OP_RemapDotProductToScalar.m_flInputMin = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_flInputMin");
C_OP_RemapDotProductToScalar.m_flInputMax = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_flInputMax");
C_OP_RemapDotProductToScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_flOutputMin");
C_OP_RemapDotProductToScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_flOutputMax");
C_OP_RemapDotProductToScalar.m_bUseParticleVelocity = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_bUseParticleVelocity");
C_OP_RemapDotProductToScalar.m_nSetMethod = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_nSetMethod");
C_OP_RemapDotProductToScalar.m_bActiveRange = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_bActiveRange");
C_OP_RemapDotProductToScalar.m_bUseParticleNormal = findOffsetByName(j, "C_OP_RemapDotProductToScalar", "m_bUseParticleNormal");

// Atribuições para C_OP_RemapCPtoCP
// C_OP_RemapCPtoCP Offsets
C_OP_RemapCPtoCP.m_nInputControlPoint = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_nInputControlPoint");
C_OP_RemapCPtoCP.m_nOutputControlPoint = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_nOutputControlPoint");
C_OP_RemapCPtoCP.m_nInputField = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_nInputField");
C_OP_RemapCPtoCP.m_nOutputField = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_nOutputField");
C_OP_RemapCPtoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_flInputMin");
C_OP_RemapCPtoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_flInputMax");
C_OP_RemapCPtoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_flOutputMin");
C_OP_RemapCPtoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_flOutputMax");
C_OP_RemapCPtoCP.m_bDerivative = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_bDerivative");
C_OP_RemapCPtoCP.m_flInterpRate = findOffsetByName(j, "C_OP_RemapCPtoCP", "m_flInterpRate");

// Atribuições para C_OP_SetControlPointRotation
// C_OP_SetControlPointRotation Offsets
C_OP_SetControlPointRotation.m_vecRotAxis = findOffsetByName(j, "C_OP_SetControlPointRotation", "m_vecRotAxis");
C_OP_SetControlPointRotation.m_flRotRate = findOffsetByName(j, "C_OP_SetControlPointRotation", "m_flRotRate");
C_OP_SetControlPointRotation.m_nCP = findOffsetByName(j, "C_OP_SetControlPointRotation", "m_nCP");
C_OP_SetControlPointRotation.m_nLocalCP = findOffsetByName(j, "C_OP_SetControlPointRotation", "m_nLocalCP");

// Atribuições para C_OP_CurlNoiseForce
// C_OP_CurlNoiseForce Offsets
C_OP_CurlNoiseForce.m_nNoiseType = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_nNoiseType");
C_OP_CurlNoiseForce.m_vecNoiseFreq = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_vecNoiseFreq");
C_OP_CurlNoiseForce.m_vecNoiseScale = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_vecNoiseScale");
C_OP_CurlNoiseForce.m_vecOffset = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_vecOffset");
C_OP_CurlNoiseForce.m_vecOffsetRate = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_vecOffsetRate");
C_OP_CurlNoiseForce.m_flWorleySeed = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_flWorleySeed");
C_OP_CurlNoiseForce.m_flWorleyJitter = findOffsetByName(j, "C_OP_CurlNoiseForce", "m_flWorleyJitter");

// Atribuições para C_INIT_Orient2DRelToCP
// C_INIT_Orient2DRelToCP Offsets
C_INIT_Orient2DRelToCP.m_nCP = findOffsetByName(j, "C_INIT_Orient2DRelToCP", "m_nCP");
C_INIT_Orient2DRelToCP.m_nFieldOutput = findOffsetByName(j, "C_INIT_Orient2DRelToCP", "m_nFieldOutput");
C_INIT_Orient2DRelToCP.m_flRotOffset = findOffsetByName(j, "C_INIT_Orient2DRelToCP", "m_flRotOffset");

// Atribuições para C_OP_SetSimulationRate
// C_OP_SetSimulationRate Offsets
C_OP_SetSimulationRate.m_flSimulationScale = findOffsetByName(j, "C_OP_SetSimulationRate", "m_flSimulationScale");

// Atribuições para C_OP_FadeIn
// C_OP_FadeIn Offsets
C_OP_FadeIn.m_flFadeInTimeMin = findOffsetByName(j, "C_OP_FadeIn", "m_flFadeInTimeMin");
C_OP_FadeIn.m_flFadeInTimeMax = findOffsetByName(j, "C_OP_FadeIn", "m_flFadeInTimeMax");
C_OP_FadeIn.m_flFadeInTimeExp = findOffsetByName(j, "C_OP_FadeIn", "m_flFadeInTimeExp");
C_OP_FadeIn.m_bProportional = findOffsetByName(j, "C_OP_FadeIn", "m_bProportional");

// Atribuições para C_OP_RenderScreenShake
// C_OP_RenderScreenShake Offsets
C_OP_RenderScreenShake.m_flDurationScale = findOffsetByName(j, "C_OP_RenderScreenShake", "m_flDurationScale");
C_OP_RenderScreenShake.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderScreenShake", "m_flRadiusScale");
C_OP_RenderScreenShake.m_flFrequencyScale = findOffsetByName(j, "C_OP_RenderScreenShake", "m_flFrequencyScale");
C_OP_RenderScreenShake.m_flAmplitudeScale = findOffsetByName(j, "C_OP_RenderScreenShake", "m_flAmplitudeScale");
C_OP_RenderScreenShake.m_nRadiusField = findOffsetByName(j, "C_OP_RenderScreenShake", "m_nRadiusField");
C_OP_RenderScreenShake.m_nDurationField = findOffsetByName(j, "C_OP_RenderScreenShake", "m_nDurationField");
C_OP_RenderScreenShake.m_nFrequencyField = findOffsetByName(j, "C_OP_RenderScreenShake", "m_nFrequencyField");
C_OP_RenderScreenShake.m_nAmplitudeField = findOffsetByName(j, "C_OP_RenderScreenShake", "m_nAmplitudeField");
C_OP_RenderScreenShake.m_nFilterCP = findOffsetByName(j, "C_OP_RenderScreenShake", "m_nFilterCP");

// Atribuições para C_OP_RemapBoundingVolumetoCP
// C_OP_RemapBoundingVolumetoCP Offsets
C_OP_RemapBoundingVolumetoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapBoundingVolumetoCP", "m_nOutControlPointNumber");
C_OP_RemapBoundingVolumetoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapBoundingVolumetoCP", "m_flInputMin");
C_OP_RemapBoundingVolumetoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapBoundingVolumetoCP", "m_flInputMax");
C_OP_RemapBoundingVolumetoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapBoundingVolumetoCP", "m_flOutputMin");
C_OP_RemapBoundingVolumetoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapBoundingVolumetoCP", "m_flOutputMax");

// Atribuições para C_OP_HSVShiftToCP
// C_OP_HSVShiftToCP Offsets
C_OP_HSVShiftToCP.m_nColorCP = findOffsetByName(j, "C_OP_HSVShiftToCP", "m_nColorCP");
C_OP_HSVShiftToCP.m_nColorGemEnableCP = findOffsetByName(j, "C_OP_HSVShiftToCP", "m_nColorGemEnableCP");
C_OP_HSVShiftToCP.m_nOutputCP = findOffsetByName(j, "C_OP_HSVShiftToCP", "m_nOutputCP");
C_OP_HSVShiftToCP.m_DefaultHSVColor = findOffsetByName(j, "C_OP_HSVShiftToCP", "m_DefaultHSVColor");

// Atribuições para C_INIT_GlobalScale
// C_INIT_GlobalScale Offsets
C_INIT_GlobalScale.m_flScale = findOffsetByName(j, "C_INIT_GlobalScale", "m_flScale");
C_INIT_GlobalScale.m_nScaleControlPointNumber = findOffsetByName(j, "C_INIT_GlobalScale", "m_nScaleControlPointNumber");
C_INIT_GlobalScale.m_nControlPointNumber = findOffsetByName(j, "C_INIT_GlobalScale", "m_nControlPointNumber");
C_INIT_GlobalScale.m_bScaleRadius = findOffsetByName(j, "C_INIT_GlobalScale", "m_bScaleRadius");
C_INIT_GlobalScale.m_bScalePosition = findOffsetByName(j, "C_INIT_GlobalScale", "m_bScalePosition");
C_INIT_GlobalScale.m_bScaleVelocity = findOffsetByName(j, "C_INIT_GlobalScale", "m_bScaleVelocity");

// Atribuições para C_INIT_RadiusFromCPObject
// C_INIT_RadiusFromCPObject Offsets
C_INIT_RadiusFromCPObject.m_nControlPoint = findOffsetByName(j, "C_INIT_RadiusFromCPObject", "m_nControlPoint");

// Atribuições para C_INIT_InitialVelocityFromHitbox
// C_INIT_InitialVelocityFromHitbox Offsets
C_INIT_InitialVelocityFromHitbox.m_flVelocityMin = findOffsetByName(j, "C_INIT_InitialVelocityFromHitbox", "m_flVelocityMin");
C_INIT_InitialVelocityFromHitbox.m_flVelocityMax = findOffsetByName(j, "C_INIT_InitialVelocityFromHitbox", "m_flVelocityMax");
C_INIT_InitialVelocityFromHitbox.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitialVelocityFromHitbox", "m_nControlPointNumber");
C_INIT_InitialVelocityFromHitbox.m_HitboxSetName = findOffsetByName(j, "C_INIT_InitialVelocityFromHitbox", "m_HitboxSetName");
C_INIT_InitialVelocityFromHitbox.m_bUseBones = findOffsetByName(j, "C_INIT_InitialVelocityFromHitbox", "m_bUseBones");

// Atribuições para C_OP_LerpVector
// C_OP_LerpVector Offsets
C_OP_LerpVector.m_nFieldOutput = findOffsetByName(j, "C_OP_LerpVector", "m_nFieldOutput");
C_OP_LerpVector.m_vecOutput = findOffsetByName(j, "C_OP_LerpVector", "m_vecOutput");
C_OP_LerpVector.m_flStartTime = findOffsetByName(j, "C_OP_LerpVector", "m_flStartTime");
C_OP_LerpVector.m_flEndTime = findOffsetByName(j, "C_OP_LerpVector", "m_flEndTime");
C_OP_LerpVector.m_nSetMethod = findOffsetByName(j, "C_OP_LerpVector", "m_nSetMethod");

// Atribuições para C_OP_SetControlPointFieldToWater
// C_OP_SetControlPointFieldToWater Offsets
C_OP_SetControlPointFieldToWater.m_nSourceCP = findOffsetByName(j, "C_OP_SetControlPointFieldToWater", "m_nSourceCP");
C_OP_SetControlPointFieldToWater.m_nDestCP = findOffsetByName(j, "C_OP_SetControlPointFieldToWater", "m_nDestCP");
C_OP_SetControlPointFieldToWater.m_nCPField = findOffsetByName(j, "C_OP_SetControlPointFieldToWater", "m_nCPField");

// Atribuições para TextureGroup_t
// TextureGroup_t Offsets
TextureGroup_t.m_bEnabled = findOffsetByName(j, "TextureGroup_t", "m_bEnabled");
TextureGroup_t.m_bReplaceTextureWithGradient = findOffsetByName(j, "TextureGroup_t", "m_bReplaceTextureWithGradient");
TextureGroup_t.m_hTexture = findOffsetByName(j, "TextureGroup_t", "m_hTexture");
TextureGroup_t.m_Gradient = findOffsetByName(j, "TextureGroup_t", "m_Gradient");
TextureGroup_t.m_nTextureType = findOffsetByName(j, "TextureGroup_t", "m_nTextureType");
TextureGroup_t.m_nTextureChannels = findOffsetByName(j, "TextureGroup_t", "m_nTextureChannels");
TextureGroup_t.m_nTextureBlendMode = findOffsetByName(j, "TextureGroup_t", "m_nTextureBlendMode");
TextureGroup_t.m_flTextureBlend = findOffsetByName(j, "TextureGroup_t", "m_flTextureBlend");
TextureGroup_t.m_TextureControls = findOffsetByName(j, "TextureGroup_t", "m_TextureControls");

// Atribuições para C_OP_TimeVaryingForce
// C_OP_TimeVaryingForce Offsets
C_OP_TimeVaryingForce.m_flStartLerpTime = findOffsetByName(j, "C_OP_TimeVaryingForce", "m_flStartLerpTime");
C_OP_TimeVaryingForce.m_StartingForce = findOffsetByName(j, "C_OP_TimeVaryingForce", "m_StartingForce");
C_OP_TimeVaryingForce.m_flEndLerpTime = findOffsetByName(j, "C_OP_TimeVaryingForce", "m_flEndLerpTime");
C_OP_TimeVaryingForce.m_EndingForce = findOffsetByName(j, "C_OP_TimeVaryingForce", "m_EndingForce");

// Atribuições para C_OP_SetCPOrientationToGroundNormal
// C_OP_SetCPOrientationToGroundNormal Offsets
C_OP_SetCPOrientationToGroundNormal.m_flInterpRate = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_flInterpRate");
C_OP_SetCPOrientationToGroundNormal.m_flMaxTraceLength = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_flMaxTraceLength");
C_OP_SetCPOrientationToGroundNormal.m_flTolerance = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_flTolerance");
C_OP_SetCPOrientationToGroundNormal.m_flTraceOffset = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_flTraceOffset");
C_OP_SetCPOrientationToGroundNormal.m_CollisionGroupName = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_CollisionGroupName");
C_OP_SetCPOrientationToGroundNormal.m_nTraceSet = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_nTraceSet");
C_OP_SetCPOrientationToGroundNormal.m_nInputCP = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_nInputCP");
C_OP_SetCPOrientationToGroundNormal.m_nOutputCP = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_nOutputCP");
C_OP_SetCPOrientationToGroundNormal.m_bIncludeWater = findOffsetByName(j, "C_OP_SetCPOrientationToGroundNormal", "m_bIncludeWater");

// Atribuições para C_OP_SnapshotSkinToBones
// C_OP_SnapshotSkinToBones Offsets
C_OP_SnapshotSkinToBones.m_bTransformNormals = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_bTransformNormals");
C_OP_SnapshotSkinToBones.m_bTransformRadii = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_bTransformRadii");
C_OP_SnapshotSkinToBones.m_nControlPointNumber = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_nControlPointNumber");
C_OP_SnapshotSkinToBones.m_flLifeTimeFadeStart = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_flLifeTimeFadeStart");
C_OP_SnapshotSkinToBones.m_flLifeTimeFadeEnd = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_flLifeTimeFadeEnd");
C_OP_SnapshotSkinToBones.m_flJumpThreshold = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_flJumpThreshold");
C_OP_SnapshotSkinToBones.m_flPrevPosScale = findOffsetByName(j, "C_OP_SnapshotSkinToBones", "m_flPrevPosScale");

// Atribuições para C_INIT_CreateWithinSphereTransform
// C_INIT_CreateWithinSphereTransform Offsets
C_INIT_CreateWithinSphereTransform.m_fRadiusMin = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_fRadiusMin");
C_INIT_CreateWithinSphereTransform.m_fRadiusMax = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_fRadiusMax");
C_INIT_CreateWithinSphereTransform.m_vecDistanceBias = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_vecDistanceBias");
C_INIT_CreateWithinSphereTransform.m_vecDistanceBiasAbs = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_vecDistanceBiasAbs");
C_INIT_CreateWithinSphereTransform.m_TransformInput = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_TransformInput");
C_INIT_CreateWithinSphereTransform.m_fSpeedMin = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_fSpeedMin");
C_INIT_CreateWithinSphereTransform.m_fSpeedMax = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_fSpeedMax");
C_INIT_CreateWithinSphereTransform.m_fSpeedRandExp = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_fSpeedRandExp");
C_INIT_CreateWithinSphereTransform.m_bLocalCoords = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_bLocalCoords");
C_INIT_CreateWithinSphereTransform.m_flEndCPGrowthTime = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_flEndCPGrowthTime");
C_INIT_CreateWithinSphereTransform.m_LocalCoordinateSystemSpeedMin = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_LocalCoordinateSystemSpeedMin");
C_INIT_CreateWithinSphereTransform.m_LocalCoordinateSystemSpeedMax = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_LocalCoordinateSystemSpeedMax");
C_INIT_CreateWithinSphereTransform.m_nFieldOutput = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_nFieldOutput");
C_INIT_CreateWithinSphereTransform.m_nFieldVelocity = findOffsetByName(j, "C_INIT_CreateWithinSphereTransform", "m_nFieldVelocity");

// Atribuições para C_OP_RadiusDecay
// C_OP_RadiusDecay Offsets
C_OP_RadiusDecay.m_flMinRadius = findOffsetByName(j, "C_OP_RadiusDecay", "m_flMinRadius");

// Atribuições para C_INIT_RemapScalarToVector
// C_INIT_RemapScalarToVector Offsets
C_INIT_RemapScalarToVector.m_nFieldInput = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_nFieldInput");
C_INIT_RemapScalarToVector.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_nFieldOutput");
C_INIT_RemapScalarToVector.m_flInputMin = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_flInputMin");
C_INIT_RemapScalarToVector.m_flInputMax = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_flInputMax");
C_INIT_RemapScalarToVector.m_vecOutputMin = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_vecOutputMin");
C_INIT_RemapScalarToVector.m_vecOutputMax = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_vecOutputMax");
C_INIT_RemapScalarToVector.m_flStartTime = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_flStartTime");
C_INIT_RemapScalarToVector.m_flEndTime = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_flEndTime");
C_INIT_RemapScalarToVector.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_nSetMethod");
C_INIT_RemapScalarToVector.m_nControlPointNumber = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_nControlPointNumber");
C_INIT_RemapScalarToVector.m_bLocalCoords = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_bLocalCoords");
C_INIT_RemapScalarToVector.m_flRemapBias = findOffsetByName(j, "C_INIT_RemapScalarToVector", "m_flRemapBias");

// Atribuições para C_INIT_InitialSequenceFromModel
// C_INIT_InitialSequenceFromModel Offsets
C_INIT_InitialSequenceFromModel.m_nControlPointNumber = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_nControlPointNumber");
C_INIT_InitialSequenceFromModel.m_nFieldOutput = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_nFieldOutput");
C_INIT_InitialSequenceFromModel.m_nFieldOutputAnim = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_nFieldOutputAnim");
C_INIT_InitialSequenceFromModel.m_flInputMin = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_flInputMin");
C_INIT_InitialSequenceFromModel.m_flInputMax = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_flInputMax");
C_INIT_InitialSequenceFromModel.m_flOutputMin = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_flOutputMin");
C_INIT_InitialSequenceFromModel.m_flOutputMax = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_flOutputMax");
C_INIT_InitialSequenceFromModel.m_nSetMethod = findOffsetByName(j, "C_INIT_InitialSequenceFromModel", "m_nSetMethod");

// Atribuições para C_OP_NoiseEmitter
// C_OP_NoiseEmitter Offsets
C_OP_NoiseEmitter.m_flEmissionDuration = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flEmissionDuration");
C_OP_NoiseEmitter.m_flStartTime = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flStartTime");
C_OP_NoiseEmitter.m_flEmissionScale = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flEmissionScale");
C_OP_NoiseEmitter.m_nScaleControlPoint = findOffsetByName(j, "C_OP_NoiseEmitter", "m_nScaleControlPoint");
C_OP_NoiseEmitter.m_nScaleControlPointField = findOffsetByName(j, "C_OP_NoiseEmitter", "m_nScaleControlPointField");
C_OP_NoiseEmitter.m_nWorldNoisePoint = findOffsetByName(j, "C_OP_NoiseEmitter", "m_nWorldNoisePoint");
C_OP_NoiseEmitter.m_bAbsVal = findOffsetByName(j, "C_OP_NoiseEmitter", "m_bAbsVal");
C_OP_NoiseEmitter.m_bAbsValInv = findOffsetByName(j, "C_OP_NoiseEmitter", "m_bAbsValInv");
C_OP_NoiseEmitter.m_flOffset = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flOffset");
C_OP_NoiseEmitter.m_flOutputMin = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flOutputMin");
C_OP_NoiseEmitter.m_flOutputMax = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flOutputMax");
C_OP_NoiseEmitter.m_flNoiseScale = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flNoiseScale");
C_OP_NoiseEmitter.m_flWorldNoiseScale = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flWorldNoiseScale");
C_OP_NoiseEmitter.m_vecOffsetLoc = findOffsetByName(j, "C_OP_NoiseEmitter", "m_vecOffsetLoc");
C_OP_NoiseEmitter.m_flWorldTimeScale = findOffsetByName(j, "C_OP_NoiseEmitter", "m_flWorldTimeScale");

// Atribuições para CParticleFunctionInitializer
// CParticleFunctionInitializer Offsets
CParticleFunctionInitializer.m_nAssociatedEmitterIndex = findOffsetByName(j, "CParticleFunctionInitializer", "m_nAssociatedEmitterIndex");

// Atribuições para C_OP_SelectivelyEnableChildren
// C_OP_SelectivelyEnableChildren Offsets
C_OP_SelectivelyEnableChildren.m_nChildGroupID = findOffsetByName(j, "C_OP_SelectivelyEnableChildren", "m_nChildGroupID");
C_OP_SelectivelyEnableChildren.m_nFirstChild = findOffsetByName(j, "C_OP_SelectivelyEnableChildren", "m_nFirstChild");
C_OP_SelectivelyEnableChildren.m_nNumChildrenToEnable = findOffsetByName(j, "C_OP_SelectivelyEnableChildren", "m_nNumChildrenToEnable");
C_OP_SelectivelyEnableChildren.m_bPlayEndcapOnStop = findOffsetByName(j, "C_OP_SelectivelyEnableChildren", "m_bPlayEndcapOnStop");
C_OP_SelectivelyEnableChildren.m_bDestroyImmediately = findOffsetByName(j, "C_OP_SelectivelyEnableChildren", "m_bDestroyImmediately");

// Atribuições para ModelReference_t
// ModelReference_t Offsets
ModelReference_t.m_model = findOffsetByName(j, "ModelReference_t", "m_model");
ModelReference_t.m_flRelativeProbabilityOfSpawn = findOffsetByName(j, "ModelReference_t", "m_flRelativeProbabilityOfSpawn");

// Atribuições para C_OP_PlanarConstraint
// C_OP_PlanarConstraint Offsets
C_OP_PlanarConstraint.m_PointOnPlane = findOffsetByName(j, "C_OP_PlanarConstraint", "m_PointOnPlane");
C_OP_PlanarConstraint.m_PlaneNormal = findOffsetByName(j, "C_OP_PlanarConstraint", "m_PlaneNormal");
C_OP_PlanarConstraint.m_nControlPointNumber = findOffsetByName(j, "C_OP_PlanarConstraint", "m_nControlPointNumber");
C_OP_PlanarConstraint.m_bGlobalOrigin = findOffsetByName(j, "C_OP_PlanarConstraint", "m_bGlobalOrigin");
C_OP_PlanarConstraint.m_bGlobalNormal = findOffsetByName(j, "C_OP_PlanarConstraint", "m_bGlobalNormal");
C_OP_PlanarConstraint.m_flRadiusScale = findOffsetByName(j, "C_OP_PlanarConstraint", "m_flRadiusScale");
C_OP_PlanarConstraint.m_flMaximumDistanceToCP = findOffsetByName(j, "C_OP_PlanarConstraint", "m_flMaximumDistanceToCP");
C_OP_PlanarConstraint.m_bUseOldCode = findOffsetByName(j, "C_OP_PlanarConstraint", "m_bUseOldCode");

// Atribuições para C_INIT_CreateFromCPs
// C_INIT_CreateFromCPs Offsets
C_INIT_CreateFromCPs.m_nIncrement = findOffsetByName(j, "C_INIT_CreateFromCPs", "m_nIncrement");
C_INIT_CreateFromCPs.m_nMinCP = findOffsetByName(j, "C_INIT_CreateFromCPs", "m_nMinCP");
C_INIT_CreateFromCPs.m_nMaxCP = findOffsetByName(j, "C_INIT_CreateFromCPs", "m_nMaxCP");
C_INIT_CreateFromCPs.m_nDynamicCPCount = findOffsetByName(j, "C_INIT_CreateFromCPs", "m_nDynamicCPCount");

// Atribuições para C_OP_LockPoints
// C_OP_LockPoints Offsets
C_OP_LockPoints.m_nMinCol = findOffsetByName(j, "C_OP_LockPoints", "m_nMinCol");
C_OP_LockPoints.m_nMaxCol = findOffsetByName(j, "C_OP_LockPoints", "m_nMaxCol");
C_OP_LockPoints.m_nMinRow = findOffsetByName(j, "C_OP_LockPoints", "m_nMinRow");
C_OP_LockPoints.m_nMaxRow = findOffsetByName(j, "C_OP_LockPoints", "m_nMaxRow");
C_OP_LockPoints.m_nControlPoint = findOffsetByName(j, "C_OP_LockPoints", "m_nControlPoint");
C_OP_LockPoints.m_flBlendValue = findOffsetByName(j, "C_OP_LockPoints", "m_flBlendValue");

// Atribuições para C_INIT_CreateSpiralSphere
// C_INIT_CreateSpiralSphere Offsets
C_INIT_CreateSpiralSphere.m_nControlPointNumber = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_nControlPointNumber");
C_INIT_CreateSpiralSphere.m_nOverrideCP = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_nOverrideCP");
C_INIT_CreateSpiralSphere.m_nDensity = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_nDensity");
C_INIT_CreateSpiralSphere.m_flInitialRadius = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_flInitialRadius");
C_INIT_CreateSpiralSphere.m_flInitialSpeedMin = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_flInitialSpeedMin");
C_INIT_CreateSpiralSphere.m_flInitialSpeedMax = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_flInitialSpeedMax");
C_INIT_CreateSpiralSphere.m_bUseParticleCount = findOffsetByName(j, "C_INIT_CreateSpiralSphere", "m_bUseParticleCount");

// Atribuições para C_OP_CPVelocityForce
// C_OP_CPVelocityForce Offsets
C_OP_CPVelocityForce.m_nControlPointNumber = findOffsetByName(j, "C_OP_CPVelocityForce", "m_nControlPointNumber");
C_OP_CPVelocityForce.m_flScale = findOffsetByName(j, "C_OP_CPVelocityForce", "m_flScale");

// Atribuições para C_OP_RemapNamedModelElementEndCap
// C_OP_RemapNamedModelElementEndCap Offsets
C_OP_RemapNamedModelElementEndCap.m_hModel = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_hModel");
C_OP_RemapNamedModelElementEndCap.m_inNames = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_inNames");
C_OP_RemapNamedModelElementEndCap.m_outNames = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_outNames");
C_OP_RemapNamedModelElementEndCap.m_fallbackNames = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_fallbackNames");
C_OP_RemapNamedModelElementEndCap.m_bModelFromRenderer = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_bModelFromRenderer");
C_OP_RemapNamedModelElementEndCap.m_nFieldInput = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_nFieldInput");
C_OP_RemapNamedModelElementEndCap.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapNamedModelElementEndCap", "m_nFieldOutput");

// Atribuições para C_INIT_ScaleVelocity
// C_INIT_ScaleVelocity Offsets
C_INIT_ScaleVelocity.m_vecScale = findOffsetByName(j, "C_INIT_ScaleVelocity", "m_vecScale");

// Atribuições para C_OP_MoveToHitbox
// C_OP_MoveToHitbox Offsets
C_OP_MoveToHitbox.m_modelInput = findOffsetByName(j, "C_OP_MoveToHitbox", "m_modelInput");
C_OP_MoveToHitbox.m_transformInput = findOffsetByName(j, "C_OP_MoveToHitbox", "m_transformInput");
C_OP_MoveToHitbox.m_flLifeTimeLerpStart = findOffsetByName(j, "C_OP_MoveToHitbox", "m_flLifeTimeLerpStart");
C_OP_MoveToHitbox.m_flLifeTimeLerpEnd = findOffsetByName(j, "C_OP_MoveToHitbox", "m_flLifeTimeLerpEnd");
C_OP_MoveToHitbox.m_flPrevPosScale = findOffsetByName(j, "C_OP_MoveToHitbox", "m_flPrevPosScale");
C_OP_MoveToHitbox.m_HitboxSetName = findOffsetByName(j, "C_OP_MoveToHitbox", "m_HitboxSetName");
C_OP_MoveToHitbox.m_bUseBones = findOffsetByName(j, "C_OP_MoveToHitbox", "m_bUseBones");
C_OP_MoveToHitbox.m_nLerpType = findOffsetByName(j, "C_OP_MoveToHitbox", "m_nLerpType");
C_OP_MoveToHitbox.m_flInterpolation = findOffsetByName(j, "C_OP_MoveToHitbox", "m_flInterpolation");

// Atribuições para CParticleFloatInput
// CParticleFloatInput Offsets
CParticleFloatInput.m_nType = findOffsetByName(j, "CParticleFloatInput", "m_nType");
CParticleFloatInput.m_nMapType = findOffsetByName(j, "CParticleFloatInput", "m_nMapType");
CParticleFloatInput.m_flLiteralValue = findOffsetByName(j, "CParticleFloatInput", "m_flLiteralValue");
CParticleFloatInput.m_NamedValue = findOffsetByName(j, "CParticleFloatInput", "m_NamedValue");
CParticleFloatInput.m_nControlPoint = findOffsetByName(j, "CParticleFloatInput", "m_nControlPoint");
CParticleFloatInput.m_nScalarAttribute = findOffsetByName(j, "CParticleFloatInput", "m_nScalarAttribute");
CParticleFloatInput.m_nVectorAttribute = findOffsetByName(j, "CParticleFloatInput", "m_nVectorAttribute");
CParticleFloatInput.m_nVectorComponent = findOffsetByName(j, "CParticleFloatInput", "m_nVectorComponent");
CParticleFloatInput.m_flRandomMin = findOffsetByName(j, "CParticleFloatInput", "m_flRandomMin");
CParticleFloatInput.m_flRandomMax = findOffsetByName(j, "CParticleFloatInput", "m_flRandomMax");
CParticleFloatInput.m_bHasRandomSignFlip = findOffsetByName(j, "CParticleFloatInput", "m_bHasRandomSignFlip");
CParticleFloatInput.m_nRandomSeed = findOffsetByName(j, "CParticleFloatInput", "m_nRandomSeed");
CParticleFloatInput.m_nRandomMode = findOffsetByName(j, "CParticleFloatInput", "m_nRandomMode");
CParticleFloatInput.m_flLOD0 = findOffsetByName(j, "CParticleFloatInput", "m_flLOD0");
CParticleFloatInput.m_flLOD1 = findOffsetByName(j, "CParticleFloatInput", "m_flLOD1");
CParticleFloatInput.m_flLOD2 = findOffsetByName(j, "CParticleFloatInput", "m_flLOD2");
CParticleFloatInput.m_flLOD3 = findOffsetByName(j, "CParticleFloatInput", "m_flLOD3");
CParticleFloatInput.m_nNoiseInputVectorAttribute = findOffsetByName(j, "CParticleFloatInput", "m_nNoiseInputVectorAttribute");
CParticleFloatInput.m_flNoiseOutputMin = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseOutputMin");
CParticleFloatInput.m_flNoiseOutputMax = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseOutputMax");
CParticleFloatInput.m_flNoiseScale = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseScale");
CParticleFloatInput.m_vecNoiseOffsetRate = findOffsetByName(j, "CParticleFloatInput", "m_vecNoiseOffsetRate");
CParticleFloatInput.m_flNoiseOffset = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseOffset");
CParticleFloatInput.m_nNoiseOctaves = findOffsetByName(j, "CParticleFloatInput", "m_nNoiseOctaves");
CParticleFloatInput.m_nNoiseTurbulence = findOffsetByName(j, "CParticleFloatInput", "m_nNoiseTurbulence");
CParticleFloatInput.m_nNoiseType = findOffsetByName(j, "CParticleFloatInput", "m_nNoiseType");
CParticleFloatInput.m_nNoiseModifier = findOffsetByName(j, "CParticleFloatInput", "m_nNoiseModifier");
CParticleFloatInput.m_flNoiseTurbulenceScale = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseTurbulenceScale");
CParticleFloatInput.m_flNoiseTurbulenceMix = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseTurbulenceMix");
CParticleFloatInput.m_flNoiseImgPreviewScale = findOffsetByName(j, "CParticleFloatInput", "m_flNoiseImgPreviewScale");
CParticleFloatInput.m_bNoiseImgPreviewLive = findOffsetByName(j, "CParticleFloatInput", "m_bNoiseImgPreviewLive");
CParticleFloatInput.m_flNoCameraFallback = findOffsetByName(j, "CParticleFloatInput", "m_flNoCameraFallback");
CParticleFloatInput.m_bUseBoundsCenter = findOffsetByName(j, "CParticleFloatInput", "m_bUseBoundsCenter");
CParticleFloatInput.m_nInputMode = findOffsetByName(j, "CParticleFloatInput", "m_nInputMode");
CParticleFloatInput.m_flMultFactor = findOffsetByName(j, "CParticleFloatInput", "m_flMultFactor");
CParticleFloatInput.m_flInput0 = findOffsetByName(j, "CParticleFloatInput", "m_flInput0");
CParticleFloatInput.m_flInput1 = findOffsetByName(j, "CParticleFloatInput", "m_flInput1");
CParticleFloatInput.m_flOutput0 = findOffsetByName(j, "CParticleFloatInput", "m_flOutput0");
CParticleFloatInput.m_flOutput1 = findOffsetByName(j, "CParticleFloatInput", "m_flOutput1");
CParticleFloatInput.m_flNotchedRangeMin = findOffsetByName(j, "CParticleFloatInput", "m_flNotchedRangeMin");
CParticleFloatInput.m_flNotchedRangeMax = findOffsetByName(j, "CParticleFloatInput", "m_flNotchedRangeMax");
CParticleFloatInput.m_flNotchedOutputOutside = findOffsetByName(j, "CParticleFloatInput", "m_flNotchedOutputOutside");
CParticleFloatInput.m_flNotchedOutputInside = findOffsetByName(j, "CParticleFloatInput", "m_flNotchedOutputInside");
CParticleFloatInput.m_nRoundType = findOffsetByName(j, "CParticleFloatInput", "m_nRoundType");
CParticleFloatInput.m_nBiasType = findOffsetByName(j, "CParticleFloatInput", "m_nBiasType");
CParticleFloatInput.m_flBiasParameter = findOffsetByName(j, "CParticleFloatInput", "m_flBiasParameter");
CParticleFloatInput.m_Curve = findOffsetByName(j, "CParticleFloatInput", "m_Curve");

// Atribuições para C_INIT_PointList
// C_INIT_PointList Offsets
C_INIT_PointList.m_nFieldOutput = findOffsetByName(j, "C_INIT_PointList", "m_nFieldOutput");
C_INIT_PointList.m_pointList = findOffsetByName(j, "C_INIT_PointList", "m_pointList");
C_INIT_PointList.m_bPlaceAlongPath = findOffsetByName(j, "C_INIT_PointList", "m_bPlaceAlongPath");
C_INIT_PointList.m_bClosedLoop = findOffsetByName(j, "C_INIT_PointList", "m_bClosedLoop");
C_INIT_PointList.m_nNumPointsAlongPath = findOffsetByName(j, "C_INIT_PointList", "m_nNumPointsAlongPath");

// Atribuições para C_OP_LerpToOtherAttribute
// C_OP_LerpToOtherAttribute Offsets
C_OP_LerpToOtherAttribute.m_flInterpolation = findOffsetByName(j, "C_OP_LerpToOtherAttribute", "m_flInterpolation");
C_OP_LerpToOtherAttribute.m_nFieldInputFrom = findOffsetByName(j, "C_OP_LerpToOtherAttribute", "m_nFieldInputFrom");
C_OP_LerpToOtherAttribute.m_nFieldInput = findOffsetByName(j, "C_OP_LerpToOtherAttribute", "m_nFieldInput");
C_OP_LerpToOtherAttribute.m_nFieldOutput = findOffsetByName(j, "C_OP_LerpToOtherAttribute", "m_nFieldOutput");

// Atribuições para C_INIT_RandomColor
// C_INIT_RandomColor Offsets
C_INIT_RandomColor.m_ColorMin = findOffsetByName(j, "C_INIT_RandomColor", "m_ColorMin");
C_INIT_RandomColor.m_ColorMax = findOffsetByName(j, "C_INIT_RandomColor", "m_ColorMax");
C_INIT_RandomColor.m_TintMin = findOffsetByName(j, "C_INIT_RandomColor", "m_TintMin");
C_INIT_RandomColor.m_TintMax = findOffsetByName(j, "C_INIT_RandomColor", "m_TintMax");
C_INIT_RandomColor.m_flTintPerc = findOffsetByName(j, "C_INIT_RandomColor", "m_flTintPerc");
C_INIT_RandomColor.m_flUpdateThreshold = findOffsetByName(j, "C_INIT_RandomColor", "m_flUpdateThreshold");
C_INIT_RandomColor.m_nTintCP = findOffsetByName(j, "C_INIT_RandomColor", "m_nTintCP");
C_INIT_RandomColor.m_nFieldOutput = findOffsetByName(j, "C_INIT_RandomColor", "m_nFieldOutput");
C_INIT_RandomColor.m_nTintBlendMode = findOffsetByName(j, "C_INIT_RandomColor", "m_nTintBlendMode");
C_INIT_RandomColor.m_flLightAmplification = findOffsetByName(j, "C_INIT_RandomColor", "m_flLightAmplification");

// Atribuições para C_OP_SetGravityToCP
// C_OP_SetGravityToCP Offsets
C_OP_SetGravityToCP.m_nCPInput = findOffsetByName(j, "C_OP_SetGravityToCP", "m_nCPInput");
C_OP_SetGravityToCP.m_nCPOutput = findOffsetByName(j, "C_OP_SetGravityToCP", "m_nCPOutput");
C_OP_SetGravityToCP.m_flScale = findOffsetByName(j, "C_OP_SetGravityToCP", "m_flScale");
C_OP_SetGravityToCP.m_bSetOrientation = findOffsetByName(j, "C_OP_SetGravityToCP", "m_bSetOrientation");
C_OP_SetGravityToCP.m_bSetZDown = findOffsetByName(j, "C_OP_SetGravityToCP", "m_bSetZDown");

// Atribuições para C_INIT_RemapParticleCountToScalar
// C_INIT_RemapParticleCountToScalar Offsets
C_INIT_RemapParticleCountToScalar.m_nFieldOutput = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nFieldOutput");
C_INIT_RemapParticleCountToScalar.m_nInputMin = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nInputMin");
C_INIT_RemapParticleCountToScalar.m_nInputMax = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nInputMax");
C_INIT_RemapParticleCountToScalar.m_nScaleControlPoint = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nScaleControlPoint");
C_INIT_RemapParticleCountToScalar.m_nScaleControlPointField = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nScaleControlPointField");
C_INIT_RemapParticleCountToScalar.m_flOutputMin = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_flOutputMin");
C_INIT_RemapParticleCountToScalar.m_flOutputMax = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_flOutputMax");
C_INIT_RemapParticleCountToScalar.m_nSetMethod = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_nSetMethod");
C_INIT_RemapParticleCountToScalar.m_bActiveRange = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_bActiveRange");
C_INIT_RemapParticleCountToScalar.m_bInvert = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_bInvert");
C_INIT_RemapParticleCountToScalar.m_bWrap = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_bWrap");
C_INIT_RemapParticleCountToScalar.m_flRemapBias = findOffsetByName(j, "C_INIT_RemapParticleCountToScalar", "m_flRemapBias");

// Atribuições para C_INIT_InheritFromParentParticles
// C_INIT_InheritFromParentParticles Offsets
C_INIT_InheritFromParentParticles.m_flScale = findOffsetByName(j, "C_INIT_InheritFromParentParticles", "m_flScale");
C_INIT_InheritFromParentParticles.m_nFieldOutput = findOffsetByName(j, "C_INIT_InheritFromParentParticles", "m_nFieldOutput");
C_INIT_InheritFromParentParticles.m_nIncrement = findOffsetByName(j, "C_INIT_InheritFromParentParticles", "m_nIncrement");
C_INIT_InheritFromParentParticles.m_bRandomDistribution = findOffsetByName(j, "C_INIT_InheritFromParentParticles", "m_bRandomDistribution");
C_INIT_InheritFromParentParticles.m_nRandomSeed = findOffsetByName(j, "C_INIT_InheritFromParentParticles", "m_nRandomSeed");

// Atribuições para C_OP_RampScalarLinearSimple
// C_OP_RampScalarLinearSimple Offsets
C_OP_RampScalarLinearSimple.m_Rate = findOffsetByName(j, "C_OP_RampScalarLinearSimple", "m_Rate");
C_OP_RampScalarLinearSimple.m_flStartTime = findOffsetByName(j, "C_OP_RampScalarLinearSimple", "m_flStartTime");
C_OP_RampScalarLinearSimple.m_flEndTime = findOffsetByName(j, "C_OP_RampScalarLinearSimple", "m_flEndTime");
C_OP_RampScalarLinearSimple.m_nField = findOffsetByName(j, "C_OP_RampScalarLinearSimple", "m_nField");

// Atribuições para C_INIT_ChaoticAttractor
// C_INIT_ChaoticAttractor Offsets
C_INIT_ChaoticAttractor.m_flAParm = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flAParm");
C_INIT_ChaoticAttractor.m_flBParm = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flBParm");
C_INIT_ChaoticAttractor.m_flCParm = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flCParm");
C_INIT_ChaoticAttractor.m_flDParm = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flDParm");
C_INIT_ChaoticAttractor.m_flScale = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flScale");
C_INIT_ChaoticAttractor.m_flSpeedMin = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flSpeedMin");
C_INIT_ChaoticAttractor.m_flSpeedMax = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_flSpeedMax");
C_INIT_ChaoticAttractor.m_nBaseCP = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_nBaseCP");
C_INIT_ChaoticAttractor.m_bUniformSpeed = findOffsetByName(j, "C_INIT_ChaoticAttractor", "m_bUniformSpeed");

// Atribuições para C_OP_MovementRigidAttachToCP
// C_OP_MovementRigidAttachToCP Offsets
C_OP_MovementRigidAttachToCP.m_nControlPointNumber = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_nControlPointNumber");
C_OP_MovementRigidAttachToCP.m_nScaleControlPoint = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_nScaleControlPoint");
C_OP_MovementRigidAttachToCP.m_nScaleCPField = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_nScaleCPField");
C_OP_MovementRigidAttachToCP.m_nFieldInput = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_nFieldInput");
C_OP_MovementRigidAttachToCP.m_nFieldOutput = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_nFieldOutput");
C_OP_MovementRigidAttachToCP.m_bOffsetLocal = findOffsetByName(j, "C_OP_MovementRigidAttachToCP", "m_bOffsetLocal");

// Atribuições para C_OP_RenderFlattenGrass
// C_OP_RenderFlattenGrass Offsets
C_OP_RenderFlattenGrass.m_flFlattenStrength = findOffsetByName(j, "C_OP_RenderFlattenGrass", "m_flFlattenStrength");
C_OP_RenderFlattenGrass.m_nStrengthFieldOverride = findOffsetByName(j, "C_OP_RenderFlattenGrass", "m_nStrengthFieldOverride");
C_OP_RenderFlattenGrass.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderFlattenGrass", "m_flRadiusScale");

// Atribuições para C_OP_RenderLightBeam
// C_OP_RenderLightBeam Offsets
C_OP_RenderLightBeam.m_vColorBlend = findOffsetByName(j, "C_OP_RenderLightBeam", "m_vColorBlend");
C_OP_RenderLightBeam.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderLightBeam", "m_nColorBlendType");
C_OP_RenderLightBeam.m_flBrightnessLumensPerMeter = findOffsetByName(j, "C_OP_RenderLightBeam", "m_flBrightnessLumensPerMeter");
C_OP_RenderLightBeam.m_bCastShadows = findOffsetByName(j, "C_OP_RenderLightBeam", "m_bCastShadows");
C_OP_RenderLightBeam.m_flSkirt = findOffsetByName(j, "C_OP_RenderLightBeam", "m_flSkirt");
C_OP_RenderLightBeam.m_flRange = findOffsetByName(j, "C_OP_RenderLightBeam", "m_flRange");
C_OP_RenderLightBeam.m_flThickness = findOffsetByName(j, "C_OP_RenderLightBeam", "m_flThickness");

// Atribuições para C_OP_EnableChildrenFromParentParticleCount
// C_OP_EnableChildrenFromParentParticleCount Offsets
C_OP_EnableChildrenFromParentParticleCount.m_nChildGroupID = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_nChildGroupID");
C_OP_EnableChildrenFromParentParticleCount.m_nFirstChild = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_nFirstChild");
C_OP_EnableChildrenFromParentParticleCount.m_nNumChildrenToEnable = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_nNumChildrenToEnable");
C_OP_EnableChildrenFromParentParticleCount.m_bDisableChildren = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_bDisableChildren");
C_OP_EnableChildrenFromParentParticleCount.m_bPlayEndcapOnStop = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_bPlayEndcapOnStop");
C_OP_EnableChildrenFromParentParticleCount.m_bDestroyImmediately = findOffsetByName(j, "C_OP_EnableChildrenFromParentParticleCount", "m_bDestroyImmediately");

// Atribuições para C_INIT_DistanceToCPInit
// C_INIT_DistanceToCPInit Offsets
C_INIT_DistanceToCPInit.m_nFieldOutput = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_nFieldOutput");
C_INIT_DistanceToCPInit.m_flInputMin = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flInputMin");
C_INIT_DistanceToCPInit.m_flInputMax = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flInputMax");
C_INIT_DistanceToCPInit.m_flOutputMin = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flOutputMin");
C_INIT_DistanceToCPInit.m_flOutputMax = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flOutputMax");
C_INIT_DistanceToCPInit.m_nStartCP = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_nStartCP");
C_INIT_DistanceToCPInit.m_bLOS = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_bLOS");
C_INIT_DistanceToCPInit.m_CollisionGroupName = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_CollisionGroupName");
C_INIT_DistanceToCPInit.m_nTraceSet = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_nTraceSet");
C_INIT_DistanceToCPInit.m_flMaxTraceLength = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flMaxTraceLength");
C_INIT_DistanceToCPInit.m_flLOSScale = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flLOSScale");
C_INIT_DistanceToCPInit.m_nSetMethod = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_nSetMethod");
C_INIT_DistanceToCPInit.m_bActiveRange = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_bActiveRange");
C_INIT_DistanceToCPInit.m_vecDistanceScale = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_vecDistanceScale");
C_INIT_DistanceToCPInit.m_flRemapBias = findOffsetByName(j, "C_INIT_DistanceToCPInit", "m_flRemapBias");

// Atribuições para CReplicationParameters
// CReplicationParameters Offsets
CReplicationParameters.m_nReplicationMode = findOffsetByName(j, "CReplicationParameters", "m_nReplicationMode");
CReplicationParameters.m_bScaleChildParticleRadii = findOffsetByName(j, "CReplicationParameters", "m_bScaleChildParticleRadii");
CReplicationParameters.m_flMinRandomRadiusScale = findOffsetByName(j, "CReplicationParameters", "m_flMinRandomRadiusScale");
CReplicationParameters.m_flMaxRandomRadiusScale = findOffsetByName(j, "CReplicationParameters", "m_flMaxRandomRadiusScale");
CReplicationParameters.m_vMinRandomDisplacement = findOffsetByName(j, "CReplicationParameters", "m_vMinRandomDisplacement");
CReplicationParameters.m_vMaxRandomDisplacement = findOffsetByName(j, "CReplicationParameters", "m_vMaxRandomDisplacement");
CReplicationParameters.m_flModellingScale = findOffsetByName(j, "CReplicationParameters", "m_flModellingScale");

// Atribuições para C_OP_ForceBasedOnDistanceToPlane
// C_OP_ForceBasedOnDistanceToPlane Offsets
C_OP_ForceBasedOnDistanceToPlane.m_flMinDist = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_flMinDist");
C_OP_ForceBasedOnDistanceToPlane.m_vecForceAtMinDist = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_vecForceAtMinDist");
C_OP_ForceBasedOnDistanceToPlane.m_flMaxDist = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_flMaxDist");
C_OP_ForceBasedOnDistanceToPlane.m_vecForceAtMaxDist = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_vecForceAtMaxDist");
C_OP_ForceBasedOnDistanceToPlane.m_vecPlaneNormal = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_vecPlaneNormal");
C_OP_ForceBasedOnDistanceToPlane.m_nControlPointNumber = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_nControlPointNumber");
C_OP_ForceBasedOnDistanceToPlane.m_flExponent = findOffsetByName(j, "C_OP_ForceBasedOnDistanceToPlane", "m_flExponent");

// Atribuições para C_OP_RemapDensityToVector
// C_OP_RemapDensityToVector Offsets
C_OP_RemapDensityToVector.m_flRadiusScale = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_flRadiusScale");
C_OP_RemapDensityToVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_nFieldOutput");
C_OP_RemapDensityToVector.m_flDensityMin = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_flDensityMin");
C_OP_RemapDensityToVector.m_flDensityMax = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_flDensityMax");
C_OP_RemapDensityToVector.m_vecOutputMin = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_vecOutputMin");
C_OP_RemapDensityToVector.m_vecOutputMax = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_vecOutputMax");
C_OP_RemapDensityToVector.m_bUseParentDensity = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_bUseParentDensity");
C_OP_RemapDensityToVector.m_nVoxelGridResolution = findOffsetByName(j, "C_OP_RemapDensityToVector", "m_nVoxelGridResolution");

// Atribuições para ParticleControlPointConfiguration_t
// ParticleControlPointConfiguration_t Offsets
ParticleControlPointConfiguration_t.m_name = findOffsetByName(j, "ParticleControlPointConfiguration_t", "m_name");
ParticleControlPointConfiguration_t.m_drivers = findOffsetByName(j, "ParticleControlPointConfiguration_t", "m_drivers");
ParticleControlPointConfiguration_t.m_previewState = findOffsetByName(j, "ParticleControlPointConfiguration_t", "m_previewState");

// Atribuições para C_INIT_SetRigidAttachment
// C_INIT_SetRigidAttachment Offsets
C_INIT_SetRigidAttachment.m_nControlPointNumber = findOffsetByName(j, "C_INIT_SetRigidAttachment", "m_nControlPointNumber");
C_INIT_SetRigidAttachment.m_nFieldInput = findOffsetByName(j, "C_INIT_SetRigidAttachment", "m_nFieldInput");
C_INIT_SetRigidAttachment.m_nFieldOutput = findOffsetByName(j, "C_INIT_SetRigidAttachment", "m_nFieldOutput");
C_INIT_SetRigidAttachment.m_bLocalSpace = findOffsetByName(j, "C_INIT_SetRigidAttachment", "m_bLocalSpace");

// Atribuições para MaterialVariable_t
// MaterialVariable_t Offsets
MaterialVariable_t.m_strVariable = findOffsetByName(j, "MaterialVariable_t", "m_strVariable");
MaterialVariable_t.m_nVariableField = findOffsetByName(j, "MaterialVariable_t", "m_nVariableField");
MaterialVariable_t.m_flScale = findOffsetByName(j, "MaterialVariable_t", "m_flScale");

// Atribuições para C_OP_RemapSpeed
// C_OP_RemapSpeed Offsets
C_OP_RemapSpeed.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapSpeed", "m_nFieldOutput");
C_OP_RemapSpeed.m_flInputMin = findOffsetByName(j, "C_OP_RemapSpeed", "m_flInputMin");
C_OP_RemapSpeed.m_flInputMax = findOffsetByName(j, "C_OP_RemapSpeed", "m_flInputMax");
C_OP_RemapSpeed.m_flOutputMin = findOffsetByName(j, "C_OP_RemapSpeed", "m_flOutputMin");
C_OP_RemapSpeed.m_flOutputMax = findOffsetByName(j, "C_OP_RemapSpeed", "m_flOutputMax");
C_OP_RemapSpeed.m_nSetMethod = findOffsetByName(j, "C_OP_RemapSpeed", "m_nSetMethod");
C_OP_RemapSpeed.m_bIgnoreDelta = findOffsetByName(j, "C_OP_RemapSpeed", "m_bIgnoreDelta");

// Atribuições para C_OP_RenderModels
// C_OP_RenderModels Offsets
C_OP_RenderModels.m_bOnlyRenderInEffectsBloomPass = findOffsetByName(j, "C_OP_RenderModels", "m_bOnlyRenderInEffectsBloomPass");
C_OP_RenderModels.m_bOnlyRenderInEffectsWaterPass = findOffsetByName(j, "C_OP_RenderModels", "m_bOnlyRenderInEffectsWaterPass");
C_OP_RenderModels.m_bUseMixedResolutionRendering = findOffsetByName(j, "C_OP_RenderModels", "m_bUseMixedResolutionRendering");
C_OP_RenderModels.m_bOnlyRenderInEffecsGameOverlay = findOffsetByName(j, "C_OP_RenderModels", "m_bOnlyRenderInEffecsGameOverlay");
C_OP_RenderModels.m_ModelList = findOffsetByName(j, "C_OP_RenderModels", "m_ModelList");
C_OP_RenderModels.m_nBodyGroupField = findOffsetByName(j, "C_OP_RenderModels", "m_nBodyGroupField");
C_OP_RenderModels.m_nSubModelField = findOffsetByName(j, "C_OP_RenderModels", "m_nSubModelField");
C_OP_RenderModels.m_bIgnoreNormal = findOffsetByName(j, "C_OP_RenderModels", "m_bIgnoreNormal");
C_OP_RenderModels.m_bOrientZ = findOffsetByName(j, "C_OP_RenderModels", "m_bOrientZ");
C_OP_RenderModels.m_bCenterOffset = findOffsetByName(j, "C_OP_RenderModels", "m_bCenterOffset");
C_OP_RenderModels.m_vecLocalOffset = findOffsetByName(j, "C_OP_RenderModels", "m_vecLocalOffset");
C_OP_RenderModels.m_vecLocalRotation = findOffsetByName(j, "C_OP_RenderModels", "m_vecLocalRotation");
C_OP_RenderModels.m_bIgnoreRadius = findOffsetByName(j, "C_OP_RenderModels", "m_bIgnoreRadius");
C_OP_RenderModels.m_nModelScaleCP = findOffsetByName(j, "C_OP_RenderModels", "m_nModelScaleCP");
C_OP_RenderModels.m_vecComponentScale = findOffsetByName(j, "C_OP_RenderModels", "m_vecComponentScale");
C_OP_RenderModels.m_bLocalScale = findOffsetByName(j, "C_OP_RenderModels", "m_bLocalScale");
C_OP_RenderModels.m_nSizeCullBloat = findOffsetByName(j, "C_OP_RenderModels", "m_nSizeCullBloat");
C_OP_RenderModels.m_bAnimated = findOffsetByName(j, "C_OP_RenderModels", "m_bAnimated");
C_OP_RenderModels.m_flAnimationRate = findOffsetByName(j, "C_OP_RenderModels", "m_flAnimationRate");
C_OP_RenderModels.m_bScaleAnimationRate = findOffsetByName(j, "C_OP_RenderModels", "m_bScaleAnimationRate");
C_OP_RenderModels.m_bForceLoopingAnimation = findOffsetByName(j, "C_OP_RenderModels", "m_bForceLoopingAnimation");
C_OP_RenderModels.m_bResetAnimOnStop = findOffsetByName(j, "C_OP_RenderModels", "m_bResetAnimOnStop");
C_OP_RenderModels.m_bManualAnimFrame = findOffsetByName(j, "C_OP_RenderModels", "m_bManualAnimFrame");
C_OP_RenderModels.m_nAnimationScaleField = findOffsetByName(j, "C_OP_RenderModels", "m_nAnimationScaleField");
C_OP_RenderModels.m_nAnimationField = findOffsetByName(j, "C_OP_RenderModels", "m_nAnimationField");
C_OP_RenderModels.m_nManualFrameField = findOffsetByName(j, "C_OP_RenderModels", "m_nManualFrameField");
C_OP_RenderModels.m_ActivityName = findOffsetByName(j, "C_OP_RenderModels", "m_ActivityName");
C_OP_RenderModels.m_SequenceName = findOffsetByName(j, "C_OP_RenderModels", "m_SequenceName");
C_OP_RenderModels.m_bEnableClothSimulation = findOffsetByName(j, "C_OP_RenderModels", "m_bEnableClothSimulation");
C_OP_RenderModels.m_ClothEffectName = findOffsetByName(j, "C_OP_RenderModels", "m_ClothEffectName");
C_OP_RenderModels.m_hOverrideMaterial = findOffsetByName(j, "C_OP_RenderModels", "m_hOverrideMaterial");
C_OP_RenderModels.m_bOverrideTranslucentMaterials = findOffsetByName(j, "C_OP_RenderModels", "m_bOverrideTranslucentMaterials");
C_OP_RenderModels.m_nSkin = findOffsetByName(j, "C_OP_RenderModels", "m_nSkin");
C_OP_RenderModels.m_MaterialVars = findOffsetByName(j, "C_OP_RenderModels", "m_MaterialVars");
C_OP_RenderModels.m_flManualModelSelection = findOffsetByName(j, "C_OP_RenderModels", "m_flManualModelSelection");
C_OP_RenderModels.m_modelInput = findOffsetByName(j, "C_OP_RenderModels", "m_modelInput");
C_OP_RenderModels.m_nLOD = findOffsetByName(j, "C_OP_RenderModels", "m_nLOD");
C_OP_RenderModels.m_EconSlotName = findOffsetByName(j, "C_OP_RenderModels", "m_EconSlotName");
C_OP_RenderModels.m_bOriginalModel = findOffsetByName(j, "C_OP_RenderModels", "m_bOriginalModel");
C_OP_RenderModels.m_bSuppressTint = findOffsetByName(j, "C_OP_RenderModels", "m_bSuppressTint");
C_OP_RenderModels.m_nSubModelFieldType = findOffsetByName(j, "C_OP_RenderModels", "m_nSubModelFieldType");
C_OP_RenderModels.m_bDisableShadows = findOffsetByName(j, "C_OP_RenderModels", "m_bDisableShadows");
C_OP_RenderModels.m_bDisableDepthPrepass = findOffsetByName(j, "C_OP_RenderModels", "m_bDisableDepthPrepass");
C_OP_RenderModels.m_bAcceptsDecals = findOffsetByName(j, "C_OP_RenderModels", "m_bAcceptsDecals");
C_OP_RenderModels.m_bForceDrawInterlevedWithSiblings = findOffsetByName(j, "C_OP_RenderModels", "m_bForceDrawInterlevedWithSiblings");
C_OP_RenderModels.m_bDoNotDrawInParticlePass = findOffsetByName(j, "C_OP_RenderModels", "m_bDoNotDrawInParticlePass");
C_OP_RenderModels.m_bAllowApproximateTransforms = findOffsetByName(j, "C_OP_RenderModels", "m_bAllowApproximateTransforms");
C_OP_RenderModels.m_szRenderAttribute = findOffsetByName(j, "C_OP_RenderModels", "m_szRenderAttribute");
C_OP_RenderModels.m_flRadiusScale = findOffsetByName(j, "C_OP_RenderModels", "m_flRadiusScale");
C_OP_RenderModels.m_flAlphaScale = findOffsetByName(j, "C_OP_RenderModels", "m_flAlphaScale");
C_OP_RenderModels.m_flRollScale = findOffsetByName(j, "C_OP_RenderModels", "m_flRollScale");
C_OP_RenderModels.m_nAlpha2Field = findOffsetByName(j, "C_OP_RenderModels", "m_nAlpha2Field");
C_OP_RenderModels.m_vecColorScale = findOffsetByName(j, "C_OP_RenderModels", "m_vecColorScale");
C_OP_RenderModels.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderModels", "m_nColorBlendType");

// Atribuições para C_OP_RenderClientPhysicsImpulse
// C_OP_RenderClientPhysicsImpulse Offsets
C_OP_RenderClientPhysicsImpulse.m_flRadius = findOffsetByName(j, "C_OP_RenderClientPhysicsImpulse", "m_flRadius");
C_OP_RenderClientPhysicsImpulse.m_flMagnitude = findOffsetByName(j, "C_OP_RenderClientPhysicsImpulse", "m_flMagnitude");
C_OP_RenderClientPhysicsImpulse.m_nSimIdFilter = findOffsetByName(j, "C_OP_RenderClientPhysicsImpulse", "m_nSimIdFilter");

// Atribuições para CParticleFunctionEmitter
// CParticleFunctionEmitter Offsets
CParticleFunctionEmitter.m_nEmitterIndex = findOffsetByName(j, "CParticleFunctionEmitter", "m_nEmitterIndex");

// Atribuições para C_OP_SetControlPointOrientationToCPVelocity
// C_OP_SetControlPointOrientationToCPVelocity Offsets
C_OP_SetControlPointOrientationToCPVelocity.m_nCPInput = findOffsetByName(j, "C_OP_SetControlPointOrientationToCPVelocity", "m_nCPInput");
C_OP_SetControlPointOrientationToCPVelocity.m_nCPOutput = findOffsetByName(j, "C_OP_SetControlPointOrientationToCPVelocity", "m_nCPOutput");

// Atribuições para C_OP_RopeSpringConstraint
// C_OP_RopeSpringConstraint Offsets
C_OP_RopeSpringConstraint.m_flRestLength = findOffsetByName(j, "C_OP_RopeSpringConstraint", "m_flRestLength");
C_OP_RopeSpringConstraint.m_flMinDistance = findOffsetByName(j, "C_OP_RopeSpringConstraint", "m_flMinDistance");
C_OP_RopeSpringConstraint.m_flMaxDistance = findOffsetByName(j, "C_OP_RopeSpringConstraint", "m_flMaxDistance");
C_OP_RopeSpringConstraint.m_flAdjustmentScale = findOffsetByName(j, "C_OP_RopeSpringConstraint", "m_flAdjustmentScale");
C_OP_RopeSpringConstraint.m_flInitialRestingLength = findOffsetByName(j, "C_OP_RopeSpringConstraint", "m_flInitialRestingLength");

// Atribuições para C_INIT_PositionWarpScalar
// C_INIT_PositionWarpScalar Offsets
C_INIT_PositionWarpScalar.m_vecWarpMin = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_vecWarpMin");
C_INIT_PositionWarpScalar.m_vecWarpMax = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_vecWarpMax");
C_INIT_PositionWarpScalar.m_InputValue = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_InputValue");
C_INIT_PositionWarpScalar.m_flPrevPosScale = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_flPrevPosScale");
C_INIT_PositionWarpScalar.m_nScaleControlPointNumber = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_nScaleControlPointNumber");
C_INIT_PositionWarpScalar.m_nControlPointNumber = findOffsetByName(j, "C_INIT_PositionWarpScalar", "m_nControlPointNumber");

// Atribuições para C_OP_ForceControlPointStub
// C_OP_ForceControlPointStub Offsets
C_OP_ForceControlPointStub.m_ControlPoint = findOffsetByName(j, "C_OP_ForceControlPointStub", "m_ControlPoint");

// Atribuições para C_OP_VectorNoise
// C_OP_VectorNoise Offsets
C_OP_VectorNoise.m_nFieldOutput = findOffsetByName(j, "C_OP_VectorNoise", "m_nFieldOutput");
C_OP_VectorNoise.m_vecOutputMin = findOffsetByName(j, "C_OP_VectorNoise", "m_vecOutputMin");
C_OP_VectorNoise.m_vecOutputMax = findOffsetByName(j, "C_OP_VectorNoise", "m_vecOutputMax");
C_OP_VectorNoise.m_fl4NoiseScale = findOffsetByName(j, "C_OP_VectorNoise", "m_fl4NoiseScale");
C_OP_VectorNoise.m_bAdditive = findOffsetByName(j, "C_OP_VectorNoise", "m_bAdditive");
C_OP_VectorNoise.m_bOffset = findOffsetByName(j, "C_OP_VectorNoise", "m_bOffset");
C_OP_VectorNoise.m_flNoiseAnimationTimeScale = findOffsetByName(j, "C_OP_VectorNoise", "m_flNoiseAnimationTimeScale");

// Atribuições para C_OP_RemapParticleCountToScalar
// C_OP_RemapParticleCountToScalar Offsets
C_OP_RemapParticleCountToScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_nFieldOutput");
C_OP_RemapParticleCountToScalar.m_nInputMin = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_nInputMin");
C_OP_RemapParticleCountToScalar.m_nInputMax = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_nInputMax");
C_OP_RemapParticleCountToScalar.m_flOutputMin = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_flOutputMin");
C_OP_RemapParticleCountToScalar.m_flOutputMax = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_flOutputMax");
C_OP_RemapParticleCountToScalar.m_bActiveRange = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_bActiveRange");
C_OP_RemapParticleCountToScalar.m_nSetMethod = findOffsetByName(j, "C_OP_RemapParticleCountToScalar", "m_nSetMethod");

// Atribuições para C_INIT_QuantizeFloat
// C_INIT_QuantizeFloat Offsets
C_INIT_QuantizeFloat.m_InputValue = findOffsetByName(j, "C_INIT_QuantizeFloat", "m_InputValue");
C_INIT_QuantizeFloat.m_nOutputField = findOffsetByName(j, "C_INIT_QuantizeFloat", "m_nOutputField");

// Atribuições para C_OP_RemapModelVolumetoCP
// C_OP_RemapModelVolumetoCP Offsets
C_OP_RemapModelVolumetoCP.m_nBBoxType = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_nBBoxType");
C_OP_RemapModelVolumetoCP.m_nInControlPointNumber = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_nInControlPointNumber");
C_OP_RemapModelVolumetoCP.m_nOutControlPointNumber = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_nOutControlPointNumber");
C_OP_RemapModelVolumetoCP.m_nOutControlPointMaxNumber = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_nOutControlPointMaxNumber");
C_OP_RemapModelVolumetoCP.m_nField = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_nField");
C_OP_RemapModelVolumetoCP.m_flInputMin = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_flInputMin");
C_OP_RemapModelVolumetoCP.m_flInputMax = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_flInputMax");
C_OP_RemapModelVolumetoCP.m_flOutputMin = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_flOutputMin");
C_OP_RemapModelVolumetoCP.m_flOutputMax = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_flOutputMax");
C_OP_RemapModelVolumetoCP.m_bBBoxOnly = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_bBBoxOnly");
C_OP_RemapModelVolumetoCP.m_bCubeRoot = findOffsetByName(j, "C_OP_RemapModelVolumetoCP", "m_bCubeRoot");

// Atribuições para C_OP_SetToCP
// C_OP_SetToCP Offsets
C_OP_SetToCP.m_nControlPointNumber = findOffsetByName(j, "C_OP_SetToCP", "m_nControlPointNumber");
C_OP_SetToCP.m_vecOffset = findOffsetByName(j, "C_OP_SetToCP", "m_vecOffset");
C_OP_SetToCP.m_bOffsetLocal = findOffsetByName(j, "C_OP_SetToCP", "m_bOffsetLocal");

// Atribuições para ParticleControlPointDriver_t
// ParticleControlPointDriver_t Offsets
ParticleControlPointDriver_t.m_iControlPoint = findOffsetByName(j, "ParticleControlPointDriver_t", "m_iControlPoint");
ParticleControlPointDriver_t.m_iAttachType = findOffsetByName(j, "ParticleControlPointDriver_t", "m_iAttachType");
ParticleControlPointDriver_t.m_attachmentName = findOffsetByName(j, "ParticleControlPointDriver_t", "m_attachmentName");
ParticleControlPointDriver_t.m_vecOffset = findOffsetByName(j, "ParticleControlPointDriver_t", "m_vecOffset");
ParticleControlPointDriver_t.m_angOffset = findOffsetByName(j, "ParticleControlPointDriver_t", "m_angOffset");
ParticleControlPointDriver_t.m_entityName = findOffsetByName(j, "ParticleControlPointDriver_t", "m_entityName");

// Atribuições para C_OP_ParentVortices
// C_OP_ParentVortices Offsets
C_OP_ParentVortices.m_flForceScale = findOffsetByName(j, "C_OP_ParentVortices", "m_flForceScale");
C_OP_ParentVortices.m_vecTwistAxis = findOffsetByName(j, "C_OP_ParentVortices", "m_vecTwistAxis");
C_OP_ParentVortices.m_bFlipBasedOnYaw = findOffsetByName(j, "C_OP_ParentVortices", "m_bFlipBasedOnYaw");

// Atribuições para C_OP_SetControlPointToCPVelocity
// C_OP_SetControlPointToCPVelocity Offsets
C_OP_SetControlPointToCPVelocity.m_nCPInput = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_nCPInput");
C_OP_SetControlPointToCPVelocity.m_nCPOutputVel = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_nCPOutputVel");
C_OP_SetControlPointToCPVelocity.m_bNormalize = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_bNormalize");
C_OP_SetControlPointToCPVelocity.m_nCPOutputMag = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_nCPOutputMag");
C_OP_SetControlPointToCPVelocity.m_nCPField = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_nCPField");
C_OP_SetControlPointToCPVelocity.m_vecComparisonVelocity = findOffsetByName(j, "C_OP_SetControlPointToCPVelocity", "m_vecComparisonVelocity");

// Atribuições para C_OP_ClientPhysics
// C_OP_ClientPhysics Offsets
C_OP_ClientPhysics.m_strPhysicsType = findOffsetByName(j, "C_OP_ClientPhysics", "m_strPhysicsType");
C_OP_ClientPhysics.m_bStartAsleep = findOffsetByName(j, "C_OP_ClientPhysics", "m_bStartAsleep");
C_OP_ClientPhysics.m_flPlayerWakeRadius = findOffsetByName(j, "C_OP_ClientPhysics", "m_flPlayerWakeRadius");
C_OP_ClientPhysics.m_flVehicleWakeRadius = findOffsetByName(j, "C_OP_ClientPhysics", "m_flVehicleWakeRadius");
C_OP_ClientPhysics.m_bUseHighQualitySimulation = findOffsetByName(j, "C_OP_ClientPhysics", "m_bUseHighQualitySimulation");
C_OP_ClientPhysics.m_nMaxParticleCount = findOffsetByName(j, "C_OP_ClientPhysics", "m_nMaxParticleCount");
C_OP_ClientPhysics.m_bRespectExclusionVolumes = findOffsetByName(j, "C_OP_ClientPhysics", "m_bRespectExclusionVolumes");
C_OP_ClientPhysics.m_bKillParticles = findOffsetByName(j, "C_OP_ClientPhysics", "m_bKillParticles");
C_OP_ClientPhysics.m_bDeleteSim = findOffsetByName(j, "C_OP_ClientPhysics", "m_bDeleteSim");
C_OP_ClientPhysics.m_nControlPoint = findOffsetByName(j, "C_OP_ClientPhysics", "m_nControlPoint");
C_OP_ClientPhysics.m_nColorBlendType = findOffsetByName(j, "C_OP_ClientPhysics", "m_nColorBlendType");

// Atribuições para PointDefinitionWithTimeValues_t
// PointDefinitionWithTimeValues_t Offsets
PointDefinitionWithTimeValues_t.m_flTimeDuration = findOffsetByName(j, "PointDefinitionWithTimeValues_t", "m_flTimeDuration");

// Atribuições para RenderProjectedMaterial_t
// RenderProjectedMaterial_t Offsets
RenderProjectedMaterial_t.m_hMaterial = findOffsetByName(j, "RenderProjectedMaterial_t", "m_hMaterial");

// Atribuições para C_OP_ExternalWindForce
// C_OP_ExternalWindForce Offsets
C_OP_ExternalWindForce.m_vecSamplePosition = findOffsetByName(j, "C_OP_ExternalWindForce", "m_vecSamplePosition");
C_OP_ExternalWindForce.m_vecScale = findOffsetByName(j, "C_OP_ExternalWindForce", "m_vecScale");
C_OP_ExternalWindForce.m_bSampleWind = findOffsetByName(j, "C_OP_ExternalWindForce", "m_bSampleWind");
C_OP_ExternalWindForce.m_bSampleWater = findOffsetByName(j, "C_OP_ExternalWindForce", "m_bSampleWater");
C_OP_ExternalWindForce.m_bDampenNearWaterPlane = findOffsetByName(j, "C_OP_ExternalWindForce", "m_bDampenNearWaterPlane");
C_OP_ExternalWindForce.m_bSampleGravity = findOffsetByName(j, "C_OP_ExternalWindForce", "m_bSampleGravity");
C_OP_ExternalWindForce.m_vecGravityForce = findOffsetByName(j, "C_OP_ExternalWindForce", "m_vecGravityForce");
C_OP_ExternalWindForce.m_bUseBasicMovementGravity = findOffsetByName(j, "C_OP_ExternalWindForce", "m_bUseBasicMovementGravity");
C_OP_ExternalWindForce.m_flLocalGravityScale = findOffsetByName(j, "C_OP_ExternalWindForce", "m_flLocalGravityScale");
C_OP_ExternalWindForce.m_flLocalBuoyancyScale = findOffsetByName(j, "C_OP_ExternalWindForce", "m_flLocalBuoyancyScale");
C_OP_ExternalWindForce.m_vecBuoyancyForce = findOffsetByName(j, "C_OP_ExternalWindForce", "m_vecBuoyancyForce");

// Atribuições para C_INIT_ModelCull
// C_INIT_ModelCull Offsets
C_INIT_ModelCull.m_nControlPointNumber = findOffsetByName(j, "C_INIT_ModelCull", "m_nControlPointNumber");
C_INIT_ModelCull.m_bBoundBox = findOffsetByName(j, "C_INIT_ModelCull", "m_bBoundBox");
C_INIT_ModelCull.m_bCullOutside = findOffsetByName(j, "C_INIT_ModelCull", "m_bCullOutside");
C_INIT_ModelCull.m_bUseBones = findOffsetByName(j, "C_INIT_ModelCull", "m_bUseBones");
C_INIT_ModelCull.m_HitboxSetName = findOffsetByName(j, "C_INIT_ModelCull", "m_HitboxSetName");

// Atribuições para C_OP_RenderSprites
// C_OP_RenderSprites Offsets
C_OP_RenderSprites.m_nSequenceOverride = findOffsetByName(j, "C_OP_RenderSprites", "m_nSequenceOverride");
C_OP_RenderSprites.m_nOrientationType = findOffsetByName(j, "C_OP_RenderSprites", "m_nOrientationType");
C_OP_RenderSprites.m_nOrientationControlPoint = findOffsetByName(j, "C_OP_RenderSprites", "m_nOrientationControlPoint");
C_OP_RenderSprites.m_bUseYawWithNormalAligned = findOffsetByName(j, "C_OP_RenderSprites", "m_bUseYawWithNormalAligned");
C_OP_RenderSprites.m_flMinSize = findOffsetByName(j, "C_OP_RenderSprites", "m_flMinSize");
C_OP_RenderSprites.m_flMaxSize = findOffsetByName(j, "C_OP_RenderSprites", "m_flMaxSize");
C_OP_RenderSprites.m_flAlphaAdjustWithSizeAdjust = findOffsetByName(j, "C_OP_RenderSprites", "m_flAlphaAdjustWithSizeAdjust");
C_OP_RenderSprites.m_flStartFadeSize = findOffsetByName(j, "C_OP_RenderSprites", "m_flStartFadeSize");
C_OP_RenderSprites.m_flEndFadeSize = findOffsetByName(j, "C_OP_RenderSprites", "m_flEndFadeSize");
C_OP_RenderSprites.m_flStartFadeDot = findOffsetByName(j, "C_OP_RenderSprites", "m_flStartFadeDot");
C_OP_RenderSprites.m_flEndFadeDot = findOffsetByName(j, "C_OP_RenderSprites", "m_flEndFadeDot");
C_OP_RenderSprites.m_bDistanceAlpha = findOffsetByName(j, "C_OP_RenderSprites", "m_bDistanceAlpha");
C_OP_RenderSprites.m_bSoftEdges = findOffsetByName(j, "C_OP_RenderSprites", "m_bSoftEdges");
C_OP_RenderSprites.m_flEdgeSoftnessStart = findOffsetByName(j, "C_OP_RenderSprites", "m_flEdgeSoftnessStart");
C_OP_RenderSprites.m_flEdgeSoftnessEnd = findOffsetByName(j, "C_OP_RenderSprites", "m_flEdgeSoftnessEnd");
C_OP_RenderSprites.m_bOutline = findOffsetByName(j, "C_OP_RenderSprites", "m_bOutline");
C_OP_RenderSprites.m_OutlineColor = findOffsetByName(j, "C_OP_RenderSprites", "m_OutlineColor");
C_OP_RenderSprites.m_nOutlineAlpha = findOffsetByName(j, "C_OP_RenderSprites", "m_nOutlineAlpha");
C_OP_RenderSprites.m_flOutlineStart0 = findOffsetByName(j, "C_OP_RenderSprites", "m_flOutlineStart0");
C_OP_RenderSprites.m_flOutlineStart1 = findOffsetByName(j, "C_OP_RenderSprites", "m_flOutlineStart1");
C_OP_RenderSprites.m_flOutlineEnd0 = findOffsetByName(j, "C_OP_RenderSprites", "m_flOutlineEnd0");
C_OP_RenderSprites.m_flOutlineEnd1 = findOffsetByName(j, "C_OP_RenderSprites", "m_flOutlineEnd1");
C_OP_RenderSprites.m_nLightingMode = findOffsetByName(j, "C_OP_RenderSprites", "m_nLightingMode");
C_OP_RenderSprites.m_flLightingTessellation = findOffsetByName(j, "C_OP_RenderSprites", "m_flLightingTessellation");
C_OP_RenderSprites.m_flLightingDirectionality = findOffsetByName(j, "C_OP_RenderSprites", "m_flLightingDirectionality");
C_OP_RenderSprites.m_bParticleShadows = findOffsetByName(j, "C_OP_RenderSprites", "m_bParticleShadows");
C_OP_RenderSprites.m_flShadowDensity = findOffsetByName(j, "C_OP_RenderSprites", "m_flShadowDensity");
C_OP_RenderSprites.m_replicationParameters = findOffsetByName(j, "C_OP_RenderSprites", "m_replicationParameters");

// Atribuições para C_OP_PercentageBetweenTransformLerpCPs
// C_OP_PercentageBetweenTransformLerpCPs Offsets
C_OP_PercentageBetweenTransformLerpCPs.m_nFieldOutput = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nFieldOutput");
C_OP_PercentageBetweenTransformLerpCPs.m_flInputMin = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_flInputMin");
C_OP_PercentageBetweenTransformLerpCPs.m_flInputMax = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_flInputMax");
C_OP_PercentageBetweenTransformLerpCPs.m_TransformStart = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_TransformStart");
C_OP_PercentageBetweenTransformLerpCPs.m_TransformEnd = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_TransformEnd");
C_OP_PercentageBetweenTransformLerpCPs.m_nOutputStartCP = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nOutputStartCP");
C_OP_PercentageBetweenTransformLerpCPs.m_nOutputStartField = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nOutputStartField");
C_OP_PercentageBetweenTransformLerpCPs.m_nOutputEndCP = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nOutputEndCP");
C_OP_PercentageBetweenTransformLerpCPs.m_nOutputEndField = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nOutputEndField");
C_OP_PercentageBetweenTransformLerpCPs.m_nSetMethod = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_nSetMethod");
C_OP_PercentageBetweenTransformLerpCPs.m_bActiveRange = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_bActiveRange");
C_OP_PercentageBetweenTransformLerpCPs.m_bRadialCheck = findOffsetByName(j, "C_OP_PercentageBetweenTransformLerpCPs", "m_bRadialCheck");

// Atribuições para C_OP_SetPerChildControlPoint
// C_OP_SetPerChildControlPoint Offsets
C_OP_SetPerChildControlPoint.m_nChildGroupID = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nChildGroupID");
C_OP_SetPerChildControlPoint.m_nFirstControlPoint = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nFirstControlPoint");
C_OP_SetPerChildControlPoint.m_nNumControlPoints = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nNumControlPoints");
C_OP_SetPerChildControlPoint.m_nParticleIncrement = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nParticleIncrement");
C_OP_SetPerChildControlPoint.m_nFirstSourcePoint = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nFirstSourcePoint");
C_OP_SetPerChildControlPoint.m_bSetOrientation = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_bSetOrientation");
C_OP_SetPerChildControlPoint.m_nOrientationField = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_nOrientationField");
C_OP_SetPerChildControlPoint.m_bNumBasedOnParticleCount = findOffsetByName(j, "C_OP_SetPerChildControlPoint", "m_bNumBasedOnParticleCount");

// Atribuições para C_OP_RenderTreeShake
// C_OP_RenderTreeShake Offsets
C_OP_RenderTreeShake.m_flPeakStrength = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flPeakStrength");
C_OP_RenderTreeShake.m_nPeakStrengthFieldOverride = findOffsetByName(j, "C_OP_RenderTreeShake", "m_nPeakStrengthFieldOverride");
C_OP_RenderTreeShake.m_flRadius = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flRadius");
C_OP_RenderTreeShake.m_nRadiusFieldOverride = findOffsetByName(j, "C_OP_RenderTreeShake", "m_nRadiusFieldOverride");
C_OP_RenderTreeShake.m_flShakeDuration = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flShakeDuration");
C_OP_RenderTreeShake.m_flTransitionTime = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flTransitionTime");
C_OP_RenderTreeShake.m_flTwistAmount = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flTwistAmount");
C_OP_RenderTreeShake.m_flRadialAmount = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flRadialAmount");
C_OP_RenderTreeShake.m_flControlPointOrientationAmount = findOffsetByName(j, "C_OP_RenderTreeShake", "m_flControlPointOrientationAmount");
C_OP_RenderTreeShake.m_nControlPointForLinearDirection = findOffsetByName(j, "C_OP_RenderTreeShake", "m_nControlPointForLinearDirection");

// Atribuições para C_OP_SetAttributeToScalarExpression
// C_OP_SetAttributeToScalarExpression Offsets
C_OP_SetAttributeToScalarExpression.m_nExpression = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_nExpression");
C_OP_SetAttributeToScalarExpression.m_flInput1 = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_flInput1");
C_OP_SetAttributeToScalarExpression.m_flInput2 = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_flInput2");
C_OP_SetAttributeToScalarExpression.m_flOutputRemap = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_flOutputRemap");
C_OP_SetAttributeToScalarExpression.m_nOutputField = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_nOutputField");
C_OP_SetAttributeToScalarExpression.m_nSetMethod = findOffsetByName(j, "C_OP_SetAttributeToScalarExpression", "m_nSetMethod");

// Atribuições para C_OP_CycleScalar
// C_OP_CycleScalar Offsets
C_OP_CycleScalar.m_nDestField = findOffsetByName(j, "C_OP_CycleScalar", "m_nDestField");
C_OP_CycleScalar.m_flStartValue = findOffsetByName(j, "C_OP_CycleScalar", "m_flStartValue");
C_OP_CycleScalar.m_flEndValue = findOffsetByName(j, "C_OP_CycleScalar", "m_flEndValue");
C_OP_CycleScalar.m_flCycleTime = findOffsetByName(j, "C_OP_CycleScalar", "m_flCycleTime");
C_OP_CycleScalar.m_bDoNotRepeatCycle = findOffsetByName(j, "C_OP_CycleScalar", "m_bDoNotRepeatCycle");
C_OP_CycleScalar.m_bSynchronizeParticles = findOffsetByName(j, "C_OP_CycleScalar", "m_bSynchronizeParticles");
C_OP_CycleScalar.m_nCPScale = findOffsetByName(j, "C_OP_CycleScalar", "m_nCPScale");
C_OP_CycleScalar.m_nCPFieldMin = findOffsetByName(j, "C_OP_CycleScalar", "m_nCPFieldMin");
C_OP_CycleScalar.m_nCPFieldMax = findOffsetByName(j, "C_OP_CycleScalar", "m_nCPFieldMax");
C_OP_CycleScalar.m_nSetMethod = findOffsetByName(j, "C_OP_CycleScalar", "m_nSetMethod");

// Atribuições para C_OP_RenderMaterialProxy
// C_OP_RenderMaterialProxy Offsets
C_OP_RenderMaterialProxy.m_nMaterialControlPoint = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_nMaterialControlPoint");
C_OP_RenderMaterialProxy.m_nProxyType = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_nProxyType");
C_OP_RenderMaterialProxy.m_MaterialVars = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_MaterialVars");
C_OP_RenderMaterialProxy.m_hOverrideMaterial = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_hOverrideMaterial");
C_OP_RenderMaterialProxy.m_flMaterialOverrideEnabled = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_flMaterialOverrideEnabled");
C_OP_RenderMaterialProxy.m_vecColorScale = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_vecColorScale");
C_OP_RenderMaterialProxy.m_flAlpha = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_flAlpha");
C_OP_RenderMaterialProxy.m_nColorBlendType = findOffsetByName(j, "C_OP_RenderMaterialProxy", "m_nColorBlendType");

// Atribuições para FloatInputMaterialVariable_t
// FloatInputMaterialVariable_t Offsets
FloatInputMaterialVariable_t.m_strVariable = findOffsetByName(j, "FloatInputMaterialVariable_t", "m_strVariable");
FloatInputMaterialVariable_t.m_flInput = findOffsetByName(j, "FloatInputMaterialVariable_t", "m_flInput");

// Atribuições para C_OP_RampScalarLinear
// C_OP_RampScalarLinear Offsets
C_OP_RampScalarLinear.m_RateMin = findOffsetByName(j, "C_OP_RampScalarLinear", "m_RateMin");
C_OP_RampScalarLinear.m_RateMax = findOffsetByName(j, "C_OP_RampScalarLinear", "m_RateMax");
C_OP_RampScalarLinear.m_flStartTime_min = findOffsetByName(j, "C_OP_RampScalarLinear", "m_flStartTime_min");
C_OP_RampScalarLinear.m_flStartTime_max = findOffsetByName(j, "C_OP_RampScalarLinear", "m_flStartTime_max");
C_OP_RampScalarLinear.m_flEndTime_min = findOffsetByName(j, "C_OP_RampScalarLinear", "m_flEndTime_min");
C_OP_RampScalarLinear.m_flEndTime_max = findOffsetByName(j, "C_OP_RampScalarLinear", "m_flEndTime_max");
C_OP_RampScalarLinear.m_nField = findOffsetByName(j, "C_OP_RampScalarLinear", "m_nField");
C_OP_RampScalarLinear.m_bProportionalOp = findOffsetByName(j, "C_OP_RampScalarLinear", "m_bProportionalOp");

// Atribuições para C_OP_RotateVector
// C_OP_RotateVector Offsets
C_OP_RotateVector.m_nFieldOutput = findOffsetByName(j, "C_OP_RotateVector", "m_nFieldOutput");
C_OP_RotateVector.m_vecRotAxisMin = findOffsetByName(j, "C_OP_RotateVector", "m_vecRotAxisMin");
C_OP_RotateVector.m_vecRotAxisMax = findOffsetByName(j, "C_OP_RotateVector", "m_vecRotAxisMax");
C_OP_RotateVector.m_flRotRateMin = findOffsetByName(j, "C_OP_RotateVector", "m_flRotRateMin");
C_OP_RotateVector.m_flRotRateMax = findOffsetByName(j, "C_OP_RotateVector", "m_flRotRateMax");
C_OP_RotateVector.m_bNormalize = findOffsetByName(j, "C_OP_RotateVector", "m_bNormalize");
C_OP_RotateVector.m_flScale = findOffsetByName(j, "C_OP_RotateVector", "m_flScale");

// Atribuições para C_INIT_InitVecCollection
// C_INIT_InitVecCollection Offsets
C_INIT_InitVecCollection.m_InputValue = findOffsetByName(j, "C_INIT_InitVecCollection", "m_InputValue");
C_INIT_InitVecCollection.m_nOutputField = findOffsetByName(j, "C_INIT_InitVecCollection", "m_nOutputField");

// Atribuições para C_INIT_SequenceFromCP
// C_INIT_SequenceFromCP Offsets
C_INIT_SequenceFromCP.m_bKillUnused = findOffsetByName(j, "C_INIT_SequenceFromCP", "m_bKillUnused");
C_INIT_SequenceFromCP.m_bRadiusScale = findOffsetByName(j, "C_INIT_SequenceFromCP", "m_bRadiusScale");
C_INIT_SequenceFromCP.m_nCP = findOffsetByName(j, "C_INIT_SequenceFromCP", "m_nCP");
C_INIT_SequenceFromCP.m_vecOffset = findOffsetByName(j, "C_INIT_SequenceFromCP", "m_vecOffset");

// Atribuições para C_OP_CPOffsetToPercentageBetweenCPs
// C_OP_CPOffsetToPercentageBetweenCPs Offsets
C_OP_CPOffsetToPercentageBetweenCPs.m_flInputMin = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_flInputMin");
C_OP_CPOffsetToPercentageBetweenCPs.m_flInputMax = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_flInputMax");
C_OP_CPOffsetToPercentageBetweenCPs.m_flInputBias = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_flInputBias");
C_OP_CPOffsetToPercentageBetweenCPs.m_nStartCP = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_nStartCP");
C_OP_CPOffsetToPercentageBetweenCPs.m_nEndCP = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_nEndCP");
C_OP_CPOffsetToPercentageBetweenCPs.m_nOffsetCP = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_nOffsetCP");
C_OP_CPOffsetToPercentageBetweenCPs.m_nOuputCP = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_nOuputCP");
C_OP_CPOffsetToPercentageBetweenCPs.m_nInputCP = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_nInputCP");
C_OP_CPOffsetToPercentageBetweenCPs.m_bRadialCheck = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_bRadialCheck");
C_OP_CPOffsetToPercentageBetweenCPs.m_bScaleOffset = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_bScaleOffset");
C_OP_CPOffsetToPercentageBetweenCPs.m_vecOffset = findOffsetByName(j, "C_OP_CPOffsetToPercentageBetweenCPs", "m_vecOffset");

// Atribuições para C_OP_LerpEndCapScalar
// C_OP_LerpEndCapScalar Offsets
C_OP_LerpEndCapScalar.m_nFieldOutput = findOffsetByName(j, "C_OP_LerpEndCapScalar", "m_nFieldOutput");
C_OP_LerpEndCapScalar.m_flOutput = findOffsetByName(j, "C_OP_LerpEndCapScalar", "m_flOutput");
C_OP_LerpEndCapScalar.m_flLerpTime = findOffsetByName(j, "C_OP_LerpEndCapScalar", "m_flLerpTime");

// Atribuições para CPulseCell_Step_PublicOutput
// CPulseCell_Step_PublicOutput Offsets
CPulseCell_Step_PublicOutput.m_OutputIndex = findOffsetByName(j, "CPulseCell_Step_PublicOutput", "m_OutputIndex");

// Atribuições para CPulseCell_Test_MultiOutflow_WithParams
// CPulseCell_Test_MultiOutflow_WithParams Offsets
CPulseCell_Test_MultiOutflow_WithParams.m_Out1 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams", "m_Out1");
CPulseCell_Test_MultiOutflow_WithParams.m_Out2 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams", "m_Out2");

// Atribuições para PulseRuntimeVarIndex_t
// PulseRuntimeVarIndex_t Offsets
PulseRuntimeVarIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeVarIndex_t", "m_Value");

// Atribuições para PulseRuntimeEntrypointIndex_t
// PulseRuntimeEntrypointIndex_t Offsets
PulseRuntimeEntrypointIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeEntrypointIndex_t", "m_Value");

// Atribuições para PulseRuntimeDomainValueIndex_t
// PulseRuntimeDomainValueIndex_t Offsets
PulseRuntimeDomainValueIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeDomainValueIndex_t", "m_Value");

// Atribuições para CPulse_Chunk
// CPulse_Chunk Offsets
CPulse_Chunk.m_Instructions = findOffsetByName(j, "CPulse_Chunk", "m_Instructions");
CPulse_Chunk.m_Registers = findOffsetByName(j, "CPulse_Chunk", "m_Registers");
CPulse_Chunk.m_InstructionEditorIDs = findOffsetByName(j, "CPulse_Chunk", "m_InstructionEditorIDs");

// Atribuições para PulseRuntimeInvokeIndex_t
// PulseRuntimeInvokeIndex_t Offsets
PulseRuntimeInvokeIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeInvokeIndex_t", "m_Value");

// Atribuições para CPulseCell_Outflow_CycleOrdered__InstanceState_t
// CPulseCell_Outflow_CycleOrdered__InstanceState_t Offsets
CPulseCell_Outflow_CycleOrdered__InstanceState_t.m_nNextIndex = findOffsetByName(j, "CPulseCell_Outflow_CycleOrdered__InstanceState_t", "m_nNextIndex");

// Atribuições para CPulseCell_WaitForCursorsWithTagBase
// CPulseCell_WaitForCursorsWithTagBase Offsets
CPulseCell_WaitForCursorsWithTagBase.m_nCursorsAllowedToWait = findOffsetByName(j, "CPulseCell_WaitForCursorsWithTagBase", "m_nCursorsAllowedToWait");
CPulseCell_WaitForCursorsWithTagBase.m_WaitComplete = findOffsetByName(j, "CPulseCell_WaitForCursorsWithTagBase", "m_WaitComplete");

// Atribuições para PulseRuntimeRegisterIndex_t
// PulseRuntimeRegisterIndex_t Offsets
PulseRuntimeRegisterIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeRegisterIndex_t", "m_Value");

// Atribuições para CPulseCell_Timeline__TimelineEvent_t
// CPulseCell_Timeline__TimelineEvent_t Offsets
CPulseCell_Timeline__TimelineEvent_t.m_flTimeFromPrevious = findOffsetByName(j, "CPulseCell_Timeline__TimelineEvent_t", "m_flTimeFromPrevious");
CPulseCell_Timeline__TimelineEvent_t.m_bPauseForPreviousEvents = findOffsetByName(j, "CPulseCell_Timeline__TimelineEvent_t", "m_bPauseForPreviousEvents");
CPulseCell_Timeline__TimelineEvent_t.m_bCallModeSync = findOffsetByName(j, "CPulseCell_Timeline__TimelineEvent_t", "m_bCallModeSync");
CPulseCell_Timeline__TimelineEvent_t.m_EventOutflow = findOffsetByName(j, "CPulseCell_Timeline__TimelineEvent_t", "m_EventOutflow");

// Atribuições para CPulse_OutflowConnection
// CPulse_OutflowConnection Offsets
CPulse_OutflowConnection.m_SourceOutflowName = findOffsetByName(j, "CPulse_OutflowConnection", "m_SourceOutflowName");
CPulse_OutflowConnection.m_nDestChunk = findOffsetByName(j, "CPulse_OutflowConnection", "m_nDestChunk");
CPulse_OutflowConnection.m_nInstruction = findOffsetByName(j, "CPulse_OutflowConnection", "m_nInstruction");
CPulse_OutflowConnection.m_OutflowRegisterMap = findOffsetByName(j, "CPulse_OutflowConnection", "m_OutflowRegisterMap");

// Atribuições para PulseCursorID_t
// PulseCursorID_t Offsets
PulseCursorID_t.m_Value = findOffsetByName(j, "PulseCursorID_t", "m_Value");

// Atribuições para CPulseCell_Base
// CPulseCell_Base Offsets
CPulseCell_Base.m_nEditorNodeID = findOffsetByName(j, "CPulseCell_Base", "m_nEditorNodeID");

// Atribuições para CPulseCell_Test_MultiOutflow_WithParams_Yielding__CursorState_t
// CPulseCell_Test_MultiOutflow_WithParams_Yielding__CursorState_t Offsets
CPulseCell_Test_MultiOutflow_WithParams_Yielding__CursorState_t.nTestStep = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding__CursorState_t", "nTestStep");

// Atribuições para PulseGraphExecutionHistoryCursorDesc_t
// PulseGraphExecutionHistoryCursorDesc_t Offsets
PulseGraphExecutionHistoryCursorDesc_t.vecAncestorCursorIDs = findOffsetByName(j, "PulseGraphExecutionHistoryCursorDesc_t", "vecAncestorCursorIDs");
PulseGraphExecutionHistoryCursorDesc_t.nSpawnNodeID = findOffsetByName(j, "PulseGraphExecutionHistoryCursorDesc_t", "nSpawnNodeID");
PulseGraphExecutionHistoryCursorDesc_t.nRetiredAtNodeID = findOffsetByName(j, "PulseGraphExecutionHistoryCursorDesc_t", "nRetiredAtNodeID");
PulseGraphExecutionHistoryCursorDesc_t.flLastReferenced = findOffsetByName(j, "PulseGraphExecutionHistoryCursorDesc_t", "flLastReferenced");
PulseGraphExecutionHistoryCursorDesc_t.nLastValidEntryIdx = findOffsetByName(j, "PulseGraphExecutionHistoryCursorDesc_t", "nLastValidEntryIdx");

// Atribuições para CPulseCell_Inflow_Yield
// CPulseCell_Inflow_Yield Offsets
CPulseCell_Inflow_Yield.m_UnyieldResume = findOffsetByName(j, "CPulseCell_Inflow_Yield", "m_UnyieldResume");

// Atribuições para CPulseCell_Inflow_GraphHook
// CPulseCell_Inflow_GraphHook Offsets
CPulseCell_Inflow_GraphHook.m_HookName = findOffsetByName(j, "CPulseCell_Inflow_GraphHook", "m_HookName");

// Atribuições para CPulseCell_Inflow_Wait
// CPulseCell_Inflow_Wait Offsets
CPulseCell_Inflow_Wait.m_WakeResume = findOffsetByName(j, "CPulseCell_Inflow_Wait", "m_WakeResume");

// Atribuições para CTestDomainDerived_Cursor
// CTestDomainDerived_Cursor Offsets
CTestDomainDerived_Cursor.m_nCursorValueA = findOffsetByName(j, "CTestDomainDerived_Cursor", "m_nCursorValueA");
CTestDomainDerived_Cursor.m_nCursorValueB = findOffsetByName(j, "CTestDomainDerived_Cursor", "m_nCursorValueB");

// Atribuições para PulseRegisterMap_t
// PulseRegisterMap_t Offsets
PulseRegisterMap_t.m_Inparams = findOffsetByName(j, "PulseRegisterMap_t", "m_Inparams");
PulseRegisterMap_t.m_Outparams = findOffsetByName(j, "PulseRegisterMap_t", "m_Outparams");

// Atribuições para CPulseCell_CursorQueue
// CPulseCell_CursorQueue Offsets
CPulseCell_CursorQueue.m_nCursorsAllowedToRunParallel = findOffsetByName(j, "CPulseCell_CursorQueue", "m_nCursorsAllowedToRunParallel");

// Atribuições para PulseNodeDynamicOutflows_t
// PulseNodeDynamicOutflows_t Offsets
PulseNodeDynamicOutflows_t.m_Outflows = findOffsetByName(j, "PulseNodeDynamicOutflows_t", "m_Outflows");

// Atribuições para CPulseCell_Unknown
// CPulseCell_Unknown Offsets
CPulseCell_Unknown.m_UnknownKeys = findOffsetByName(j, "CPulseCell_Unknown", "m_UnknownKeys");

// Atribuições para CPulseCell_Outflow_StringSwitch
// CPulseCell_Outflow_StringSwitch Offsets
CPulseCell_Outflow_StringSwitch.m_DefaultCaseOutflow = findOffsetByName(j, "CPulseCell_Outflow_StringSwitch", "m_DefaultCaseOutflow");
CPulseCell_Outflow_StringSwitch.m_CaseOutflows = findOffsetByName(j, "CPulseCell_Outflow_StringSwitch", "m_CaseOutflows");

// Atribuições para CPulseCell_FireCursors
// CPulseCell_FireCursors Offsets
CPulseCell_FireCursors.m_Outflows = findOffsetByName(j, "CPulseCell_FireCursors", "m_Outflows");
CPulseCell_FireCursors.m_bWaitForChildOutflows = findOffsetByName(j, "CPulseCell_FireCursors", "m_bWaitForChildOutflows");
CPulseCell_FireCursors.m_OnFinished = findOffsetByName(j, "CPulseCell_FireCursors", "m_OnFinished");
CPulseCell_FireCursors.m_OnCanceled = findOffsetByName(j, "CPulseCell_FireCursors", "m_OnCanceled");

// Atribuições para CPulseCell_Outflow_CycleShuffled__InstanceState_t
// CPulseCell_Outflow_CycleShuffled__InstanceState_t Offsets
CPulseCell_Outflow_CycleShuffled__InstanceState_t.m_Shuffle = findOffsetByName(j, "CPulseCell_Outflow_CycleShuffled__InstanceState_t", "m_Shuffle");
CPulseCell_Outflow_CycleShuffled__InstanceState_t.m_nNextShuffle = findOffsetByName(j, "CPulseCell_Outflow_CycleShuffled__InstanceState_t", "m_nNextShuffle");

// Atribuições para CPulseCell_Outflow_CycleRandom
// CPulseCell_Outflow_CycleRandom Offsets
CPulseCell_Outflow_CycleRandom.m_Outputs = findOffsetByName(j, "CPulseCell_Outflow_CycleRandom", "m_Outputs");

// Atribuições para CPulseCell_Inflow_EventHandler
// CPulseCell_Inflow_EventHandler Offsets
CPulseCell_Inflow_EventHandler.m_EventName = findOffsetByName(j, "CPulseCell_Inflow_EventHandler", "m_EventName");

// Atribuições para CPulseCell_BaseLerp__CursorState_t
// CPulseCell_BaseLerp__CursorState_t Offsets
CPulseCell_BaseLerp__CursorState_t.m_StartTime = findOffsetByName(j, "CPulseCell_BaseLerp__CursorState_t", "m_StartTime");
CPulseCell_BaseLerp__CursorState_t.m_EndTime = findOffsetByName(j, "CPulseCell_BaseLerp__CursorState_t", "m_EndTime");

// Atribuições para CPulse_PublicOutput
// CPulse_PublicOutput Offsets
CPulse_PublicOutput.m_Name = findOffsetByName(j, "CPulse_PublicOutput", "m_Name");
CPulse_PublicOutput.m_Description = findOffsetByName(j, "CPulse_PublicOutput", "m_Description");
CPulse_PublicOutput.m_ParamType = findOffsetByName(j, "CPulse_PublicOutput", "m_ParamType");

// Atribuições para CPulseCell_Timeline
// CPulseCell_Timeline Offsets
CPulseCell_Timeline.m_TimelineEvents = findOffsetByName(j, "CPulseCell_Timeline", "m_TimelineEvents");
CPulseCell_Timeline.m_bWaitForChildOutflows = findOffsetByName(j, "CPulseCell_Timeline", "m_bWaitForChildOutflows");
CPulseCell_Timeline.m_OnFinished = findOffsetByName(j, "CPulseCell_Timeline", "m_OnFinished");
CPulseCell_Timeline.m_OnCanceled = findOffsetByName(j, "CPulseCell_Timeline", "m_OnCanceled");

// Atribuições para CPulse_OutputConnection
// CPulse_OutputConnection Offsets
CPulse_OutputConnection.m_SourceOutput = findOffsetByName(j, "CPulse_OutputConnection", "m_SourceOutput");
CPulse_OutputConnection.m_TargetEntity = findOffsetByName(j, "CPulse_OutputConnection", "m_TargetEntity");
CPulse_OutputConnection.m_TargetInput = findOffsetByName(j, "CPulse_OutputConnection", "m_TargetInput");
CPulse_OutputConnection.m_Param = findOffsetByName(j, "CPulse_OutputConnection", "m_Param");

// Atribuições para CPulseCell_LimitCount
// CPulseCell_LimitCount Offsets
CPulseCell_LimitCount.m_nLimitCount = findOffsetByName(j, "CPulseCell_LimitCount", "m_nLimitCount");

// Atribuições para PulseGraphExecutionHistoryNodeDesc_t
// PulseGraphExecutionHistoryNodeDesc_t Offsets
PulseGraphExecutionHistoryNodeDesc_t.strCellDesc = findOffsetByName(j, "PulseGraphExecutionHistoryNodeDesc_t", "strCellDesc");
PulseGraphExecutionHistoryNodeDesc_t.strBindingName = findOffsetByName(j, "PulseGraphExecutionHistoryNodeDesc_t", "strBindingName");

// Atribuições para CPulseCell_Step_CallExternalMethod
// CPulseCell_Step_CallExternalMethod Offsets
CPulseCell_Step_CallExternalMethod.m_MethodName = findOffsetByName(j, "CPulseCell_Step_CallExternalMethod", "m_MethodName");
CPulseCell_Step_CallExternalMethod.m_GameBlackboard = findOffsetByName(j, "CPulseCell_Step_CallExternalMethod", "m_GameBlackboard");
CPulseCell_Step_CallExternalMethod.m_ExpectedArgs = findOffsetByName(j, "CPulseCell_Step_CallExternalMethod", "m_ExpectedArgs");
CPulseCell_Step_CallExternalMethod.m_nAsyncCallMode = findOffsetByName(j, "CPulseCell_Step_CallExternalMethod", "m_nAsyncCallMode");
CPulseCell_Step_CallExternalMethod.m_OnFinished = findOffsetByName(j, "CPulseCell_Step_CallExternalMethod", "m_OnFinished");

// Atribuições para PulseGraphExecutionHistoryEntry_t
// PulseGraphExecutionHistoryEntry_t Offsets
PulseGraphExecutionHistoryEntry_t.nCursorID = findOffsetByName(j, "PulseGraphExecutionHistoryEntry_t", "nCursorID");
PulseGraphExecutionHistoryEntry_t.nEditorID = findOffsetByName(j, "PulseGraphExecutionHistoryEntry_t", "nEditorID");
PulseGraphExecutionHistoryEntry_t.flExecTime = findOffsetByName(j, "PulseGraphExecutionHistoryEntry_t", "flExecTime");
PulseGraphExecutionHistoryEntry_t.unFlags = findOffsetByName(j, "PulseGraphExecutionHistoryEntry_t", "unFlags");
PulseGraphExecutionHistoryEntry_t.tagName = findOffsetByName(j, "PulseGraphExecutionHistoryEntry_t", "tagName");

// Atribuições para PulseCursorYieldToken_t
// PulseCursorYieldToken_t Offsets
PulseCursorYieldToken_t.m_Value = findOffsetByName(j, "PulseCursorYieldToken_t", "m_Value");

// Atribuições para CPulseGraphExecutionHistory
// CPulseGraphExecutionHistory Offsets
CPulseGraphExecutionHistory.m_nInstanceID = findOffsetByName(j, "CPulseGraphExecutionHistory", "m_nInstanceID");
CPulseGraphExecutionHistory.m_strFileName = findOffsetByName(j, "CPulseGraphExecutionHistory", "m_strFileName");
CPulseGraphExecutionHistory.m_vecHistory = findOffsetByName(j, "CPulseGraphExecutionHistory", "m_vecHistory");
CPulseGraphExecutionHistory.m_mapCellDesc = findOffsetByName(j, "CPulseGraphExecutionHistory", "m_mapCellDesc");
CPulseGraphExecutionHistory.m_mapCursorDesc = findOffsetByName(j, "CPulseGraphExecutionHistory", "m_mapCursorDesc");

// Atribuições para CPulseCell_TestWaitWithCursorState
// CPulseCell_TestWaitWithCursorState Offsets
CPulseCell_TestWaitWithCursorState.m_WakeResume = findOffsetByName(j, "CPulseCell_TestWaitWithCursorState", "m_WakeResume");
CPulseCell_TestWaitWithCursorState.m_WakeCancel = findOffsetByName(j, "CPulseCell_TestWaitWithCursorState", "m_WakeCancel");
CPulseCell_TestWaitWithCursorState.m_WakeFail = findOffsetByName(j, "CPulseCell_TestWaitWithCursorState", "m_WakeFail");

// Atribuições para CPulseCell_Inflow_ObservableVariableListener
// CPulseCell_Inflow_ObservableVariableListener Offsets
CPulseCell_Inflow_ObservableVariableListener.m_BlackboardReference = findOffsetByName(j, "CPulseCell_Inflow_ObservableVariableListener", "m_BlackboardReference");
CPulseCell_Inflow_ObservableVariableListener.m_bSelfReference = findOffsetByName(j, "CPulseCell_Inflow_ObservableVariableListener", "m_bSelfReference");

// Atribuições para PGDInstruction_t
// PGDInstruction_t Offsets
PGDInstruction_t.m_nCode = findOffsetByName(j, "PGDInstruction_t", "m_nCode");
PGDInstruction_t.m_nVar = findOffsetByName(j, "PGDInstruction_t", "m_nVar");
PGDInstruction_t.m_nReg0 = findOffsetByName(j, "PGDInstruction_t", "m_nReg0");
PGDInstruction_t.m_nReg1 = findOffsetByName(j, "PGDInstruction_t", "m_nReg1");
PGDInstruction_t.m_nReg2 = findOffsetByName(j, "PGDInstruction_t", "m_nReg2");
PGDInstruction_t.m_nInvokeBindingIndex = findOffsetByName(j, "PGDInstruction_t", "m_nInvokeBindingIndex");
PGDInstruction_t.m_nChunk = findOffsetByName(j, "PGDInstruction_t", "m_nChunk");
PGDInstruction_t.m_nDestInstruction = findOffsetByName(j, "PGDInstruction_t", "m_nDestInstruction");
PGDInstruction_t.m_nCallInfoIndex = findOffsetByName(j, "PGDInstruction_t", "m_nCallInfoIndex");
PGDInstruction_t.m_nConstIdx = findOffsetByName(j, "PGDInstruction_t", "m_nConstIdx");
PGDInstruction_t.m_nDomainValueIdx = findOffsetByName(j, "PGDInstruction_t", "m_nDomainValueIdx");
PGDInstruction_t.m_nBlackboardReferenceIdx = findOffsetByName(j, "PGDInstruction_t", "m_nBlackboardReferenceIdx");

// Atribuições para CPulse_InvokeBinding
// CPulse_InvokeBinding Offsets
CPulse_InvokeBinding.m_RegisterMap = findOffsetByName(j, "CPulse_InvokeBinding", "m_RegisterMap");
CPulse_InvokeBinding.m_FuncName = findOffsetByName(j, "CPulse_InvokeBinding", "m_FuncName");
CPulse_InvokeBinding.m_nCellIndex = findOffsetByName(j, "CPulse_InvokeBinding", "m_nCellIndex");
CPulse_InvokeBinding.m_nSrcChunk = findOffsetByName(j, "CPulse_InvokeBinding", "m_nSrcChunk");
CPulse_InvokeBinding.m_nSrcInstruction = findOffsetByName(j, "CPulse_InvokeBinding", "m_nSrcInstruction");

// Atribuições para CPulse_Variable
// CPulse_Variable Offsets
CPulse_Variable.m_Name = findOffsetByName(j, "CPulse_Variable", "m_Name");
CPulse_Variable.m_Description = findOffsetByName(j, "CPulse_Variable", "m_Description");
CPulse_Variable.m_Type = findOffsetByName(j, "CPulse_Variable", "m_Type");
CPulse_Variable.m_DefaultValue = findOffsetByName(j, "CPulse_Variable", "m_DefaultValue");
CPulse_Variable.m_bIsPublic = findOffsetByName(j, "CPulse_Variable", "m_bIsPublic");
CPulse_Variable.m_bIsObservable = findOffsetByName(j, "CPulse_Variable", "m_bIsObservable");
CPulse_Variable.m_nEditorNodeID = findOffsetByName(j, "CPulse_Variable", "m_nEditorNodeID");

// Atribuições para CPulseCell_Inflow_Method
// CPulseCell_Inflow_Method Offsets
CPulseCell_Inflow_Method.m_MethodName = findOffsetByName(j, "CPulseCell_Inflow_Method", "m_MethodName");
CPulseCell_Inflow_Method.m_Description = findOffsetByName(j, "CPulseCell_Inflow_Method", "m_Description");
CPulseCell_Inflow_Method.m_bIsPublic = findOffsetByName(j, "CPulseCell_Inflow_Method", "m_bIsPublic");
CPulseCell_Inflow_Method.m_ReturnType = findOffsetByName(j, "CPulseCell_Inflow_Method", "m_ReturnType");
CPulseCell_Inflow_Method.m_Args = findOffsetByName(j, "CPulseCell_Inflow_Method", "m_Args");

// Atribuições para CPulseGraphInstance_TestDomain
// CPulseGraphInstance_TestDomain Offsets
CPulseGraphInstance_TestDomain.m_bIsRunningUnitTests = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_bIsRunningUnitTests");
CPulseGraphInstance_TestDomain.m_bExplicitTimeStepping = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_bExplicitTimeStepping");
CPulseGraphInstance_TestDomain.m_bExpectingToDestroyWithYieldedCursors = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_bExpectingToDestroyWithYieldedCursors");
CPulseGraphInstance_TestDomain.m_nNextValidateIndex = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_nNextValidateIndex");
CPulseGraphInstance_TestDomain.m_Tracepoints = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_Tracepoints");
CPulseGraphInstance_TestDomain.m_bTestYesOrNoPath = findOffsetByName(j, "CPulseGraphInstance_TestDomain", "m_bTestYesOrNoPath");

// Atribuições para PulseNodeDynamicOutflows_t__DynamicOutflow_t
// PulseNodeDynamicOutflows_t__DynamicOutflow_t Offsets
PulseNodeDynamicOutflows_t__DynamicOutflow_t.m_OutflowID = findOffsetByName(j, "PulseNodeDynamicOutflows_t__DynamicOutflow_t", "m_OutflowID");
PulseNodeDynamicOutflows_t__DynamicOutflow_t.m_Connection = findOffsetByName(j, "PulseNodeDynamicOutflows_t__DynamicOutflow_t", "m_Connection");

// Atribuições para CPulseCell_Outflow_CycleShuffled
// CPulseCell_Outflow_CycleShuffled Offsets
CPulseCell_Outflow_CycleShuffled.m_Outputs = findOffsetByName(j, "CPulseCell_Outflow_CycleShuffled", "m_Outputs");

// Atribuições para PulseRuntimeOutputIndex_t
// PulseRuntimeOutputIndex_t Offsets
PulseRuntimeOutputIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeOutputIndex_t", "m_Value");

// Atribuições para CPulseCell_WaitForCursorsWithTagBase__CursorState_t
// CPulseCell_WaitForCursorsWithTagBase__CursorState_t Offsets
CPulseCell_WaitForCursorsWithTagBase__CursorState_t.m_TagName = findOffsetByName(j, "CPulseCell_WaitForCursorsWithTagBase__CursorState_t", "m_TagName");

// Atribuições para CPulseCell_TestWaitWithCursorState__CursorState_t
// CPulseCell_TestWaitWithCursorState__CursorState_t Offsets
CPulseCell_TestWaitWithCursorState__CursorState_t.flWaitValue = findOffsetByName(j, "CPulseCell_TestWaitWithCursorState__CursorState_t", "flWaitValue");
CPulseCell_TestWaitWithCursorState__CursorState_t.bFailOnCancel = findOffsetByName(j, "CPulseCell_TestWaitWithCursorState__CursorState_t", "bFailOnCancel");

// Atribuições para CPulse_DomainValue
// CPulse_DomainValue Offsets
CPulse_DomainValue.m_nType = findOffsetByName(j, "CPulse_DomainValue", "m_nType");
CPulse_DomainValue.m_Value = findOffsetByName(j, "CPulse_DomainValue", "m_Value");
CPulse_DomainValue.m_ExpectedRuntimeType = findOffsetByName(j, "CPulse_DomainValue", "m_ExpectedRuntimeType");

// Atribuições para CPulseCell_Step_TestDomainEntFire
// CPulseCell_Step_TestDomainEntFire Offsets
CPulseCell_Step_TestDomainEntFire.m_Input = findOffsetByName(j, "CPulseCell_Step_TestDomainEntFire", "m_Input");

// Atribuições para PulseRuntimeBlackboardReferenceIndex_t
// PulseRuntimeBlackboardReferenceIndex_t Offsets
PulseRuntimeBlackboardReferenceIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeBlackboardReferenceIndex_t", "m_Value");

// Atribuições para CPulseCell_Test_MultiOutflow_WithParams_Yielding
// CPulseCell_Test_MultiOutflow_WithParams_Yielding Offsets
CPulseCell_Test_MultiOutflow_WithParams_Yielding.m_Out1 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding", "m_Out1");
CPulseCell_Test_MultiOutflow_WithParams_Yielding.m_AsyncChild1 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding", "m_AsyncChild1");
CPulseCell_Test_MultiOutflow_WithParams_Yielding.m_AsyncChild2 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding", "m_AsyncChild2");
CPulseCell_Test_MultiOutflow_WithParams_Yielding.m_YieldResume1 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding", "m_YieldResume1");
CPulseCell_Test_MultiOutflow_WithParams_Yielding.m_YieldResume2 = findOffsetByName(j, "CPulseCell_Test_MultiOutflow_WithParams_Yielding", "m_YieldResume2");

// Atribuições para CPulseGraphInstance_TestDomain_Derived
// CPulseGraphInstance_TestDomain_Derived Offsets
CPulseGraphInstance_TestDomain_Derived.m_nInstanceValueX = findOffsetByName(j, "CPulseGraphInstance_TestDomain_Derived", "m_nInstanceValueX");

// Atribuições para CPulseCell_Inflow_EntOutputHandler
// CPulseCell_Inflow_EntOutputHandler Offsets
CPulseCell_Inflow_EntOutputHandler.m_SourceEntity = findOffsetByName(j, "CPulseCell_Inflow_EntOutputHandler", "m_SourceEntity");
CPulseCell_Inflow_EntOutputHandler.m_SourceOutput = findOffsetByName(j, "CPulseCell_Inflow_EntOutputHandler", "m_SourceOutput");
CPulseCell_Inflow_EntOutputHandler.m_TargetInput = findOffsetByName(j, "CPulseCell_Inflow_EntOutputHandler", "m_TargetInput");
CPulseCell_Inflow_EntOutputHandler.m_ExpectedParamType = findOffsetByName(j, "CPulseCell_Inflow_EntOutputHandler", "m_ExpectedParamType");

// Atribuições para PulseRuntimeConstantIndex_t
// PulseRuntimeConstantIndex_t Offsets
PulseRuntimeConstantIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeConstantIndex_t", "m_Value");

// Atribuições para PulseDocNodeID_t
// PulseDocNodeID_t Offsets
PulseDocNodeID_t.m_Value = findOffsetByName(j, "PulseDocNodeID_t", "m_Value");

// Atribuições para CPulse_BlackboardReference
// CPulse_BlackboardReference Offsets
CPulse_BlackboardReference.m_hBlackboardResource = findOffsetByName(j, "CPulse_BlackboardReference", "m_hBlackboardResource");
CPulse_BlackboardReference.m_BlackboardResource = findOffsetByName(j, "CPulse_BlackboardReference", "m_BlackboardResource");
CPulse_BlackboardReference.m_nNodeID = findOffsetByName(j, "CPulse_BlackboardReference", "m_nNodeID");
CPulse_BlackboardReference.m_NodeName = findOffsetByName(j, "CPulse_BlackboardReference", "m_NodeName");

// Atribuições para CPulseCell_LimitCount__InstanceState_t
// CPulseCell_LimitCount__InstanceState_t Offsets
CPulseCell_LimitCount__InstanceState_t.m_nCurrentCount = findOffsetByName(j, "CPulseCell_LimitCount__InstanceState_t", "m_nCurrentCount");

// Atribuições para CPulse_CallInfo
// CPulse_CallInfo Offsets
CPulse_CallInfo.m_PortName = findOffsetByName(j, "CPulse_CallInfo", "m_PortName");
CPulse_CallInfo.m_nEditorNodeID = findOffsetByName(j, "CPulse_CallInfo", "m_nEditorNodeID");
CPulse_CallInfo.m_RegisterMap = findOffsetByName(j, "CPulse_CallInfo", "m_RegisterMap");
CPulse_CallInfo.m_CallMethodID = findOffsetByName(j, "CPulse_CallInfo", "m_CallMethodID");
CPulse_CallInfo.m_nSrcChunk = findOffsetByName(j, "CPulse_CallInfo", "m_nSrcChunk");
CPulse_CallInfo.m_nSrcInstruction = findOffsetByName(j, "CPulse_CallInfo", "m_nSrcInstruction");

// Atribuições para CPulse_RegisterInfo
// CPulse_RegisterInfo Offsets
CPulse_RegisterInfo.m_nReg = findOffsetByName(j, "CPulse_RegisterInfo", "m_nReg");
CPulse_RegisterInfo.m_Type = findOffsetByName(j, "CPulse_RegisterInfo", "m_Type");
CPulse_RegisterInfo.m_OriginName = findOffsetByName(j, "CPulse_RegisterInfo", "m_OriginName");
CPulse_RegisterInfo.m_nWrittenByInstruction = findOffsetByName(j, "CPulse_RegisterInfo", "m_nWrittenByInstruction");
CPulse_RegisterInfo.m_nLastReadByInstruction = findOffsetByName(j, "CPulse_RegisterInfo", "m_nLastReadByInstruction");

// Atribuições para PulseRuntimeCellIndex_t
// PulseRuntimeCellIndex_t Offsets
PulseRuntimeCellIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeCellIndex_t", "m_Value");

// Atribuições para PulseGraphInstanceID_t
// PulseGraphInstanceID_t Offsets
PulseGraphInstanceID_t.m_Value = findOffsetByName(j, "PulseGraphInstanceID_t", "m_Value");

// Atribuições para CPulseCell_Outflow_IntSwitch
// CPulseCell_Outflow_IntSwitch Offsets
CPulseCell_Outflow_IntSwitch.m_DefaultCaseOutflow = findOffsetByName(j, "CPulseCell_Outflow_IntSwitch", "m_DefaultCaseOutflow");
CPulseCell_Outflow_IntSwitch.m_CaseOutflows = findOffsetByName(j, "CPulseCell_Outflow_IntSwitch", "m_CaseOutflows");

// Atribuições para CPulseGraphDef
// CPulseGraphDef Offsets
CPulseGraphDef.m_DomainIdentifier = findOffsetByName(j, "CPulseGraphDef", "m_DomainIdentifier");
CPulseGraphDef.m_ParentMapName = findOffsetByName(j, "CPulseGraphDef", "m_ParentMapName");
CPulseGraphDef.m_ParentXmlName = findOffsetByName(j, "CPulseGraphDef", "m_ParentXmlName");
CPulseGraphDef.m_vecGameBlackboards = findOffsetByName(j, "CPulseGraphDef", "m_vecGameBlackboards");
CPulseGraphDef.m_Chunks = findOffsetByName(j, "CPulseGraphDef", "m_Chunks");
CPulseGraphDef.m_Cells = findOffsetByName(j, "CPulseGraphDef", "m_Cells");
CPulseGraphDef.m_Vars = findOffsetByName(j, "CPulseGraphDef", "m_Vars");
CPulseGraphDef.m_PublicOutputs = findOffsetByName(j, "CPulseGraphDef", "m_PublicOutputs");
CPulseGraphDef.m_InvokeBindings = findOffsetByName(j, "CPulseGraphDef", "m_InvokeBindings");
CPulseGraphDef.m_CallInfos = findOffsetByName(j, "CPulseGraphDef", "m_CallInfos");
CPulseGraphDef.m_Constants = findOffsetByName(j, "CPulseGraphDef", "m_Constants");
CPulseGraphDef.m_DomainValues = findOffsetByName(j, "CPulseGraphDef", "m_DomainValues");
CPulseGraphDef.m_BlackboardReferences = findOffsetByName(j, "CPulseGraphDef", "m_BlackboardReferences");
CPulseGraphDef.m_OutputConnections = findOffsetByName(j, "CPulseGraphDef", "m_OutputConnections");

// Atribuições para CPulse_Constant
// CPulse_Constant Offsets
CPulse_Constant.m_Type = findOffsetByName(j, "CPulse_Constant", "m_Type");
CPulse_Constant.m_Value = findOffsetByName(j, "CPulse_Constant", "m_Value");

// Atribuições para CPulseCell_WaitForCursorsWithTag
// CPulseCell_WaitForCursorsWithTag Offsets
CPulseCell_WaitForCursorsWithTag.m_bTagSelfWhenComplete = findOffsetByName(j, "CPulseCell_WaitForCursorsWithTag", "m_bTagSelfWhenComplete");
CPulseCell_WaitForCursorsWithTag.m_nDesiredKillPriority = findOffsetByName(j, "CPulseCell_WaitForCursorsWithTag", "m_nDesiredKillPriority");

// Atribuições para CPulseCell_Inflow_BaseEntrypoint
// CPulseCell_Inflow_BaseEntrypoint Offsets
CPulseCell_Inflow_BaseEntrypoint.m_EntryChunk = findOffsetByName(j, "CPulseCell_Inflow_BaseEntrypoint", "m_EntryChunk");
CPulseCell_Inflow_BaseEntrypoint.m_RegisterMap = findOffsetByName(j, "CPulseCell_Inflow_BaseEntrypoint", "m_RegisterMap");

// Atribuições para PulseRuntimeCallInfoIndex_t
// PulseRuntimeCallInfoIndex_t Offsets
PulseRuntimeCallInfoIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeCallInfoIndex_t", "m_Value");

// Atribuições para CPulseCell_BaseLerp
// CPulseCell_BaseLerp Offsets
CPulseCell_BaseLerp.m_WakeResume = findOffsetByName(j, "CPulseCell_BaseLerp", "m_WakeResume");

// Atribuições para CPulseCell_Outflow_TestExplicitYesNo
// CPulseCell_Outflow_TestExplicitYesNo Offsets
CPulseCell_Outflow_TestExplicitYesNo.m_Yes = findOffsetByName(j, "CPulseCell_Outflow_TestExplicitYesNo", "m_Yes");
CPulseCell_Outflow_TestExplicitYesNo.m_No = findOffsetByName(j, "CPulseCell_Outflow_TestExplicitYesNo", "m_No");

// Atribuições para CPulseCell_Outflow_TestRandomYesNo
// CPulseCell_Outflow_TestRandomYesNo Offsets
CPulseCell_Outflow_TestRandomYesNo.m_Yes = findOffsetByName(j, "CPulseCell_Outflow_TestRandomYesNo", "m_Yes");
CPulseCell_Outflow_TestRandomYesNo.m_No = findOffsetByName(j, "CPulseCell_Outflow_TestRandomYesNo", "m_No");

// Atribuições para PulseRuntimeChunkIndex_t
// PulseRuntimeChunkIndex_t Offsets
PulseRuntimeChunkIndex_t.m_Value = findOffsetByName(j, "PulseRuntimeChunkIndex_t", "m_Value");

// Atribuições para CPulseCell_Outflow_CycleOrdered
// CPulseCell_Outflow_CycleOrdered Offsets
CPulseCell_Outflow_CycleOrdered.m_Outputs = findOffsetByName(j, "CPulseCell_Outflow_CycleOrdered", "m_Outputs");

// Atribuições para CPulseRuntimeMethodArg
// CPulseRuntimeMethodArg Offsets
CPulseRuntimeMethodArg.m_Name = findOffsetByName(j, "CPulseRuntimeMethodArg", "m_Name");
CPulseRuntimeMethodArg.m_Description = findOffsetByName(j, "CPulseRuntimeMethodArg", "m_Description");
CPulseRuntimeMethodArg.m_Type = findOffsetByName(j, "CPulseRuntimeMethodArg", "m_Type");

// Atribuições para PulseRuntimeStateOffset_t
// PulseRuntimeStateOffset_t Offsets
PulseRuntimeStateOffset_t.m_Value = findOffsetByName(j, "PulseRuntimeStateOffset_t", "m_Value");

// Atribuições para CPulseTurtleGraphicsCursor
// CPulseTurtleGraphicsCursor Offsets
CPulseTurtleGraphicsCursor.m_Color = findOffsetByName(j, "CPulseTurtleGraphicsCursor", "m_Color");
CPulseTurtleGraphicsCursor.m_vPos = findOffsetByName(j, "CPulseTurtleGraphicsCursor", "m_vPos");
CPulseTurtleGraphicsCursor.m_flHeadingDeg = findOffsetByName(j, "CPulseTurtleGraphicsCursor", "m_flHeadingDeg");
CPulseTurtleGraphicsCursor.m_bPenUp = findOffsetByName(j, "CPulseTurtleGraphicsCursor", "m_bPenUp");

// Atribuições para VsInputSignatureElement_t
// VsInputSignatureElement_t Offsets
VsInputSignatureElement_t.m_pName = findOffsetByName(j, "VsInputSignatureElement_t", "m_pName");
VsInputSignatureElement_t.m_pSemantic = findOffsetByName(j, "VsInputSignatureElement_t", "m_pSemantic");
VsInputSignatureElement_t.m_pD3DSemanticName = findOffsetByName(j, "VsInputSignatureElement_t", "m_pD3DSemanticName");
VsInputSignatureElement_t.m_nD3DSemanticIndex = findOffsetByName(j, "VsInputSignatureElement_t", "m_nD3DSemanticIndex");

// Atribuições para VsInputSignature_t
// VsInputSignature_t Offsets
VsInputSignature_t.m_elems = findOffsetByName(j, "VsInputSignature_t", "m_elems");

// Atribuições para RenderInputLayoutField_t
// RenderInputLayoutField_t Offsets
RenderInputLayoutField_t.m_pSemanticName = findOffsetByName(j, "RenderInputLayoutField_t", "m_pSemanticName");
RenderInputLayoutField_t.m_nSemanticIndex = findOffsetByName(j, "RenderInputLayoutField_t", "m_nSemanticIndex");
RenderInputLayoutField_t.m_Format = findOffsetByName(j, "RenderInputLayoutField_t", "m_Format");
RenderInputLayoutField_t.m_nOffset = findOffsetByName(j, "RenderInputLayoutField_t", "m_nOffset");
RenderInputLayoutField_t.m_nSlot = findOffsetByName(j, "RenderInputLayoutField_t", "m_nSlot");
RenderInputLayoutField_t.m_nSlotType = findOffsetByName(j, "RenderInputLayoutField_t", "m_nSlotType");
RenderInputLayoutField_t.m_nInstanceStepRate = findOffsetByName(j, "RenderInputLayoutField_t", "m_nInstanceStepRate");

// Atribuições para PackedAABB_t
// PackedAABB_t Offsets
PackedAABB_t.m_nPackedMin = findOffsetByName(j, "PackedAABB_t", "m_nPackedMin");
PackedAABB_t.m_nPackedMax = findOffsetByName(j, "PackedAABB_t", "m_nPackedMax");

// Atribuições para ConstantInfo_t
// ConstantInfo_t Offsets
ConstantInfo_t.m_name = findOffsetByName(j, "ConstantInfo_t", "m_name");
ConstantInfo_t.m_nameToken = findOffsetByName(j, "ConstantInfo_t", "m_nameToken");
ConstantInfo_t.m_flValue = findOffsetByName(j, "ConstantInfo_t", "m_flValue");

// Atribuições para FuseFunctionIndex_t
// FuseFunctionIndex_t Offsets
FuseFunctionIndex_t.m_Value = findOffsetByName(j, "FuseFunctionIndex_t", "m_Value");

// Atribuições para CFuseSymbolTable
// CFuseSymbolTable Offsets
CFuseSymbolTable.m_constants = findOffsetByName(j, "CFuseSymbolTable", "m_constants");
CFuseSymbolTable.m_variables = findOffsetByName(j, "CFuseSymbolTable", "m_variables");
CFuseSymbolTable.m_functions = findOffsetByName(j, "CFuseSymbolTable", "m_functions");
CFuseSymbolTable.m_constantMap = findOffsetByName(j, "CFuseSymbolTable", "m_constantMap");
CFuseSymbolTable.m_variableMap = findOffsetByName(j, "CFuseSymbolTable", "m_variableMap");
CFuseSymbolTable.m_functionMap = findOffsetByName(j, "CFuseSymbolTable", "m_functionMap");

// Atribuições para TestResource_t
// TestResource_t Offsets
TestResource_t.m_name = findOffsetByName(j, "TestResource_t", "m_name");

// Atribuições para AABB_t
// AABB_t Offsets
AABB_t.m_vMinBounds = findOffsetByName(j, "AABB_t", "m_vMinBounds");
AABB_t.m_vMaxBounds = findOffsetByName(j, "AABB_t", "m_vMaxBounds");

// Atribuições para VariableInfo_t
// VariableInfo_t Offsets
VariableInfo_t.m_name = findOffsetByName(j, "VariableInfo_t", "m_name");
VariableInfo_t.m_nameToken = findOffsetByName(j, "VariableInfo_t", "m_nameToken");
VariableInfo_t.m_nIndex = findOffsetByName(j, "VariableInfo_t", "m_nIndex");
VariableInfo_t.m_nNumComponents = findOffsetByName(j, "VariableInfo_t", "m_nNumComponents");
VariableInfo_t.m_eVarType = findOffsetByName(j, "VariableInfo_t", "m_eVarType");
VariableInfo_t.m_eAccess = findOffsetByName(j, "VariableInfo_t", "m_eAccess");

// Atribuições para FourQuaternions
// FourQuaternions Offsets
FourQuaternions.x = findOffsetByName(j, "FourQuaternions", "x");
FourQuaternions.y = findOffsetByName(j, "FourQuaternions", "y");
FourQuaternions.z = findOffsetByName(j, "FourQuaternions", "z");
FourQuaternions.w = findOffsetByName(j, "FourQuaternions", "w");

// Atribuições para CFuseProgram
// CFuseProgram Offsets
CFuseProgram.m_programBuffer = findOffsetByName(j, "CFuseProgram", "m_programBuffer");
CFuseProgram.m_variablesRead = findOffsetByName(j, "CFuseProgram", "m_variablesRead");
CFuseProgram.m_variablesWritten = findOffsetByName(j, "CFuseProgram", "m_variablesWritten");
CFuseProgram.m_nMaxTempVarsUsed = findOffsetByName(j, "CFuseProgram", "m_nMaxTempVarsUsed");

// Atribuições para FunctionInfo_t
// FunctionInfo_t Offsets
FunctionInfo_t.m_name = findOffsetByName(j, "FunctionInfo_t", "m_name");
FunctionInfo_t.m_nameToken = findOffsetByName(j, "FunctionInfo_t", "m_nameToken");
FunctionInfo_t.m_nParamCount = findOffsetByName(j, "FunctionInfo_t", "m_nParamCount");
FunctionInfo_t.m_nIndex = findOffsetByName(j, "FunctionInfo_t", "m_nIndex");
FunctionInfo_t.m_bIsPure = findOffsetByName(j, "FunctionInfo_t", "m_bIsPure");

// Atribuições para FuseVariableIndex_t
// FuseVariableIndex_t Offsets
FuseVariableIndex_t.m_Value = findOffsetByName(j, "FuseVariableIndex_t", "m_Value");

// Atribuições para ManifestTestResource_t
// ManifestTestResource_t Offsets
ManifestTestResource_t.m_name = findOffsetByName(j, "ManifestTestResource_t", "m_name");
ManifestTestResource_t.m_child = findOffsetByName(j, "ManifestTestResource_t", "m_child");

// Atribuições para CSSDSMsg_ViewTarget
// CSSDSMsg_ViewTarget Offsets
CSSDSMsg_ViewTarget.m_Name = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_Name");
CSSDSMsg_ViewTarget.m_TextureId = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_TextureId");
CSSDSMsg_ViewTarget.m_nWidth = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nWidth");
CSSDSMsg_ViewTarget.m_nHeight = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nHeight");
CSSDSMsg_ViewTarget.m_nRequestedWidth = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nRequestedWidth");
CSSDSMsg_ViewTarget.m_nRequestedHeight = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nRequestedHeight");
CSSDSMsg_ViewTarget.m_nNumMipLevels = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nNumMipLevels");
CSSDSMsg_ViewTarget.m_nDepth = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nDepth");
CSSDSMsg_ViewTarget.m_nMultisampleNumSamples = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nMultisampleNumSamples");
CSSDSMsg_ViewTarget.m_nFormat = findOffsetByName(j, "CSSDSMsg_ViewTarget", "m_nFormat");

// Atribuições para SceneViewId_t
// SceneViewId_t Offsets
SceneViewId_t.m_nViewId = findOffsetByName(j, "SceneViewId_t", "m_nViewId");
SceneViewId_t.m_nFrameCount = findOffsetByName(j, "SceneViewId_t", "m_nFrameCount");

// Atribuições para CSSDSEndFrameViewInfo
// CSSDSEndFrameViewInfo Offsets
CSSDSEndFrameViewInfo.m_nViewId = findOffsetByName(j, "CSSDSEndFrameViewInfo", "m_nViewId");
CSSDSEndFrameViewInfo.m_ViewName = findOffsetByName(j, "CSSDSEndFrameViewInfo", "m_ViewName");

// Atribuições para CSSDSMsg_LayerBase
// CSSDSMsg_LayerBase Offsets
CSSDSMsg_LayerBase.m_viewId = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_viewId");
CSSDSMsg_LayerBase.m_ViewName = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_ViewName");
CSSDSMsg_LayerBase.m_nLayerIndex = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_nLayerIndex");
CSSDSMsg_LayerBase.m_nLayerId = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_nLayerId");
CSSDSMsg_LayerBase.m_LayerName = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_LayerName");
CSSDSMsg_LayerBase.m_displayText = findOffsetByName(j, "CSSDSMsg_LayerBase", "m_displayText");

// Atribuições para CSSDSMsg_ViewTargetList
// CSSDSMsg_ViewTargetList Offsets
CSSDSMsg_ViewTargetList.m_viewId = findOffsetByName(j, "CSSDSMsg_ViewTargetList", "m_viewId");
CSSDSMsg_ViewTargetList.m_ViewName = findOffsetByName(j, "CSSDSMsg_ViewTargetList", "m_ViewName");
CSSDSMsg_ViewTargetList.m_Targets = findOffsetByName(j, "CSSDSMsg_ViewTargetList", "m_Targets");

// Atribuições para CSSDSMsg_ViewRender
// CSSDSMsg_ViewRender Offsets
CSSDSMsg_ViewRender.m_viewId = findOffsetByName(j, "CSSDSMsg_ViewRender", "m_viewId");
CSSDSMsg_ViewRender.m_ViewName = findOffsetByName(j, "CSSDSMsg_ViewRender", "m_ViewName");

// Atribuições para CSSDSMsg_EndFrame
// CSSDSMsg_EndFrame Offsets
CSSDSMsg_EndFrame.m_Views = findOffsetByName(j, "CSSDSMsg_EndFrame", "m_Views");

// Atribuições para CSchemaSystemInternalRegistration
// CSchemaSystemInternalRegistration Offsets
CSchemaSystemInternalRegistration.m_Vector2D = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_Vector2D");
CSchemaSystemInternalRegistration.m_Vector = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_Vector");
CSchemaSystemInternalRegistration.m_VectorAligned = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_VectorAligned");
CSchemaSystemInternalRegistration.m_Quaternion = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_Quaternion");
CSchemaSystemInternalRegistration.m_QAngle = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_QAngle");
CSchemaSystemInternalRegistration.m_RotationVector = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_RotationVector");
CSchemaSystemInternalRegistration.m_RadianEuler = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_RadianEuler");
CSchemaSystemInternalRegistration.m_DegreeEuler = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_DegreeEuler");
CSchemaSystemInternalRegistration.m_QuaternionStorage = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_QuaternionStorage");
CSchemaSystemInternalRegistration.m_matrix3x4_t = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_matrix3x4_t");
CSchemaSystemInternalRegistration.m_matrix3x4a_t = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_matrix3x4a_t");
CSchemaSystemInternalRegistration.m_Color = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_Color");
CSchemaSystemInternalRegistration.m_Vector4D = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_Vector4D");
CSchemaSystemInternalRegistration.m_CTransform = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_CTransform");
CSchemaSystemInternalRegistration.m_pKeyValues = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_pKeyValues");
CSchemaSystemInternalRegistration.m_CUtlBinaryBlock = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_CUtlBinaryBlock");
CSchemaSystemInternalRegistration.m_CUtlString = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_CUtlString");
CSchemaSystemInternalRegistration.m_CUtlSymbol = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_CUtlSymbol");
CSchemaSystemInternalRegistration.m_stringToken = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_stringToken");
CSchemaSystemInternalRegistration.m_stringTokenWithStorage = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_stringTokenWithStorage");
CSchemaSystemInternalRegistration.m_ResourceTypes = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_ResourceTypes");
CSchemaSystemInternalRegistration.m_KV3 = findOffsetByName(j, "CSchemaSystemInternalRegistration", "m_KV3");

// Atribuições para CExampleSchemaVData_PolymorphicDerivedA
// CExampleSchemaVData_PolymorphicDerivedA Offsets
CExampleSchemaVData_PolymorphicDerivedA.m_nDerivedA = findOffsetByName(j, "CExampleSchemaVData_PolymorphicDerivedA", "m_nDerivedA");

// Atribuições para CExampleSchemaVData_PolymorphicBase
// CExampleSchemaVData_PolymorphicBase Offsets
CExampleSchemaVData_PolymorphicBase.m_nBase = findOffsetByName(j, "CExampleSchemaVData_PolymorphicBase", "m_nBase");

// Atribuições para CExampleSchemaVData_PolymorphicDerivedB
// CExampleSchemaVData_PolymorphicDerivedB Offsets
CExampleSchemaVData_PolymorphicDerivedB.m_nDerivedB = findOffsetByName(j, "CExampleSchemaVData_PolymorphicDerivedB", "m_nDerivedB");

// Atribuições para ResourceId_t
// ResourceId_t Offsets
ResourceId_t.m_Value = findOffsetByName(j, "ResourceId_t", "m_Value");

// Atribuições para CExampleSchemaVData_Monomorphic
// CExampleSchemaVData_Monomorphic Offsets
CExampleSchemaVData_Monomorphic.m_nExample1 = findOffsetByName(j, "CExampleSchemaVData_Monomorphic", "m_nExample1");
CExampleSchemaVData_Monomorphic.m_nExample2 = findOffsetByName(j, "CExampleSchemaVData_Monomorphic", "m_nExample2");

// Atribuições para CHostageExpresserShim
// CHostageExpresserShim Offsets
CHostageExpresserShim.m_pExpresser = findOffsetByName(j, "CHostageExpresserShim", "m_pExpresser");

// Atribuições para CTriggerSoundscape
// CTriggerSoundscape Offsets
CTriggerSoundscape.m_hSoundscape = findOffsetByName(j, "CTriggerSoundscape", "m_hSoundscape");
CTriggerSoundscape.m_SoundscapeName = findOffsetByName(j, "CTriggerSoundscape", "m_SoundscapeName");
CTriggerSoundscape.m_spectators = findOffsetByName(j, "CTriggerSoundscape", "m_spectators");

// Atribuições para CDynamicProp
// CDynamicProp Offsets
CDynamicProp.m_bCreateNavObstacle = findOffsetByName(j, "CDynamicProp", "m_bCreateNavObstacle");
CDynamicProp.m_bNavObstacleUpdatesOverridden = findOffsetByName(j, "CDynamicProp", "m_bNavObstacleUpdatesOverridden");
CDynamicProp.m_bUseHitboxesForRenderBox = findOffsetByName(j, "CDynamicProp", "m_bUseHitboxesForRenderBox");
CDynamicProp.m_bUseAnimGraph = findOffsetByName(j, "CDynamicProp", "m_bUseAnimGraph");
CDynamicProp.m_pOutputAnimBegun = findOffsetByName(j, "CDynamicProp", "m_pOutputAnimBegun");
CDynamicProp.m_pOutputAnimOver = findOffsetByName(j, "CDynamicProp", "m_pOutputAnimOver");
CDynamicProp.m_pOutputAnimLoopCycleOver = findOffsetByName(j, "CDynamicProp", "m_pOutputAnimLoopCycleOver");
CDynamicProp.m_OnAnimReachedStart = findOffsetByName(j, "CDynamicProp", "m_OnAnimReachedStart");
CDynamicProp.m_OnAnimReachedEnd = findOffsetByName(j, "CDynamicProp", "m_OnAnimReachedEnd");
CDynamicProp.m_iszIdleAnim = findOffsetByName(j, "CDynamicProp", "m_iszIdleAnim");
CDynamicProp.m_nIdleAnimLoopMode = findOffsetByName(j, "CDynamicProp", "m_nIdleAnimLoopMode");
CDynamicProp.m_bRandomizeCycle = findOffsetByName(j, "CDynamicProp", "m_bRandomizeCycle");
CDynamicProp.m_bStartDisabled = findOffsetByName(j, "CDynamicProp", "m_bStartDisabled");
CDynamicProp.m_bFiredStartEndOutput = findOffsetByName(j, "CDynamicProp", "m_bFiredStartEndOutput");
CDynamicProp.m_bForceNpcExclude = findOffsetByName(j, "CDynamicProp", "m_bForceNpcExclude");
CDynamicProp.m_bCreateNonSolid = findOffsetByName(j, "CDynamicProp", "m_bCreateNonSolid");
CDynamicProp.m_bIsOverrideProp = findOffsetByName(j, "CDynamicProp", "m_bIsOverrideProp");
CDynamicProp.m_iInitialGlowState = findOffsetByName(j, "CDynamicProp", "m_iInitialGlowState");
CDynamicProp.m_nGlowRange = findOffsetByName(j, "CDynamicProp", "m_nGlowRange");
CDynamicProp.m_nGlowRangeMin = findOffsetByName(j, "CDynamicProp", "m_nGlowRangeMin");
CDynamicProp.m_glowColor = findOffsetByName(j, "CDynamicProp", "m_glowColor");
CDynamicProp.m_nGlowTeam = findOffsetByName(j, "CDynamicProp", "m_nGlowTeam");

// Atribuições para CFists
// CFists Offsets
CFists.m_bPlayingUninterruptableAct = findOffsetByName(j, "CFists", "m_bPlayingUninterruptableAct");
CFists.m_nUninterruptableActivity = findOffsetByName(j, "CFists", "m_nUninterruptableActivity");
CFists.m_bRestorePrevWep = findOffsetByName(j, "CFists", "m_bRestorePrevWep");
CFists.m_hWeaponBeforePrevious = findOffsetByName(j, "CFists", "m_hWeaponBeforePrevious");
CFists.m_hWeaponPrevious = findOffsetByName(j, "CFists", "m_hWeaponPrevious");
CFists.m_bDelayedHardPunchIncoming = findOffsetByName(j, "CFists", "m_bDelayedHardPunchIncoming");
CFists.m_bDestroyAfterTaunt = findOffsetByName(j, "CFists", "m_bDestroyAfterTaunt");

// Atribuições para CTriggerRemove
// CTriggerRemove Offsets
CTriggerRemove.m_OnRemove = findOffsetByName(j, "CTriggerRemove", "m_OnRemove");

// Atribuições para CFilterName
// CFilterName Offsets
CFilterName.m_iFilterName = findOffsetByName(j, "CFilterName", "m_iFilterName");

// Atribuições para CProjectedDecal
// CProjectedDecal Offsets
CProjectedDecal.m_nTexture = findOffsetByName(j, "CProjectedDecal", "m_nTexture");
CProjectedDecal.m_flDistance = findOffsetByName(j, "CProjectedDecal", "m_flDistance");

// Atribuições para CTriggerMultiple
// CTriggerMultiple Offsets
CTriggerMultiple.m_OnTrigger = findOffsetByName(j, "CTriggerMultiple", "m_OnTrigger");

// Atribuições para CTriggerPush
// CTriggerPush Offsets
CTriggerPush.m_angPushEntitySpace = findOffsetByName(j, "CTriggerPush", "m_angPushEntitySpace");
CTriggerPush.m_vecPushDirEntitySpace = findOffsetByName(j, "CTriggerPush", "m_vecPushDirEntitySpace");
CTriggerPush.m_bTriggerOnStartTouch = findOffsetByName(j, "CTriggerPush", "m_bTriggerOnStartTouch");
CTriggerPush.m_bUsePathSimple = findOffsetByName(j, "CTriggerPush", "m_bUsePathSimple");
CTriggerPush.m_iszPathSimpleName = findOffsetByName(j, "CTriggerPush", "m_iszPathSimpleName");
CTriggerPush.m_PathSimple = findOffsetByName(j, "CTriggerPush", "m_PathSimple");
CTriggerPush.m_splinePushType = findOffsetByName(j, "CTriggerPush", "m_splinePushType");

// Atribuições para FilterHealth
// FilterHealth Offsets
FilterHealth.m_bAdrenalineActive = findOffsetByName(j, "FilterHealth", "m_bAdrenalineActive");
FilterHealth.m_iHealthMin = findOffsetByName(j, "FilterHealth", "m_iHealthMin");
FilterHealth.m_iHealthMax = findOffsetByName(j, "FilterHealth", "m_iHealthMax");

// Atribuições para CTriggerProximity
// CTriggerProximity Offsets
CTriggerProximity.m_hMeasureTarget = findOffsetByName(j, "CTriggerProximity", "m_hMeasureTarget");
CTriggerProximity.m_iszMeasureTarget = findOffsetByName(j, "CTriggerProximity", "m_iszMeasureTarget");
CTriggerProximity.m_fRadius = findOffsetByName(j, "CTriggerProximity", "m_fRadius");
CTriggerProximity.m_nTouchers = findOffsetByName(j, "CTriggerProximity", "m_nTouchers");
CTriggerProximity.m_NearestEntityDistance = findOffsetByName(j, "CTriggerProximity", "m_NearestEntityDistance");

// Atribuições para CFuncElectrifiedVolume
// CFuncElectrifiedVolume Offsets
CFuncElectrifiedVolume.m_EffectName = findOffsetByName(j, "CFuncElectrifiedVolume", "m_EffectName");
CFuncElectrifiedVolume.m_EffectInterpenetrateName = findOffsetByName(j, "CFuncElectrifiedVolume", "m_EffectInterpenetrateName");
CFuncElectrifiedVolume.m_EffectZapName = findOffsetByName(j, "CFuncElectrifiedVolume", "m_EffectZapName");
CFuncElectrifiedVolume.m_iszEffectSource = findOffsetByName(j, "CFuncElectrifiedVolume", "m_iszEffectSource");

// Atribuições para CBaseDMStart
// CBaseDMStart Offsets
CBaseDMStart.m_Master = findOffsetByName(j, "CBaseDMStart", "m_Master");

// Atribuições para CCSGameRulesProxy
// CCSGameRulesProxy Offsets
CCSGameRulesProxy.m_pGameRules = findOffsetByName(j, "CCSGameRulesProxy", "m_pGameRules");

// Atribuições para CTriggerBrush
// CTriggerBrush Offsets
CTriggerBrush.m_OnStartTouch = findOffsetByName(j, "CTriggerBrush", "m_OnStartTouch");
CTriggerBrush.m_OnEndTouch = findOffsetByName(j, "CTriggerBrush", "m_OnEndTouch");
CTriggerBrush.m_OnUse = findOffsetByName(j, "CTriggerBrush", "m_OnUse");
CTriggerBrush.m_iInputFilter = findOffsetByName(j, "CTriggerBrush", "m_iInputFilter");
CTriggerBrush.m_iDontMessageParent = findOffsetByName(j, "CTriggerBrush", "m_iDontMessageParent");

// Atribuições para CEnvBeam
// CEnvBeam Offsets
CEnvBeam.m_active = findOffsetByName(j, "CEnvBeam", "m_active");
CEnvBeam.m_spriteTexture = findOffsetByName(j, "CEnvBeam", "m_spriteTexture");
CEnvBeam.m_iszStartEntity = findOffsetByName(j, "CEnvBeam", "m_iszStartEntity");
CEnvBeam.m_iszEndEntity = findOffsetByName(j, "CEnvBeam", "m_iszEndEntity");
CEnvBeam.m_life = findOffsetByName(j, "CEnvBeam", "m_life");
CEnvBeam.m_boltWidth = findOffsetByName(j, "CEnvBeam", "m_boltWidth");
CEnvBeam.m_noiseAmplitude = findOffsetByName(j, "CEnvBeam", "m_noiseAmplitude");
CEnvBeam.m_speed = findOffsetByName(j, "CEnvBeam", "m_speed");
CEnvBeam.m_restrike = findOffsetByName(j, "CEnvBeam", "m_restrike");
CEnvBeam.m_iszSpriteName = findOffsetByName(j, "CEnvBeam", "m_iszSpriteName");
CEnvBeam.m_frameStart = findOffsetByName(j, "CEnvBeam", "m_frameStart");
CEnvBeam.m_vEndPointWorld = findOffsetByName(j, "CEnvBeam", "m_vEndPointWorld");
CEnvBeam.m_vEndPointRelative = findOffsetByName(j, "CEnvBeam", "m_vEndPointRelative");
CEnvBeam.m_radius = findOffsetByName(j, "CEnvBeam", "m_radius");
CEnvBeam.m_TouchType = findOffsetByName(j, "CEnvBeam", "m_TouchType");
CEnvBeam.m_iFilterName = findOffsetByName(j, "CEnvBeam", "m_iFilterName");
CEnvBeam.m_hFilter = findOffsetByName(j, "CEnvBeam", "m_hFilter");
CEnvBeam.m_iszDecal = findOffsetByName(j, "CEnvBeam", "m_iszDecal");
CEnvBeam.m_OnTouchedByEntity = findOffsetByName(j, "CEnvBeam", "m_OnTouchedByEntity");

// Atribuições para CTonemapTrigger
// CTonemapTrigger Offsets
CTonemapTrigger.m_tonemapControllerName = findOffsetByName(j, "CTonemapTrigger", "m_tonemapControllerName");
CTonemapTrigger.m_hTonemapController = findOffsetByName(j, "CTonemapTrigger", "m_hTonemapController");

// Atribuições para CFogTrigger
// CFogTrigger Offsets
CFogTrigger.m_fog = findOffsetByName(j, "CFogTrigger", "m_fog");

// Atribuições para CLogicCollisionPair
// CLogicCollisionPair Offsets
CLogicCollisionPair.m_nameAttach1 = findOffsetByName(j, "CLogicCollisionPair", "m_nameAttach1");
CLogicCollisionPair.m_nameAttach2 = findOffsetByName(j, "CLogicCollisionPair", "m_nameAttach2");
CLogicCollisionPair.m_supportMultipleEntitiesWithSameName = findOffsetByName(j, "CLogicCollisionPair", "m_supportMultipleEntitiesWithSameName");
CLogicCollisionPair.m_disabled = findOffsetByName(j, "CLogicCollisionPair", "m_disabled");
CLogicCollisionPair.m_succeeded = findOffsetByName(j, "CLogicCollisionPair", "m_succeeded");

// Atribuições para CPointTeleport
// CPointTeleport Offsets
CPointTeleport.m_vSaveOrigin = findOffsetByName(j, "CPointTeleport", "m_vSaveOrigin");
CPointTeleport.m_vSaveAngles = findOffsetByName(j, "CPointTeleport", "m_vSaveAngles");
CPointTeleport.m_bTeleportParentedEntities = findOffsetByName(j, "CPointTeleport", "m_bTeleportParentedEntities");
CPointTeleport.m_bTeleportUseCurrentAngle = findOffsetByName(j, "CPointTeleport", "m_bTeleportUseCurrentAngle");

// Atribuições para CBtNodeConditionInactive
// CBtNodeConditionInactive Offsets
CBtNodeConditionInactive.m_flRoundStartThresholdSeconds = findOffsetByName(j, "CBtNodeConditionInactive", "m_flRoundStartThresholdSeconds");
CBtNodeConditionInactive.m_flSensorInactivityThresholdSeconds = findOffsetByName(j, "CBtNodeConditionInactive", "m_flSensorInactivityThresholdSeconds");
CBtNodeConditionInactive.m_SensorInactivityTimer = findOffsetByName(j, "CBtNodeConditionInactive", "m_SensorInactivityTimer");

// Atribuições para CTriggerBuoyancy
// CTriggerBuoyancy Offsets
CTriggerBuoyancy.m_BuoyancyHelper = findOffsetByName(j, "CTriggerBuoyancy", "m_BuoyancyHelper");
CTriggerBuoyancy.m_flFluidDensity = findOffsetByName(j, "CTriggerBuoyancy", "m_flFluidDensity");

// Atribuições para CMoverPathNode
// CMoverPathNode Offsets
CMoverPathNode.m_vInTangentLocal = findOffsetByName(j, "CMoverPathNode", "m_vInTangentLocal");
CMoverPathNode.m_vOutTangentLocal = findOffsetByName(j, "CMoverPathNode", "m_vOutTangentLocal");
CMoverPathNode.m_szParentPathUniqueID = findOffsetByName(j, "CMoverPathNode", "m_szParentPathUniqueID");
CMoverPathNode.m_OnPassThrough = findOffsetByName(j, "CMoverPathNode", "m_OnPassThrough");
CMoverPathNode.m_OnPassThroughForward = findOffsetByName(j, "CMoverPathNode", "m_OnPassThroughForward");
CMoverPathNode.m_OnPassThroughReverse = findOffsetByName(j, "CMoverPathNode", "m_OnPassThroughReverse");
CMoverPathNode.m_hMover = findOffsetByName(j, "CMoverPathNode", "m_hMover");

// Atribuições para CBtActionAim
// CBtActionAim Offsets
CBtActionAim.m_szSensorInputKey = findOffsetByName(j, "CBtActionAim", "m_szSensorInputKey");
CBtActionAim.m_szAimReadyKey = findOffsetByName(j, "CBtActionAim", "m_szAimReadyKey");
CBtActionAim.m_flZoomCooldownTimestamp = findOffsetByName(j, "CBtActionAim", "m_flZoomCooldownTimestamp");
CBtActionAim.m_bDoneAiming = findOffsetByName(j, "CBtActionAim", "m_bDoneAiming");
CBtActionAim.m_flLerpStartTime = findOffsetByName(j, "CBtActionAim", "m_flLerpStartTime");
CBtActionAim.m_flNextLookTargetLerpTime = findOffsetByName(j, "CBtActionAim", "m_flNextLookTargetLerpTime");
CBtActionAim.m_flPenaltyReductionRatio = findOffsetByName(j, "CBtActionAim", "m_flPenaltyReductionRatio");
CBtActionAim.m_NextLookTarget = findOffsetByName(j, "CBtActionAim", "m_NextLookTarget");
CBtActionAim.m_AimTimer = findOffsetByName(j, "CBtActionAim", "m_AimTimer");
CBtActionAim.m_SniperHoldTimer = findOffsetByName(j, "CBtActionAim", "m_SniperHoldTimer");
CBtActionAim.m_FocusIntervalTimer = findOffsetByName(j, "CBtActionAim", "m_FocusIntervalTimer");
CBtActionAim.m_bAcquired = findOffsetByName(j, "CBtActionAim", "m_bAcquired");

// Atribuições para CFogController
// CFogController Offsets
CFogController.m_fog = findOffsetByName(j, "CFogController", "m_fog");
CFogController.m_bUseAngles = findOffsetByName(j, "CFogController", "m_bUseAngles");
CFogController.m_iChangedVariables = findOffsetByName(j, "CFogController", "m_iChangedVariables");

// Atribuições para CDecoyProjectile
// CDecoyProjectile Offsets
CDecoyProjectile.m_nDecoyShotTick = findOffsetByName(j, "CDecoyProjectile", "m_nDecoyShotTick");
CDecoyProjectile.m_shotsRemaining = findOffsetByName(j, "CDecoyProjectile", "m_shotsRemaining");
CDecoyProjectile.m_fExpireTime = findOffsetByName(j, "CDecoyProjectile", "m_fExpireTime");
CDecoyProjectile.m_decoyWeaponDefIndex = findOffsetByName(j, "CDecoyProjectile", "m_decoyWeaponDefIndex");

// Atribuições para CPhysicsEntitySolver
// CPhysicsEntitySolver Offsets
CPhysicsEntitySolver.m_hMovingEntity = findOffsetByName(j, "CPhysicsEntitySolver", "m_hMovingEntity");
CPhysicsEntitySolver.m_hPhysicsBlocker = findOffsetByName(j, "CPhysicsEntitySolver", "m_hPhysicsBlocker");
CPhysicsEntitySolver.m_separationDuration = findOffsetByName(j, "CPhysicsEntitySolver", "m_separationDuration");
CPhysicsEntitySolver.m_cancelTime = findOffsetByName(j, "CPhysicsEntitySolver", "m_cancelTime");

// Atribuições para CPlayerPing
// CPlayerPing Offsets
CPlayerPing.m_hPlayer = findOffsetByName(j, "CPlayerPing", "m_hPlayer");
CPlayerPing.m_hPingedEntity = findOffsetByName(j, "CPlayerPing", "m_hPingedEntity");
CPlayerPing.m_iType = findOffsetByName(j, "CPlayerPing", "m_iType");
CPlayerPing.m_bUrgent = findOffsetByName(j, "CPlayerPing", "m_bUrgent");
CPlayerPing.m_szPlaceName = findOffsetByName(j, "CPlayerPing", "m_szPlaceName");

// Atribuições para CEnvFireSensor
// CEnvFireSensor Offsets
CEnvFireSensor.m_bEnabled = findOffsetByName(j, "CEnvFireSensor", "m_bEnabled");
CEnvFireSensor.m_bHeatAtLevel = findOffsetByName(j, "CEnvFireSensor", "m_bHeatAtLevel");
CEnvFireSensor.m_radius = findOffsetByName(j, "CEnvFireSensor", "m_radius");
CEnvFireSensor.m_targetLevel = findOffsetByName(j, "CEnvFireSensor", "m_targetLevel");
CEnvFireSensor.m_targetTime = findOffsetByName(j, "CEnvFireSensor", "m_targetTime");
CEnvFireSensor.m_levelTime = findOffsetByName(j, "CEnvFireSensor", "m_levelTime");
CEnvFireSensor.m_OnHeatLevelStart = findOffsetByName(j, "CEnvFireSensor", "m_OnHeatLevelStart");
CEnvFireSensor.m_OnHeatLevelEnd = findOffsetByName(j, "CEnvFireSensor", "m_OnHeatLevelEnd");

// Atribuições para CEnvWindShared__WindAveEvent_t
// CEnvWindShared__WindAveEvent_t Offsets
CEnvWindShared__WindAveEvent_t.m_flStartWindSpeed = findOffsetByName(j, "CEnvWindShared__WindAveEvent_t", "m_flStartWindSpeed");
CEnvWindShared__WindAveEvent_t.m_flAveWindSpeed = findOffsetByName(j, "CEnvWindShared__WindAveEvent_t", "m_flAveWindSpeed");

// Atribuições para CPointGamestatsCounter
// CPointGamestatsCounter Offsets
CPointGamestatsCounter.m_strStatisticName = findOffsetByName(j, "CPointGamestatsCounter", "m_strStatisticName");
CPointGamestatsCounter.m_bDisabled = findOffsetByName(j, "CPointGamestatsCounter", "m_bDisabled");

// Atribuições para CEnvShake
// CEnvShake Offsets
CEnvShake.m_limitToEntity = findOffsetByName(j, "CEnvShake", "m_limitToEntity");
CEnvShake.m_Amplitude = findOffsetByName(j, "CEnvShake", "m_Amplitude");
CEnvShake.m_Frequency = findOffsetByName(j, "CEnvShake", "m_Frequency");
CEnvShake.m_Duration = findOffsetByName(j, "CEnvShake", "m_Duration");
CEnvShake.m_Radius = findOffsetByName(j, "CEnvShake", "m_Radius");
CEnvShake.m_stopTime = findOffsetByName(j, "CEnvShake", "m_stopTime");
CEnvShake.m_nextShake = findOffsetByName(j, "CEnvShake", "m_nextShake");
CEnvShake.m_currentAmp = findOffsetByName(j, "CEnvShake", "m_currentAmp");
CEnvShake.m_maxForce = findOffsetByName(j, "CEnvShake", "m_maxForce");
CEnvShake.m_shakeCallback = findOffsetByName(j, "CEnvShake", "m_shakeCallback");

// Atribuições para CBaseMoveBehavior
// CBaseMoveBehavior Offsets
CBaseMoveBehavior.m_iPositionInterpolator = findOffsetByName(j, "CBaseMoveBehavior", "m_iPositionInterpolator");
CBaseMoveBehavior.m_iRotationInterpolator = findOffsetByName(j, "CBaseMoveBehavior", "m_iRotationInterpolator");
CBaseMoveBehavior.m_flAnimStartTime = findOffsetByName(j, "CBaseMoveBehavior", "m_flAnimStartTime");
CBaseMoveBehavior.m_flAnimEndTime = findOffsetByName(j, "CBaseMoveBehavior", "m_flAnimEndTime");
CBaseMoveBehavior.m_flAverageSpeedAcrossFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_flAverageSpeedAcrossFrame");
CBaseMoveBehavior.m_pCurrentKeyFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_pCurrentKeyFrame");
CBaseMoveBehavior.m_pTargetKeyFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_pTargetKeyFrame");
CBaseMoveBehavior.m_pPreKeyFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_pPreKeyFrame");
CBaseMoveBehavior.m_pPostKeyFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_pPostKeyFrame");
CBaseMoveBehavior.m_flTimeIntoFrame = findOffsetByName(j, "CBaseMoveBehavior", "m_flTimeIntoFrame");
CBaseMoveBehavior.m_iDirection = findOffsetByName(j, "CBaseMoveBehavior", "m_iDirection");

// Atribuições para CFuncNavObstruction
// CFuncNavObstruction Offsets
CFuncNavObstruction.m_bDisabled = findOffsetByName(j, "CFuncNavObstruction", "m_bDisabled");

// Atribuições para CEnvTilt
// CEnvTilt Offsets
CEnvTilt.m_Duration = findOffsetByName(j, "CEnvTilt", "m_Duration");
CEnvTilt.m_Radius = findOffsetByName(j, "CEnvTilt", "m_Radius");
CEnvTilt.m_TiltTime = findOffsetByName(j, "CEnvTilt", "m_TiltTime");
CEnvTilt.m_stopTime = findOffsetByName(j, "CEnvTilt", "m_stopTime");

// Atribuições para CBaseCSGrenade
// CBaseCSGrenade Offsets
CBaseCSGrenade.m_bRedraw = findOffsetByName(j, "CBaseCSGrenade", "m_bRedraw");
CBaseCSGrenade.m_bIsHeldByPlayer = findOffsetByName(j, "CBaseCSGrenade", "m_bIsHeldByPlayer");
CBaseCSGrenade.m_bPinPulled = findOffsetByName(j, "CBaseCSGrenade", "m_bPinPulled");
CBaseCSGrenade.m_bJumpThrow = findOffsetByName(j, "CBaseCSGrenade", "m_bJumpThrow");
CBaseCSGrenade.m_bThrowAnimating = findOffsetByName(j, "CBaseCSGrenade", "m_bThrowAnimating");
CBaseCSGrenade.m_fThrowTime = findOffsetByName(j, "CBaseCSGrenade", "m_fThrowTime");
CBaseCSGrenade.m_flThrowStrength = findOffsetByName(j, "CBaseCSGrenade", "m_flThrowStrength");
CBaseCSGrenade.m_flThrowStrengthApproach = findOffsetByName(j, "CBaseCSGrenade", "m_flThrowStrengthApproach");
CBaseCSGrenade.m_fDropTime = findOffsetByName(j, "CBaseCSGrenade", "m_fDropTime");
CBaseCSGrenade.m_fPinPullTime = findOffsetByName(j, "CBaseCSGrenade", "m_fPinPullTime");
CBaseCSGrenade.m_bJustPulledPin = findOffsetByName(j, "CBaseCSGrenade", "m_bJustPulledPin");
CBaseCSGrenade.m_nNextHoldTick = findOffsetByName(j, "CBaseCSGrenade", "m_nNextHoldTick");
CBaseCSGrenade.m_flNextHoldFrac = findOffsetByName(j, "CBaseCSGrenade", "m_flNextHoldFrac");
CBaseCSGrenade.m_hSwitchToWeaponAfterThrow = findOffsetByName(j, "CBaseCSGrenade", "m_hSwitchToWeaponAfterThrow");

// Atribuições para CItemGenericTriggerHelper
// CItemGenericTriggerHelper Offsets
CItemGenericTriggerHelper.m_hParentItem = findOffsetByName(j, "CItemGenericTriggerHelper", "m_hParentItem");

// Atribuições para CLogicBranchList
// CLogicBranchList Offsets
CLogicBranchList.m_nLogicBranchNames = findOffsetByName(j, "CLogicBranchList", "m_nLogicBranchNames");
CLogicBranchList.m_LogicBranchList = findOffsetByName(j, "CLogicBranchList", "m_LogicBranchList");
CLogicBranchList.m_eLastState = findOffsetByName(j, "CLogicBranchList", "m_eLastState");
CLogicBranchList.m_OnAllTrue = findOffsetByName(j, "CLogicBranchList", "m_OnAllTrue");
CLogicBranchList.m_OnAllFalse = findOffsetByName(j, "CLogicBranchList", "m_OnAllFalse");
CLogicBranchList.m_OnMixed = findOffsetByName(j, "CLogicBranchList", "m_OnMixed");

// Atribuições para fogplayerparams_t
// fogplayerparams_t Offsets
fogplayerparams_t.m_hCtrl = findOffsetByName(j, "fogplayerparams_t", "m_hCtrl");
fogplayerparams_t.m_flTransitionTime = findOffsetByName(j, "fogplayerparams_t", "m_flTransitionTime");
fogplayerparams_t.m_OldColor = findOffsetByName(j, "fogplayerparams_t", "m_OldColor");
fogplayerparams_t.m_flOldStart = findOffsetByName(j, "fogplayerparams_t", "m_flOldStart");
fogplayerparams_t.m_flOldEnd = findOffsetByName(j, "fogplayerparams_t", "m_flOldEnd");
fogplayerparams_t.m_flOldMaxDensity = findOffsetByName(j, "fogplayerparams_t", "m_flOldMaxDensity");
fogplayerparams_t.m_flOldHDRColorScale = findOffsetByName(j, "fogplayerparams_t", "m_flOldHDRColorScale");
fogplayerparams_t.m_flOldFarZ = findOffsetByName(j, "fogplayerparams_t", "m_flOldFarZ");
fogplayerparams_t.m_NewColor = findOffsetByName(j, "fogplayerparams_t", "m_NewColor");
fogplayerparams_t.m_flNewStart = findOffsetByName(j, "fogplayerparams_t", "m_flNewStart");
fogplayerparams_t.m_flNewEnd = findOffsetByName(j, "fogplayerparams_t", "m_flNewEnd");
fogplayerparams_t.m_flNewMaxDensity = findOffsetByName(j, "fogplayerparams_t", "m_flNewMaxDensity");
fogplayerparams_t.m_flNewHDRColorScale = findOffsetByName(j, "fogplayerparams_t", "m_flNewHDRColorScale");
fogplayerparams_t.m_flNewFarZ = findOffsetByName(j, "fogplayerparams_t", "m_flNewFarZ");

// Atribuições para CRevertSaved
// CRevertSaved Offsets
CRevertSaved.m_loadTime = findOffsetByName(j, "CRevertSaved", "m_loadTime");
CRevertSaved.m_Duration = findOffsetByName(j, "CRevertSaved", "m_Duration");
CRevertSaved.m_HoldTime = findOffsetByName(j, "CRevertSaved", "m_HoldTime");

// Atribuições para CMultiLightProxy
// CMultiLightProxy Offsets
CMultiLightProxy.m_iszLightNameFilter = findOffsetByName(j, "CMultiLightProxy", "m_iszLightNameFilter");
CMultiLightProxy.m_iszLightClassFilter = findOffsetByName(j, "CMultiLightProxy", "m_iszLightClassFilter");
CMultiLightProxy.m_flLightRadiusFilter = findOffsetByName(j, "CMultiLightProxy", "m_flLightRadiusFilter");
CMultiLightProxy.m_flBrightnessDelta = findOffsetByName(j, "CMultiLightProxy", "m_flBrightnessDelta");
CMultiLightProxy.m_bPerformScreenFade = findOffsetByName(j, "CMultiLightProxy", "m_bPerformScreenFade");
CMultiLightProxy.m_flTargetBrightnessMultiplier = findOffsetByName(j, "CMultiLightProxy", "m_flTargetBrightnessMultiplier");
CMultiLightProxy.m_flCurrentBrightnessMultiplier = findOffsetByName(j, "CMultiLightProxy", "m_flCurrentBrightnessMultiplier");
CMultiLightProxy.m_vecLights = findOffsetByName(j, "CMultiLightProxy", "m_vecLights");

// Atribuições para CLogicCase
// CLogicCase Offsets
CLogicCase.m_nCase = findOffsetByName(j, "CLogicCase", "m_nCase");
CLogicCase.m_nShuffleCases = findOffsetByName(j, "CLogicCase", "m_nShuffleCases");
CLogicCase.m_nLastShuffleCase = findOffsetByName(j, "CLogicCase", "m_nLastShuffleCase");
CLogicCase.m_uchShuffleCaseMap = findOffsetByName(j, "CLogicCase", "m_uchShuffleCaseMap");
CLogicCase.m_OnCase = findOffsetByName(j, "CLogicCase", "m_OnCase");
CLogicCase.m_OnDefault = findOffsetByName(j, "CLogicCase", "m_OnDefault");

// Atribuições para CItemDefuser
// CItemDefuser Offsets
CItemDefuser.m_entitySpottedState = findOffsetByName(j, "CItemDefuser", "m_entitySpottedState");
CItemDefuser.m_nSpotRules = findOffsetByName(j, "CItemDefuser", "m_nSpotRules");

// Atribuições para CSoundEventEntity
// CSoundEventEntity Offsets
CSoundEventEntity.m_bStartOnSpawn = findOffsetByName(j, "CSoundEventEntity", "m_bStartOnSpawn");
CSoundEventEntity.m_bToLocalPlayer = findOffsetByName(j, "CSoundEventEntity", "m_bToLocalPlayer");
CSoundEventEntity.m_bStopOnNew = findOffsetByName(j, "CSoundEventEntity", "m_bStopOnNew");
CSoundEventEntity.m_bSaveRestore = findOffsetByName(j, "CSoundEventEntity", "m_bSaveRestore");
CSoundEventEntity.m_bSavedIsPlaying = findOffsetByName(j, "CSoundEventEntity", "m_bSavedIsPlaying");
CSoundEventEntity.m_flSavedElapsedTime = findOffsetByName(j, "CSoundEventEntity", "m_flSavedElapsedTime");
CSoundEventEntity.m_iszSourceEntityName = findOffsetByName(j, "CSoundEventEntity", "m_iszSourceEntityName");
CSoundEventEntity.m_iszAttachmentName = findOffsetByName(j, "CSoundEventEntity", "m_iszAttachmentName");
CSoundEventEntity.m_onGUIDChanged = findOffsetByName(j, "CSoundEventEntity", "m_onGUIDChanged");
CSoundEventEntity.m_onSoundFinished = findOffsetByName(j, "CSoundEventEntity", "m_onSoundFinished");
CSoundEventEntity.m_flClientCullRadius = findOffsetByName(j, "CSoundEventEntity", "m_flClientCullRadius");
CSoundEventEntity.m_iszSoundName = findOffsetByName(j, "CSoundEventEntity", "m_iszSoundName");
CSoundEventEntity.m_hSource = findOffsetByName(j, "CSoundEventEntity", "m_hSource");
CSoundEventEntity.m_nEntityIndexSelection = findOffsetByName(j, "CSoundEventEntity", "m_nEntityIndexSelection");

// Atribuições para CWeaponBaseItem
// CWeaponBaseItem Offsets
CWeaponBaseItem.m_SequenceCompleteTimer = findOffsetByName(j, "CWeaponBaseItem", "m_SequenceCompleteTimer");
CWeaponBaseItem.m_bRedraw = findOffsetByName(j, "CWeaponBaseItem", "m_bRedraw");

// Atribuições para CEnvVolumetricFogController
// CEnvVolumetricFogController Offsets
CEnvVolumetricFogController.m_flScattering = findOffsetByName(j, "CEnvVolumetricFogController", "m_flScattering");
CEnvVolumetricFogController.m_flAnisotropy = findOffsetByName(j, "CEnvVolumetricFogController", "m_flAnisotropy");
CEnvVolumetricFogController.m_flFadeSpeed = findOffsetByName(j, "CEnvVolumetricFogController", "m_flFadeSpeed");
CEnvVolumetricFogController.m_flDrawDistance = findOffsetByName(j, "CEnvVolumetricFogController", "m_flDrawDistance");
CEnvVolumetricFogController.m_flFadeInStart = findOffsetByName(j, "CEnvVolumetricFogController", "m_flFadeInStart");
CEnvVolumetricFogController.m_flFadeInEnd = findOffsetByName(j, "CEnvVolumetricFogController", "m_flFadeInEnd");
CEnvVolumetricFogController.m_flIndirectStrength = findOffsetByName(j, "CEnvVolumetricFogController", "m_flIndirectStrength");
CEnvVolumetricFogController.m_nVolumeDepth = findOffsetByName(j, "CEnvVolumetricFogController", "m_nVolumeDepth");
CEnvVolumetricFogController.m_fFirstVolumeSliceThickness = findOffsetByName(j, "CEnvVolumetricFogController", "m_fFirstVolumeSliceThickness");
CEnvVolumetricFogController.m_nIndirectTextureDimX = findOffsetByName(j, "CEnvVolumetricFogController", "m_nIndirectTextureDimX");
CEnvVolumetricFogController.m_nIndirectTextureDimY = findOffsetByName(j, "CEnvVolumetricFogController", "m_nIndirectTextureDimY");
CEnvVolumetricFogController.m_nIndirectTextureDimZ = findOffsetByName(j, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ");
CEnvVolumetricFogController.m_vBoxMins = findOffsetByName(j, "CEnvVolumetricFogController", "m_vBoxMins");
CEnvVolumetricFogController.m_vBoxMaxs = findOffsetByName(j, "CEnvVolumetricFogController", "m_vBoxMaxs");
CEnvVolumetricFogController.m_bActive = findOffsetByName(j, "CEnvVolumetricFogController", "m_bActive");
CEnvVolumetricFogController.m_flStartAnisoTime = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartAnisoTime");
CEnvVolumetricFogController.m_flStartScatterTime = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartScatterTime");
CEnvVolumetricFogController.m_flStartDrawDistanceTime = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartDrawDistanceTime");
CEnvVolumetricFogController.m_flStartAnisotropy = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartAnisotropy");
CEnvVolumetricFogController.m_flStartScattering = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartScattering");
CEnvVolumetricFogController.m_flStartDrawDistance = findOffsetByName(j, "CEnvVolumetricFogController", "m_flStartDrawDistance");
CEnvVolumetricFogController.m_flDefaultAnisotropy = findOffsetByName(j, "CEnvVolumetricFogController", "m_flDefaultAnisotropy");
CEnvVolumetricFogController.m_flDefaultScattering = findOffsetByName(j, "CEnvVolumetricFogController", "m_flDefaultScattering");
CEnvVolumetricFogController.m_flDefaultDrawDistance = findOffsetByName(j, "CEnvVolumetricFogController", "m_flDefaultDrawDistance");
CEnvVolumetricFogController.m_bStartDisabled = findOffsetByName(j, "CEnvVolumetricFogController", "m_bStartDisabled");
CEnvVolumetricFogController.m_bEnableIndirect = findOffsetByName(j, "CEnvVolumetricFogController", "m_bEnableIndirect");
CEnvVolumetricFogController.m_bIndirectUseLPVs = findOffsetByName(j, "CEnvVolumetricFogController", "m_bIndirectUseLPVs");
CEnvVolumetricFogController.m_bIsMaster = findOffsetByName(j, "CEnvVolumetricFogController", "m_bIsMaster");
CEnvVolumetricFogController.m_hFogIndirectTexture = findOffsetByName(j, "CEnvVolumetricFogController", "m_hFogIndirectTexture");
CEnvVolumetricFogController.m_nForceRefreshCount = findOffsetByName(j, "CEnvVolumetricFogController", "m_nForceRefreshCount");
CEnvVolumetricFogController.m_fNoiseSpeed = findOffsetByName(j, "CEnvVolumetricFogController", "m_fNoiseSpeed");
CEnvVolumetricFogController.m_fNoiseStrength = findOffsetByName(j, "CEnvVolumetricFogController", "m_fNoiseStrength");
CEnvVolumetricFogController.m_vNoiseScale = findOffsetByName(j, "CEnvVolumetricFogController", "m_vNoiseScale");
CEnvVolumetricFogController.m_bFirstTime = findOffsetByName(j, "CEnvVolumetricFogController", "m_bFirstTime");

// Atribuições para CPhysicsPropRespawnable
// CPhysicsPropRespawnable Offsets
CPhysicsPropRespawnable.m_vOriginalSpawnOrigin = findOffsetByName(j, "CPhysicsPropRespawnable", "m_vOriginalSpawnOrigin");
CPhysicsPropRespawnable.m_vOriginalSpawnAngles = findOffsetByName(j, "CPhysicsPropRespawnable", "m_vOriginalSpawnAngles");
CPhysicsPropRespawnable.m_vOriginalMins = findOffsetByName(j, "CPhysicsPropRespawnable", "m_vOriginalMins");
CPhysicsPropRespawnable.m_vOriginalMaxs = findOffsetByName(j, "CPhysicsPropRespawnable", "m_vOriginalMaxs");
CPhysicsPropRespawnable.m_flRespawnDuration = findOffsetByName(j, "CPhysicsPropRespawnable", "m_flRespawnDuration");

// Atribuições para CPhysBallSocket
// CPhysBallSocket Offsets
CPhysBallSocket.m_flJointFriction = findOffsetByName(j, "CPhysBallSocket", "m_flJointFriction");
CPhysBallSocket.m_bEnableSwingLimit = findOffsetByName(j, "CPhysBallSocket", "m_bEnableSwingLimit");
CPhysBallSocket.m_flSwingLimit = findOffsetByName(j, "CPhysBallSocket", "m_flSwingLimit");
CPhysBallSocket.m_bEnableTwistLimit = findOffsetByName(j, "CPhysBallSocket", "m_bEnableTwistLimit");
CPhysBallSocket.m_flMinTwistAngle = findOffsetByName(j, "CPhysBallSocket", "m_flMinTwistAngle");
CPhysBallSocket.m_flMaxTwistAngle = findOffsetByName(j, "CPhysBallSocket", "m_flMaxTwistAngle");

// Atribuições para CInfoPlayerStart
// CInfoPlayerStart Offsets
CInfoPlayerStart.m_bDisabled = findOffsetByName(j, "CInfoPlayerStart", "m_bDisabled");
CInfoPlayerStart.m_bIsMaster = findOffsetByName(j, "CInfoPlayerStart", "m_bIsMaster");
CInfoPlayerStart.m_pPawnSubclass = findOffsetByName(j, "CInfoPlayerStart", "m_pPawnSubclass");

// Atribuições para CSoundOpvarSetOBBWindEntity
// CSoundOpvarSetOBBWindEntity Offsets
CSoundOpvarSetOBBWindEntity.m_vMins = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_vMins");
CSoundOpvarSetOBBWindEntity.m_vMaxs = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_vMaxs");
CSoundOpvarSetOBBWindEntity.m_vDistanceMins = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMins");
CSoundOpvarSetOBBWindEntity.m_vDistanceMaxs = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMaxs");
CSoundOpvarSetOBBWindEntity.m_flWindMin = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_flWindMin");
CSoundOpvarSetOBBWindEntity.m_flWindMax = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_flWindMax");
CSoundOpvarSetOBBWindEntity.m_flWindMapMin = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMin");
CSoundOpvarSetOBBWindEntity.m_flWindMapMax = findOffsetByName(j, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMax");

// Atribuições para CRagdollPropAttached
// CRagdollPropAttached Offsets
CRagdollPropAttached.m_boneIndexAttached = findOffsetByName(j, "CRagdollPropAttached", "m_boneIndexAttached");
CRagdollPropAttached.m_ragdollAttachedObjectIndex = findOffsetByName(j, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex");
CRagdollPropAttached.m_attachmentPointBoneSpace = findOffsetByName(j, "CRagdollPropAttached", "m_attachmentPointBoneSpace");
CRagdollPropAttached.m_attachmentPointRagdollSpace = findOffsetByName(j, "CRagdollPropAttached", "m_attachmentPointRagdollSpace");
CRagdollPropAttached.m_bShouldDetach = findOffsetByName(j, "CRagdollPropAttached", "m_bShouldDetach");
CRagdollPropAttached.m_bShouldDeleteAttachedActivationRecord = findOffsetByName(j, "CRagdollPropAttached", "m_bShouldDeleteAttachedActivationRecord");

// Atribuições para CItemDogtags
// CItemDogtags Offsets
CItemDogtags.m_OwningPlayer = findOffsetByName(j, "CItemDogtags", "m_OwningPlayer");
CItemDogtags.m_KillingPlayer = findOffsetByName(j, "CItemDogtags", "m_KillingPlayer");

// Atribuições para CItemGeneric
// CItemGeneric Offsets
CItemGeneric.m_bHasTriggerRadius = findOffsetByName(j, "CItemGeneric", "m_bHasTriggerRadius");
CItemGeneric.m_bHasPickupRadius = findOffsetByName(j, "CItemGeneric", "m_bHasPickupRadius");
CItemGeneric.m_flPickupRadiusSqr = findOffsetByName(j, "CItemGeneric", "m_flPickupRadiusSqr");
CItemGeneric.m_flTriggerRadiusSqr = findOffsetByName(j, "CItemGeneric", "m_flTriggerRadiusSqr");
CItemGeneric.m_flLastPickupCheck = findOffsetByName(j, "CItemGeneric", "m_flLastPickupCheck");
CItemGeneric.m_bPlayerCounterListenerAdded = findOffsetByName(j, "CItemGeneric", "m_bPlayerCounterListenerAdded");
CItemGeneric.m_bPlayerInTriggerRadius = findOffsetByName(j, "CItemGeneric", "m_bPlayerInTriggerRadius");
CItemGeneric.m_hSpawnParticleEffect = findOffsetByName(j, "CItemGeneric", "m_hSpawnParticleEffect");
CItemGeneric.m_pAmbientSoundEffect = findOffsetByName(j, "CItemGeneric", "m_pAmbientSoundEffect");
CItemGeneric.m_bAutoStartAmbientSound = findOffsetByName(j, "CItemGeneric", "m_bAutoStartAmbientSound");
CItemGeneric.m_pSpawnScriptFunction = findOffsetByName(j, "CItemGeneric", "m_pSpawnScriptFunction");
CItemGeneric.m_hPickupParticleEffect = findOffsetByName(j, "CItemGeneric", "m_hPickupParticleEffect");
CItemGeneric.m_pPickupSoundEffect = findOffsetByName(j, "CItemGeneric", "m_pPickupSoundEffect");
CItemGeneric.m_pPickupScriptFunction = findOffsetByName(j, "CItemGeneric", "m_pPickupScriptFunction");
CItemGeneric.m_hTimeoutParticleEffect = findOffsetByName(j, "CItemGeneric", "m_hTimeoutParticleEffect");
CItemGeneric.m_pTimeoutSoundEffect = findOffsetByName(j, "CItemGeneric", "m_pTimeoutSoundEffect");
CItemGeneric.m_pTimeoutScriptFunction = findOffsetByName(j, "CItemGeneric", "m_pTimeoutScriptFunction");
CItemGeneric.m_pPickupFilterName = findOffsetByName(j, "CItemGeneric", "m_pPickupFilterName");
CItemGeneric.m_hPickupFilter = findOffsetByName(j, "CItemGeneric", "m_hPickupFilter");
CItemGeneric.m_OnPickup = findOffsetByName(j, "CItemGeneric", "m_OnPickup");
CItemGeneric.m_OnTimeout = findOffsetByName(j, "CItemGeneric", "m_OnTimeout");
CItemGeneric.m_OnTriggerStartTouch = findOffsetByName(j, "CItemGeneric", "m_OnTriggerStartTouch");
CItemGeneric.m_OnTriggerTouch = findOffsetByName(j, "CItemGeneric", "m_OnTriggerTouch");
CItemGeneric.m_OnTriggerEndTouch = findOffsetByName(j, "CItemGeneric", "m_OnTriggerEndTouch");
CItemGeneric.m_pAllowPickupScriptFunction = findOffsetByName(j, "CItemGeneric", "m_pAllowPickupScriptFunction");
CItemGeneric.m_flPickupRadius = findOffsetByName(j, "CItemGeneric", "m_flPickupRadius");
CItemGeneric.m_flTriggerRadius = findOffsetByName(j, "CItemGeneric", "m_flTriggerRadius");
CItemGeneric.m_pTriggerSoundEffect = findOffsetByName(j, "CItemGeneric", "m_pTriggerSoundEffect");
CItemGeneric.m_bGlowWhenInTrigger = findOffsetByName(j, "CItemGeneric", "m_bGlowWhenInTrigger");
CItemGeneric.m_glowColor = findOffsetByName(j, "CItemGeneric", "m_glowColor");
CItemGeneric.m_bUseable = findOffsetByName(j, "CItemGeneric", "m_bUseable");
CItemGeneric.m_hTriggerHelper = findOffsetByName(j, "CItemGeneric", "m_hTriggerHelper");

// Atribuições para CPropDoorRotating
// CPropDoorRotating Offsets
CPropDoorRotating.m_vecAxis = findOffsetByName(j, "CPropDoorRotating", "m_vecAxis");
CPropDoorRotating.m_flDistance = findOffsetByName(j, "CPropDoorRotating", "m_flDistance");
CPropDoorRotating.m_eSpawnPosition = findOffsetByName(j, "CPropDoorRotating", "m_eSpawnPosition");
CPropDoorRotating.m_eOpenDirection = findOffsetByName(j, "CPropDoorRotating", "m_eOpenDirection");
CPropDoorRotating.m_eCurrentOpenDirection = findOffsetByName(j, "CPropDoorRotating", "m_eCurrentOpenDirection");
CPropDoorRotating.m_flAjarAngle = findOffsetByName(j, "CPropDoorRotating", "m_flAjarAngle");
CPropDoorRotating.m_angRotationAjarDeprecated = findOffsetByName(j, "CPropDoorRotating", "m_angRotationAjarDeprecated");
CPropDoorRotating.m_angRotationClosed = findOffsetByName(j, "CPropDoorRotating", "m_angRotationClosed");
CPropDoorRotating.m_angRotationOpenForward = findOffsetByName(j, "CPropDoorRotating", "m_angRotationOpenForward");
CPropDoorRotating.m_angRotationOpenBack = findOffsetByName(j, "CPropDoorRotating", "m_angRotationOpenBack");
CPropDoorRotating.m_angGoal = findOffsetByName(j, "CPropDoorRotating", "m_angGoal");
CPropDoorRotating.m_vecForwardBoundsMin = findOffsetByName(j, "CPropDoorRotating", "m_vecForwardBoundsMin");
CPropDoorRotating.m_vecForwardBoundsMax = findOffsetByName(j, "CPropDoorRotating", "m_vecForwardBoundsMax");
CPropDoorRotating.m_vecBackBoundsMin = findOffsetByName(j, "CPropDoorRotating", "m_vecBackBoundsMin");
CPropDoorRotating.m_vecBackBoundsMax = findOffsetByName(j, "CPropDoorRotating", "m_vecBackBoundsMax");
CPropDoorRotating.m_bAjarDoorShouldntAlwaysOpen = findOffsetByName(j, "CPropDoorRotating", "m_bAjarDoorShouldntAlwaysOpen");
CPropDoorRotating.m_hEntityBlocker = findOffsetByName(j, "CPropDoorRotating", "m_hEntityBlocker");

// Atribuições para CRopeKeyframe
// CRopeKeyframe Offsets
CRopeKeyframe.m_RopeFlags = findOffsetByName(j, "CRopeKeyframe", "m_RopeFlags");
CRopeKeyframe.m_iNextLinkName = findOffsetByName(j, "CRopeKeyframe", "m_iNextLinkName");
CRopeKeyframe.m_Slack = findOffsetByName(j, "CRopeKeyframe", "m_Slack");
CRopeKeyframe.m_Width = findOffsetByName(j, "CRopeKeyframe", "m_Width");
CRopeKeyframe.m_TextureScale = findOffsetByName(j, "CRopeKeyframe", "m_TextureScale");
CRopeKeyframe.m_nSegments = findOffsetByName(j, "CRopeKeyframe", "m_nSegments");
CRopeKeyframe.m_bConstrainBetweenEndpoints = findOffsetByName(j, "CRopeKeyframe", "m_bConstrainBetweenEndpoints");
CRopeKeyframe.m_strRopeMaterialModel = findOffsetByName(j, "CRopeKeyframe", "m_strRopeMaterialModel");
CRopeKeyframe.m_iRopeMaterialModelIndex = findOffsetByName(j, "CRopeKeyframe", "m_iRopeMaterialModelIndex");
CRopeKeyframe.m_Subdiv = findOffsetByName(j, "CRopeKeyframe", "m_Subdiv");
CRopeKeyframe.m_nChangeCount = findOffsetByName(j, "CRopeKeyframe", "m_nChangeCount");
CRopeKeyframe.m_RopeLength = findOffsetByName(j, "CRopeKeyframe", "m_RopeLength");
CRopeKeyframe.m_fLockedPoints = findOffsetByName(j, "CRopeKeyframe", "m_fLockedPoints");
CRopeKeyframe.m_bCreatedFromMapFile = findOffsetByName(j, "CRopeKeyframe", "m_bCreatedFromMapFile");
CRopeKeyframe.m_flScrollSpeed = findOffsetByName(j, "CRopeKeyframe", "m_flScrollSpeed");
CRopeKeyframe.m_bStartPointValid = findOffsetByName(j, "CRopeKeyframe", "m_bStartPointValid");
CRopeKeyframe.m_bEndPointValid = findOffsetByName(j, "CRopeKeyframe", "m_bEndPointValid");
CRopeKeyframe.m_hStartPoint = findOffsetByName(j, "CRopeKeyframe", "m_hStartPoint");
CRopeKeyframe.m_hEndPoint = findOffsetByName(j, "CRopeKeyframe", "m_hEndPoint");
CRopeKeyframe.m_iStartAttachment = findOffsetByName(j, "CRopeKeyframe", "m_iStartAttachment");
CRopeKeyframe.m_iEndAttachment = findOffsetByName(j, "CRopeKeyframe", "m_iEndAttachment");

// Atribuições para CBarnLight
// CBarnLight Offsets
CBarnLight.m_bEnabled = findOffsetByName(j, "CBarnLight", "m_bEnabled");
CBarnLight.m_nColorMode = findOffsetByName(j, "CBarnLight", "m_nColorMode");
CBarnLight.m_Color = findOffsetByName(j, "CBarnLight", "m_Color");
CBarnLight.m_flColorTemperature = findOffsetByName(j, "CBarnLight", "m_flColorTemperature");
CBarnLight.m_flBrightness = findOffsetByName(j, "CBarnLight", "m_flBrightness");
CBarnLight.m_flBrightnessScale = findOffsetByName(j, "CBarnLight", "m_flBrightnessScale");
CBarnLight.m_nDirectLight = findOffsetByName(j, "CBarnLight", "m_nDirectLight");
CBarnLight.m_nBakedShadowIndex = findOffsetByName(j, "CBarnLight", "m_nBakedShadowIndex");
CBarnLight.m_nLuminaireShape = findOffsetByName(j, "CBarnLight", "m_nLuminaireShape");
CBarnLight.m_flLuminaireSize = findOffsetByName(j, "CBarnLight", "m_flLuminaireSize");
CBarnLight.m_flLuminaireAnisotropy = findOffsetByName(j, "CBarnLight", "m_flLuminaireAnisotropy");
CBarnLight.m_LightStyleString = findOffsetByName(j, "CBarnLight", "m_LightStyleString");
CBarnLight.m_flLightStyleStartTime = findOffsetByName(j, "CBarnLight", "m_flLightStyleStartTime");
CBarnLight.m_QueuedLightStyleStrings = findOffsetByName(j, "CBarnLight", "m_QueuedLightStyleStrings");
CBarnLight.m_LightStyleEvents = findOffsetByName(j, "CBarnLight", "m_LightStyleEvents");
CBarnLight.m_LightStyleTargets = findOffsetByName(j, "CBarnLight", "m_LightStyleTargets");
CBarnLight.m_StyleEvent = findOffsetByName(j, "CBarnLight", "m_StyleEvent");
CBarnLight.m_hLightCookie = findOffsetByName(j, "CBarnLight", "m_hLightCookie");
CBarnLight.m_flShape = findOffsetByName(j, "CBarnLight", "m_flShape");
CBarnLight.m_flSoftX = findOffsetByName(j, "CBarnLight", "m_flSoftX");
CBarnLight.m_flSoftY = findOffsetByName(j, "CBarnLight", "m_flSoftY");
CBarnLight.m_flSkirt = findOffsetByName(j, "CBarnLight", "m_flSkirt");
CBarnLight.m_flSkirtNear = findOffsetByName(j, "CBarnLight", "m_flSkirtNear");
CBarnLight.m_vSizeParams = findOffsetByName(j, "CBarnLight", "m_vSizeParams");
CBarnLight.m_flRange = findOffsetByName(j, "CBarnLight", "m_flRange");
CBarnLight.m_vShear = findOffsetByName(j, "CBarnLight", "m_vShear");
CBarnLight.m_nBakeSpecularToCubemaps = findOffsetByName(j, "CBarnLight", "m_nBakeSpecularToCubemaps");
CBarnLight.m_vBakeSpecularToCubemapsSize = findOffsetByName(j, "CBarnLight", "m_vBakeSpecularToCubemapsSize");
CBarnLight.m_nCastShadows = findOffsetByName(j, "CBarnLight", "m_nCastShadows");
CBarnLight.m_nShadowMapSize = findOffsetByName(j, "CBarnLight", "m_nShadowMapSize");
CBarnLight.m_nShadowPriority = findOffsetByName(j, "CBarnLight", "m_nShadowPriority");
CBarnLight.m_bContactShadow = findOffsetByName(j, "CBarnLight", "m_bContactShadow");
CBarnLight.m_nBounceLight = findOffsetByName(j, "CBarnLight", "m_nBounceLight");
CBarnLight.m_flBounceScale = findOffsetByName(j, "CBarnLight", "m_flBounceScale");
CBarnLight.m_flMinRoughness = findOffsetByName(j, "CBarnLight", "m_flMinRoughness");
CBarnLight.m_vAlternateColor = findOffsetByName(j, "CBarnLight", "m_vAlternateColor");
CBarnLight.m_fAlternateColorBrightness = findOffsetByName(j, "CBarnLight", "m_fAlternateColorBrightness");
CBarnLight.m_nFog = findOffsetByName(j, "CBarnLight", "m_nFog");
CBarnLight.m_flFogStrength = findOffsetByName(j, "CBarnLight", "m_flFogStrength");
CBarnLight.m_nFogShadows = findOffsetByName(j, "CBarnLight", "m_nFogShadows");
CBarnLight.m_flFogScale = findOffsetByName(j, "CBarnLight", "m_flFogScale");
CBarnLight.m_bFogMixedShadows = findOffsetByName(j, "CBarnLight", "m_bFogMixedShadows");
CBarnLight.m_flFadeSizeStart = findOffsetByName(j, "CBarnLight", "m_flFadeSizeStart");
CBarnLight.m_flFadeSizeEnd = findOffsetByName(j, "CBarnLight", "m_flFadeSizeEnd");
CBarnLight.m_flShadowFadeSizeStart = findOffsetByName(j, "CBarnLight", "m_flShadowFadeSizeStart");
CBarnLight.m_flShadowFadeSizeEnd = findOffsetByName(j, "CBarnLight", "m_flShadowFadeSizeEnd");
CBarnLight.m_bPrecomputedFieldsValid = findOffsetByName(j, "CBarnLight", "m_bPrecomputedFieldsValid");
CBarnLight.m_vPrecomputedBoundsMins = findOffsetByName(j, "CBarnLight", "m_vPrecomputedBoundsMins");
CBarnLight.m_vPrecomputedBoundsMaxs = findOffsetByName(j, "CBarnLight", "m_vPrecomputedBoundsMaxs");
CBarnLight.m_vPrecomputedOBBOrigin = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin");
CBarnLight.m_vPrecomputedOBBAngles = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles");
CBarnLight.m_vPrecomputedOBBExtent = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent");
CBarnLight.m_nPrecomputedSubFrusta = findOffsetByName(j, "CBarnLight", "m_nPrecomputedSubFrusta");
CBarnLight.m_vPrecomputedOBBOrigin0 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin0");
CBarnLight.m_vPrecomputedOBBAngles0 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles0");
CBarnLight.m_vPrecomputedOBBExtent0 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent0");
CBarnLight.m_vPrecomputedOBBOrigin1 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin1");
CBarnLight.m_vPrecomputedOBBAngles1 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles1");
CBarnLight.m_vPrecomputedOBBExtent1 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent1");
CBarnLight.m_vPrecomputedOBBOrigin2 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin2");
CBarnLight.m_vPrecomputedOBBAngles2 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles2");
CBarnLight.m_vPrecomputedOBBExtent2 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent2");
CBarnLight.m_vPrecomputedOBBOrigin3 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin3");
CBarnLight.m_vPrecomputedOBBAngles3 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles3");
CBarnLight.m_vPrecomputedOBBExtent3 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent3");
CBarnLight.m_vPrecomputedOBBOrigin4 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin4");
CBarnLight.m_vPrecomputedOBBAngles4 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles4");
CBarnLight.m_vPrecomputedOBBExtent4 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent4");
CBarnLight.m_vPrecomputedOBBOrigin5 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBOrigin5");
CBarnLight.m_vPrecomputedOBBAngles5 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBAngles5");
CBarnLight.m_vPrecomputedOBBExtent5 = findOffsetByName(j, "CBarnLight", "m_vPrecomputedOBBExtent5");
CBarnLight.m_bPvsModifyEntity = findOffsetByName(j, "CBarnLight", "m_bPvsModifyEntity");
CBarnLight.m_VisClusters = findOffsetByName(j, "CBarnLight", "m_VisClusters");

// Atribuições para CEnvViewPunch
// CEnvViewPunch Offsets
CEnvViewPunch.m_flRadius = findOffsetByName(j, "CEnvViewPunch", "m_flRadius");
CEnvViewPunch.m_angViewPunch = findOffsetByName(j, "CEnvViewPunch", "m_angViewPunch");

// Atribuições para CPathCorner
// CPathCorner Offsets
CPathCorner.m_flWait = findOffsetByName(j, "CPathCorner", "m_flWait");
CPathCorner.m_flRadius = findOffsetByName(j, "CPathCorner", "m_flRadius");
CPathCorner.m_OnPass = findOffsetByName(j, "CPathCorner", "m_OnPass");

// Atribuições para CAttributeContainer
// CAttributeContainer Offsets
CAttributeContainer.m_Item = findOffsetByName(j, "CAttributeContainer", "m_Item");

// Atribuições para CMultiSource
// CMultiSource Offsets
CMultiSource.m_rgEntities = findOffsetByName(j, "CMultiSource", "m_rgEntities");
CMultiSource.m_rgTriggered = findOffsetByName(j, "CMultiSource", "m_rgTriggered");
CMultiSource.m_OnTrigger = findOffsetByName(j, "CMultiSource", "m_OnTrigger");
CMultiSource.m_iTotal = findOffsetByName(j, "CMultiSource", "m_iTotal");
CMultiSource.m_globalstate = findOffsetByName(j, "CMultiSource", "m_globalstate");

// Atribuições para CLogicNavigation
// CLogicNavigation Offsets
CLogicNavigation.m_isOn = findOffsetByName(j, "CLogicNavigation", "m_isOn");
CLogicNavigation.m_navProperty = findOffsetByName(j, "CLogicNavigation", "m_navProperty");

// Atribuições para CEnvEntityMaker
// CEnvEntityMaker Offsets
CEnvEntityMaker.m_vecEntityMins = findOffsetByName(j, "CEnvEntityMaker", "m_vecEntityMins");
CEnvEntityMaker.m_vecEntityMaxs = findOffsetByName(j, "CEnvEntityMaker", "m_vecEntityMaxs");
CEnvEntityMaker.m_hCurrentInstance = findOffsetByName(j, "CEnvEntityMaker", "m_hCurrentInstance");
CEnvEntityMaker.m_hCurrentBlocker = findOffsetByName(j, "CEnvEntityMaker", "m_hCurrentBlocker");
CEnvEntityMaker.m_vecBlockerOrigin = findOffsetByName(j, "CEnvEntityMaker", "m_vecBlockerOrigin");
CEnvEntityMaker.m_angPostSpawnDirection = findOffsetByName(j, "CEnvEntityMaker", "m_angPostSpawnDirection");
CEnvEntityMaker.m_flPostSpawnDirectionVariance = findOffsetByName(j, "CEnvEntityMaker", "m_flPostSpawnDirectionVariance");
CEnvEntityMaker.m_flPostSpawnSpeed = findOffsetByName(j, "CEnvEntityMaker", "m_flPostSpawnSpeed");
CEnvEntityMaker.m_bPostSpawnUseAngles = findOffsetByName(j, "CEnvEntityMaker", "m_bPostSpawnUseAngles");
CEnvEntityMaker.m_iszTemplate = findOffsetByName(j, "CEnvEntityMaker", "m_iszTemplate");
CEnvEntityMaker.m_pOutputOnSpawned = findOffsetByName(j, "CEnvEntityMaker", "m_pOutputOnSpawned");
CEnvEntityMaker.m_pOutputOnFailedSpawn = findOffsetByName(j, "CEnvEntityMaker", "m_pOutputOnFailedSpawn");

// Atribuições para CLogicEventListener
// CLogicEventListener Offsets
CLogicEventListener.m_strEventName = findOffsetByName(j, "CLogicEventListener", "m_strEventName");
CLogicEventListener.m_bIsEnabled = findOffsetByName(j, "CLogicEventListener", "m_bIsEnabled");
CLogicEventListener.m_nTeam = findOffsetByName(j, "CLogicEventListener", "m_nTeam");
CLogicEventListener.m_OnEventFired = findOffsetByName(j, "CLogicEventListener", "m_OnEventFired");

// Atribuições para CFilterMultiple
// CFilterMultiple Offsets
CFilterMultiple.m_nFilterType = findOffsetByName(j, "CFilterMultiple", "m_nFilterType");
CFilterMultiple.m_iFilterName = findOffsetByName(j, "CFilterMultiple", "m_iFilterName");
CFilterMultiple.m_hFilter = findOffsetByName(j, "CFilterMultiple", "m_hFilter");
CFilterMultiple.m_nFilterCount = findOffsetByName(j, "CFilterMultiple", "m_nFilterCount");

// Atribuições para CPulseGraphInstance_ServerEntity
// CPulseGraphInstance_ServerEntity Offsets
CPulseGraphInstance_ServerEntity.m_pComponent = findOffsetByName(j, "CPulseGraphInstance_ServerEntity", "m_pComponent");

// Atribuições para CPhysicsWire
// CPhysicsWire Offsets
CPhysicsWire.m_nDensity = findOffsetByName(j, "CPhysicsWire", "m_nDensity");

// Atribuições para CPropDoorRotatingBreakable
// CPropDoorRotatingBreakable Offsets
CPropDoorRotatingBreakable.m_bBreakable = findOffsetByName(j, "CPropDoorRotatingBreakable", "m_bBreakable");
CPropDoorRotatingBreakable.m_isAbleToCloseAreaPortals = findOffsetByName(j, "CPropDoorRotatingBreakable", "m_isAbleToCloseAreaPortals");
CPropDoorRotatingBreakable.m_currentDamageState = findOffsetByName(j, "CPropDoorRotatingBreakable", "m_currentDamageState");
CPropDoorRotatingBreakable.m_damageStates = findOffsetByName(j, "CPropDoorRotatingBreakable", "m_damageStates");

// Atribuições para CFireSmoke
// CFireSmoke Offsets
CFireSmoke.m_nFlameModelIndex = findOffsetByName(j, "CFireSmoke", "m_nFlameModelIndex");
CFireSmoke.m_nFlameFromAboveModelIndex = findOffsetByName(j, "CFireSmoke", "m_nFlameFromAboveModelIndex");

// Atribuições para CLightGlow
// CLightGlow Offsets
CLightGlow.m_nHorizontalSize = findOffsetByName(j, "CLightGlow", "m_nHorizontalSize");
CLightGlow.m_nVerticalSize = findOffsetByName(j, "CLightGlow", "m_nVerticalSize");
CLightGlow.m_nMinDist = findOffsetByName(j, "CLightGlow", "m_nMinDist");
CLightGlow.m_nMaxDist = findOffsetByName(j, "CLightGlow", "m_nMaxDist");
CLightGlow.m_nOuterMaxDist = findOffsetByName(j, "CLightGlow", "m_nOuterMaxDist");
CLightGlow.m_flGlowProxySize = findOffsetByName(j, "CLightGlow", "m_flGlowProxySize");
CLightGlow.m_flHDRColorScale = findOffsetByName(j, "CLightGlow", "m_flHDRColorScale");

// Atribuições para CBasePropDoor
// CBasePropDoor Offsets
CBasePropDoor.m_flAutoReturnDelay = findOffsetByName(j, "CBasePropDoor", "m_flAutoReturnDelay");
CBasePropDoor.m_hDoorList = findOffsetByName(j, "CBasePropDoor", "m_hDoorList");
CBasePropDoor.m_nHardwareType = findOffsetByName(j, "CBasePropDoor", "m_nHardwareType");
CBasePropDoor.m_bNeedsHardware = findOffsetByName(j, "CBasePropDoor", "m_bNeedsHardware");
CBasePropDoor.m_eDoorState = findOffsetByName(j, "CBasePropDoor", "m_eDoorState");
CBasePropDoor.m_bLocked = findOffsetByName(j, "CBasePropDoor", "m_bLocked");
CBasePropDoor.m_closedPosition = findOffsetByName(j, "CBasePropDoor", "m_closedPosition");
CBasePropDoor.m_closedAngles = findOffsetByName(j, "CBasePropDoor", "m_closedAngles");
CBasePropDoor.m_hBlocker = findOffsetByName(j, "CBasePropDoor", "m_hBlocker");
CBasePropDoor.m_bFirstBlocked = findOffsetByName(j, "CBasePropDoor", "m_bFirstBlocked");
CBasePropDoor.m_ls = findOffsetByName(j, "CBasePropDoor", "m_ls");
CBasePropDoor.m_bForceClosed = findOffsetByName(j, "CBasePropDoor", "m_bForceClosed");
CBasePropDoor.m_vecLatchWorldPosition = findOffsetByName(j, "CBasePropDoor", "m_vecLatchWorldPosition");
CBasePropDoor.m_hActivator = findOffsetByName(j, "CBasePropDoor", "m_hActivator");
CBasePropDoor.m_SoundMoving = findOffsetByName(j, "CBasePropDoor", "m_SoundMoving");
CBasePropDoor.m_SoundOpen = findOffsetByName(j, "CBasePropDoor", "m_SoundOpen");
CBasePropDoor.m_SoundClose = findOffsetByName(j, "CBasePropDoor", "m_SoundClose");
CBasePropDoor.m_SoundLock = findOffsetByName(j, "CBasePropDoor", "m_SoundLock");
CBasePropDoor.m_SoundUnlock = findOffsetByName(j, "CBasePropDoor", "m_SoundUnlock");
CBasePropDoor.m_SoundLatch = findOffsetByName(j, "CBasePropDoor", "m_SoundLatch");
CBasePropDoor.m_SoundPound = findOffsetByName(j, "CBasePropDoor", "m_SoundPound");
CBasePropDoor.m_SoundJiggle = findOffsetByName(j, "CBasePropDoor", "m_SoundJiggle");
CBasePropDoor.m_SoundLockedAnim = findOffsetByName(j, "CBasePropDoor", "m_SoundLockedAnim");
CBasePropDoor.m_numCloseAttempts = findOffsetByName(j, "CBasePropDoor", "m_numCloseAttempts");
CBasePropDoor.m_nPhysicsMaterial = findOffsetByName(j, "CBasePropDoor", "m_nPhysicsMaterial");
CBasePropDoor.m_SlaveName = findOffsetByName(j, "CBasePropDoor", "m_SlaveName");
CBasePropDoor.m_hMaster = findOffsetByName(j, "CBasePropDoor", "m_hMaster");
CBasePropDoor.m_OnBlockedClosing = findOffsetByName(j, "CBasePropDoor", "m_OnBlockedClosing");
CBasePropDoor.m_OnBlockedOpening = findOffsetByName(j, "CBasePropDoor", "m_OnBlockedOpening");
CBasePropDoor.m_OnUnblockedClosing = findOffsetByName(j, "CBasePropDoor", "m_OnUnblockedClosing");
CBasePropDoor.m_OnUnblockedOpening = findOffsetByName(j, "CBasePropDoor", "m_OnUnblockedOpening");
CBasePropDoor.m_OnFullyClosed = findOffsetByName(j, "CBasePropDoor", "m_OnFullyClosed");
CBasePropDoor.m_OnFullyOpen = findOffsetByName(j, "CBasePropDoor", "m_OnFullyOpen");
CBasePropDoor.m_OnClose = findOffsetByName(j, "CBasePropDoor", "m_OnClose");
CBasePropDoor.m_OnOpen = findOffsetByName(j, "CBasePropDoor", "m_OnOpen");
CBasePropDoor.m_OnLockedUse = findOffsetByName(j, "CBasePropDoor", "m_OnLockedUse");
CBasePropDoor.m_OnAjarOpen = findOffsetByName(j, "CBasePropDoor", "m_OnAjarOpen");

// Atribuições para CTriggerFan
// CTriggerFan Offsets
CTriggerFan.m_vFanOrigin = findOffsetByName(j, "CTriggerFan", "m_vFanOrigin");
CTriggerFan.m_vFanEnd = findOffsetByName(j, "CTriggerFan", "m_vFanEnd");
CTriggerFan.m_vNoise = findOffsetByName(j, "CTriggerFan", "m_vNoise");
CTriggerFan.m_flForce = findOffsetByName(j, "CTriggerFan", "m_flForce");
CTriggerFan.m_flRopeForceScale = findOffsetByName(j, "CTriggerFan", "m_flRopeForceScale");
CTriggerFan.m_flPlayerForce = findOffsetByName(j, "CTriggerFan", "m_flPlayerForce");
CTriggerFan.m_flRampTime = findOffsetByName(j, "CTriggerFan", "m_flRampTime");
CTriggerFan.m_bFalloff = findOffsetByName(j, "CTriggerFan", "m_bFalloff");
CTriggerFan.m_bPushPlayer = findOffsetByName(j, "CTriggerFan", "m_bPushPlayer");
CTriggerFan.m_bRampDown = findOffsetByName(j, "CTriggerFan", "m_bRampDown");
CTriggerFan.m_bAddNoise = findOffsetByName(j, "CTriggerFan", "m_bAddNoise");
CTriggerFan.m_RampTimer = findOffsetByName(j, "CTriggerFan", "m_RampTimer");

// Atribuições para CHandleTest
// CHandleTest Offsets
CHandleTest.m_Handle = findOffsetByName(j, "CHandleTest", "m_Handle");
CHandleTest.m_bSendHandle = findOffsetByName(j, "CHandleTest", "m_bSendHandle");

// Atribuições para CSoundOpvarSetEntity
// CSoundOpvarSetEntity Offsets
CSoundOpvarSetEntity.m_iszStackName = findOffsetByName(j, "CSoundOpvarSetEntity", "m_iszStackName");
CSoundOpvarSetEntity.m_iszOperatorName = findOffsetByName(j, "CSoundOpvarSetEntity", "m_iszOperatorName");
CSoundOpvarSetEntity.m_iszOpvarName = findOffsetByName(j, "CSoundOpvarSetEntity", "m_iszOpvarName");
CSoundOpvarSetEntity.m_nOpvarType = findOffsetByName(j, "CSoundOpvarSetEntity", "m_nOpvarType");
CSoundOpvarSetEntity.m_nOpvarIndex = findOffsetByName(j, "CSoundOpvarSetEntity", "m_nOpvarIndex");
CSoundOpvarSetEntity.m_flOpvarValue = findOffsetByName(j, "CSoundOpvarSetEntity", "m_flOpvarValue");
CSoundOpvarSetEntity.m_OpvarValueString = findOffsetByName(j, "CSoundOpvarSetEntity", "m_OpvarValueString");
CSoundOpvarSetEntity.m_bSetOnSpawn = findOffsetByName(j, "CSoundOpvarSetEntity", "m_bSetOnSpawn");

// Atribuições para CNavSpaceInfo
// CNavSpaceInfo Offsets
CNavSpaceInfo.m_bCreateFlightSpace = findOffsetByName(j, "CNavSpaceInfo", "m_bCreateFlightSpace");

// Atribuições para CLogicAchievement
// CLogicAchievement Offsets
CLogicAchievement.m_bDisabled = findOffsetByName(j, "CLogicAchievement", "m_bDisabled");
CLogicAchievement.m_iszAchievementEventID = findOffsetByName(j, "CLogicAchievement", "m_iszAchievementEventID");
CLogicAchievement.m_OnFired = findOffsetByName(j, "CLogicAchievement", "m_OnFired");

// Atribuições para CBtActionParachutePositioning
// CBtActionParachutePositioning Offsets
CBtActionParachutePositioning.m_ActionTimer = findOffsetByName(j, "CBtActionParachutePositioning", "m_ActionTimer");

// Atribuições para CItem
// CItem Offsets
CItem.m_OnPlayerTouch = findOffsetByName(j, "CItem", "m_OnPlayerTouch");
CItem.m_OnPlayerPickup = findOffsetByName(j, "CItem", "m_OnPlayerPickup");
CItem.m_bActivateWhenAtRest = findOffsetByName(j, "CItem", "m_bActivateWhenAtRest");
CItem.m_OnCacheInteraction = findOffsetByName(j, "CItem", "m_OnCacheInteraction");
CItem.m_OnGlovePulled = findOffsetByName(j, "CItem", "m_OnGlovePulled");
CItem.m_vOriginalSpawnOrigin = findOffsetByName(j, "CItem", "m_vOriginalSpawnOrigin");
CItem.m_vOriginalSpawnAngles = findOffsetByName(j, "CItem", "m_vOriginalSpawnAngles");
CItem.m_bPhysStartAsleep = findOffsetByName(j, "CItem", "m_bPhysStartAsleep");

// Atribuições para CBaseClientUIEntity
// CBaseClientUIEntity Offsets
CBaseClientUIEntity.m_bEnabled = findOffsetByName(j, "CBaseClientUIEntity", "m_bEnabled");
CBaseClientUIEntity.m_DialogXMLName = findOffsetByName(j, "CBaseClientUIEntity", "m_DialogXMLName");
CBaseClientUIEntity.m_PanelClassName = findOffsetByName(j, "CBaseClientUIEntity", "m_PanelClassName");
CBaseClientUIEntity.m_PanelID = findOffsetByName(j, "CBaseClientUIEntity", "m_PanelID");
CBaseClientUIEntity.m_CustomOutput0 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput0");
CBaseClientUIEntity.m_CustomOutput1 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput1");
CBaseClientUIEntity.m_CustomOutput2 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput2");
CBaseClientUIEntity.m_CustomOutput3 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput3");
CBaseClientUIEntity.m_CustomOutput4 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput4");
CBaseClientUIEntity.m_CustomOutput5 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput5");
CBaseClientUIEntity.m_CustomOutput6 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput6");
CBaseClientUIEntity.m_CustomOutput7 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput7");
CBaseClientUIEntity.m_CustomOutput8 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput8");
CBaseClientUIEntity.m_CustomOutput9 = findOffsetByName(j, "CBaseClientUIEntity", "m_CustomOutput9");

// Atribuições para CEnvDecal
// CEnvDecal Offsets
CEnvDecal.m_hDecalMaterial = findOffsetByName(j, "CEnvDecal", "m_hDecalMaterial");
CEnvDecal.m_flWidth = findOffsetByName(j, "CEnvDecal", "m_flWidth");
CEnvDecal.m_flHeight = findOffsetByName(j, "CEnvDecal", "m_flHeight");
CEnvDecal.m_flDepth = findOffsetByName(j, "CEnvDecal", "m_flDepth");
CEnvDecal.m_nRenderOrder = findOffsetByName(j, "CEnvDecal", "m_nRenderOrder");
CEnvDecal.m_bProjectOnWorld = findOffsetByName(j, "CEnvDecal", "m_bProjectOnWorld");
CEnvDecal.m_bProjectOnCharacters = findOffsetByName(j, "CEnvDecal", "m_bProjectOnCharacters");
CEnvDecal.m_bProjectOnWater = findOffsetByName(j, "CEnvDecal", "m_bProjectOnWater");
CEnvDecal.m_flDepthSortBias = findOffsetByName(j, "CEnvDecal", "m_flDepthSortBias");

// Atribuições para CLogicAuto
// CLogicAuto Offsets
CLogicAuto.m_OnMapSpawn = findOffsetByName(j, "CLogicAuto", "m_OnMapSpawn");
CLogicAuto.m_OnDemoMapSpawn = findOffsetByName(j, "CLogicAuto", "m_OnDemoMapSpawn");
CLogicAuto.m_OnNewGame = findOffsetByName(j, "CLogicAuto", "m_OnNewGame");
CLogicAuto.m_OnLoadGame = findOffsetByName(j, "CLogicAuto", "m_OnLoadGame");
CLogicAuto.m_OnMapTransition = findOffsetByName(j, "CLogicAuto", "m_OnMapTransition");
CLogicAuto.m_OnBackgroundMap = findOffsetByName(j, "CLogicAuto", "m_OnBackgroundMap");
CLogicAuto.m_OnMultiNewMap = findOffsetByName(j, "CLogicAuto", "m_OnMultiNewMap");
CLogicAuto.m_OnMultiNewRound = findOffsetByName(j, "CLogicAuto", "m_OnMultiNewRound");
CLogicAuto.m_OnVREnabled = findOffsetByName(j, "CLogicAuto", "m_OnVREnabled");
CLogicAuto.m_OnVRNotEnabled = findOffsetByName(j, "CLogicAuto", "m_OnVRNotEnabled");
CLogicAuto.m_globalstate = findOffsetByName(j, "CLogicAuto", "m_globalstate");

// Atribuições para CSoundOpvarSetPointBase
// CSoundOpvarSetPointBase Offsets
CSoundOpvarSetPointBase.m_bDisabled = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_bDisabled");
CSoundOpvarSetPointBase.m_hSource = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_hSource");
CSoundOpvarSetPointBase.m_iszSourceEntityName = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_iszSourceEntityName");
CSoundOpvarSetPointBase.m_vLastPosition = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_vLastPosition");
CSoundOpvarSetPointBase.m_iszStackName = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_iszStackName");
CSoundOpvarSetPointBase.m_iszOperatorName = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_iszOperatorName");
CSoundOpvarSetPointBase.m_iszOpvarName = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_iszOpvarName");
CSoundOpvarSetPointBase.m_iOpvarIndex = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_iOpvarIndex");
CSoundOpvarSetPointBase.m_bUseAutoCompare = findOffsetByName(j, "CSoundOpvarSetPointBase", "m_bUseAutoCompare");

// Atribuições para CFuncTrackChange
// CFuncTrackChange Offsets
CFuncTrackChange.m_trackTop = findOffsetByName(j, "CFuncTrackChange", "m_trackTop");
CFuncTrackChange.m_trackBottom = findOffsetByName(j, "CFuncTrackChange", "m_trackBottom");
CFuncTrackChange.m_train = findOffsetByName(j, "CFuncTrackChange", "m_train");
CFuncTrackChange.m_trackTopName = findOffsetByName(j, "CFuncTrackChange", "m_trackTopName");
CFuncTrackChange.m_trackBottomName = findOffsetByName(j, "CFuncTrackChange", "m_trackBottomName");
CFuncTrackChange.m_trainName = findOffsetByName(j, "CFuncTrackChange", "m_trainName");
CFuncTrackChange.m_code = findOffsetByName(j, "CFuncTrackChange", "m_code");
CFuncTrackChange.m_targetState = findOffsetByName(j, "CFuncTrackChange", "m_targetState");
CFuncTrackChange.m_use = findOffsetByName(j, "CFuncTrackChange", "m_use");

// Atribuições para CGamePlayerZone
// CGamePlayerZone Offsets
CGamePlayerZone.m_OnPlayerInZone = findOffsetByName(j, "CGamePlayerZone", "m_OnPlayerInZone");
CGamePlayerZone.m_OnPlayerOutZone = findOffsetByName(j, "CGamePlayerZone", "m_OnPlayerOutZone");
CGamePlayerZone.m_PlayersInCount = findOffsetByName(j, "CGamePlayerZone", "m_PlayersInCount");
CGamePlayerZone.m_PlayersOutCount = findOffsetByName(j, "CGamePlayerZone", "m_PlayersOutCount");

// Atribuições para CRulePointEntity
// CRulePointEntity Offsets
CRulePointEntity.m_Score = findOffsetByName(j, "CRulePointEntity", "m_Score");

// Atribuições para CMessageEntity
// CMessageEntity Offsets
CMessageEntity.m_radius = findOffsetByName(j, "CMessageEntity", "m_radius");
CMessageEntity.m_messageText = findOffsetByName(j, "CMessageEntity", "m_messageText");
CMessageEntity.m_drawText = findOffsetByName(j, "CMessageEntity", "m_drawText");
CMessageEntity.m_bDeveloperOnly = findOffsetByName(j, "CMessageEntity", "m_bDeveloperOnly");
CMessageEntity.m_bEnabled = findOffsetByName(j, "CMessageEntity", "m_bEnabled");

// Atribuições para CBaseViewModel
// CBaseViewModel Offsets
CBaseViewModel.m_vecLastFacing = findOffsetByName(j, "CBaseViewModel", "m_vecLastFacing");
CBaseViewModel.m_nViewModelIndex = findOffsetByName(j, "CBaseViewModel", "m_nViewModelIndex");
CBaseViewModel.m_nAnimationParity = findOffsetByName(j, "CBaseViewModel", "m_nAnimationParity");
CBaseViewModel.m_flAnimationStartTime = findOffsetByName(j, "CBaseViewModel", "m_flAnimationStartTime");
CBaseViewModel.m_hWeapon = findOffsetByName(j, "CBaseViewModel", "m_hWeapon");
CBaseViewModel.m_sVMName = findOffsetByName(j, "CBaseViewModel", "m_sVMName");
CBaseViewModel.m_sAnimationPrefix = findOffsetByName(j, "CBaseViewModel", "m_sAnimationPrefix");
CBaseViewModel.m_hOldLayerSequence = findOffsetByName(j, "CBaseViewModel", "m_hOldLayerSequence");
CBaseViewModel.m_oldLayer = findOffsetByName(j, "CBaseViewModel", "m_oldLayer");
CBaseViewModel.m_oldLayerStartTime = findOffsetByName(j, "CBaseViewModel", "m_oldLayerStartTime");
CBaseViewModel.m_hControlPanel = findOffsetByName(j, "CBaseViewModel", "m_hControlPanel");

// Atribuições para CBtActionCombatPositioning
// CBtActionCombatPositioning Offsets
CBtActionCombatPositioning.m_szSensorInputKey = findOffsetByName(j, "CBtActionCombatPositioning", "m_szSensorInputKey");
CBtActionCombatPositioning.m_szIsAttackingKey = findOffsetByName(j, "CBtActionCombatPositioning", "m_szIsAttackingKey");
CBtActionCombatPositioning.m_ActionTimer = findOffsetByName(j, "CBtActionCombatPositioning", "m_ActionTimer");
CBtActionCombatPositioning.m_bCrouching = findOffsetByName(j, "CBtActionCombatPositioning", "m_bCrouching");

// Atribuições para CBaseFire
// CBaseFire Offsets
CBaseFire.m_flScale = findOffsetByName(j, "CBaseFire", "m_flScale");
CBaseFire.m_flStartScale = findOffsetByName(j, "CBaseFire", "m_flStartScale");
CBaseFire.m_flScaleTime = findOffsetByName(j, "CBaseFire", "m_flScaleTime");
CBaseFire.m_nFlags = findOffsetByName(j, "CBaseFire", "m_nFlags");

// Atribuições para CTriggerActiveWeaponDetect
// CTriggerActiveWeaponDetect Offsets
CTriggerActiveWeaponDetect.m_OnTouchedActiveWeapon = findOffsetByName(j, "CTriggerActiveWeaponDetect", "m_OnTouchedActiveWeapon");
CTriggerActiveWeaponDetect.m_iszWeaponClassName = findOffsetByName(j, "CTriggerActiveWeaponDetect", "m_iszWeaponClassName");

// Atribuições para CEnvMicrophone
// CEnvMicrophone Offsets
CEnvMicrophone.m_bDisabled = findOffsetByName(j, "CEnvMicrophone", "m_bDisabled");
CEnvMicrophone.m_hMeasureTarget = findOffsetByName(j, "CEnvMicrophone", "m_hMeasureTarget");
CEnvMicrophone.m_nSoundType = findOffsetByName(j, "CEnvMicrophone", "m_nSoundType");
CEnvMicrophone.m_nSoundFlags = findOffsetByName(j, "CEnvMicrophone", "m_nSoundFlags");
CEnvMicrophone.m_flSensitivity = findOffsetByName(j, "CEnvMicrophone", "m_flSensitivity");
CEnvMicrophone.m_flSmoothFactor = findOffsetByName(j, "CEnvMicrophone", "m_flSmoothFactor");
CEnvMicrophone.m_flMaxRange = findOffsetByName(j, "CEnvMicrophone", "m_flMaxRange");
CEnvMicrophone.m_iszSpeakerName = findOffsetByName(j, "CEnvMicrophone", "m_iszSpeakerName");
CEnvMicrophone.m_hSpeaker = findOffsetByName(j, "CEnvMicrophone", "m_hSpeaker");
CEnvMicrophone.m_bAvoidFeedback = findOffsetByName(j, "CEnvMicrophone", "m_bAvoidFeedback");
CEnvMicrophone.m_iSpeakerDSPPreset = findOffsetByName(j, "CEnvMicrophone", "m_iSpeakerDSPPreset");
CEnvMicrophone.m_iszListenFilter = findOffsetByName(j, "CEnvMicrophone", "m_iszListenFilter");
CEnvMicrophone.m_hListenFilter = findOffsetByName(j, "CEnvMicrophone", "m_hListenFilter");
CEnvMicrophone.m_SoundLevel = findOffsetByName(j, "CEnvMicrophone", "m_SoundLevel");
CEnvMicrophone.m_OnRoutedSound = findOffsetByName(j, "CEnvMicrophone", "m_OnRoutedSound");
CEnvMicrophone.m_OnHeardSound = findOffsetByName(j, "CEnvMicrophone", "m_OnHeardSound");
CEnvMicrophone.m_szLastSound = findOffsetByName(j, "CEnvMicrophone", "m_szLastSound");
CEnvMicrophone.m_iLastRoutedFrame = findOffsetByName(j, "CEnvMicrophone", "m_iLastRoutedFrame");

// Atribuições para CInfoSpawnGroupLoadUnload
// CInfoSpawnGroupLoadUnload Offsets
CInfoSpawnGroupLoadUnload.m_OnSpawnGroupLoadStarted = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadStarted");
CInfoSpawnGroupLoadUnload.m_OnSpawnGroupLoadFinished = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadFinished");
CInfoSpawnGroupLoadUnload.m_OnSpawnGroupUnloadStarted = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadStarted");
CInfoSpawnGroupLoadUnload.m_OnSpawnGroupUnloadFinished = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadFinished");
CInfoSpawnGroupLoadUnload.m_iszSpawnGroupName = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupName");
CInfoSpawnGroupLoadUnload.m_iszSpawnGroupFilterName = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupFilterName");
CInfoSpawnGroupLoadUnload.m_iszLandmarkName = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_iszLandmarkName");
CInfoSpawnGroupLoadUnload.m_sFixedSpawnGroupName = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_sFixedSpawnGroupName");
CInfoSpawnGroupLoadUnload.m_flTimeoutInterval = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_flTimeoutInterval");
CInfoSpawnGroupLoadUnload.m_bStreamingStarted = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_bStreamingStarted");
CInfoSpawnGroupLoadUnload.m_bUnloadingStarted = findOffsetByName(j, "CInfoSpawnGroupLoadUnload", "m_bUnloadingStarted");

// Atribuições para CKnife
// CKnife Offsets
CKnife.m_bFirstAttack = findOffsetByName(j, "CKnife", "m_bFirstAttack");

// Atribuições para CFuncTrackTrain
// CFuncTrackTrain Offsets
CFuncTrackTrain.m_ppath = findOffsetByName(j, "CFuncTrackTrain", "m_ppath");
CFuncTrackTrain.m_length = findOffsetByName(j, "CFuncTrackTrain", "m_length");
CFuncTrackTrain.m_vPosPrev = findOffsetByName(j, "CFuncTrackTrain", "m_vPosPrev");
CFuncTrackTrain.m_angPrev = findOffsetByName(j, "CFuncTrackTrain", "m_angPrev");
CFuncTrackTrain.m_controlMins = findOffsetByName(j, "CFuncTrackTrain", "m_controlMins");
CFuncTrackTrain.m_controlMaxs = findOffsetByName(j, "CFuncTrackTrain", "m_controlMaxs");
CFuncTrackTrain.m_lastBlockPos = findOffsetByName(j, "CFuncTrackTrain", "m_lastBlockPos");
CFuncTrackTrain.m_lastBlockTick = findOffsetByName(j, "CFuncTrackTrain", "m_lastBlockTick");
CFuncTrackTrain.m_flVolume = findOffsetByName(j, "CFuncTrackTrain", "m_flVolume");
CFuncTrackTrain.m_flBank = findOffsetByName(j, "CFuncTrackTrain", "m_flBank");
CFuncTrackTrain.m_oldSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_oldSpeed");
CFuncTrackTrain.m_flBlockDamage = findOffsetByName(j, "CFuncTrackTrain", "m_flBlockDamage");
CFuncTrackTrain.m_height = findOffsetByName(j, "CFuncTrackTrain", "m_height");
CFuncTrackTrain.m_maxSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_maxSpeed");
CFuncTrackTrain.m_dir = findOffsetByName(j, "CFuncTrackTrain", "m_dir");
CFuncTrackTrain.m_iszSoundMove = findOffsetByName(j, "CFuncTrackTrain", "m_iszSoundMove");
CFuncTrackTrain.m_iszSoundMovePing = findOffsetByName(j, "CFuncTrackTrain", "m_iszSoundMovePing");
CFuncTrackTrain.m_iszSoundStart = findOffsetByName(j, "CFuncTrackTrain", "m_iszSoundStart");
CFuncTrackTrain.m_iszSoundStop = findOffsetByName(j, "CFuncTrackTrain", "m_iszSoundStop");
CFuncTrackTrain.m_strPathTarget = findOffsetByName(j, "CFuncTrackTrain", "m_strPathTarget");
CFuncTrackTrain.m_flMoveSoundMinDuration = findOffsetByName(j, "CFuncTrackTrain", "m_flMoveSoundMinDuration");
CFuncTrackTrain.m_flMoveSoundMaxDuration = findOffsetByName(j, "CFuncTrackTrain", "m_flMoveSoundMaxDuration");
CFuncTrackTrain.m_flNextMoveSoundTime = findOffsetByName(j, "CFuncTrackTrain", "m_flNextMoveSoundTime");
CFuncTrackTrain.m_flMoveSoundMinPitch = findOffsetByName(j, "CFuncTrackTrain", "m_flMoveSoundMinPitch");
CFuncTrackTrain.m_flMoveSoundMaxPitch = findOffsetByName(j, "CFuncTrackTrain", "m_flMoveSoundMaxPitch");
CFuncTrackTrain.m_eOrientationType = findOffsetByName(j, "CFuncTrackTrain", "m_eOrientationType");
CFuncTrackTrain.m_eVelocityType = findOffsetByName(j, "CFuncTrackTrain", "m_eVelocityType");
CFuncTrackTrain.m_OnStart = findOffsetByName(j, "CFuncTrackTrain", "m_OnStart");
CFuncTrackTrain.m_OnNext = findOffsetByName(j, "CFuncTrackTrain", "m_OnNext");
CFuncTrackTrain.m_OnArrivedAtDestinationNode = findOffsetByName(j, "CFuncTrackTrain", "m_OnArrivedAtDestinationNode");
CFuncTrackTrain.m_bManualSpeedChanges = findOffsetByName(j, "CFuncTrackTrain", "m_bManualSpeedChanges");
CFuncTrackTrain.m_flDesiredSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_flDesiredSpeed");
CFuncTrackTrain.m_flSpeedChangeTime = findOffsetByName(j, "CFuncTrackTrain", "m_flSpeedChangeTime");
CFuncTrackTrain.m_flAccelSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_flAccelSpeed");
CFuncTrackTrain.m_flDecelSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_flDecelSpeed");
CFuncTrackTrain.m_bAccelToSpeed = findOffsetByName(j, "CFuncTrackTrain", "m_bAccelToSpeed");
CFuncTrackTrain.m_flNextMPSoundTime = findOffsetByName(j, "CFuncTrackTrain", "m_flNextMPSoundTime");

// Atribuições para CFogVolume
// CFogVolume Offsets
CFogVolume.m_fogName = findOffsetByName(j, "CFogVolume", "m_fogName");
CFogVolume.m_postProcessName = findOffsetByName(j, "CFogVolume", "m_postProcessName");
CFogVolume.m_colorCorrectionName = findOffsetByName(j, "CFogVolume", "m_colorCorrectionName");
CFogVolume.m_bDisabled = findOffsetByName(j, "CFogVolume", "m_bDisabled");
CFogVolume.m_bInFogVolumesList = findOffsetByName(j, "CFogVolume", "m_bInFogVolumesList");

// Atribuições para CFire
// CFire Offsets
CFire.m_hEffect = findOffsetByName(j, "CFire", "m_hEffect");
CFire.m_hOwner = findOffsetByName(j, "CFire", "m_hOwner");
CFire.m_nFireType = findOffsetByName(j, "CFire", "m_nFireType");
CFire.m_flFuel = findOffsetByName(j, "CFire", "m_flFuel");
CFire.m_flDamageTime = findOffsetByName(j, "CFire", "m_flDamageTime");
CFire.m_lastDamage = findOffsetByName(j, "CFire", "m_lastDamage");
CFire.m_flFireSize = findOffsetByName(j, "CFire", "m_flFireSize");
CFire.m_flLastNavUpdateTime = findOffsetByName(j, "CFire", "m_flLastNavUpdateTime");
CFire.m_flHeatLevel = findOffsetByName(j, "CFire", "m_flHeatLevel");
CFire.m_flHeatAbsorb = findOffsetByName(j, "CFire", "m_flHeatAbsorb");
CFire.m_flDamageScale = findOffsetByName(j, "CFire", "m_flDamageScale");
CFire.m_flMaxHeat = findOffsetByName(j, "CFire", "m_flMaxHeat");
CFire.m_flLastHeatLevel = findOffsetByName(j, "CFire", "m_flLastHeatLevel");
CFire.m_flAttackTime = findOffsetByName(j, "CFire", "m_flAttackTime");
CFire.m_bEnabled = findOffsetByName(j, "CFire", "m_bEnabled");
CFire.m_bStartDisabled = findOffsetByName(j, "CFire", "m_bStartDisabled");
CFire.m_bDidActivate = findOffsetByName(j, "CFire", "m_bDidActivate");
CFire.m_OnIgnited = findOffsetByName(j, "CFire", "m_OnIgnited");
CFire.m_OnExtinguished = findOffsetByName(j, "CFire", "m_OnExtinguished");

// Atribuições para CFuncPlat
// CFuncPlat Offsets
CFuncPlat.m_sNoise = findOffsetByName(j, "CFuncPlat", "m_sNoise");

// Atribuições para CGenericConstraint
// CGenericConstraint Offsets
CGenericConstraint.m_nLinearMotionX = findOffsetByName(j, "CGenericConstraint", "m_nLinearMotionX");
CGenericConstraint.m_nLinearMotionY = findOffsetByName(j, "CGenericConstraint", "m_nLinearMotionY");
CGenericConstraint.m_nLinearMotionZ = findOffsetByName(j, "CGenericConstraint", "m_nLinearMotionZ");
CGenericConstraint.m_flLinearFrequencyX = findOffsetByName(j, "CGenericConstraint", "m_flLinearFrequencyX");
CGenericConstraint.m_flLinearFrequencyY = findOffsetByName(j, "CGenericConstraint", "m_flLinearFrequencyY");
CGenericConstraint.m_flLinearFrequencyZ = findOffsetByName(j, "CGenericConstraint", "m_flLinearFrequencyZ");
CGenericConstraint.m_flLinearDampingRatioX = findOffsetByName(j, "CGenericConstraint", "m_flLinearDampingRatioX");
CGenericConstraint.m_flLinearDampingRatioY = findOffsetByName(j, "CGenericConstraint", "m_flLinearDampingRatioY");
CGenericConstraint.m_flLinearDampingRatioZ = findOffsetByName(j, "CGenericConstraint", "m_flLinearDampingRatioZ");
CGenericConstraint.m_flMaxLinearImpulseX = findOffsetByName(j, "CGenericConstraint", "m_flMaxLinearImpulseX");
CGenericConstraint.m_flMaxLinearImpulseY = findOffsetByName(j, "CGenericConstraint", "m_flMaxLinearImpulseY");
CGenericConstraint.m_flMaxLinearImpulseZ = findOffsetByName(j, "CGenericConstraint", "m_flMaxLinearImpulseZ");
CGenericConstraint.m_flBreakAfterTimeX = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeX");
CGenericConstraint.m_flBreakAfterTimeY = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeY");
CGenericConstraint.m_flBreakAfterTimeZ = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeZ");
CGenericConstraint.m_flBreakAfterTimeStartTimeX = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeStartTimeX");
CGenericConstraint.m_flBreakAfterTimeStartTimeY = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeStartTimeY");
CGenericConstraint.m_flBreakAfterTimeStartTimeZ = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeStartTimeZ");
CGenericConstraint.m_flBreakAfterTimeThresholdX = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeThresholdX");
CGenericConstraint.m_flBreakAfterTimeThresholdY = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeThresholdY");
CGenericConstraint.m_flBreakAfterTimeThresholdZ = findOffsetByName(j, "CGenericConstraint", "m_flBreakAfterTimeThresholdZ");
CGenericConstraint.m_flNotifyForceX = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceX");
CGenericConstraint.m_flNotifyForceY = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceY");
CGenericConstraint.m_flNotifyForceZ = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceZ");
CGenericConstraint.m_flNotifyForceMinTimeX = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceMinTimeX");
CGenericConstraint.m_flNotifyForceMinTimeY = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceMinTimeY");
CGenericConstraint.m_flNotifyForceMinTimeZ = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceMinTimeZ");
CGenericConstraint.m_flNotifyForceLastTimeX = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceLastTimeX");
CGenericConstraint.m_flNotifyForceLastTimeY = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceLastTimeY");
CGenericConstraint.m_flNotifyForceLastTimeZ = findOffsetByName(j, "CGenericConstraint", "m_flNotifyForceLastTimeZ");
CGenericConstraint.m_bAxisNotifiedX = findOffsetByName(j, "CGenericConstraint", "m_bAxisNotifiedX");
CGenericConstraint.m_bAxisNotifiedY = findOffsetByName(j, "CGenericConstraint", "m_bAxisNotifiedY");
CGenericConstraint.m_bAxisNotifiedZ = findOffsetByName(j, "CGenericConstraint", "m_bAxisNotifiedZ");
CGenericConstraint.m_nAngularMotionX = findOffsetByName(j, "CGenericConstraint", "m_nAngularMotionX");
CGenericConstraint.m_nAngularMotionY = findOffsetByName(j, "CGenericConstraint", "m_nAngularMotionY");
CGenericConstraint.m_nAngularMotionZ = findOffsetByName(j, "CGenericConstraint", "m_nAngularMotionZ");
CGenericConstraint.m_flAngularFrequencyX = findOffsetByName(j, "CGenericConstraint", "m_flAngularFrequencyX");
CGenericConstraint.m_flAngularFrequencyY = findOffsetByName(j, "CGenericConstraint", "m_flAngularFrequencyY");
CGenericConstraint.m_flAngularFrequencyZ = findOffsetByName(j, "CGenericConstraint", "m_flAngularFrequencyZ");
CGenericConstraint.m_flAngularDampingRatioX = findOffsetByName(j, "CGenericConstraint", "m_flAngularDampingRatioX");
CGenericConstraint.m_flAngularDampingRatioY = findOffsetByName(j, "CGenericConstraint", "m_flAngularDampingRatioY");
CGenericConstraint.m_flAngularDampingRatioZ = findOffsetByName(j, "CGenericConstraint", "m_flAngularDampingRatioZ");
CGenericConstraint.m_flMaxAngularImpulseX = findOffsetByName(j, "CGenericConstraint", "m_flMaxAngularImpulseX");
CGenericConstraint.m_flMaxAngularImpulseY = findOffsetByName(j, "CGenericConstraint", "m_flMaxAngularImpulseY");
CGenericConstraint.m_flMaxAngularImpulseZ = findOffsetByName(j, "CGenericConstraint", "m_flMaxAngularImpulseZ");
CGenericConstraint.m_NotifyForceReachedX = findOffsetByName(j, "CGenericConstraint", "m_NotifyForceReachedX");
CGenericConstraint.m_NotifyForceReachedY = findOffsetByName(j, "CGenericConstraint", "m_NotifyForceReachedY");
CGenericConstraint.m_NotifyForceReachedZ = findOffsetByName(j, "CGenericConstraint", "m_NotifyForceReachedZ");

// Atribuições para CPhysTorque
// CPhysTorque Offsets
CPhysTorque.m_axis = findOffsetByName(j, "CPhysTorque", "m_axis");

// Atribuições para CRagdollProp
// CRagdollProp Offsets
CRagdollProp.m_ragdoll = findOffsetByName(j, "CRagdollProp", "m_ragdoll");
CRagdollProp.m_bStartDisabled = findOffsetByName(j, "CRagdollProp", "m_bStartDisabled");
CRagdollProp.m_ragPos = findOffsetByName(j, "CRagdollProp", "m_ragPos");
CRagdollProp.m_ragAngles = findOffsetByName(j, "CRagdollProp", "m_ragAngles");
CRagdollProp.m_hRagdollSource = findOffsetByName(j, "CRagdollProp", "m_hRagdollSource");
CRagdollProp.m_lastUpdateTickCount = findOffsetByName(j, "CRagdollProp", "m_lastUpdateTickCount");
CRagdollProp.m_allAsleep = findOffsetByName(j, "CRagdollProp", "m_allAsleep");
CRagdollProp.m_bFirstCollisionAfterLaunch = findOffsetByName(j, "CRagdollProp", "m_bFirstCollisionAfterLaunch");
CRagdollProp.m_hDamageEntity = findOffsetByName(j, "CRagdollProp", "m_hDamageEntity");
CRagdollProp.m_hKiller = findOffsetByName(j, "CRagdollProp", "m_hKiller");
CRagdollProp.m_hPhysicsAttacker = findOffsetByName(j, "CRagdollProp", "m_hPhysicsAttacker");
CRagdollProp.m_flLastPhysicsInfluenceTime = findOffsetByName(j, "CRagdollProp", "m_flLastPhysicsInfluenceTime");
CRagdollProp.m_flFadeOutStartTime = findOffsetByName(j, "CRagdollProp", "m_flFadeOutStartTime");
CRagdollProp.m_flFadeTime = findOffsetByName(j, "CRagdollProp", "m_flFadeTime");
CRagdollProp.m_vecLastOrigin = findOffsetByName(j, "CRagdollProp", "m_vecLastOrigin");
CRagdollProp.m_flAwakeTime = findOffsetByName(j, "CRagdollProp", "m_flAwakeTime");
CRagdollProp.m_flLastOriginChangeTime = findOffsetByName(j, "CRagdollProp", "m_flLastOriginChangeTime");
CRagdollProp.m_strOriginClassName = findOffsetByName(j, "CRagdollProp", "m_strOriginClassName");
CRagdollProp.m_strSourceClassName = findOffsetByName(j, "CRagdollProp", "m_strSourceClassName");
CRagdollProp.m_bHasBeenPhysgunned = findOffsetByName(j, "CRagdollProp", "m_bHasBeenPhysgunned");
CRagdollProp.m_bShouldTeleportPhysics = findOffsetByName(j, "CRagdollProp", "m_bShouldTeleportPhysics");
CRagdollProp.m_flBlendWeight = findOffsetByName(j, "CRagdollProp", "m_flBlendWeight");
CRagdollProp.m_flDefaultFadeScale = findOffsetByName(j, "CRagdollProp", "m_flDefaultFadeScale");
CRagdollProp.m_ragdollMins = findOffsetByName(j, "CRagdollProp", "m_ragdollMins");
CRagdollProp.m_ragdollMaxs = findOffsetByName(j, "CRagdollProp", "m_ragdollMaxs");
CRagdollProp.m_bShouldDeleteActivationRecord = findOffsetByName(j, "CRagdollProp", "m_bShouldDeleteActivationRecord");
CRagdollProp.m_bValidatePoweredRagdollPose = findOffsetByName(j, "CRagdollProp", "m_bValidatePoweredRagdollPose");

// Atribuições para CEnvDetailController
// CEnvDetailController Offsets
CEnvDetailController.m_flFadeStartDist = findOffsetByName(j, "CEnvDetailController", "m_flFadeStartDist");
CEnvDetailController.m_flFadeEndDist = findOffsetByName(j, "CEnvDetailController", "m_flFadeEndDist");

// Atribuições para CTriggerLook
// CTriggerLook Offsets
CTriggerLook.m_hLookTarget = findOffsetByName(j, "CTriggerLook", "m_hLookTarget");
CTriggerLook.m_flFieldOfView = findOffsetByName(j, "CTriggerLook", "m_flFieldOfView");
CTriggerLook.m_flLookTime = findOffsetByName(j, "CTriggerLook", "m_flLookTime");
CTriggerLook.m_flLookTimeTotal = findOffsetByName(j, "CTriggerLook", "m_flLookTimeTotal");
CTriggerLook.m_flLookTimeLast = findOffsetByName(j, "CTriggerLook", "m_flLookTimeLast");
CTriggerLook.m_flTimeoutDuration = findOffsetByName(j, "CTriggerLook", "m_flTimeoutDuration");
CTriggerLook.m_bTimeoutFired = findOffsetByName(j, "CTriggerLook", "m_bTimeoutFired");
CTriggerLook.m_bIsLooking = findOffsetByName(j, "CTriggerLook", "m_bIsLooking");
CTriggerLook.m_b2DFOV = findOffsetByName(j, "CTriggerLook", "m_b2DFOV");
CTriggerLook.m_bUseVelocity = findOffsetByName(j, "CTriggerLook", "m_bUseVelocity");
CTriggerLook.m_bTestOcclusion = findOffsetByName(j, "CTriggerLook", "m_bTestOcclusion");
CTriggerLook.m_OnTimeout = findOffsetByName(j, "CTriggerLook", "m_OnTimeout");
CTriggerLook.m_OnStartLook = findOffsetByName(j, "CTriggerLook", "m_OnStartLook");
CTriggerLook.m_OnEndLook = findOffsetByName(j, "CTriggerLook", "m_OnEndLook");

// Atribuições para CMathRemap
// CMathRemap Offsets
CMathRemap.m_flInMin = findOffsetByName(j, "CMathRemap", "m_flInMin");
CMathRemap.m_flInMax = findOffsetByName(j, "CMathRemap", "m_flInMax");
CMathRemap.m_flOut1 = findOffsetByName(j, "CMathRemap", "m_flOut1");
CMathRemap.m_flOut2 = findOffsetByName(j, "CMathRemap", "m_flOut2");
CMathRemap.m_flOldInValue = findOffsetByName(j, "CMathRemap", "m_flOldInValue");
CMathRemap.m_bEnabled = findOffsetByName(j, "CMathRemap", "m_bEnabled");
CMathRemap.m_OutValue = findOffsetByName(j, "CMathRemap", "m_OutValue");
CMathRemap.m_OnRoseAboveMin = findOffsetByName(j, "CMathRemap", "m_OnRoseAboveMin");
CMathRemap.m_OnRoseAboveMax = findOffsetByName(j, "CMathRemap", "m_OnRoseAboveMax");
CMathRemap.m_OnFellBelowMin = findOffsetByName(j, "CMathRemap", "m_OnFellBelowMin");
CMathRemap.m_OnFellBelowMax = findOffsetByName(j, "CMathRemap", "m_OnFellBelowMax");

// Atribuições para CInstructorEventEntity
// CInstructorEventEntity Offsets
CInstructorEventEntity.m_iszName = findOffsetByName(j, "CInstructorEventEntity", "m_iszName");
CInstructorEventEntity.m_iszHintTargetEntity = findOffsetByName(j, "CInstructorEventEntity", "m_iszHintTargetEntity");
CInstructorEventEntity.m_hTargetPlayer = findOffsetByName(j, "CInstructorEventEntity", "m_hTargetPlayer");

// Atribuições para CGradientFog
// CGradientFog Offsets
CGradientFog.m_hGradientFogTexture = findOffsetByName(j, "CGradientFog", "m_hGradientFogTexture");
CGradientFog.m_flFogStartDistance = findOffsetByName(j, "CGradientFog", "m_flFogStartDistance");
CGradientFog.m_flFogEndDistance = findOffsetByName(j, "CGradientFog", "m_flFogEndDistance");
CGradientFog.m_bHeightFogEnabled = findOffsetByName(j, "CGradientFog", "m_bHeightFogEnabled");
CGradientFog.m_flFogStartHeight = findOffsetByName(j, "CGradientFog", "m_flFogStartHeight");
CGradientFog.m_flFogEndHeight = findOffsetByName(j, "CGradientFog", "m_flFogEndHeight");
CGradientFog.m_flFarZ = findOffsetByName(j, "CGradientFog", "m_flFarZ");
CGradientFog.m_flFogMaxOpacity = findOffsetByName(j, "CGradientFog", "m_flFogMaxOpacity");
CGradientFog.m_flFogFalloffExponent = findOffsetByName(j, "CGradientFog", "m_flFogFalloffExponent");
CGradientFog.m_flFogVerticalExponent = findOffsetByName(j, "CGradientFog", "m_flFogVerticalExponent");
CGradientFog.m_fogColor = findOffsetByName(j, "CGradientFog", "m_fogColor");
CGradientFog.m_flFogStrength = findOffsetByName(j, "CGradientFog", "m_flFogStrength");
CGradientFog.m_flFadeTime = findOffsetByName(j, "CGradientFog", "m_flFadeTime");
CGradientFog.m_bStartDisabled = findOffsetByName(j, "CGradientFog", "m_bStartDisabled");
CGradientFog.m_bIsEnabled = findOffsetByName(j, "CGradientFog", "m_bIsEnabled");
CGradientFog.m_bGradientFogNeedsTextures = findOffsetByName(j, "CGradientFog", "m_bGradientFogNeedsTextures");

// Atribuições para CFootstepControl
// CFootstepControl Offsets
CFootstepControl.m_source = findOffsetByName(j, "CFootstepControl", "m_source");
CFootstepControl.m_destination = findOffsetByName(j, "CFootstepControl", "m_destination");

// Atribuições para CTriggerVolume
// CTriggerVolume Offsets
CTriggerVolume.m_iFilterName = findOffsetByName(j, "CTriggerVolume", "m_iFilterName");
CTriggerVolume.m_hFilter = findOffsetByName(j, "CTriggerVolume", "m_hFilter");

// Atribuições para CFishPool
// CFishPool Offsets
CFishPool.m_fishCount = findOffsetByName(j, "CFishPool", "m_fishCount");
CFishPool.m_maxRange = findOffsetByName(j, "CFishPool", "m_maxRange");
CFishPool.m_swimDepth = findOffsetByName(j, "CFishPool", "m_swimDepth");
CFishPool.m_waterLevel = findOffsetByName(j, "CFishPool", "m_waterLevel");
CFishPool.m_isDormant = findOffsetByName(j, "CFishPool", "m_isDormant");
CFishPool.m_fishes = findOffsetByName(j, "CFishPool", "m_fishes");
CFishPool.m_visTimer = findOffsetByName(j, "CFishPool", "m_visTimer");

// Atribuições para CFuncVPhysicsClip
// CFuncVPhysicsClip Offsets
CFuncVPhysicsClip.m_bDisabled = findOffsetByName(j, "CFuncVPhysicsClip", "m_bDisabled");

// Atribuições para CCSPlayer_RadioServices
// CCSPlayer_RadioServices Offsets
CCSPlayer_RadioServices.m_flGotHostageTalkTimer = findOffsetByName(j, "CCSPlayer_RadioServices", "m_flGotHostageTalkTimer");
CCSPlayer_RadioServices.m_flDefusingTalkTimer = findOffsetByName(j, "CCSPlayer_RadioServices", "m_flDefusingTalkTimer");
CCSPlayer_RadioServices.m_flC4PlantTalkTimer = findOffsetByName(j, "CCSPlayer_RadioServices", "m_flC4PlantTalkTimer");
CCSPlayer_RadioServices.m_flRadioTokenSlots = findOffsetByName(j, "CCSPlayer_RadioServices", "m_flRadioTokenSlots");
CCSPlayer_RadioServices.m_bIgnoreRadio = findOffsetByName(j, "CCSPlayer_RadioServices", "m_bIgnoreRadio");

// Atribuições para CInstancedSceneEntity
// CInstancedSceneEntity Offsets
CInstancedSceneEntity.m_hOwner = findOffsetByName(j, "CInstancedSceneEntity", "m_hOwner");
CInstancedSceneEntity.m_bHadOwner = findOffsetByName(j, "CInstancedSceneEntity", "m_bHadOwner");
CInstancedSceneEntity.m_flPostSpeakDelay = findOffsetByName(j, "CInstancedSceneEntity", "m_flPostSpeakDelay");
CInstancedSceneEntity.m_flPreDelay = findOffsetByName(j, "CInstancedSceneEntity", "m_flPreDelay");
CInstancedSceneEntity.m_bIsBackground = findOffsetByName(j, "CInstancedSceneEntity", "m_bIsBackground");
CInstancedSceneEntity.m_bRemoveOnCompletion = findOffsetByName(j, "CInstancedSceneEntity", "m_bRemoveOnCompletion");
CInstancedSceneEntity.m_hTarget = findOffsetByName(j, "CInstancedSceneEntity", "m_hTarget");

// Atribuições para CEnvHudHint
// CEnvHudHint Offsets
CEnvHudHint.m_iszMessage = findOffsetByName(j, "CEnvHudHint", "m_iszMessage");

// Atribuições para CParticleSystem
// CParticleSystem Offsets
CParticleSystem.m_szSnapshotFileName = findOffsetByName(j, "CParticleSystem", "m_szSnapshotFileName");
CParticleSystem.m_bActive = findOffsetByName(j, "CParticleSystem", "m_bActive");
CParticleSystem.m_bFrozen = findOffsetByName(j, "CParticleSystem", "m_bFrozen");
CParticleSystem.m_flFreezeTransitionDuration = findOffsetByName(j, "CParticleSystem", "m_flFreezeTransitionDuration");
CParticleSystem.m_nStopType = findOffsetByName(j, "CParticleSystem", "m_nStopType");
CParticleSystem.m_bAnimateDuringGameplayPause = findOffsetByName(j, "CParticleSystem", "m_bAnimateDuringGameplayPause");
CParticleSystem.m_iEffectIndex = findOffsetByName(j, "CParticleSystem", "m_iEffectIndex");
CParticleSystem.m_flStartTime = findOffsetByName(j, "CParticleSystem", "m_flStartTime");
CParticleSystem.m_flPreSimTime = findOffsetByName(j, "CParticleSystem", "m_flPreSimTime");
CParticleSystem.m_vServerControlPoints = findOffsetByName(j, "CParticleSystem", "m_vServerControlPoints");
CParticleSystem.m_iServerControlPointAssignments = findOffsetByName(j, "CParticleSystem", "m_iServerControlPointAssignments");
CParticleSystem.m_hControlPointEnts = findOffsetByName(j, "CParticleSystem", "m_hControlPointEnts");
CParticleSystem.m_bNoSave = findOffsetByName(j, "CParticleSystem", "m_bNoSave");
CParticleSystem.m_bNoFreeze = findOffsetByName(j, "CParticleSystem", "m_bNoFreeze");
CParticleSystem.m_bNoRamp = findOffsetByName(j, "CParticleSystem", "m_bNoRamp");
CParticleSystem.m_bStartActive = findOffsetByName(j, "CParticleSystem", "m_bStartActive");
CParticleSystem.m_iszEffectName = findOffsetByName(j, "CParticleSystem", "m_iszEffectName");
CParticleSystem.m_iszControlPointNames = findOffsetByName(j, "CParticleSystem", "m_iszControlPointNames");
CParticleSystem.m_nDataCP = findOffsetByName(j, "CParticleSystem", "m_nDataCP");
CParticleSystem.m_vecDataCPValue = findOffsetByName(j, "CParticleSystem", "m_vecDataCPValue");
CParticleSystem.m_nTintCP = findOffsetByName(j, "CParticleSystem", "m_nTintCP");
CParticleSystem.m_clrTint = findOffsetByName(j, "CParticleSystem", "m_clrTint");

// Atribuições para CScriptItem
// CScriptItem Offsets
CScriptItem.m_MoveTypeOverride = findOffsetByName(j, "CScriptItem", "m_MoveTypeOverride");

// Atribuições para CAmbientGeneric
// CAmbientGeneric Offsets
CAmbientGeneric.m_radius = findOffsetByName(j, "CAmbientGeneric", "m_radius");
CAmbientGeneric.m_flMaxRadius = findOffsetByName(j, "CAmbientGeneric", "m_flMaxRadius");
CAmbientGeneric.m_iSoundLevel = findOffsetByName(j, "CAmbientGeneric", "m_iSoundLevel");
CAmbientGeneric.m_dpv = findOffsetByName(j, "CAmbientGeneric", "m_dpv");
CAmbientGeneric.m_fActive = findOffsetByName(j, "CAmbientGeneric", "m_fActive");
CAmbientGeneric.m_fLooping = findOffsetByName(j, "CAmbientGeneric", "m_fLooping");
CAmbientGeneric.m_iszSound = findOffsetByName(j, "CAmbientGeneric", "m_iszSound");
CAmbientGeneric.m_sSourceEntName = findOffsetByName(j, "CAmbientGeneric", "m_sSourceEntName");
CAmbientGeneric.m_hSoundSource = findOffsetByName(j, "CAmbientGeneric", "m_hSoundSource");
CAmbientGeneric.m_nSoundSourceEntIndex = findOffsetByName(j, "CAmbientGeneric", "m_nSoundSourceEntIndex");

// Atribuições para CDynamicLight
// CDynamicLight Offsets
CDynamicLight.m_ActualFlags = findOffsetByName(j, "CDynamicLight", "m_ActualFlags");
CDynamicLight.m_Flags = findOffsetByName(j, "CDynamicLight", "m_Flags");
CDynamicLight.m_LightStyle = findOffsetByName(j, "CDynamicLight", "m_LightStyle");
CDynamicLight.m_On = findOffsetByName(j, "CDynamicLight", "m_On");
CDynamicLight.m_Radius = findOffsetByName(j, "CDynamicLight", "m_Radius");
CDynamicLight.m_Exponent = findOffsetByName(j, "CDynamicLight", "m_Exponent");
CDynamicLight.m_InnerAngle = findOffsetByName(j, "CDynamicLight", "m_InnerAngle");
CDynamicLight.m_OuterAngle = findOffsetByName(j, "CDynamicLight", "m_OuterAngle");
CDynamicLight.m_SpotRadius = findOffsetByName(j, "CDynamicLight", "m_SpotRadius");

// Atribuições para CPhysicsProp
// CPhysicsProp Offsets
CPhysicsProp.m_MotionEnabled = findOffsetByName(j, "CPhysicsProp", "m_MotionEnabled");
CPhysicsProp.m_OnAwakened = findOffsetByName(j, "CPhysicsProp", "m_OnAwakened");
CPhysicsProp.m_OnAwake = findOffsetByName(j, "CPhysicsProp", "m_OnAwake");
CPhysicsProp.m_OnAsleep = findOffsetByName(j, "CPhysicsProp", "m_OnAsleep");
CPhysicsProp.m_OnPlayerUse = findOffsetByName(j, "CPhysicsProp", "m_OnPlayerUse");
CPhysicsProp.m_OnOutOfWorld = findOffsetByName(j, "CPhysicsProp", "m_OnOutOfWorld");
CPhysicsProp.m_OnPlayerPickup = findOffsetByName(j, "CPhysicsProp", "m_OnPlayerPickup");
CPhysicsProp.m_bForceNavIgnore = findOffsetByName(j, "CPhysicsProp", "m_bForceNavIgnore");
CPhysicsProp.m_bNoNavmeshBlocker = findOffsetByName(j, "CPhysicsProp", "m_bNoNavmeshBlocker");
CPhysicsProp.m_bForceNpcExclude = findOffsetByName(j, "CPhysicsProp", "m_bForceNpcExclude");
CPhysicsProp.m_massScale = findOffsetByName(j, "CPhysicsProp", "m_massScale");
CPhysicsProp.m_inertiaScale = findOffsetByName(j, "CPhysicsProp", "m_inertiaScale");
CPhysicsProp.m_buoyancyScale = findOffsetByName(j, "CPhysicsProp", "m_buoyancyScale");
CPhysicsProp.m_damageType = findOffsetByName(j, "CPhysicsProp", "m_damageType");
CPhysicsProp.m_damageToEnableMotion = findOffsetByName(j, "CPhysicsProp", "m_damageToEnableMotion");
CPhysicsProp.m_flForceToEnableMotion = findOffsetByName(j, "CPhysicsProp", "m_flForceToEnableMotion");
CPhysicsProp.m_bThrownByPlayer = findOffsetByName(j, "CPhysicsProp", "m_bThrownByPlayer");
CPhysicsProp.m_bDroppedByPlayer = findOffsetByName(j, "CPhysicsProp", "m_bDroppedByPlayer");
CPhysicsProp.m_bTouchedByPlayer = findOffsetByName(j, "CPhysicsProp", "m_bTouchedByPlayer");
CPhysicsProp.m_bFirstCollisionAfterLaunch = findOffsetByName(j, "CPhysicsProp", "m_bFirstCollisionAfterLaunch");
CPhysicsProp.m_iExploitableByPlayer = findOffsetByName(j, "CPhysicsProp", "m_iExploitableByPlayer");
CPhysicsProp.m_bHasBeenAwakened = findOffsetByName(j, "CPhysicsProp", "m_bHasBeenAwakened");
CPhysicsProp.m_bIsOverrideProp = findOffsetByName(j, "CPhysicsProp", "m_bIsOverrideProp");
CPhysicsProp.m_fNextCheckDisableMotionContactsTime = findOffsetByName(j, "CPhysicsProp", "m_fNextCheckDisableMotionContactsTime");
CPhysicsProp.m_iInitialGlowState = findOffsetByName(j, "CPhysicsProp", "m_iInitialGlowState");
CPhysicsProp.m_nGlowRange = findOffsetByName(j, "CPhysicsProp", "m_nGlowRange");
CPhysicsProp.m_nGlowRangeMin = findOffsetByName(j, "CPhysicsProp", "m_nGlowRangeMin");
CPhysicsProp.m_glowColor = findOffsetByName(j, "CPhysicsProp", "m_glowColor");
CPhysicsProp.m_bShouldAutoConvertBackFromDebris = findOffsetByName(j, "CPhysicsProp", "m_bShouldAutoConvertBackFromDebris");
CPhysicsProp.m_bMuteImpactEffects = findOffsetByName(j, "CPhysicsProp", "m_bMuteImpactEffects");
CPhysicsProp.m_bAcceptDamageFromHeldObjects = findOffsetByName(j, "CPhysicsProp", "m_bAcceptDamageFromHeldObjects");
CPhysicsProp.m_bEnableUseOutput = findOffsetByName(j, "CPhysicsProp", "m_bEnableUseOutput");
CPhysicsProp.m_CrateType = findOffsetByName(j, "CPhysicsProp", "m_CrateType");
CPhysicsProp.m_strItemClass = findOffsetByName(j, "CPhysicsProp", "m_strItemClass");
CPhysicsProp.m_nItemCount = findOffsetByName(j, "CPhysicsProp", "m_nItemCount");
CPhysicsProp.m_bRemovableForAmmoBalancing = findOffsetByName(j, "CPhysicsProp", "m_bRemovableForAmmoBalancing");
CPhysicsProp.m_bAwake = findOffsetByName(j, "CPhysicsProp", "m_bAwake");

// Atribuições para CSensorGrenadeProjectile
// CSensorGrenadeProjectile Offsets
CSensorGrenadeProjectile.m_fExpireTime = findOffsetByName(j, "CSensorGrenadeProjectile", "m_fExpireTime");
CSensorGrenadeProjectile.m_fNextDetectPlayerSound = findOffsetByName(j, "CSensorGrenadeProjectile", "m_fNextDetectPlayerSound");
CSensorGrenadeProjectile.m_hDisplayGrenade = findOffsetByName(j, "CSensorGrenadeProjectile", "m_hDisplayGrenade");

// Atribuições para CTriggerSndSosOpvar
// CTriggerSndSosOpvar Offsets
CTriggerSndSosOpvar.m_hTouchingPlayers = findOffsetByName(j, "CTriggerSndSosOpvar", "m_hTouchingPlayers");
CTriggerSndSosOpvar.m_flPosition = findOffsetByName(j, "CTriggerSndSosOpvar", "m_flPosition");
CTriggerSndSosOpvar.m_flCenterSize = findOffsetByName(j, "CTriggerSndSosOpvar", "m_flCenterSize");
CTriggerSndSosOpvar.m_flMinVal = findOffsetByName(j, "CTriggerSndSosOpvar", "m_flMinVal");
CTriggerSndSosOpvar.m_flMaxVal = findOffsetByName(j, "CTriggerSndSosOpvar", "m_flMaxVal");
CTriggerSndSosOpvar.m_opvarName = findOffsetByName(j, "CTriggerSndSosOpvar", "m_opvarName");
CTriggerSndSosOpvar.m_stackName = findOffsetByName(j, "CTriggerSndSosOpvar", "m_stackName");
CTriggerSndSosOpvar.m_operatorName = findOffsetByName(j, "CTriggerSndSosOpvar", "m_operatorName");
CTriggerSndSosOpvar.m_bVolIs2D = findOffsetByName(j, "CTriggerSndSosOpvar", "m_bVolIs2D");
CTriggerSndSosOpvar.m_opvarNameChar = findOffsetByName(j, "CTriggerSndSosOpvar", "m_opvarNameChar");
CTriggerSndSosOpvar.m_stackNameChar = findOffsetByName(j, "CTriggerSndSosOpvar", "m_stackNameChar");
CTriggerSndSosOpvar.m_operatorNameChar = findOffsetByName(j, "CTriggerSndSosOpvar", "m_operatorNameChar");
CTriggerSndSosOpvar.m_VecNormPos = findOffsetByName(j, "CTriggerSndSosOpvar", "m_VecNormPos");
CTriggerSndSosOpvar.m_flNormCenterSize = findOffsetByName(j, "CTriggerSndSosOpvar", "m_flNormCenterSize");

// Atribuições para CScriptedSequence
// CScriptedSequence Offsets
CScriptedSequence.m_iszEntry = findOffsetByName(j, "CScriptedSequence", "m_iszEntry");
CScriptedSequence.m_iszPreIdle = findOffsetByName(j, "CScriptedSequence", "m_iszPreIdle");
CScriptedSequence.m_iszPlay = findOffsetByName(j, "CScriptedSequence", "m_iszPlay");
CScriptedSequence.m_iszPostIdle = findOffsetByName(j, "CScriptedSequence", "m_iszPostIdle");
CScriptedSequence.m_iszModifierToAddOnPlay = findOffsetByName(j, "CScriptedSequence", "m_iszModifierToAddOnPlay");
CScriptedSequence.m_iszNextScript = findOffsetByName(j, "CScriptedSequence", "m_iszNextScript");
CScriptedSequence.m_iszEntity = findOffsetByName(j, "CScriptedSequence", "m_iszEntity");
CScriptedSequence.m_iszSyncGroup = findOffsetByName(j, "CScriptedSequence", "m_iszSyncGroup");
CScriptedSequence.m_nMoveTo = findOffsetByName(j, "CScriptedSequence", "m_nMoveTo");
CScriptedSequence.m_nMoveToGait = findOffsetByName(j, "CScriptedSequence", "m_nMoveToGait");
CScriptedSequence.m_nHeldWeaponBehavior = findOffsetByName(j, "CScriptedSequence", "m_nHeldWeaponBehavior");
CScriptedSequence.m_bIsPlayingPreIdle = findOffsetByName(j, "CScriptedSequence", "m_bIsPlayingPreIdle");
CScriptedSequence.m_bIsPlayingEntry = findOffsetByName(j, "CScriptedSequence", "m_bIsPlayingEntry");
CScriptedSequence.m_bIsPlayingAction = findOffsetByName(j, "CScriptedSequence", "m_bIsPlayingAction");
CScriptedSequence.m_bIsPlayingPostIdle = findOffsetByName(j, "CScriptedSequence", "m_bIsPlayingPostIdle");
CScriptedSequence.m_bDontRotateOther = findOffsetByName(j, "CScriptedSequence", "m_bDontRotateOther");
CScriptedSequence.m_bIsRepeatable = findOffsetByName(j, "CScriptedSequence", "m_bIsRepeatable");
CScriptedSequence.m_bShouldLeaveCorpse = findOffsetByName(j, "CScriptedSequence", "m_bShouldLeaveCorpse");
CScriptedSequence.m_bStartOnSpawn = findOffsetByName(j, "CScriptedSequence", "m_bStartOnSpawn");
CScriptedSequence.m_bDisallowInterrupts = findOffsetByName(j, "CScriptedSequence", "m_bDisallowInterrupts");
CScriptedSequence.m_bCanOverrideNPCState = findOffsetByName(j, "CScriptedSequence", "m_bCanOverrideNPCState");
CScriptedSequence.m_bDontTeleportAtEnd = findOffsetByName(j, "CScriptedSequence", "m_bDontTeleportAtEnd");
CScriptedSequence.m_bHighPriority = findOffsetByName(j, "CScriptedSequence", "m_bHighPriority");
CScriptedSequence.m_bHideDebugComplaints = findOffsetByName(j, "CScriptedSequence", "m_bHideDebugComplaints");
CScriptedSequence.m_bContinueOnDeath = findOffsetByName(j, "CScriptedSequence", "m_bContinueOnDeath");
CScriptedSequence.m_bLoopPreIdleSequence = findOffsetByName(j, "CScriptedSequence", "m_bLoopPreIdleSequence");
CScriptedSequence.m_bLoopActionSequence = findOffsetByName(j, "CScriptedSequence", "m_bLoopActionSequence");
CScriptedSequence.m_bLoopPostIdleSequence = findOffsetByName(j, "CScriptedSequence", "m_bLoopPostIdleSequence");
CScriptedSequence.m_bSynchPostIdles = findOffsetByName(j, "CScriptedSequence", "m_bSynchPostIdles");
CScriptedSequence.m_bIgnoreLookAt = findOffsetByName(j, "CScriptedSequence", "m_bIgnoreLookAt");
CScriptedSequence.m_bIgnoreGravity = findOffsetByName(j, "CScriptedSequence", "m_bIgnoreGravity");
CScriptedSequence.m_bDisableNPCCollisions = findOffsetByName(j, "CScriptedSequence", "m_bDisableNPCCollisions");
CScriptedSequence.m_bKeepAnimgraphLockedPost = findOffsetByName(j, "CScriptedSequence", "m_bKeepAnimgraphLockedPost");
CScriptedSequence.m_bDontAddModifiers = findOffsetByName(j, "CScriptedSequence", "m_bDontAddModifiers");
CScriptedSequence.m_flRadius = findOffsetByName(j, "CScriptedSequence", "m_flRadius");
CScriptedSequence.m_flRepeat = findOffsetByName(j, "CScriptedSequence", "m_flRepeat");
CScriptedSequence.m_flPlayAnimFadeInTime = findOffsetByName(j, "CScriptedSequence", "m_flPlayAnimFadeInTime");
CScriptedSequence.m_flMoveInterpTime = findOffsetByName(j, "CScriptedSequence", "m_flMoveInterpTime");
CScriptedSequence.m_flAngRate = findOffsetByName(j, "CScriptedSequence", "m_flAngRate");
CScriptedSequence.m_bWaitUntilMoveCompletesToStartAnimation = findOffsetByName(j, "CScriptedSequence", "m_bWaitUntilMoveCompletesToStartAnimation");
CScriptedSequence.m_nNotReadySequenceCount = findOffsetByName(j, "CScriptedSequence", "m_nNotReadySequenceCount");
CScriptedSequence.m_startTime = findOffsetByName(j, "CScriptedSequence", "m_startTime");
CScriptedSequence.m_bWaitForBeginSequence = findOffsetByName(j, "CScriptedSequence", "m_bWaitForBeginSequence");
CScriptedSequence.m_saved_effects = findOffsetByName(j, "CScriptedSequence", "m_saved_effects");
CScriptedSequence.m_savedFlags = findOffsetByName(j, "CScriptedSequence", "m_savedFlags");
CScriptedSequence.m_savedCollisionGroup = findOffsetByName(j, "CScriptedSequence", "m_savedCollisionGroup");
CScriptedSequence.m_bInterruptable = findOffsetByName(j, "CScriptedSequence", "m_bInterruptable");
CScriptedSequence.m_sequenceStarted = findOffsetByName(j, "CScriptedSequence", "m_sequenceStarted");
CScriptedSequence.m_bPositionRelativeToOtherEntity = findOffsetByName(j, "CScriptedSequence", "m_bPositionRelativeToOtherEntity");
CScriptedSequence.m_hTargetEnt = findOffsetByName(j, "CScriptedSequence", "m_hTargetEnt");
CScriptedSequence.m_hNextCine = findOffsetByName(j, "CScriptedSequence", "m_hNextCine");
CScriptedSequence.m_bThinking = findOffsetByName(j, "CScriptedSequence", "m_bThinking");
CScriptedSequence.m_bInitiatedSelfDelete = findOffsetByName(j, "CScriptedSequence", "m_bInitiatedSelfDelete");
CScriptedSequence.m_bIsTeleportingDueToMoveTo = findOffsetByName(j, "CScriptedSequence", "m_bIsTeleportingDueToMoveTo");
CScriptedSequence.m_bAllowCustomInterruptConditions = findOffsetByName(j, "CScriptedSequence", "m_bAllowCustomInterruptConditions");
CScriptedSequence.m_hForcedTarget = findOffsetByName(j, "CScriptedSequence", "m_hForcedTarget");
CScriptedSequence.m_bDontCancelOtherSequences = findOffsetByName(j, "CScriptedSequence", "m_bDontCancelOtherSequences");
CScriptedSequence.m_bForceSynch = findOffsetByName(j, "CScriptedSequence", "m_bForceSynch");
CScriptedSequence.m_bPreventUpdateYawOnFinish = findOffsetByName(j, "CScriptedSequence", "m_bPreventUpdateYawOnFinish");
CScriptedSequence.m_bEnsureOnNavmeshOnFinish = findOffsetByName(j, "CScriptedSequence", "m_bEnsureOnNavmeshOnFinish");
CScriptedSequence.m_onDeathBehavior = findOffsetByName(j, "CScriptedSequence", "m_onDeathBehavior");
CScriptedSequence.m_ConflictResponse = findOffsetByName(j, "CScriptedSequence", "m_ConflictResponse");
CScriptedSequence.m_OnBeginSequence = findOffsetByName(j, "CScriptedSequence", "m_OnBeginSequence");
CScriptedSequence.m_OnActionStartOrLoop = findOffsetByName(j, "CScriptedSequence", "m_OnActionStartOrLoop");
CScriptedSequence.m_OnEndSequence = findOffsetByName(j, "CScriptedSequence", "m_OnEndSequence");
CScriptedSequence.m_OnPostIdleEndSequence = findOffsetByName(j, "CScriptedSequence", "m_OnPostIdleEndSequence");
CScriptedSequence.m_OnCancelSequence = findOffsetByName(j, "CScriptedSequence", "m_OnCancelSequence");
CScriptedSequence.m_OnCancelFailedSequence = findOffsetByName(j, "CScriptedSequence", "m_OnCancelFailedSequence");
CScriptedSequence.m_OnScriptEvent = findOffsetByName(j, "CScriptedSequence", "m_OnScriptEvent");
CScriptedSequence.m_matOtherToMain = findOffsetByName(j, "CScriptedSequence", "m_matOtherToMain");
CScriptedSequence.m_hInteractionMainEntity = findOffsetByName(j, "CScriptedSequence", "m_hInteractionMainEntity");
CScriptedSequence.m_iPlayerDeathBehavior = findOffsetByName(j, "CScriptedSequence", "m_iPlayerDeathBehavior");

// Atribuições para CEnvProjectedTexture
// CEnvProjectedTexture Offsets
CEnvProjectedTexture.m_hTargetEntity = findOffsetByName(j, "CEnvProjectedTexture", "m_hTargetEntity");
CEnvProjectedTexture.m_bState = findOffsetByName(j, "CEnvProjectedTexture", "m_bState");
CEnvProjectedTexture.m_bAlwaysUpdate = findOffsetByName(j, "CEnvProjectedTexture", "m_bAlwaysUpdate");
CEnvProjectedTexture.m_flLightFOV = findOffsetByName(j, "CEnvProjectedTexture", "m_flLightFOV");
CEnvProjectedTexture.m_bEnableShadows = findOffsetByName(j, "CEnvProjectedTexture", "m_bEnableShadows");
CEnvProjectedTexture.m_bSimpleProjection = findOffsetByName(j, "CEnvProjectedTexture", "m_bSimpleProjection");
CEnvProjectedTexture.m_bLightOnlyTarget = findOffsetByName(j, "CEnvProjectedTexture", "m_bLightOnlyTarget");
CEnvProjectedTexture.m_bLightWorld = findOffsetByName(j, "CEnvProjectedTexture", "m_bLightWorld");
CEnvProjectedTexture.m_bCameraSpace = findOffsetByName(j, "CEnvProjectedTexture", "m_bCameraSpace");
CEnvProjectedTexture.m_flBrightnessScale = findOffsetByName(j, "CEnvProjectedTexture", "m_flBrightnessScale");
CEnvProjectedTexture.m_LightColor = findOffsetByName(j, "CEnvProjectedTexture", "m_LightColor");
CEnvProjectedTexture.m_flIntensity = findOffsetByName(j, "CEnvProjectedTexture", "m_flIntensity");
CEnvProjectedTexture.m_flLinearAttenuation = findOffsetByName(j, "CEnvProjectedTexture", "m_flLinearAttenuation");
CEnvProjectedTexture.m_flQuadraticAttenuation = findOffsetByName(j, "CEnvProjectedTexture", "m_flQuadraticAttenuation");
CEnvProjectedTexture.m_bVolumetric = findOffsetByName(j, "CEnvProjectedTexture", "m_bVolumetric");
CEnvProjectedTexture.m_flNoiseStrength = findOffsetByName(j, "CEnvProjectedTexture", "m_flNoiseStrength");
CEnvProjectedTexture.m_flFlashlightTime = findOffsetByName(j, "CEnvProjectedTexture", "m_flFlashlightTime");
CEnvProjectedTexture.m_nNumPlanes = findOffsetByName(j, "CEnvProjectedTexture", "m_nNumPlanes");
CEnvProjectedTexture.m_flPlaneOffset = findOffsetByName(j, "CEnvProjectedTexture", "m_flPlaneOffset");
CEnvProjectedTexture.m_flVolumetricIntensity = findOffsetByName(j, "CEnvProjectedTexture", "m_flVolumetricIntensity");
CEnvProjectedTexture.m_flColorTransitionTime = findOffsetByName(j, "CEnvProjectedTexture", "m_flColorTransitionTime");
CEnvProjectedTexture.m_flAmbient = findOffsetByName(j, "CEnvProjectedTexture", "m_flAmbient");
CEnvProjectedTexture.m_SpotlightTextureName = findOffsetByName(j, "CEnvProjectedTexture", "m_SpotlightTextureName");
CEnvProjectedTexture.m_nSpotlightTextureFrame = findOffsetByName(j, "CEnvProjectedTexture", "m_nSpotlightTextureFrame");
CEnvProjectedTexture.m_nShadowQuality = findOffsetByName(j, "CEnvProjectedTexture", "m_nShadowQuality");
CEnvProjectedTexture.m_flNearZ = findOffsetByName(j, "CEnvProjectedTexture", "m_flNearZ");
CEnvProjectedTexture.m_flFarZ = findOffsetByName(j, "CEnvProjectedTexture", "m_flFarZ");
CEnvProjectedTexture.m_flProjectionSize = findOffsetByName(j, "CEnvProjectedTexture", "m_flProjectionSize");
CEnvProjectedTexture.m_flRotation = findOffsetByName(j, "CEnvProjectedTexture", "m_flRotation");
CEnvProjectedTexture.m_bFlipHorizontal = findOffsetByName(j, "CEnvProjectedTexture", "m_bFlipHorizontal");

// Atribuições para CSceneListManager
// CSceneListManager Offsets
CSceneListManager.m_hListManagers = findOffsetByName(j, "CSceneListManager", "m_hListManagers");
CSceneListManager.m_iszScenes = findOffsetByName(j, "CSceneListManager", "m_iszScenes");
CSceneListManager.m_hScenes = findOffsetByName(j, "CSceneListManager", "m_hScenes");

// Atribuições para CSplineConstraint
// CSplineConstraint Offsets
CSplineConstraint.m_vAnchorOffsetRestore = findOffsetByName(j, "CSplineConstraint", "m_vAnchorOffsetRestore");

// Atribuições para CBasePlatTrain
// CBasePlatTrain Offsets
CBasePlatTrain.m_NoiseMoving = findOffsetByName(j, "CBasePlatTrain", "m_NoiseMoving");
CBasePlatTrain.m_NoiseArrived = findOffsetByName(j, "CBasePlatTrain", "m_NoiseArrived");
CBasePlatTrain.m_volume = findOffsetByName(j, "CBasePlatTrain", "m_volume");
CBasePlatTrain.m_flTWidth = findOffsetByName(j, "CBasePlatTrain", "m_flTWidth");
CBasePlatTrain.m_flTLength = findOffsetByName(j, "CBasePlatTrain", "m_flTLength");

// Atribuições para CTankTargetChange
// CTankTargetChange Offsets
CTankTargetChange.m_newTarget = findOffsetByName(j, "CTankTargetChange", "m_newTarget");
CTankTargetChange.m_newTargetName = findOffsetByName(j, "CTankTargetChange", "m_newTargetName");

// Atribuições para CLogicCompare
// CLogicCompare Offsets
CLogicCompare.m_flInValue = findOffsetByName(j, "CLogicCompare", "m_flInValue");
CLogicCompare.m_flCompareValue = findOffsetByName(j, "CLogicCompare", "m_flCompareValue");
CLogicCompare.m_OnLessThan = findOffsetByName(j, "CLogicCompare", "m_OnLessThan");
CLogicCompare.m_OnEqualTo = findOffsetByName(j, "CLogicCompare", "m_OnEqualTo");
CLogicCompare.m_OnNotEqualTo = findOffsetByName(j, "CLogicCompare", "m_OnNotEqualTo");
CLogicCompare.m_OnGreaterThan = findOffsetByName(j, "CLogicCompare", "m_OnGreaterThan");

// Atribuições para CKeepUpright
// CKeepUpright Offsets
CKeepUpright.m_worldGoalAxis = findOffsetByName(j, "CKeepUpright", "m_worldGoalAxis");
CKeepUpright.m_localTestAxis = findOffsetByName(j, "CKeepUpright", "m_localTestAxis");
CKeepUpright.m_nameAttach = findOffsetByName(j, "CKeepUpright", "m_nameAttach");
CKeepUpright.m_attachedObject = findOffsetByName(j, "CKeepUpright", "m_attachedObject");
CKeepUpright.m_angularLimit = findOffsetByName(j, "CKeepUpright", "m_angularLimit");
CKeepUpright.m_bActive = findOffsetByName(j, "CKeepUpright", "m_bActive");
CKeepUpright.m_bDampAllRotation = findOffsetByName(j, "CKeepUpright", "m_bDampAllRotation");

// Atribuições para CFuncTimescale
// CFuncTimescale Offsets
CFuncTimescale.m_flDesiredTimescale = findOffsetByName(j, "CFuncTimescale", "m_flDesiredTimescale");
CFuncTimescale.m_flAcceleration = findOffsetByName(j, "CFuncTimescale", "m_flAcceleration");
CFuncTimescale.m_flMinBlendRate = findOffsetByName(j, "CFuncTimescale", "m_flMinBlendRate");
CFuncTimescale.m_flBlendDeltaMultiplier = findOffsetByName(j, "CFuncTimescale", "m_flBlendDeltaMultiplier");
CFuncTimescale.m_isStarted = findOffsetByName(j, "CFuncTimescale", "m_isStarted");

// Atribuições para CBtActionMoveTo
// CBtActionMoveTo Offsets
CBtActionMoveTo.m_szDestinationInputKey = findOffsetByName(j, "CBtActionMoveTo", "m_szDestinationInputKey");
CBtActionMoveTo.m_szHidingSpotInputKey = findOffsetByName(j, "CBtActionMoveTo", "m_szHidingSpotInputKey");
CBtActionMoveTo.m_szThreatInputKey = findOffsetByName(j, "CBtActionMoveTo", "m_szThreatInputKey");
CBtActionMoveTo.m_vecDestination = findOffsetByName(j, "CBtActionMoveTo", "m_vecDestination");
CBtActionMoveTo.m_bAutoLookAdjust = findOffsetByName(j, "CBtActionMoveTo", "m_bAutoLookAdjust");
CBtActionMoveTo.m_bComputePath = findOffsetByName(j, "CBtActionMoveTo", "m_bComputePath");
CBtActionMoveTo.m_flDamagingAreasPenaltyCost = findOffsetByName(j, "CBtActionMoveTo", "m_flDamagingAreasPenaltyCost");
CBtActionMoveTo.m_CheckApproximateCornersTimer = findOffsetByName(j, "CBtActionMoveTo", "m_CheckApproximateCornersTimer");
CBtActionMoveTo.m_CheckHighPriorityItem = findOffsetByName(j, "CBtActionMoveTo", "m_CheckHighPriorityItem");
CBtActionMoveTo.m_RepathTimer = findOffsetByName(j, "CBtActionMoveTo", "m_RepathTimer");
CBtActionMoveTo.m_flArrivalEpsilon = findOffsetByName(j, "CBtActionMoveTo", "m_flArrivalEpsilon");
CBtActionMoveTo.m_flAdditionalArrivalEpsilon2D = findOffsetByName(j, "CBtActionMoveTo", "m_flAdditionalArrivalEpsilon2D");
CBtActionMoveTo.m_flHidingSpotCheckDistanceThreshold = findOffsetByName(j, "CBtActionMoveTo", "m_flHidingSpotCheckDistanceThreshold");
CBtActionMoveTo.m_flNearestAreaDistanceThreshold = findOffsetByName(j, "CBtActionMoveTo", "m_flNearestAreaDistanceThreshold");

// Atribuições para CTonemapController2
// CTonemapController2 Offsets
CTonemapController2.m_flAutoExposureMin = findOffsetByName(j, "CTonemapController2", "m_flAutoExposureMin");
CTonemapController2.m_flAutoExposureMax = findOffsetByName(j, "CTonemapController2", "m_flAutoExposureMax");
CTonemapController2.m_flTonemapPercentTarget = findOffsetByName(j, "CTonemapController2", "m_flTonemapPercentTarget");
CTonemapController2.m_flTonemapPercentBrightPixels = findOffsetByName(j, "CTonemapController2", "m_flTonemapPercentBrightPixels");
CTonemapController2.m_flTonemapMinAvgLum = findOffsetByName(j, "CTonemapController2", "m_flTonemapMinAvgLum");
CTonemapController2.m_flExposureAdaptationSpeedUp = findOffsetByName(j, "CTonemapController2", "m_flExposureAdaptationSpeedUp");
CTonemapController2.m_flExposureAdaptationSpeedDown = findOffsetByName(j, "CTonemapController2", "m_flExposureAdaptationSpeedDown");
CTonemapController2.m_flTonemapEVSmoothingRange = findOffsetByName(j, "CTonemapController2", "m_flTonemapEVSmoothingRange");

// Atribuições para CEnvInstructorVRHint
// CEnvInstructorVRHint Offsets
CEnvInstructorVRHint.m_iszName = findOffsetByName(j, "CEnvInstructorVRHint", "m_iszName");
CEnvInstructorVRHint.m_iszHintTargetEntity = findOffsetByName(j, "CEnvInstructorVRHint", "m_iszHintTargetEntity");
CEnvInstructorVRHint.m_iTimeout = findOffsetByName(j, "CEnvInstructorVRHint", "m_iTimeout");
CEnvInstructorVRHint.m_iszCaption = findOffsetByName(j, "CEnvInstructorVRHint", "m_iszCaption");
CEnvInstructorVRHint.m_iszStartSound = findOffsetByName(j, "CEnvInstructorVRHint", "m_iszStartSound");
CEnvInstructorVRHint.m_iLayoutFileType = findOffsetByName(j, "CEnvInstructorVRHint", "m_iLayoutFileType");
CEnvInstructorVRHint.m_iszCustomLayoutFile = findOffsetByName(j, "CEnvInstructorVRHint", "m_iszCustomLayoutFile");
CEnvInstructorVRHint.m_iAttachType = findOffsetByName(j, "CEnvInstructorVRHint", "m_iAttachType");
CEnvInstructorVRHint.m_flHeightOffset = findOffsetByName(j, "CEnvInstructorVRHint", "m_flHeightOffset");

// Atribuições para CPlatTrigger
// CPlatTrigger Offsets
CPlatTrigger.m_pPlatform = findOffsetByName(j, "CPlatTrigger", "m_pPlatform");

// Atribuições para CEnvWindShared
// CEnvWindShared Offsets
CEnvWindShared.m_flStartTime = findOffsetByName(j, "CEnvWindShared", "m_flStartTime");
CEnvWindShared.m_iWindSeed = findOffsetByName(j, "CEnvWindShared", "m_iWindSeed");
CEnvWindShared.m_iMinWind = findOffsetByName(j, "CEnvWindShared", "m_iMinWind");
CEnvWindShared.m_iMaxWind = findOffsetByName(j, "CEnvWindShared", "m_iMaxWind");
CEnvWindShared.m_windRadius = findOffsetByName(j, "CEnvWindShared", "m_windRadius");
CEnvWindShared.m_iMinGust = findOffsetByName(j, "CEnvWindShared", "m_iMinGust");
CEnvWindShared.m_iMaxGust = findOffsetByName(j, "CEnvWindShared", "m_iMaxGust");
CEnvWindShared.m_flMinGustDelay = findOffsetByName(j, "CEnvWindShared", "m_flMinGustDelay");
CEnvWindShared.m_flMaxGustDelay = findOffsetByName(j, "CEnvWindShared", "m_flMaxGustDelay");
CEnvWindShared.m_flGustDuration = findOffsetByName(j, "CEnvWindShared", "m_flGustDuration");
CEnvWindShared.m_iGustDirChange = findOffsetByName(j, "CEnvWindShared", "m_iGustDirChange");
CEnvWindShared.m_location = findOffsetByName(j, "CEnvWindShared", "m_location");
CEnvWindShared.m_iszGustSound = findOffsetByName(j, "CEnvWindShared", "m_iszGustSound");
CEnvWindShared.m_iWindDir = findOffsetByName(j, "CEnvWindShared", "m_iWindDir");
CEnvWindShared.m_flWindSpeed = findOffsetByName(j, "CEnvWindShared", "m_flWindSpeed");
CEnvWindShared.m_currentWindVector = findOffsetByName(j, "CEnvWindShared", "m_currentWindVector");
CEnvWindShared.m_CurrentSwayVector = findOffsetByName(j, "CEnvWindShared", "m_CurrentSwayVector");
CEnvWindShared.m_PrevSwayVector = findOffsetByName(j, "CEnvWindShared", "m_PrevSwayVector");
CEnvWindShared.m_iInitialWindDir = findOffsetByName(j, "CEnvWindShared", "m_iInitialWindDir");
CEnvWindShared.m_flInitialWindSpeed = findOffsetByName(j, "CEnvWindShared", "m_flInitialWindSpeed");
CEnvWindShared.m_OnGustStart = findOffsetByName(j, "CEnvWindShared", "m_OnGustStart");
CEnvWindShared.m_OnGustEnd = findOffsetByName(j, "CEnvWindShared", "m_OnGustEnd");
CEnvWindShared.m_flVariationTime = findOffsetByName(j, "CEnvWindShared", "m_flVariationTime");
CEnvWindShared.m_flSwayTime = findOffsetByName(j, "CEnvWindShared", "m_flSwayTime");
CEnvWindShared.m_flSimTime = findOffsetByName(j, "CEnvWindShared", "m_flSimTime");
CEnvWindShared.m_flSwitchTime = findOffsetByName(j, "CEnvWindShared", "m_flSwitchTime");
CEnvWindShared.m_flAveWindSpeed = findOffsetByName(j, "CEnvWindShared", "m_flAveWindSpeed");
CEnvWindShared.m_bGusting = findOffsetByName(j, "CEnvWindShared", "m_bGusting");
CEnvWindShared.m_flWindAngleVariation = findOffsetByName(j, "CEnvWindShared", "m_flWindAngleVariation");
CEnvWindShared.m_flWindSpeedVariation = findOffsetByName(j, "CEnvWindShared", "m_flWindSpeedVariation");
CEnvWindShared.m_hEntOwner = findOffsetByName(j, "CEnvWindShared", "m_hEntOwner");

// Atribuições para CPointHurt
// CPointHurt Offsets
CPointHurt.m_nDamage = findOffsetByName(j, "CPointHurt", "m_nDamage");
CPointHurt.m_bitsDamageType = findOffsetByName(j, "CPointHurt", "m_bitsDamageType");
CPointHurt.m_flRadius = findOffsetByName(j, "CPointHurt", "m_flRadius");
CPointHurt.m_flDelay = findOffsetByName(j, "CPointHurt", "m_flDelay");
CPointHurt.m_strTarget = findOffsetByName(j, "CPointHurt", "m_strTarget");
CPointHurt.m_pActivator = findOffsetByName(j, "CPointHurt", "m_pActivator");

// Atribuições para CPointValueRemapper
// CPointValueRemapper Offsets
CPointValueRemapper.m_bDisabled = findOffsetByName(j, "CPointValueRemapper", "m_bDisabled");
CPointValueRemapper.m_bUpdateOnClient = findOffsetByName(j, "CPointValueRemapper", "m_bUpdateOnClient");
CPointValueRemapper.m_nInputType = findOffsetByName(j, "CPointValueRemapper", "m_nInputType");
CPointValueRemapper.m_iszRemapLineStartName = findOffsetByName(j, "CPointValueRemapper", "m_iszRemapLineStartName");
CPointValueRemapper.m_iszRemapLineEndName = findOffsetByName(j, "CPointValueRemapper", "m_iszRemapLineEndName");
CPointValueRemapper.m_hRemapLineStart = findOffsetByName(j, "CPointValueRemapper", "m_hRemapLineStart");
CPointValueRemapper.m_hRemapLineEnd = findOffsetByName(j, "CPointValueRemapper", "m_hRemapLineEnd");
CPointValueRemapper.m_flMaximumChangePerSecond = findOffsetByName(j, "CPointValueRemapper", "m_flMaximumChangePerSecond");
CPointValueRemapper.m_flDisengageDistance = findOffsetByName(j, "CPointValueRemapper", "m_flDisengageDistance");
CPointValueRemapper.m_flEngageDistance = findOffsetByName(j, "CPointValueRemapper", "m_flEngageDistance");
CPointValueRemapper.m_bRequiresUseKey = findOffsetByName(j, "CPointValueRemapper", "m_bRequiresUseKey");
CPointValueRemapper.m_nOutputType = findOffsetByName(j, "CPointValueRemapper", "m_nOutputType");
CPointValueRemapper.m_iszOutputEntityName = findOffsetByName(j, "CPointValueRemapper", "m_iszOutputEntityName");
CPointValueRemapper.m_iszOutputEntity2Name = findOffsetByName(j, "CPointValueRemapper", "m_iszOutputEntity2Name");
CPointValueRemapper.m_iszOutputEntity3Name = findOffsetByName(j, "CPointValueRemapper", "m_iszOutputEntity3Name");
CPointValueRemapper.m_iszOutputEntity4Name = findOffsetByName(j, "CPointValueRemapper", "m_iszOutputEntity4Name");
CPointValueRemapper.m_hOutputEntities = findOffsetByName(j, "CPointValueRemapper", "m_hOutputEntities");
CPointValueRemapper.m_nHapticsType = findOffsetByName(j, "CPointValueRemapper", "m_nHapticsType");
CPointValueRemapper.m_nMomentumType = findOffsetByName(j, "CPointValueRemapper", "m_nMomentumType");
CPointValueRemapper.m_flMomentumModifier = findOffsetByName(j, "CPointValueRemapper", "m_flMomentumModifier");
CPointValueRemapper.m_flSnapValue = findOffsetByName(j, "CPointValueRemapper", "m_flSnapValue");
CPointValueRemapper.m_flCurrentMomentum = findOffsetByName(j, "CPointValueRemapper", "m_flCurrentMomentum");
CPointValueRemapper.m_nRatchetType = findOffsetByName(j, "CPointValueRemapper", "m_nRatchetType");
CPointValueRemapper.m_flRatchetOffset = findOffsetByName(j, "CPointValueRemapper", "m_flRatchetOffset");
CPointValueRemapper.m_flInputOffset = findOffsetByName(j, "CPointValueRemapper", "m_flInputOffset");
CPointValueRemapper.m_bEngaged = findOffsetByName(j, "CPointValueRemapper", "m_bEngaged");
CPointValueRemapper.m_bFirstUpdate = findOffsetByName(j, "CPointValueRemapper", "m_bFirstUpdate");
CPointValueRemapper.m_flPreviousValue = findOffsetByName(j, "CPointValueRemapper", "m_flPreviousValue");
CPointValueRemapper.m_flPreviousUpdateTickTime = findOffsetByName(j, "CPointValueRemapper", "m_flPreviousUpdateTickTime");
CPointValueRemapper.m_vecPreviousTestPoint = findOffsetByName(j, "CPointValueRemapper", "m_vecPreviousTestPoint");
CPointValueRemapper.m_hUsingPlayer = findOffsetByName(j, "CPointValueRemapper", "m_hUsingPlayer");
CPointValueRemapper.m_flCustomOutputValue = findOffsetByName(j, "CPointValueRemapper", "m_flCustomOutputValue");
CPointValueRemapper.m_iszSoundEngage = findOffsetByName(j, "CPointValueRemapper", "m_iszSoundEngage");
CPointValueRemapper.m_iszSoundDisengage = findOffsetByName(j, "CPointValueRemapper", "m_iszSoundDisengage");
CPointValueRemapper.m_iszSoundReachedValueZero = findOffsetByName(j, "CPointValueRemapper", "m_iszSoundReachedValueZero");
CPointValueRemapper.m_iszSoundReachedValueOne = findOffsetByName(j, "CPointValueRemapper", "m_iszSoundReachedValueOne");
CPointValueRemapper.m_iszSoundMovingLoop = findOffsetByName(j, "CPointValueRemapper", "m_iszSoundMovingLoop");
CPointValueRemapper.m_Position = findOffsetByName(j, "CPointValueRemapper", "m_Position");
CPointValueRemapper.m_PositionDelta = findOffsetByName(j, "CPointValueRemapper", "m_PositionDelta");
CPointValueRemapper.m_OnReachedValueZero = findOffsetByName(j, "CPointValueRemapper", "m_OnReachedValueZero");
CPointValueRemapper.m_OnReachedValueOne = findOffsetByName(j, "CPointValueRemapper", "m_OnReachedValueOne");
CPointValueRemapper.m_OnReachedValueCustom = findOffsetByName(j, "CPointValueRemapper", "m_OnReachedValueCustom");
CPointValueRemapper.m_OnEngage = findOffsetByName(j, "CPointValueRemapper", "m_OnEngage");
CPointValueRemapper.m_OnDisengage = findOffsetByName(j, "CPointValueRemapper", "m_OnDisengage");

// Atribuições para CLogicNPCCounterAABB
// CLogicNPCCounterAABB Offsets
CLogicNPCCounterAABB.m_vDistanceOuterMins = findOffsetByName(j, "CLogicNPCCounterAABB", "m_vDistanceOuterMins");
CLogicNPCCounterAABB.m_vDistanceOuterMaxs = findOffsetByName(j, "CLogicNPCCounterAABB", "m_vDistanceOuterMaxs");
CLogicNPCCounterAABB.m_vOuterMins = findOffsetByName(j, "CLogicNPCCounterAABB", "m_vOuterMins");
CLogicNPCCounterAABB.m_vOuterMaxs = findOffsetByName(j, "CLogicNPCCounterAABB", "m_vOuterMaxs");

// Atribuições para CSoundOpvarSetPointEntity
// CSoundOpvarSetPointEntity Offsets
CSoundOpvarSetPointEntity.m_OnEnter = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_OnEnter");
CSoundOpvarSetPointEntity.m_OnExit = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_OnExit");
CSoundOpvarSetPointEntity.m_bAutoDisable = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_bAutoDisable");
CSoundOpvarSetPointEntity.m_flDistanceMin = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flDistanceMin");
CSoundOpvarSetPointEntity.m_flDistanceMax = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flDistanceMax");
CSoundOpvarSetPointEntity.m_flDistanceMapMin = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flDistanceMapMin");
CSoundOpvarSetPointEntity.m_flDistanceMapMax = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flDistanceMapMax");
CSoundOpvarSetPointEntity.m_flOcclusionRadius = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flOcclusionRadius");
CSoundOpvarSetPointEntity.m_flOcclusionMin = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flOcclusionMin");
CSoundOpvarSetPointEntity.m_flOcclusionMax = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flOcclusionMax");
CSoundOpvarSetPointEntity.m_flValSetOnDisable = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flValSetOnDisable");
CSoundOpvarSetPointEntity.m_bSetValueOnDisable = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_bSetValueOnDisable");
CSoundOpvarSetPointEntity.m_bReloading = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_bReloading");
CSoundOpvarSetPointEntity.m_nSimulationMode = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_nSimulationMode");
CSoundOpvarSetPointEntity.m_nVisibilitySamples = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_nVisibilitySamples");
CSoundOpvarSetPointEntity.m_vDynamicProxyPoint = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_vDynamicProxyPoint");
CSoundOpvarSetPointEntity.m_flDynamicMaximumOcclusion = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flDynamicMaximumOcclusion");
CSoundOpvarSetPointEntity.m_hDynamicEntity = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_hDynamicEntity");
CSoundOpvarSetPointEntity.m_iszDynamicEntityName = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_iszDynamicEntityName");
CSoundOpvarSetPointEntity.m_flPathingDistanceNormFactor = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_flPathingDistanceNormFactor");
CSoundOpvarSetPointEntity.m_vPathingSourcePos = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_vPathingSourcePos");
CSoundOpvarSetPointEntity.m_vPathingListenerPos = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_vPathingListenerPos");
CSoundOpvarSetPointEntity.m_vPathingDirection = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_vPathingDirection");
CSoundOpvarSetPointEntity.m_nPathingSourceIndex = findOffsetByName(j, "CSoundOpvarSetPointEntity", "m_nPathingSourceIndex");

// Atribuições para CSkyCamera
// CSkyCamera Offsets
CSkyCamera.m_skyboxData = findOffsetByName(j, "CSkyCamera", "m_skyboxData");
CSkyCamera.m_skyboxSlotToken = findOffsetByName(j, "CSkyCamera", "m_skyboxSlotToken");
CSkyCamera.m_bUseAngles = findOffsetByName(j, "CSkyCamera", "m_bUseAngles");
CSkyCamera.m_pNext = findOffsetByName(j, "CSkyCamera", "m_pNext");

// Atribuições para CGameMoney
// CGameMoney Offsets
CGameMoney.m_OnMoneySpent = findOffsetByName(j, "CGameMoney", "m_OnMoneySpent");
CGameMoney.m_OnMoneySpentFail = findOffsetByName(j, "CGameMoney", "m_OnMoneySpentFail");
CGameMoney.m_nMoney = findOffsetByName(j, "CGameMoney", "m_nMoney");
CGameMoney.m_strAwardText = findOffsetByName(j, "CGameMoney", "m_strAwardText");

// Atribuições para CLogicPlayerProxy
// CLogicPlayerProxy Offsets
CLogicPlayerProxy.m_hPlayer = findOffsetByName(j, "CLogicPlayerProxy", "m_hPlayer");
CLogicPlayerProxy.m_PlayerHasAmmo = findOffsetByName(j, "CLogicPlayerProxy", "m_PlayerHasAmmo");
CLogicPlayerProxy.m_PlayerHasNoAmmo = findOffsetByName(j, "CLogicPlayerProxy", "m_PlayerHasNoAmmo");
CLogicPlayerProxy.m_PlayerDied = findOffsetByName(j, "CLogicPlayerProxy", "m_PlayerDied");
CLogicPlayerProxy.m_RequestedPlayerHealth = findOffsetByName(j, "CLogicPlayerProxy", "m_RequestedPlayerHealth");

// Atribuições para CPhysImpact
// CPhysImpact Offsets
CPhysImpact.m_damage = findOffsetByName(j, "CPhysImpact", "m_damage");
CPhysImpact.m_distance = findOffsetByName(j, "CPhysImpact", "m_distance");
CPhysImpact.m_directionEntityName = findOffsetByName(j, "CPhysImpact", "m_directionEntityName");

// Atribuições para CEnvCombinedLightProbeVolume
// CEnvCombinedLightProbeVolume Offsets
CEnvCombinedLightProbeVolume.m_Entity_Color = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_Color");
CEnvCombinedLightProbeVolume.m_Entity_flBrightness = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_flBrightness");
CEnvCombinedLightProbeVolume.m_Entity_hCubemapTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_hCubemapTexture");
CEnvCombinedLightProbeVolume.m_Entity_bCustomCubemapTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_bCustomCubemapTexture");
CEnvCombinedLightProbeVolume.m_Entity_hLightProbeTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_hLightProbeTexture");
CEnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightIndicesTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightIndicesTexture");
CEnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightScalarsTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightScalarsTexture");
CEnvCombinedLightProbeVolume.m_Entity_hLightProbeDirectLightShadowsTexture = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_hLightProbeDirectLightShadowsTexture");
CEnvCombinedLightProbeVolume.m_Entity_vBoxMins = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMins");
CEnvCombinedLightProbeVolume.m_Entity_vBoxMaxs = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMaxs");
CEnvCombinedLightProbeVolume.m_Entity_bMoveable = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_bMoveable");
CEnvCombinedLightProbeVolume.m_Entity_nHandshake = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nHandshake");
CEnvCombinedLightProbeVolume.m_Entity_nEnvCubeMapArrayIndex = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nEnvCubeMapArrayIndex");
CEnvCombinedLightProbeVolume.m_Entity_nPriority = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nPriority");
CEnvCombinedLightProbeVolume.m_Entity_bStartDisabled = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_bStartDisabled");
CEnvCombinedLightProbeVolume.m_Entity_flEdgeFadeDist = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_flEdgeFadeDist");
CEnvCombinedLightProbeVolume.m_Entity_vEdgeFadeDists = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_vEdgeFadeDists");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeX = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeX");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeY = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeY");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeSizeZ = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeZ");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasX = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasX");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasY = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasY");
CEnvCombinedLightProbeVolume.m_Entity_nLightProbeAtlasZ = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
CEnvCombinedLightProbeVolume.m_Entity_bEnabled = findOffsetByName(j, "CEnvCombinedLightProbeVolume", "m_Entity_bEnabled");

// Atribuições para CEnvParticleGlow
// CEnvParticleGlow Offsets
CEnvParticleGlow.m_flAlphaScale = findOffsetByName(j, "CEnvParticleGlow", "m_flAlphaScale");
CEnvParticleGlow.m_flRadiusScale = findOffsetByName(j, "CEnvParticleGlow", "m_flRadiusScale");
CEnvParticleGlow.m_flSelfIllumScale = findOffsetByName(j, "CEnvParticleGlow", "m_flSelfIllumScale");
CEnvParticleGlow.m_ColorTint = findOffsetByName(j, "CEnvParticleGlow", "m_ColorTint");
CEnvParticleGlow.m_hTextureOverride = findOffsetByName(j, "CEnvParticleGlow", "m_hTextureOverride");

// Atribuições para CSoundAreaEntitySphere
// CSoundAreaEntitySphere Offsets
CSoundAreaEntitySphere.m_flRadius = findOffsetByName(j, "CSoundAreaEntitySphere", "m_flRadius");

// Atribuições para CFuncMonitor
// CFuncMonitor Offsets
CFuncMonitor.m_targetCamera = findOffsetByName(j, "CFuncMonitor", "m_targetCamera");
CFuncMonitor.m_nResolutionEnum = findOffsetByName(j, "CFuncMonitor", "m_nResolutionEnum");
CFuncMonitor.m_bRenderShadows = findOffsetByName(j, "CFuncMonitor", "m_bRenderShadows");
CFuncMonitor.m_bUseUniqueColorTarget = findOffsetByName(j, "CFuncMonitor", "m_bUseUniqueColorTarget");
CFuncMonitor.m_brushModelName = findOffsetByName(j, "CFuncMonitor", "m_brushModelName");
CFuncMonitor.m_hTargetCamera = findOffsetByName(j, "CFuncMonitor", "m_hTargetCamera");
CFuncMonitor.m_bEnabled = findOffsetByName(j, "CFuncMonitor", "m_bEnabled");
CFuncMonitor.m_bDraw3DSkybox = findOffsetByName(j, "CFuncMonitor", "m_bDraw3DSkybox");
CFuncMonitor.m_bStartEnabled = findOffsetByName(j, "CFuncMonitor", "m_bStartEnabled");

// Atribuições para CPointAngularVelocitySensor
// CPointAngularVelocitySensor Offsets
CPointAngularVelocitySensor.m_hTargetEntity = findOffsetByName(j, "CPointAngularVelocitySensor", "m_hTargetEntity");
CPointAngularVelocitySensor.m_flThreshold = findOffsetByName(j, "CPointAngularVelocitySensor", "m_flThreshold");
CPointAngularVelocitySensor.m_nLastCompareResult = findOffsetByName(j, "CPointAngularVelocitySensor", "m_nLastCompareResult");
CPointAngularVelocitySensor.m_nLastFireResult = findOffsetByName(j, "CPointAngularVelocitySensor", "m_nLastFireResult");
CPointAngularVelocitySensor.m_flFireTime = findOffsetByName(j, "CPointAngularVelocitySensor", "m_flFireTime");
CPointAngularVelocitySensor.m_flFireInterval = findOffsetByName(j, "CPointAngularVelocitySensor", "m_flFireInterval");
CPointAngularVelocitySensor.m_flLastAngVelocity = findOffsetByName(j, "CPointAngularVelocitySensor", "m_flLastAngVelocity");
CPointAngularVelocitySensor.m_lastOrientation = findOffsetByName(j, "CPointAngularVelocitySensor", "m_lastOrientation");
CPointAngularVelocitySensor.m_vecAxis = findOffsetByName(j, "CPointAngularVelocitySensor", "m_vecAxis");
CPointAngularVelocitySensor.m_bUseHelper = findOffsetByName(j, "CPointAngularVelocitySensor", "m_bUseHelper");
CPointAngularVelocitySensor.m_AngularVelocity = findOffsetByName(j, "CPointAngularVelocitySensor", "m_AngularVelocity");
CPointAngularVelocitySensor.m_OnLessThan = findOffsetByName(j, "CPointAngularVelocitySensor", "m_OnLessThan");
CPointAngularVelocitySensor.m_OnLessThanOrEqualTo = findOffsetByName(j, "CPointAngularVelocitySensor", "m_OnLessThanOrEqualTo");
CPointAngularVelocitySensor.m_OnGreaterThan = findOffsetByName(j, "CPointAngularVelocitySensor", "m_OnGreaterThan");
CPointAngularVelocitySensor.m_OnGreaterThanOrEqualTo = findOffsetByName(j, "CPointAngularVelocitySensor", "m_OnGreaterThanOrEqualTo");
CPointAngularVelocitySensor.m_OnEqualTo = findOffsetByName(j, "CPointAngularVelocitySensor", "m_OnEqualTo");

// Atribuições para CMolotovProjectile
// CMolotovProjectile Offsets
CMolotovProjectile.m_bIsIncGrenade = findOffsetByName(j, "CMolotovProjectile", "m_bIsIncGrenade");
CMolotovProjectile.m_bDetonated = findOffsetByName(j, "CMolotovProjectile", "m_bDetonated");
CMolotovProjectile.m_stillTimer = findOffsetByName(j, "CMolotovProjectile", "m_stillTimer");
CMolotovProjectile.m_bHasBouncedOffPlayer = findOffsetByName(j, "CMolotovProjectile", "m_bHasBouncedOffPlayer");

// Atribuições para CEnvInstructorHint
// CEnvInstructorHint Offsets
CEnvInstructorHint.m_iszName = findOffsetByName(j, "CEnvInstructorHint", "m_iszName");
CEnvInstructorHint.m_iszReplace_Key = findOffsetByName(j, "CEnvInstructorHint", "m_iszReplace_Key");
CEnvInstructorHint.m_iszHintTargetEntity = findOffsetByName(j, "CEnvInstructorHint", "m_iszHintTargetEntity");
CEnvInstructorHint.m_iTimeout = findOffsetByName(j, "CEnvInstructorHint", "m_iTimeout");
CEnvInstructorHint.m_iDisplayLimit = findOffsetByName(j, "CEnvInstructorHint", "m_iDisplayLimit");
CEnvInstructorHint.m_iszIcon_Onscreen = findOffsetByName(j, "CEnvInstructorHint", "m_iszIcon_Onscreen");
CEnvInstructorHint.m_iszIcon_Offscreen = findOffsetByName(j, "CEnvInstructorHint", "m_iszIcon_Offscreen");
CEnvInstructorHint.m_iszCaption = findOffsetByName(j, "CEnvInstructorHint", "m_iszCaption");
CEnvInstructorHint.m_iszActivatorCaption = findOffsetByName(j, "CEnvInstructorHint", "m_iszActivatorCaption");
CEnvInstructorHint.m_Color = findOffsetByName(j, "CEnvInstructorHint", "m_Color");
CEnvInstructorHint.m_fIconOffset = findOffsetByName(j, "CEnvInstructorHint", "m_fIconOffset");
CEnvInstructorHint.m_fRange = findOffsetByName(j, "CEnvInstructorHint", "m_fRange");
CEnvInstructorHint.m_iPulseOption = findOffsetByName(j, "CEnvInstructorHint", "m_iPulseOption");
CEnvInstructorHint.m_iAlphaOption = findOffsetByName(j, "CEnvInstructorHint", "m_iAlphaOption");
CEnvInstructorHint.m_iShakeOption = findOffsetByName(j, "CEnvInstructorHint", "m_iShakeOption");
CEnvInstructorHint.m_bStatic = findOffsetByName(j, "CEnvInstructorHint", "m_bStatic");
CEnvInstructorHint.m_bNoOffscreen = findOffsetByName(j, "CEnvInstructorHint", "m_bNoOffscreen");
CEnvInstructorHint.m_bForceCaption = findOffsetByName(j, "CEnvInstructorHint", "m_bForceCaption");
CEnvInstructorHint.m_iInstanceType = findOffsetByName(j, "CEnvInstructorHint", "m_iInstanceType");
CEnvInstructorHint.m_bSuppressRest = findOffsetByName(j, "CEnvInstructorHint", "m_bSuppressRest");
CEnvInstructorHint.m_iszBinding = findOffsetByName(j, "CEnvInstructorHint", "m_iszBinding");
CEnvInstructorHint.m_bAllowNoDrawTarget = findOffsetByName(j, "CEnvInstructorHint", "m_bAllowNoDrawTarget");
CEnvInstructorHint.m_bAutoStart = findOffsetByName(j, "CEnvInstructorHint", "m_bAutoStart");
CEnvInstructorHint.m_bLocalPlayerOnly = findOffsetByName(j, "CEnvInstructorHint", "m_bLocalPlayerOnly");

// Atribuições para CEnvTracer
// CEnvTracer Offsets
CEnvTracer.m_vecEnd = findOffsetByName(j, "CEnvTracer", "m_vecEnd");
CEnvTracer.m_flDelay = findOffsetByName(j, "CEnvTracer", "m_flDelay");

// Atribuições para CInfoGameEventProxy
// CInfoGameEventProxy Offsets
CInfoGameEventProxy.m_iszEventName = findOffsetByName(j, "CInfoGameEventProxy", "m_iszEventName");
CInfoGameEventProxy.m_flRange = findOffsetByName(j, "CInfoGameEventProxy", "m_flRange");

// Atribuições para CPointCamera
// CPointCamera Offsets
CPointCamera.m_FOV = findOffsetByName(j, "CPointCamera", "m_FOV");
CPointCamera.m_Resolution = findOffsetByName(j, "CPointCamera", "m_Resolution");
CPointCamera.m_bFogEnable = findOffsetByName(j, "CPointCamera", "m_bFogEnable");
CPointCamera.m_FogColor = findOffsetByName(j, "CPointCamera", "m_FogColor");
CPointCamera.m_flFogStart = findOffsetByName(j, "CPointCamera", "m_flFogStart");
CPointCamera.m_flFogEnd = findOffsetByName(j, "CPointCamera", "m_flFogEnd");
CPointCamera.m_flFogMaxDensity = findOffsetByName(j, "CPointCamera", "m_flFogMaxDensity");
CPointCamera.m_bActive = findOffsetByName(j, "CPointCamera", "m_bActive");
CPointCamera.m_bUseScreenAspectRatio = findOffsetByName(j, "CPointCamera", "m_bUseScreenAspectRatio");
CPointCamera.m_flAspectRatio = findOffsetByName(j, "CPointCamera", "m_flAspectRatio");
CPointCamera.m_bNoSky = findOffsetByName(j, "CPointCamera", "m_bNoSky");
CPointCamera.m_fBrightness = findOffsetByName(j, "CPointCamera", "m_fBrightness");
CPointCamera.m_flZFar = findOffsetByName(j, "CPointCamera", "m_flZFar");
CPointCamera.m_flZNear = findOffsetByName(j, "CPointCamera", "m_flZNear");
CPointCamera.m_bCanHLTVUse = findOffsetByName(j, "CPointCamera", "m_bCanHLTVUse");
CPointCamera.m_bAlignWithParent = findOffsetByName(j, "CPointCamera", "m_bAlignWithParent");
CPointCamera.m_bDofEnabled = findOffsetByName(j, "CPointCamera", "m_bDofEnabled");
CPointCamera.m_flDofNearBlurry = findOffsetByName(j, "CPointCamera", "m_flDofNearBlurry");
CPointCamera.m_flDofNearCrisp = findOffsetByName(j, "CPointCamera", "m_flDofNearCrisp");
CPointCamera.m_flDofFarCrisp = findOffsetByName(j, "CPointCamera", "m_flDofFarCrisp");
CPointCamera.m_flDofFarBlurry = findOffsetByName(j, "CPointCamera", "m_flDofFarBlurry");
CPointCamera.m_flDofTiltToGround = findOffsetByName(j, "CPointCamera", "m_flDofTiltToGround");
CPointCamera.m_TargetFOV = findOffsetByName(j, "CPointCamera", "m_TargetFOV");
CPointCamera.m_DegreesPerSecond = findOffsetByName(j, "CPointCamera", "m_DegreesPerSecond");
CPointCamera.m_bIsOn = findOffsetByName(j, "CPointCamera", "m_bIsOn");
CPointCamera.m_pNext = findOffsetByName(j, "CPointCamera", "m_pNext");

// Atribuições para CFuncLadder
// CFuncLadder Offsets
CFuncLadder.m_vecLadderDir = findOffsetByName(j, "CFuncLadder", "m_vecLadderDir");
CFuncLadder.m_Dismounts = findOffsetByName(j, "CFuncLadder", "m_Dismounts");
CFuncLadder.m_vecLocalTop = findOffsetByName(j, "CFuncLadder", "m_vecLocalTop");
CFuncLadder.m_vecPlayerMountPositionTop = findOffsetByName(j, "CFuncLadder", "m_vecPlayerMountPositionTop");
CFuncLadder.m_vecPlayerMountPositionBottom = findOffsetByName(j, "CFuncLadder", "m_vecPlayerMountPositionBottom");
CFuncLadder.m_flAutoRideSpeed = findOffsetByName(j, "CFuncLadder", "m_flAutoRideSpeed");
CFuncLadder.m_bDisabled = findOffsetByName(j, "CFuncLadder", "m_bDisabled");
CFuncLadder.m_bFakeLadder = findOffsetByName(j, "CFuncLadder", "m_bFakeLadder");
CFuncLadder.m_bHasSlack = findOffsetByName(j, "CFuncLadder", "m_bHasSlack");
CFuncLadder.m_surfacePropName = findOffsetByName(j, "CFuncLadder", "m_surfacePropName");
CFuncLadder.m_OnPlayerGotOnLadder = findOffsetByName(j, "CFuncLadder", "m_OnPlayerGotOnLadder");
CFuncLadder.m_OnPlayerGotOffLadder = findOffsetByName(j, "CFuncLadder", "m_OnPlayerGotOffLadder");

// Atribuições para CPathKeyFrame
// CPathKeyFrame Offsets
CPathKeyFrame.m_Origin = findOffsetByName(j, "CPathKeyFrame", "m_Origin");
CPathKeyFrame.m_Angles = findOffsetByName(j, "CPathKeyFrame", "m_Angles");
CPathKeyFrame.m_qAngle = findOffsetByName(j, "CPathKeyFrame", "m_qAngle");
CPathKeyFrame.m_iNextKey = findOffsetByName(j, "CPathKeyFrame", "m_iNextKey");
CPathKeyFrame.m_flNextTime = findOffsetByName(j, "CPathKeyFrame", "m_flNextTime");
CPathKeyFrame.m_pNextKey = findOffsetByName(j, "CPathKeyFrame", "m_pNextKey");
CPathKeyFrame.m_pPrevKey = findOffsetByName(j, "CPathKeyFrame", "m_pPrevKey");
CPathKeyFrame.m_flMoveSpeed = findOffsetByName(j, "CPathKeyFrame", "m_flMoveSpeed");

// Atribuições para CFuncInteractionLayerClip
// CFuncInteractionLayerClip Offsets
CFuncInteractionLayerClip.m_bDisabled = findOffsetByName(j, "CFuncInteractionLayerClip", "m_bDisabled");
CFuncInteractionLayerClip.m_iszInteractsAs = findOffsetByName(j, "CFuncInteractionLayerClip", "m_iszInteractsAs");
CFuncInteractionLayerClip.m_iszInteractsWith = findOffsetByName(j, "CFuncInteractionLayerClip", "m_iszInteractsWith");

// Atribuições para COrnamentProp
// COrnamentProp Offsets
COrnamentProp.m_initialOwner = findOffsetByName(j, "COrnamentProp", "m_initialOwner");

// Atribuições para CLogicGameEvent
// CLogicGameEvent Offsets
CLogicGameEvent.m_iszEventName = findOffsetByName(j, "CLogicGameEvent", "m_iszEventName");

// Atribuições para CEnvMuzzleFlash
// CEnvMuzzleFlash Offsets
CEnvMuzzleFlash.m_flScale = findOffsetByName(j, "CEnvMuzzleFlash", "m_flScale");
CEnvMuzzleFlash.m_iszParentAttachment = findOffsetByName(j, "CEnvMuzzleFlash", "m_iszParentAttachment");

// Atribuições para CPlayerSprayDecal
// CPlayerSprayDecal Offsets
CPlayerSprayDecal.m_nUniqueID = findOffsetByName(j, "CPlayerSprayDecal", "m_nUniqueID");
CPlayerSprayDecal.m_unAccountID = findOffsetByName(j, "CPlayerSprayDecal", "m_unAccountID");
CPlayerSprayDecal.m_unTraceID = findOffsetByName(j, "CPlayerSprayDecal", "m_unTraceID");
CPlayerSprayDecal.m_rtGcTime = findOffsetByName(j, "CPlayerSprayDecal", "m_rtGcTime");
CPlayerSprayDecal.m_vecEndPos = findOffsetByName(j, "CPlayerSprayDecal", "m_vecEndPos");
CPlayerSprayDecal.m_vecStart = findOffsetByName(j, "CPlayerSprayDecal", "m_vecStart");
CPlayerSprayDecal.m_vecLeft = findOffsetByName(j, "CPlayerSprayDecal", "m_vecLeft");
CPlayerSprayDecal.m_vecNormal = findOffsetByName(j, "CPlayerSprayDecal", "m_vecNormal");
CPlayerSprayDecal.m_nPlayer = findOffsetByName(j, "CPlayerSprayDecal", "m_nPlayer");
CPlayerSprayDecal.m_nEntity = findOffsetByName(j, "CPlayerSprayDecal", "m_nEntity");
CPlayerSprayDecal.m_nHitbox = findOffsetByName(j, "CPlayerSprayDecal", "m_nHitbox");
CPlayerSprayDecal.m_flCreationTime = findOffsetByName(j, "CPlayerSprayDecal", "m_flCreationTime");
CPlayerSprayDecal.m_nTintID = findOffsetByName(j, "CPlayerSprayDecal", "m_nTintID");
CPlayerSprayDecal.m_nVersion = findOffsetByName(j, "CPlayerSprayDecal", "m_nVersion");
CPlayerSprayDecal.m_ubSignature = findOffsetByName(j, "CPlayerSprayDecal", "m_ubSignature");

// Atribuições para CPhysicsSpring
// CPhysicsSpring Offsets
CPhysicsSpring.m_flFrequency = findOffsetByName(j, "CPhysicsSpring", "m_flFrequency");
CPhysicsSpring.m_flDampingRatio = findOffsetByName(j, "CPhysicsSpring", "m_flDampingRatio");
CPhysicsSpring.m_flRestLength = findOffsetByName(j, "CPhysicsSpring", "m_flRestLength");
CPhysicsSpring.m_nameAttachStart = findOffsetByName(j, "CPhysicsSpring", "m_nameAttachStart");
CPhysicsSpring.m_nameAttachEnd = findOffsetByName(j, "CPhysicsSpring", "m_nameAttachEnd");
CPhysicsSpring.m_start = findOffsetByName(j, "CPhysicsSpring", "m_start");
CPhysicsSpring.m_end = findOffsetByName(j, "CPhysicsSpring", "m_end");
CPhysicsSpring.m_teleportTick = findOffsetByName(j, "CPhysicsSpring", "m_teleportTick");

// Atribuições para CEnvLightProbeVolume
// CEnvLightProbeVolume Offsets
CEnvLightProbeVolume.m_Entity_hLightProbeTexture = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_hLightProbeTexture");
CEnvLightProbeVolume.m_Entity_hLightProbeDirectLightIndicesTexture = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_hLightProbeDirectLightIndicesTexture");
CEnvLightProbeVolume.m_Entity_hLightProbeDirectLightScalarsTexture = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_hLightProbeDirectLightScalarsTexture");
CEnvLightProbeVolume.m_Entity_hLightProbeDirectLightShadowsTexture = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_hLightProbeDirectLightShadowsTexture");
CEnvLightProbeVolume.m_Entity_vBoxMins = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_vBoxMins");
CEnvLightProbeVolume.m_Entity_vBoxMaxs = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_vBoxMaxs");
CEnvLightProbeVolume.m_Entity_bMoveable = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_bMoveable");
CEnvLightProbeVolume.m_Entity_nHandshake = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nHandshake");
CEnvLightProbeVolume.m_Entity_nPriority = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nPriority");
CEnvLightProbeVolume.m_Entity_bStartDisabled = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_bStartDisabled");
CEnvLightProbeVolume.m_Entity_nLightProbeSizeX = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeX");
CEnvLightProbeVolume.m_Entity_nLightProbeSizeY = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeY");
CEnvLightProbeVolume.m_Entity_nLightProbeSizeZ = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeZ");
CEnvLightProbeVolume.m_Entity_nLightProbeAtlasX = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasX");
CEnvLightProbeVolume.m_Entity_nLightProbeAtlasY = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasY");
CEnvLightProbeVolume.m_Entity_nLightProbeAtlasZ = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
CEnvLightProbeVolume.m_Entity_bEnabled = findOffsetByName(j, "CEnvLightProbeVolume", "m_Entity_bEnabled");

// Atribuições para CScriptTriggerPush
// CScriptTriggerPush Offsets
CScriptTriggerPush.m_vExtent = findOffsetByName(j, "CScriptTriggerPush", "m_vExtent");

// Atribuições para CEnvEntityIgniter
// CEnvEntityIgniter Offsets
CEnvEntityIgniter.m_flLifetime = findOffsetByName(j, "CEnvEntityIgniter", "m_flLifetime");

// Atribuições para CFuncWall
// CFuncWall Offsets
CFuncWall.m_nState = findOffsetByName(j, "CFuncWall", "m_nState");

// Atribuições para CLogicAutosave
// CLogicAutosave Offsets
CLogicAutosave.m_bForceNewLevelUnit = findOffsetByName(j, "CLogicAutosave", "m_bForceNewLevelUnit");
CLogicAutosave.m_minHitPoints = findOffsetByName(j, "CLogicAutosave", "m_minHitPoints");
CLogicAutosave.m_minHitPointsToCommit = findOffsetByName(j, "CLogicAutosave", "m_minHitPointsToCommit");

// Atribuições para CSoundEventPathCornerEntity
// CSoundEventPathCornerEntity Offsets
CSoundEventPathCornerEntity.m_iszPathCorner = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_iszPathCorner");
CSoundEventPathCornerEntity.m_iCountMax = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_iCountMax");
CSoundEventPathCornerEntity.m_flDistanceMax = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_flDistanceMax");
CSoundEventPathCornerEntity.m_flDistMaxSqr = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_flDistMaxSqr");
CSoundEventPathCornerEntity.m_flDotProductMax = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_flDotProductMax");
CSoundEventPathCornerEntity.m_bPlaying = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_bPlaying");
CSoundEventPathCornerEntity.m_vecCornerPairsNetworked = findOffsetByName(j, "CSoundEventPathCornerEntity", "m_vecCornerPairsNetworked");

// Atribuições para CSmokeGrenadeProjectile
// CSmokeGrenadeProjectile Offsets
CSmokeGrenadeProjectile.m_nSmokeEffectTickBegin = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_nSmokeEffectTickBegin");
CSmokeGrenadeProjectile.m_bDidSmokeEffect = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_bDidSmokeEffect");
CSmokeGrenadeProjectile.m_nRandomSeed = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_nRandomSeed");
CSmokeGrenadeProjectile.m_vSmokeColor = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_vSmokeColor");
CSmokeGrenadeProjectile.m_vSmokeDetonationPos = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_vSmokeDetonationPos");
CSmokeGrenadeProjectile.m_VoxelFrameData = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_VoxelFrameData");
CSmokeGrenadeProjectile.m_nVoxelFrameDataSize = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_nVoxelFrameDataSize");
CSmokeGrenadeProjectile.m_nVoxelUpdate = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_nVoxelUpdate");
CSmokeGrenadeProjectile.m_flLastBounce = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_flLastBounce");
CSmokeGrenadeProjectile.m_fllastSimulationTime = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_fllastSimulationTime");
CSmokeGrenadeProjectile.m_bExplodeFromInferno = findOffsetByName(j, "CSmokeGrenadeProjectile", "m_bExplodeFromInferno");

// Atribuições para CScriptTriggerMultiple
// CScriptTriggerMultiple Offsets
CScriptTriggerMultiple.m_vExtent = findOffsetByName(j, "CScriptTriggerMultiple", "m_vExtent");

// Atribuições para CSoundOpvarSetAutoRoomEntity
// CSoundOpvarSetAutoRoomEntity Offsets
CSoundOpvarSetAutoRoomEntity.m_traceResults = findOffsetByName(j, "CSoundOpvarSetAutoRoomEntity", "m_traceResults");
CSoundOpvarSetAutoRoomEntity.m_doorwayPairs = findOffsetByName(j, "CSoundOpvarSetAutoRoomEntity", "m_doorwayPairs");
CSoundOpvarSetAutoRoomEntity.m_flSize = findOffsetByName(j, "CSoundOpvarSetAutoRoomEntity", "m_flSize");
CSoundOpvarSetAutoRoomEntity.m_flHeightTolerance = findOffsetByName(j, "CSoundOpvarSetAutoRoomEntity", "m_flHeightTolerance");
CSoundOpvarSetAutoRoomEntity.m_flSizeSqr = findOffsetByName(j, "CSoundOpvarSetAutoRoomEntity", "m_flSizeSqr");

// Atribuições para FilterDamageType
// FilterDamageType Offsets
FilterDamageType.m_iDamageType = findOffsetByName(j, "FilterDamageType", "m_iDamageType");

// Atribuições para CCSBot
// CCSBot Offsets
CCSBot.m_eyePosition = findOffsetByName(j, "CCSBot", "m_eyePosition");
CCSBot.m_name = findOffsetByName(j, "CCSBot", "m_name");
CCSBot.m_combatRange = findOffsetByName(j, "CCSBot", "m_combatRange");
CCSBot.m_isRogue = findOffsetByName(j, "CCSBot", "m_isRogue");
CCSBot.m_rogueTimer = findOffsetByName(j, "CCSBot", "m_rogueTimer");
CCSBot.m_diedLastRound = findOffsetByName(j, "CCSBot", "m_diedLastRound");
CCSBot.m_safeTime = findOffsetByName(j, "CCSBot", "m_safeTime");
CCSBot.m_wasSafe = findOffsetByName(j, "CCSBot", "m_wasSafe");
CCSBot.m_blindFire = findOffsetByName(j, "CCSBot", "m_blindFire");
CCSBot.m_surpriseTimer = findOffsetByName(j, "CCSBot", "m_surpriseTimer");
CCSBot.m_bAllowActive = findOffsetByName(j, "CCSBot", "m_bAllowActive");
CCSBot.m_isFollowing = findOffsetByName(j, "CCSBot", "m_isFollowing");
CCSBot.m_leader = findOffsetByName(j, "CCSBot", "m_leader");
CCSBot.m_followTimestamp = findOffsetByName(j, "CCSBot", "m_followTimestamp");
CCSBot.m_allowAutoFollowTime = findOffsetByName(j, "CCSBot", "m_allowAutoFollowTime");
CCSBot.m_hurryTimer = findOffsetByName(j, "CCSBot", "m_hurryTimer");
CCSBot.m_alertTimer = findOffsetByName(j, "CCSBot", "m_alertTimer");
CCSBot.m_sneakTimer = findOffsetByName(j, "CCSBot", "m_sneakTimer");
CCSBot.m_panicTimer = findOffsetByName(j, "CCSBot", "m_panicTimer");
CCSBot.m_stateTimestamp = findOffsetByName(j, "CCSBot", "m_stateTimestamp");
CCSBot.m_isAttacking = findOffsetByName(j, "CCSBot", "m_isAttacking");
CCSBot.m_isOpeningDoor = findOffsetByName(j, "CCSBot", "m_isOpeningDoor");
CCSBot.m_taskEntity = findOffsetByName(j, "CCSBot", "m_taskEntity");
CCSBot.m_goalPosition = findOffsetByName(j, "CCSBot", "m_goalPosition");
CCSBot.m_goalEntity = findOffsetByName(j, "CCSBot", "m_goalEntity");
CCSBot.m_avoid = findOffsetByName(j, "CCSBot", "m_avoid");
CCSBot.m_avoidTimestamp = findOffsetByName(j, "CCSBot", "m_avoidTimestamp");
CCSBot.m_isStopping = findOffsetByName(j, "CCSBot", "m_isStopping");
CCSBot.m_hasVisitedEnemySpawn = findOffsetByName(j, "CCSBot", "m_hasVisitedEnemySpawn");
CCSBot.m_stillTimer = findOffsetByName(j, "CCSBot", "m_stillTimer");
CCSBot.m_bEyeAnglesUnderPathFinderControl = findOffsetByName(j, "CCSBot", "m_bEyeAnglesUnderPathFinderControl");
CCSBot.m_pathIndex = findOffsetByName(j, "CCSBot", "m_pathIndex");
CCSBot.m_areaEnteredTimestamp = findOffsetByName(j, "CCSBot", "m_areaEnteredTimestamp");
CCSBot.m_repathTimer = findOffsetByName(j, "CCSBot", "m_repathTimer");
CCSBot.m_avoidFriendTimer = findOffsetByName(j, "CCSBot", "m_avoidFriendTimer");
CCSBot.m_isFriendInTheWay = findOffsetByName(j, "CCSBot", "m_isFriendInTheWay");
CCSBot.m_politeTimer = findOffsetByName(j, "CCSBot", "m_politeTimer");
CCSBot.m_isWaitingBehindFriend = findOffsetByName(j, "CCSBot", "m_isWaitingBehindFriend");
CCSBot.m_pathLadderEnd = findOffsetByName(j, "CCSBot", "m_pathLadderEnd");
CCSBot.m_mustRunTimer = findOffsetByName(j, "CCSBot", "m_mustRunTimer");
CCSBot.m_waitTimer = findOffsetByName(j, "CCSBot", "m_waitTimer");
CCSBot.m_updateTravelDistanceTimer = findOffsetByName(j, "CCSBot", "m_updateTravelDistanceTimer");
CCSBot.m_playerTravelDistance = findOffsetByName(j, "CCSBot", "m_playerTravelDistance");
CCSBot.m_travelDistancePhase = findOffsetByName(j, "CCSBot", "m_travelDistancePhase");
CCSBot.m_hostageEscortCount = findOffsetByName(j, "CCSBot", "m_hostageEscortCount");
CCSBot.m_hostageEscortCountTimestamp = findOffsetByName(j, "CCSBot", "m_hostageEscortCountTimestamp");
CCSBot.m_desiredTeam = findOffsetByName(j, "CCSBot", "m_desiredTeam");
CCSBot.m_hasJoined = findOffsetByName(j, "CCSBot", "m_hasJoined");
CCSBot.m_isWaitingForHostage = findOffsetByName(j, "CCSBot", "m_isWaitingForHostage");
CCSBot.m_inhibitWaitingForHostageTimer = findOffsetByName(j, "CCSBot", "m_inhibitWaitingForHostageTimer");
CCSBot.m_waitForHostageTimer = findOffsetByName(j, "CCSBot", "m_waitForHostageTimer");
CCSBot.m_noisePosition = findOffsetByName(j, "CCSBot", "m_noisePosition");
CCSBot.m_noiseTravelDistance = findOffsetByName(j, "CCSBot", "m_noiseTravelDistance");
CCSBot.m_noiseTimestamp = findOffsetByName(j, "CCSBot", "m_noiseTimestamp");
CCSBot.m_noiseSource = findOffsetByName(j, "CCSBot", "m_noiseSource");
CCSBot.m_noiseBendTimer = findOffsetByName(j, "CCSBot", "m_noiseBendTimer");
CCSBot.m_bentNoisePosition = findOffsetByName(j, "CCSBot", "m_bentNoisePosition");
CCSBot.m_bendNoisePositionValid = findOffsetByName(j, "CCSBot", "m_bendNoisePositionValid");
CCSBot.m_lookAroundStateTimestamp = findOffsetByName(j, "CCSBot", "m_lookAroundStateTimestamp");
CCSBot.m_lookAheadAngle = findOffsetByName(j, "CCSBot", "m_lookAheadAngle");
CCSBot.m_forwardAngle = findOffsetByName(j, "CCSBot", "m_forwardAngle");
CCSBot.m_inhibitLookAroundTimestamp = findOffsetByName(j, "CCSBot", "m_inhibitLookAroundTimestamp");
CCSBot.m_lookAtSpot = findOffsetByName(j, "CCSBot", "m_lookAtSpot");
CCSBot.m_lookAtSpotDuration = findOffsetByName(j, "CCSBot", "m_lookAtSpotDuration");
CCSBot.m_lookAtSpotTimestamp = findOffsetByName(j, "CCSBot", "m_lookAtSpotTimestamp");
CCSBot.m_lookAtSpotAngleTolerance = findOffsetByName(j, "CCSBot", "m_lookAtSpotAngleTolerance");
CCSBot.m_lookAtSpotClearIfClose = findOffsetByName(j, "CCSBot", "m_lookAtSpotClearIfClose");
CCSBot.m_lookAtSpotAttack = findOffsetByName(j, "CCSBot", "m_lookAtSpotAttack");
CCSBot.m_lookAtDesc = findOffsetByName(j, "CCSBot", "m_lookAtDesc");
CCSBot.m_peripheralTimestamp = findOffsetByName(j, "CCSBot", "m_peripheralTimestamp");
CCSBot.m_approachPointCount = findOffsetByName(j, "CCSBot", "m_approachPointCount");
CCSBot.m_approachPointViewPosition = findOffsetByName(j, "CCSBot", "m_approachPointViewPosition");
CCSBot.m_viewSteadyTimer = findOffsetByName(j, "CCSBot", "m_viewSteadyTimer");
CCSBot.m_tossGrenadeTimer = findOffsetByName(j, "CCSBot", "m_tossGrenadeTimer");
CCSBot.m_isAvoidingGrenade = findOffsetByName(j, "CCSBot", "m_isAvoidingGrenade");
CCSBot.m_spotCheckTimestamp = findOffsetByName(j, "CCSBot", "m_spotCheckTimestamp");
CCSBot.m_checkedHidingSpotCount = findOffsetByName(j, "CCSBot", "m_checkedHidingSpotCount");
CCSBot.m_lookPitch = findOffsetByName(j, "CCSBot", "m_lookPitch");
CCSBot.m_lookPitchVel = findOffsetByName(j, "CCSBot", "m_lookPitchVel");
CCSBot.m_lookYaw = findOffsetByName(j, "CCSBot", "m_lookYaw");
CCSBot.m_lookYawVel = findOffsetByName(j, "CCSBot", "m_lookYawVel");
CCSBot.m_targetSpot = findOffsetByName(j, "CCSBot", "m_targetSpot");
CCSBot.m_targetSpotVelocity = findOffsetByName(j, "CCSBot", "m_targetSpotVelocity");
CCSBot.m_targetSpotPredicted = findOffsetByName(j, "CCSBot", "m_targetSpotPredicted");
CCSBot.m_aimError = findOffsetByName(j, "CCSBot", "m_aimError");
CCSBot.m_aimGoal = findOffsetByName(j, "CCSBot", "m_aimGoal");
CCSBot.m_targetSpotTime = findOffsetByName(j, "CCSBot", "m_targetSpotTime");
CCSBot.m_aimFocus = findOffsetByName(j, "CCSBot", "m_aimFocus");
CCSBot.m_aimFocusInterval = findOffsetByName(j, "CCSBot", "m_aimFocusInterval");
CCSBot.m_aimFocusNextUpdate = findOffsetByName(j, "CCSBot", "m_aimFocusNextUpdate");
CCSBot.m_ignoreEnemiesTimer = findOffsetByName(j, "CCSBot", "m_ignoreEnemiesTimer");
CCSBot.m_enemy = findOffsetByName(j, "CCSBot", "m_enemy");
CCSBot.m_isEnemyVisible = findOffsetByName(j, "CCSBot", "m_isEnemyVisible");
CCSBot.m_visibleEnemyParts = findOffsetByName(j, "CCSBot", "m_visibleEnemyParts");
CCSBot.m_lastEnemyPosition = findOffsetByName(j, "CCSBot", "m_lastEnemyPosition");
CCSBot.m_lastSawEnemyTimestamp = findOffsetByName(j, "CCSBot", "m_lastSawEnemyTimestamp");
CCSBot.m_firstSawEnemyTimestamp = findOffsetByName(j, "CCSBot", "m_firstSawEnemyTimestamp");
CCSBot.m_currentEnemyAcquireTimestamp = findOffsetByName(j, "CCSBot", "m_currentEnemyAcquireTimestamp");
CCSBot.m_enemyDeathTimestamp = findOffsetByName(j, "CCSBot", "m_enemyDeathTimestamp");
CCSBot.m_friendDeathTimestamp = findOffsetByName(j, "CCSBot", "m_friendDeathTimestamp");
CCSBot.m_isLastEnemyDead = findOffsetByName(j, "CCSBot", "m_isLastEnemyDead");
CCSBot.m_nearbyEnemyCount = findOffsetByName(j, "CCSBot", "m_nearbyEnemyCount");
CCSBot.m_bomber = findOffsetByName(j, "CCSBot", "m_bomber");
CCSBot.m_nearbyFriendCount = findOffsetByName(j, "CCSBot", "m_nearbyFriendCount");
CCSBot.m_closestVisibleFriend = findOffsetByName(j, "CCSBot", "m_closestVisibleFriend");
CCSBot.m_closestVisibleHumanFriend = findOffsetByName(j, "CCSBot", "m_closestVisibleHumanFriend");
CCSBot.m_attentionInterval = findOffsetByName(j, "CCSBot", "m_attentionInterval");
CCSBot.m_attacker = findOffsetByName(j, "CCSBot", "m_attacker");
CCSBot.m_attackedTimestamp = findOffsetByName(j, "CCSBot", "m_attackedTimestamp");
CCSBot.m_burnedByFlamesTimer = findOffsetByName(j, "CCSBot", "m_burnedByFlamesTimer");
CCSBot.m_lastVictimID = findOffsetByName(j, "CCSBot", "m_lastVictimID");
CCSBot.m_isAimingAtEnemy = findOffsetByName(j, "CCSBot", "m_isAimingAtEnemy");
CCSBot.m_isRapidFiring = findOffsetByName(j, "CCSBot", "m_isRapidFiring");
CCSBot.m_equipTimer = findOffsetByName(j, "CCSBot", "m_equipTimer");
CCSBot.m_zoomTimer = findOffsetByName(j, "CCSBot", "m_zoomTimer");
CCSBot.m_fireWeaponTimestamp = findOffsetByName(j, "CCSBot", "m_fireWeaponTimestamp");
CCSBot.m_lookForWeaponsOnGroundTimer = findOffsetByName(j, "CCSBot", "m_lookForWeaponsOnGroundTimer");
CCSBot.m_bIsSleeping = findOffsetByName(j, "CCSBot", "m_bIsSleeping");
CCSBot.m_isEnemySniperVisible = findOffsetByName(j, "CCSBot", "m_isEnemySniperVisible");
CCSBot.m_sawEnemySniperTimer = findOffsetByName(j, "CCSBot", "m_sawEnemySniperTimer");
CCSBot.m_enemyQueueIndex = findOffsetByName(j, "CCSBot", "m_enemyQueueIndex");
CCSBot.m_enemyQueueCount = findOffsetByName(j, "CCSBot", "m_enemyQueueCount");
CCSBot.m_enemyQueueAttendIndex = findOffsetByName(j, "CCSBot", "m_enemyQueueAttendIndex");
CCSBot.m_isStuck = findOffsetByName(j, "CCSBot", "m_isStuck");
CCSBot.m_stuckTimestamp = findOffsetByName(j, "CCSBot", "m_stuckTimestamp");
CCSBot.m_stuckSpot = findOffsetByName(j, "CCSBot", "m_stuckSpot");
CCSBot.m_wiggleTimer = findOffsetByName(j, "CCSBot", "m_wiggleTimer");
CCSBot.m_stuckJumpTimer = findOffsetByName(j, "CCSBot", "m_stuckJumpTimer");
CCSBot.m_nextCleanupCheckTimestamp = findOffsetByName(j, "CCSBot", "m_nextCleanupCheckTimestamp");
CCSBot.m_avgVel = findOffsetByName(j, "CCSBot", "m_avgVel");
CCSBot.m_avgVelIndex = findOffsetByName(j, "CCSBot", "m_avgVelIndex");
CCSBot.m_avgVelCount = findOffsetByName(j, "CCSBot", "m_avgVelCount");
CCSBot.m_lastOrigin = findOffsetByName(j, "CCSBot", "m_lastOrigin");
CCSBot.m_lastRadioRecievedTimestamp = findOffsetByName(j, "CCSBot", "m_lastRadioRecievedTimestamp");
CCSBot.m_lastRadioSentTimestamp = findOffsetByName(j, "CCSBot", "m_lastRadioSentTimestamp");
CCSBot.m_radioSubject = findOffsetByName(j, "CCSBot", "m_radioSubject");
CCSBot.m_radioPosition = findOffsetByName(j, "CCSBot", "m_radioPosition");
CCSBot.m_voiceEndTimestamp = findOffsetByName(j, "CCSBot", "m_voiceEndTimestamp");
CCSBot.m_lastValidReactionQueueFrame = findOffsetByName(j, "CCSBot", "m_lastValidReactionQueueFrame");

// Atribuições para CPhysMotor
// CPhysMotor Offsets
CPhysMotor.m_nameAttach = findOffsetByName(j, "CPhysMotor", "m_nameAttach");
CPhysMotor.m_hAttachedObject = findOffsetByName(j, "CPhysMotor", "m_hAttachedObject");
CPhysMotor.m_spinUp = findOffsetByName(j, "CPhysMotor", "m_spinUp");
CPhysMotor.m_additionalAcceleration = findOffsetByName(j, "CPhysMotor", "m_additionalAcceleration");
CPhysMotor.m_angularAcceleration = findOffsetByName(j, "CPhysMotor", "m_angularAcceleration");
CPhysMotor.m_lastTime = findOffsetByName(j, "CPhysMotor", "m_lastTime");
CPhysMotor.m_motor = findOffsetByName(j, "CPhysMotor", "m_motor");

// Atribuições para CSoundAreaEntityBase
// CSoundAreaEntityBase Offsets
CSoundAreaEntityBase.m_bDisabled = findOffsetByName(j, "CSoundAreaEntityBase", "m_bDisabled");
CSoundAreaEntityBase.m_iszSoundAreaType = findOffsetByName(j, "CSoundAreaEntityBase", "m_iszSoundAreaType");
CSoundAreaEntityBase.m_vPos = findOffsetByName(j, "CSoundAreaEntityBase", "m_vPos");

// Atribuições para CCSPlayer_UseServices
// CCSPlayer_UseServices Offsets
CCSPlayer_UseServices.m_hLastKnownUseEntity = findOffsetByName(j, "CCSPlayer_UseServices", "m_hLastKnownUseEntity");
CCSPlayer_UseServices.m_flLastUseTimeStamp = findOffsetByName(j, "CCSPlayer_UseServices", "m_flLastUseTimeStamp");
CCSPlayer_UseServices.m_flTimeLastUsedWindow = findOffsetByName(j, "CCSPlayer_UseServices", "m_flTimeLastUsedWindow");

// Atribuições para CTriggerHurt
// CTriggerHurt Offsets
CTriggerHurt.m_flOriginalDamage = findOffsetByName(j, "CTriggerHurt", "m_flOriginalDamage");
CTriggerHurt.m_flDamage = findOffsetByName(j, "CTriggerHurt", "m_flDamage");
CTriggerHurt.m_flDamageCap = findOffsetByName(j, "CTriggerHurt", "m_flDamageCap");
CTriggerHurt.m_flLastDmgTime = findOffsetByName(j, "CTriggerHurt", "m_flLastDmgTime");
CTriggerHurt.m_flForgivenessDelay = findOffsetByName(j, "CTriggerHurt", "m_flForgivenessDelay");
CTriggerHurt.m_bitsDamageInflict = findOffsetByName(j, "CTriggerHurt", "m_bitsDamageInflict");
CTriggerHurt.m_damageModel = findOffsetByName(j, "CTriggerHurt", "m_damageModel");
CTriggerHurt.m_bNoDmgForce = findOffsetByName(j, "CTriggerHurt", "m_bNoDmgForce");
CTriggerHurt.m_vDamageForce = findOffsetByName(j, "CTriggerHurt", "m_vDamageForce");
CTriggerHurt.m_thinkAlways = findOffsetByName(j, "CTriggerHurt", "m_thinkAlways");
CTriggerHurt.m_hurtThinkPeriod = findOffsetByName(j, "CTriggerHurt", "m_hurtThinkPeriod");
CTriggerHurt.m_OnHurt = findOffsetByName(j, "CTriggerHurt", "m_OnHurt");
CTriggerHurt.m_OnHurtPlayer = findOffsetByName(j, "CTriggerHurt", "m_OnHurtPlayer");
CTriggerHurt.m_hurtEntities = findOffsetByName(j, "CTriggerHurt", "m_hurtEntities");

// Atribuições para CPhysConstraint
// CPhysConstraint Offsets
CPhysConstraint.m_nameAttach1 = findOffsetByName(j, "CPhysConstraint", "m_nameAttach1");
CPhysConstraint.m_nameAttach2 = findOffsetByName(j, "CPhysConstraint", "m_nameAttach2");
CPhysConstraint.m_hAttach1 = findOffsetByName(j, "CPhysConstraint", "m_hAttach1");
CPhysConstraint.m_hAttach2 = findOffsetByName(j, "CPhysConstraint", "m_hAttach2");
CPhysConstraint.m_nameAttachment1 = findOffsetByName(j, "CPhysConstraint", "m_nameAttachment1");
CPhysConstraint.m_nameAttachment2 = findOffsetByName(j, "CPhysConstraint", "m_nameAttachment2");
CPhysConstraint.m_breakSound = findOffsetByName(j, "CPhysConstraint", "m_breakSound");
CPhysConstraint.m_forceLimit = findOffsetByName(j, "CPhysConstraint", "m_forceLimit");
CPhysConstraint.m_torqueLimit = findOffsetByName(j, "CPhysConstraint", "m_torqueLimit");
CPhysConstraint.m_teleportTick = findOffsetByName(j, "CPhysConstraint", "m_teleportTick");
CPhysConstraint.m_minTeleportDistance = findOffsetByName(j, "CPhysConstraint", "m_minTeleportDistance");
CPhysConstraint.m_bSnapObjectPositions = findOffsetByName(j, "CPhysConstraint", "m_bSnapObjectPositions");
CPhysConstraint.m_OnBreak = findOffsetByName(j, "CPhysConstraint", "m_OnBreak");

// Atribuições para CMapVetoPickController
// CMapVetoPickController Offsets
CMapVetoPickController.m_bPlayedIntroVcd = findOffsetByName(j, "CMapVetoPickController", "m_bPlayedIntroVcd");
CMapVetoPickController.m_bNeedToPlayFiveSecondsRemaining = findOffsetByName(j, "CMapVetoPickController", "m_bNeedToPlayFiveSecondsRemaining");
CMapVetoPickController.m_dblPreMatchDraftSequenceTime = findOffsetByName(j, "CMapVetoPickController", "m_dblPreMatchDraftSequenceTime");
CMapVetoPickController.m_bPreMatchDraftStateChanged = findOffsetByName(j, "CMapVetoPickController", "m_bPreMatchDraftStateChanged");
CMapVetoPickController.m_nDraftType = findOffsetByName(j, "CMapVetoPickController", "m_nDraftType");
CMapVetoPickController.m_nTeamWinningCoinToss = findOffsetByName(j, "CMapVetoPickController", "m_nTeamWinningCoinToss");
CMapVetoPickController.m_nTeamWithFirstChoice = findOffsetByName(j, "CMapVetoPickController", "m_nTeamWithFirstChoice");
CMapVetoPickController.m_nVoteMapIdsList = findOffsetByName(j, "CMapVetoPickController", "m_nVoteMapIdsList");
CMapVetoPickController.m_nAccountIDs = findOffsetByName(j, "CMapVetoPickController", "m_nAccountIDs");
CMapVetoPickController.m_nMapId0 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId0");
CMapVetoPickController.m_nMapId1 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId1");
CMapVetoPickController.m_nMapId2 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId2");
CMapVetoPickController.m_nMapId3 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId3");
CMapVetoPickController.m_nMapId4 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId4");
CMapVetoPickController.m_nMapId5 = findOffsetByName(j, "CMapVetoPickController", "m_nMapId5");
CMapVetoPickController.m_nStartingSide0 = findOffsetByName(j, "CMapVetoPickController", "m_nStartingSide0");
CMapVetoPickController.m_nCurrentPhase = findOffsetByName(j, "CMapVetoPickController", "m_nCurrentPhase");
CMapVetoPickController.m_nPhaseStartTick = findOffsetByName(j, "CMapVetoPickController", "m_nPhaseStartTick");
CMapVetoPickController.m_nPhaseDurationTicks = findOffsetByName(j, "CMapVetoPickController", "m_nPhaseDurationTicks");
CMapVetoPickController.m_OnMapVetoed = findOffsetByName(j, "CMapVetoPickController", "m_OnMapVetoed");
CMapVetoPickController.m_OnMapPicked = findOffsetByName(j, "CMapVetoPickController", "m_OnMapPicked");
CMapVetoPickController.m_OnSidesPicked = findOffsetByName(j, "CMapVetoPickController", "m_OnSidesPicked");
CMapVetoPickController.m_OnNewPhaseStarted = findOffsetByName(j, "CMapVetoPickController", "m_OnNewPhaseStarted");
CMapVetoPickController.m_OnLevelTransition = findOffsetByName(j, "CMapVetoPickController", "m_OnLevelTransition");

// Atribuições para CSoundEnt
// CSoundEnt Offsets
CSoundEnt.m_iFreeSound = findOffsetByName(j, "CSoundEnt", "m_iFreeSound");
CSoundEnt.m_iActiveSound = findOffsetByName(j, "CSoundEnt", "m_iActiveSound");
CSoundEnt.m_cLastActiveSounds = findOffsetByName(j, "CSoundEnt", "m_cLastActiveSounds");
CSoundEnt.m_SoundPool = findOffsetByName(j, "CSoundEnt", "m_SoundPool");

// Atribuições para CTriggerSave
// CTriggerSave Offsets
CTriggerSave.m_bForceNewLevelUnit = findOffsetByName(j, "CTriggerSave", "m_bForceNewLevelUnit");
CTriggerSave.m_fDangerousTimer = findOffsetByName(j, "CTriggerSave", "m_fDangerousTimer");
CTriggerSave.m_minHitPoints = findOffsetByName(j, "CTriggerSave", "m_minHitPoints");

// Atribuições para CPhysWheelConstraint
// CPhysWheelConstraint Offsets
CPhysWheelConstraint.m_flSuspensionFrequency = findOffsetByName(j, "CPhysWheelConstraint", "m_flSuspensionFrequency");
CPhysWheelConstraint.m_flSuspensionDampingRatio = findOffsetByName(j, "CPhysWheelConstraint", "m_flSuspensionDampingRatio");
CPhysWheelConstraint.m_flSuspensionHeightOffset = findOffsetByName(j, "CPhysWheelConstraint", "m_flSuspensionHeightOffset");
CPhysWheelConstraint.m_bEnableSuspensionLimit = findOffsetByName(j, "CPhysWheelConstraint", "m_bEnableSuspensionLimit");
CPhysWheelConstraint.m_flMinSuspensionOffset = findOffsetByName(j, "CPhysWheelConstraint", "m_flMinSuspensionOffset");
CPhysWheelConstraint.m_flMaxSuspensionOffset = findOffsetByName(j, "CPhysWheelConstraint", "m_flMaxSuspensionOffset");
CPhysWheelConstraint.m_bEnableSteeringLimit = findOffsetByName(j, "CPhysWheelConstraint", "m_bEnableSteeringLimit");
CPhysWheelConstraint.m_flMinSteeringAngle = findOffsetByName(j, "CPhysWheelConstraint", "m_flMinSteeringAngle");
CPhysWheelConstraint.m_flMaxSteeringAngle = findOffsetByName(j, "CPhysWheelConstraint", "m_flMaxSteeringAngle");
CPhysWheelConstraint.m_flSteeringAxisFriction = findOffsetByName(j, "CPhysWheelConstraint", "m_flSteeringAxisFriction");
CPhysWheelConstraint.m_flSpinAxisFriction = findOffsetByName(j, "CPhysWheelConstraint", "m_flSpinAxisFriction");

// Atribuições para CPhysFixed
// CPhysFixed Offsets
CPhysFixed.m_flLinearFrequency = findOffsetByName(j, "CPhysFixed", "m_flLinearFrequency");
CPhysFixed.m_flLinearDampingRatio = findOffsetByName(j, "CPhysFixed", "m_flLinearDampingRatio");
CPhysFixed.m_flAngularFrequency = findOffsetByName(j, "CPhysFixed", "m_flAngularFrequency");
CPhysFixed.m_flAngularDampingRatio = findOffsetByName(j, "CPhysFixed", "m_flAngularDampingRatio");
CPhysFixed.m_bEnableLinearConstraint = findOffsetByName(j, "CPhysFixed", "m_bEnableLinearConstraint");
CPhysFixed.m_bEnableAngularConstraint = findOffsetByName(j, "CPhysFixed", "m_bEnableAngularConstraint");

// Atribuições para CEnvLaser
// CEnvLaser Offsets
CEnvLaser.m_iszLaserTarget = findOffsetByName(j, "CEnvLaser", "m_iszLaserTarget");
CEnvLaser.m_pSprite = findOffsetByName(j, "CEnvLaser", "m_pSprite");
CEnvLaser.m_iszSpriteName = findOffsetByName(j, "CEnvLaser", "m_iszSpriteName");
CEnvLaser.m_firePosition = findOffsetByName(j, "CEnvLaser", "m_firePosition");
CEnvLaser.m_flStartFrame = findOffsetByName(j, "CEnvLaser", "m_flStartFrame");

// Atribuições para CPhysPulley
// CPhysPulley Offsets
CPhysPulley.m_position2 = findOffsetByName(j, "CPhysPulley", "m_position2");
CPhysPulley.m_offset = findOffsetByName(j, "CPhysPulley", "m_offset");
CPhysPulley.m_addLength = findOffsetByName(j, "CPhysPulley", "m_addLength");
CPhysPulley.m_gearRatio = findOffsetByName(j, "CPhysPulley", "m_gearRatio");

// Atribuições para CBasePlayerWeapon
// CBasePlayerWeapon Offsets
CBasePlayerWeapon.m_nNextPrimaryAttackTick = findOffsetByName(j, "CBasePlayerWeapon", "m_nNextPrimaryAttackTick");
CBasePlayerWeapon.m_flNextPrimaryAttackTickRatio = findOffsetByName(j, "CBasePlayerWeapon", "m_flNextPrimaryAttackTickRatio");
CBasePlayerWeapon.m_nNextSecondaryAttackTick = findOffsetByName(j, "CBasePlayerWeapon", "m_nNextSecondaryAttackTick");
CBasePlayerWeapon.m_flNextSecondaryAttackTickRatio = findOffsetByName(j, "CBasePlayerWeapon", "m_flNextSecondaryAttackTickRatio");
CBasePlayerWeapon.m_iClip1 = findOffsetByName(j, "CBasePlayerWeapon", "m_iClip1");
CBasePlayerWeapon.m_iClip2 = findOffsetByName(j, "CBasePlayerWeapon", "m_iClip2");
CBasePlayerWeapon.m_pReserveAmmo = findOffsetByName(j, "CBasePlayerWeapon", "m_pReserveAmmo");
CBasePlayerWeapon.m_OnPlayerUse = findOffsetByName(j, "CBasePlayerWeapon", "m_OnPlayerUse");

// Atribuições para CFish
// CFish Offsets
CFish.m_pool = findOffsetByName(j, "CFish", "m_pool");
CFish.m_id = findOffsetByName(j, "CFish", "m_id");
CFish.m_x = findOffsetByName(j, "CFish", "m_x");
CFish.m_y = findOffsetByName(j, "CFish", "m_y");
CFish.m_z = findOffsetByName(j, "CFish", "m_z");
CFish.m_angle = findOffsetByName(j, "CFish", "m_angle");
CFish.m_angleChange = findOffsetByName(j, "CFish", "m_angleChange");
CFish.m_forward = findOffsetByName(j, "CFish", "m_forward");
CFish.m_perp = findOffsetByName(j, "CFish", "m_perp");
CFish.m_poolOrigin = findOffsetByName(j, "CFish", "m_poolOrigin");
CFish.m_waterLevel = findOffsetByName(j, "CFish", "m_waterLevel");
CFish.m_speed = findOffsetByName(j, "CFish", "m_speed");
CFish.m_desiredSpeed = findOffsetByName(j, "CFish", "m_desiredSpeed");
CFish.m_calmSpeed = findOffsetByName(j, "CFish", "m_calmSpeed");
CFish.m_panicSpeed = findOffsetByName(j, "CFish", "m_panicSpeed");
CFish.m_avoidRange = findOffsetByName(j, "CFish", "m_avoidRange");
CFish.m_turnTimer = findOffsetByName(j, "CFish", "m_turnTimer");
CFish.m_turnClockwise = findOffsetByName(j, "CFish", "m_turnClockwise");
CFish.m_goTimer = findOffsetByName(j, "CFish", "m_goTimer");
CFish.m_moveTimer = findOffsetByName(j, "CFish", "m_moveTimer");
CFish.m_panicTimer = findOffsetByName(j, "CFish", "m_panicTimer");
CFish.m_disperseTimer = findOffsetByName(j, "CFish", "m_disperseTimer");
CFish.m_proximityTimer = findOffsetByName(j, "CFish", "m_proximityTimer");
CFish.m_visible = findOffsetByName(j, "CFish", "m_visible");

// Atribuições para CEnvFireSource
// CEnvFireSource Offsets
CEnvFireSource.m_bEnabled = findOffsetByName(j, "CEnvFireSource", "m_bEnabled");
CEnvFireSource.m_radius = findOffsetByName(j, "CEnvFireSource", "m_radius");
CEnvFireSource.m_damage = findOffsetByName(j, "CEnvFireSource", "m_damage");

// Atribuições para CTriggerGameEvent
// CTriggerGameEvent Offsets
CTriggerGameEvent.m_strStartTouchEventName = findOffsetByName(j, "CTriggerGameEvent", "m_strStartTouchEventName");
CTriggerGameEvent.m_strEndTouchEventName = findOffsetByName(j, "CTriggerGameEvent", "m_strEndTouchEventName");
CTriggerGameEvent.m_strTriggerID = findOffsetByName(j, "CTriggerGameEvent", "m_strTriggerID");

// Atribuições para CPhysSlideConstraint
// CPhysSlideConstraint Offsets
CPhysSlideConstraint.m_axisEnd = findOffsetByName(j, "CPhysSlideConstraint", "m_axisEnd");
CPhysSlideConstraint.m_slideFriction = findOffsetByName(j, "CPhysSlideConstraint", "m_slideFriction");
CPhysSlideConstraint.m_systemLoadScale = findOffsetByName(j, "CPhysSlideConstraint", "m_systemLoadScale");
CPhysSlideConstraint.m_initialOffset = findOffsetByName(j, "CPhysSlideConstraint", "m_initialOffset");
CPhysSlideConstraint.m_bEnableLinearConstraint = findOffsetByName(j, "CPhysSlideConstraint", "m_bEnableLinearConstraint");
CPhysSlideConstraint.m_bEnableAngularConstraint = findOffsetByName(j, "CPhysSlideConstraint", "m_bEnableAngularConstraint");
CPhysSlideConstraint.m_flMotorFrequency = findOffsetByName(j, "CPhysSlideConstraint", "m_flMotorFrequency");
CPhysSlideConstraint.m_flMotorDampingRatio = findOffsetByName(j, "CPhysSlideConstraint", "m_flMotorDampingRatio");
CPhysSlideConstraint.m_bUseEntityPivot = findOffsetByName(j, "CPhysSlideConstraint", "m_bUseEntityPivot");
CPhysSlideConstraint.m_soundInfo = findOffsetByName(j, "CPhysSlideConstraint", "m_soundInfo");

// Atribuições para CDebugHistory
// CDebugHistory Offsets
CDebugHistory.m_nNpcEvents = findOffsetByName(j, "CDebugHistory", "m_nNpcEvents");

// Atribuições para CLightEntity
// CLightEntity Offsets
CLightEntity.m_CLightComponent = findOffsetByName(j, "CLightEntity", "m_CLightComponent");

// Atribuições para CFuncRotating
// CFuncRotating Offsets
CFuncRotating.m_OnStopped = findOffsetByName(j, "CFuncRotating", "m_OnStopped");
CFuncRotating.m_OnStarted = findOffsetByName(j, "CFuncRotating", "m_OnStarted");
CFuncRotating.m_OnReachedStart = findOffsetByName(j, "CFuncRotating", "m_OnReachedStart");
CFuncRotating.m_localRotationVector = findOffsetByName(j, "CFuncRotating", "m_localRotationVector");
CFuncRotating.m_flFanFriction = findOffsetByName(j, "CFuncRotating", "m_flFanFriction");
CFuncRotating.m_flAttenuation = findOffsetByName(j, "CFuncRotating", "m_flAttenuation");
CFuncRotating.m_flVolume = findOffsetByName(j, "CFuncRotating", "m_flVolume");
CFuncRotating.m_flTargetSpeed = findOffsetByName(j, "CFuncRotating", "m_flTargetSpeed");
CFuncRotating.m_flMaxSpeed = findOffsetByName(j, "CFuncRotating", "m_flMaxSpeed");
CFuncRotating.m_flBlockDamage = findOffsetByName(j, "CFuncRotating", "m_flBlockDamage");
CFuncRotating.m_NoiseRunning = findOffsetByName(j, "CFuncRotating", "m_NoiseRunning");
CFuncRotating.m_bReversed = findOffsetByName(j, "CFuncRotating", "m_bReversed");
CFuncRotating.m_bAccelDecel = findOffsetByName(j, "CFuncRotating", "m_bAccelDecel");
CFuncRotating.m_prevLocalAngles = findOffsetByName(j, "CFuncRotating", "m_prevLocalAngles");
CFuncRotating.m_angStart = findOffsetByName(j, "CFuncRotating", "m_angStart");
CFuncRotating.m_bStopAtStartPos = findOffsetByName(j, "CFuncRotating", "m_bStopAtStartPos");
CFuncRotating.m_vecClientOrigin = findOffsetByName(j, "CFuncRotating", "m_vecClientOrigin");
CFuncRotating.m_vecClientAngles = findOffsetByName(j, "CFuncRotating", "m_vecClientAngles");

// Atribuições para CBaseCSGrenadeProjectile
// CBaseCSGrenadeProjectile Offsets
CBaseCSGrenadeProjectile.m_vInitialPosition = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vInitialPosition");
CBaseCSGrenadeProjectile.m_vInitialVelocity = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vInitialVelocity");
CBaseCSGrenadeProjectile.m_nBounces = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_nBounces");
CBaseCSGrenadeProjectile.m_nExplodeEffectIndex = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_nExplodeEffectIndex");
CBaseCSGrenadeProjectile.m_nExplodeEffectTickBegin = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin");
CBaseCSGrenadeProjectile.m_vecExplodeEffectOrigin = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin");
CBaseCSGrenadeProjectile.m_flSpawnTime = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_flSpawnTime");
CBaseCSGrenadeProjectile.m_unOGSExtraFlags = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_unOGSExtraFlags");
CBaseCSGrenadeProjectile.m_bDetonationRecorded = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_bDetonationRecorded");
CBaseCSGrenadeProjectile.m_nItemIndex = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_nItemIndex");
CBaseCSGrenadeProjectile.m_vecOriginalSpawnLocation = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vecOriginalSpawnLocation");
CBaseCSGrenadeProjectile.m_flLastBounceSoundTime = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_flLastBounceSoundTime");
CBaseCSGrenadeProjectile.m_vecGrenadeSpin = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vecGrenadeSpin");
CBaseCSGrenadeProjectile.m_vecLastHitSurfaceNormal = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_vecLastHitSurfaceNormal");
CBaseCSGrenadeProjectile.m_nTicksAtZeroVelocity = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_nTicksAtZeroVelocity");
CBaseCSGrenadeProjectile.m_bHasEverHitEnemy = findOffsetByName(j, "CBaseCSGrenadeProjectile", "m_bHasEverHitEnemy");

// Atribuições para CCSPlace
// CCSPlace Offsets
CCSPlace.m_name = findOffsetByName(j, "CCSPlace", "m_name");

// Atribuições para CEntityDissolve
// CEntityDissolve Offsets
CEntityDissolve.m_flFadeInStart = findOffsetByName(j, "CEntityDissolve", "m_flFadeInStart");
CEntityDissolve.m_flFadeInLength = findOffsetByName(j, "CEntityDissolve", "m_flFadeInLength");
CEntityDissolve.m_flFadeOutModelStart = findOffsetByName(j, "CEntityDissolve", "m_flFadeOutModelStart");
CEntityDissolve.m_flFadeOutModelLength = findOffsetByName(j, "CEntityDissolve", "m_flFadeOutModelLength");
CEntityDissolve.m_flFadeOutStart = findOffsetByName(j, "CEntityDissolve", "m_flFadeOutStart");
CEntityDissolve.m_flFadeOutLength = findOffsetByName(j, "CEntityDissolve", "m_flFadeOutLength");
CEntityDissolve.m_flStartTime = findOffsetByName(j, "CEntityDissolve", "m_flStartTime");
CEntityDissolve.m_nDissolveType = findOffsetByName(j, "CEntityDissolve", "m_nDissolveType");
CEntityDissolve.m_vDissolverOrigin = findOffsetByName(j, "CEntityDissolve", "m_vDissolverOrigin");
CEntityDissolve.m_nMagnitude = findOffsetByName(j, "CEntityDissolve", "m_nMagnitude");

// Atribuições para CPointAngleSensor
// CPointAngleSensor Offsets
CPointAngleSensor.m_bDisabled = findOffsetByName(j, "CPointAngleSensor", "m_bDisabled");
CPointAngleSensor.m_nLookAtName = findOffsetByName(j, "CPointAngleSensor", "m_nLookAtName");
CPointAngleSensor.m_hTargetEntity = findOffsetByName(j, "CPointAngleSensor", "m_hTargetEntity");
CPointAngleSensor.m_hLookAtEntity = findOffsetByName(j, "CPointAngleSensor", "m_hLookAtEntity");
CPointAngleSensor.m_flDuration = findOffsetByName(j, "CPointAngleSensor", "m_flDuration");
CPointAngleSensor.m_flDotTolerance = findOffsetByName(j, "CPointAngleSensor", "m_flDotTolerance");
CPointAngleSensor.m_flFacingTime = findOffsetByName(j, "CPointAngleSensor", "m_flFacingTime");
CPointAngleSensor.m_bFired = findOffsetByName(j, "CPointAngleSensor", "m_bFired");
CPointAngleSensor.m_OnFacingLookat = findOffsetByName(j, "CPointAngleSensor", "m_OnFacingLookat");
CPointAngleSensor.m_OnNotFacingLookat = findOffsetByName(j, "CPointAngleSensor", "m_OnNotFacingLookat");
CPointAngleSensor.m_TargetDir = findOffsetByName(j, "CPointAngleSensor", "m_TargetDir");
CPointAngleSensor.m_FacingPercentage = findOffsetByName(j, "CPointAngleSensor", "m_FacingPercentage");

// Atribuições para CSoundEventOBBEntity
// CSoundEventOBBEntity Offsets
CSoundEventOBBEntity.m_vMins = findOffsetByName(j, "CSoundEventOBBEntity", "m_vMins");
CSoundEventOBBEntity.m_vMaxs = findOffsetByName(j, "CSoundEventOBBEntity", "m_vMaxs");

// Atribuições para CBtNodeCondition
// CBtNodeCondition Offsets
CBtNodeCondition.m_bNegated = findOffsetByName(j, "CBtNodeCondition", "m_bNegated");

// Atribuições para CEnvVolumetricFogVolume
// CEnvVolumetricFogVolume Offsets
CEnvVolumetricFogVolume.m_bActive = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bActive");
CEnvVolumetricFogVolume.m_vBoxMins = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_vBoxMins");
CEnvVolumetricFogVolume.m_vBoxMaxs = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_vBoxMaxs");
CEnvVolumetricFogVolume.m_bStartDisabled = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bStartDisabled");
CEnvVolumetricFogVolume.m_flStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_flStrength");
CEnvVolumetricFogVolume.m_nFalloffShape = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_nFalloffShape");
CEnvVolumetricFogVolume.m_flFalloffExponent = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_flFalloffExponent");
CEnvVolumetricFogVolume.m_flHeightFogDepth = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_flHeightFogDepth");
CEnvVolumetricFogVolume.m_fHeightFogEdgeWidth = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth");
CEnvVolumetricFogVolume.m_fIndirectLightStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength");
CEnvVolumetricFogVolume.m_fSunLightStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_fSunLightStrength");
CEnvVolumetricFogVolume.m_fNoiseStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_fNoiseStrength");
CEnvVolumetricFogVolume.m_bOverrideIndirectLightStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength");
CEnvVolumetricFogVolume.m_bOverrideSunLightStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength");
CEnvVolumetricFogVolume.m_bOverrideNoiseStrength = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength");
CEnvVolumetricFogVolume.m_bAllowLPVIndirect = findOffsetByName(j, "CEnvVolumetricFogVolume", "m_bAllowLPVIndirect");

// Atribuições para CBeam
// CBeam Offsets
CBeam.m_flFrameRate = findOffsetByName(j, "CBeam", "m_flFrameRate");
CBeam.m_flHDRColorScale = findOffsetByName(j, "CBeam", "m_flHDRColorScale");
CBeam.m_flFireTime = findOffsetByName(j, "CBeam", "m_flFireTime");
CBeam.m_flDamage = findOffsetByName(j, "CBeam", "m_flDamage");
CBeam.m_nNumBeamEnts = findOffsetByName(j, "CBeam", "m_nNumBeamEnts");
CBeam.m_hBaseMaterial = findOffsetByName(j, "CBeam", "m_hBaseMaterial");
CBeam.m_nHaloIndex = findOffsetByName(j, "CBeam", "m_nHaloIndex");
CBeam.m_nBeamType = findOffsetByName(j, "CBeam", "m_nBeamType");
CBeam.m_nBeamFlags = findOffsetByName(j, "CBeam", "m_nBeamFlags");
CBeam.m_hAttachEntity = findOffsetByName(j, "CBeam", "m_hAttachEntity");
CBeam.m_nAttachIndex = findOffsetByName(j, "CBeam", "m_nAttachIndex");
CBeam.m_fWidth = findOffsetByName(j, "CBeam", "m_fWidth");
CBeam.m_fEndWidth = findOffsetByName(j, "CBeam", "m_fEndWidth");
CBeam.m_fFadeLength = findOffsetByName(j, "CBeam", "m_fFadeLength");
CBeam.m_fHaloScale = findOffsetByName(j, "CBeam", "m_fHaloScale");
CBeam.m_fAmplitude = findOffsetByName(j, "CBeam", "m_fAmplitude");
CBeam.m_fStartFrame = findOffsetByName(j, "CBeam", "m_fStartFrame");
CBeam.m_fSpeed = findOffsetByName(j, "CBeam", "m_fSpeed");
CBeam.m_flFrame = findOffsetByName(j, "CBeam", "m_flFrame");
CBeam.m_nClipStyle = findOffsetByName(j, "CBeam", "m_nClipStyle");
CBeam.m_bTurnedOff = findOffsetByName(j, "CBeam", "m_bTurnedOff");
CBeam.m_vecEndPos = findOffsetByName(j, "CBeam", "m_vecEndPos");
CBeam.m_hEndEntity = findOffsetByName(j, "CBeam", "m_hEndEntity");
CBeam.m_nDissolveType = findOffsetByName(j, "CBeam", "m_nDissolveType");

// Atribuições para CBaseModelEntity
// CBaseModelEntity Offsets
CBaseModelEntity.m_CRenderComponent = findOffsetByName(j, "CBaseModelEntity", "m_CRenderComponent");
CBaseModelEntity.m_CHitboxComponent = findOffsetByName(j, "CBaseModelEntity", "m_CHitboxComponent");
CBaseModelEntity.m_nDestructiblePartInitialStateDestructed0 = findOffsetByName(j, "CBaseModelEntity", "m_nDestructiblePartInitialStateDestructed0");
CBaseModelEntity.m_nDestructiblePartInitialStateDestructed1 = findOffsetByName(j, "CBaseModelEntity", "m_nDestructiblePartInitialStateDestructed1");
CBaseModelEntity.m_nDestructiblePartInitialStateDestructed2 = findOffsetByName(j, "CBaseModelEntity", "m_nDestructiblePartInitialStateDestructed2");
CBaseModelEntity.m_nDestructiblePartInitialStateDestructed3 = findOffsetByName(j, "CBaseModelEntity", "m_nDestructiblePartInitialStateDestructed3");
CBaseModelEntity.m_nDestructiblePartInitialStateDestructed4 = findOffsetByName(j, "CBaseModelEntity", "m_nDestructiblePartInitialStateDestructed4");
CBaseModelEntity.m_nLastHitDestructiblePartIndex = findOffsetByName(j, "CBaseModelEntity", "m_nLastHitDestructiblePartIndex");
CBaseModelEntity.m_LastHitGroup = findOffsetByName(j, "CBaseModelEntity", "m_LastHitGroup");
CBaseModelEntity.m_flDissolveStartTime = findOffsetByName(j, "CBaseModelEntity", "m_flDissolveStartTime");
CBaseModelEntity.m_OnIgnite = findOffsetByName(j, "CBaseModelEntity", "m_OnIgnite");
CBaseModelEntity.m_nRenderMode = findOffsetByName(j, "CBaseModelEntity", "m_nRenderMode");
CBaseModelEntity.m_nRenderFX = findOffsetByName(j, "CBaseModelEntity", "m_nRenderFX");
CBaseModelEntity.m_bAllowFadeInView = findOffsetByName(j, "CBaseModelEntity", "m_bAllowFadeInView");
CBaseModelEntity.m_clrRender = findOffsetByName(j, "CBaseModelEntity", "m_clrRender");
CBaseModelEntity.m_vecRenderAttributes = findOffsetByName(j, "CBaseModelEntity", "m_vecRenderAttributes");
CBaseModelEntity.m_bRenderToCubemaps = findOffsetByName(j, "CBaseModelEntity", "m_bRenderToCubemaps");
CBaseModelEntity.m_bNoInterpolate = findOffsetByName(j, "CBaseModelEntity", "m_bNoInterpolate");
CBaseModelEntity.m_Collision = findOffsetByName(j, "CBaseModelEntity", "m_Collision");
CBaseModelEntity.m_Glow = findOffsetByName(j, "CBaseModelEntity", "m_Glow");
CBaseModelEntity.m_flGlowBackfaceMult = findOffsetByName(j, "CBaseModelEntity", "m_flGlowBackfaceMult");
CBaseModelEntity.m_fadeMinDist = findOffsetByName(j, "CBaseModelEntity", "m_fadeMinDist");
CBaseModelEntity.m_fadeMaxDist = findOffsetByName(j, "CBaseModelEntity", "m_fadeMaxDist");
CBaseModelEntity.m_flFadeScale = findOffsetByName(j, "CBaseModelEntity", "m_flFadeScale");
CBaseModelEntity.m_flShadowStrength = findOffsetByName(j, "CBaseModelEntity", "m_flShadowStrength");
CBaseModelEntity.m_nObjectCulling = findOffsetByName(j, "CBaseModelEntity", "m_nObjectCulling");
CBaseModelEntity.m_nAddDecal = findOffsetByName(j, "CBaseModelEntity", "m_nAddDecal");
CBaseModelEntity.m_vDecalPosition = findOffsetByName(j, "CBaseModelEntity", "m_vDecalPosition");
CBaseModelEntity.m_vDecalForwardAxis = findOffsetByName(j, "CBaseModelEntity", "m_vDecalForwardAxis");
CBaseModelEntity.m_flDecalHealBloodRate = findOffsetByName(j, "CBaseModelEntity", "m_flDecalHealBloodRate");
CBaseModelEntity.m_flDecalHealHeightRate = findOffsetByName(j, "CBaseModelEntity", "m_flDecalHealHeightRate");
CBaseModelEntity.m_ConfigEntitiesToPropagateMaterialDecalsTo = findOffsetByName(j, "CBaseModelEntity", "m_ConfigEntitiesToPropagateMaterialDecalsTo");
CBaseModelEntity.m_vecViewOffset = findOffsetByName(j, "CBaseModelEntity", "m_vecViewOffset");

// Atribuições para CPhysMagnet
// CPhysMagnet Offsets
CPhysMagnet.m_OnMagnetAttach = findOffsetByName(j, "CPhysMagnet", "m_OnMagnetAttach");
CPhysMagnet.m_OnMagnetDetach = findOffsetByName(j, "CPhysMagnet", "m_OnMagnetDetach");
CPhysMagnet.m_massScale = findOffsetByName(j, "CPhysMagnet", "m_massScale");
CPhysMagnet.m_forceLimit = findOffsetByName(j, "CPhysMagnet", "m_forceLimit");
CPhysMagnet.m_torqueLimit = findOffsetByName(j, "CPhysMagnet", "m_torqueLimit");
CPhysMagnet.m_MagnettedEntities = findOffsetByName(j, "CPhysMagnet", "m_MagnettedEntities");
CPhysMagnet.m_bActive = findOffsetByName(j, "CPhysMagnet", "m_bActive");
CPhysMagnet.m_bHasHitSomething = findOffsetByName(j, "CPhysMagnet", "m_bHasHitSomething");
CPhysMagnet.m_flTotalMass = findOffsetByName(j, "CPhysMagnet", "m_flTotalMass");
CPhysMagnet.m_flRadius = findOffsetByName(j, "CPhysMagnet", "m_flRadius");
CPhysMagnet.m_flNextSuckTime = findOffsetByName(j, "CPhysMagnet", "m_flNextSuckTime");
CPhysMagnet.m_iMaxObjectsAttached = findOffsetByName(j, "CPhysMagnet", "m_iMaxObjectsAttached");

// Atribuições para CFuncNavBlocker
// CFuncNavBlocker Offsets
CFuncNavBlocker.m_bDisabled = findOffsetByName(j, "CFuncNavBlocker", "m_bDisabled");
CFuncNavBlocker.m_nBlockedTeamNumber = findOffsetByName(j, "CFuncNavBlocker", "m_nBlockedTeamNumber");

// Atribuições para CRagdollMagnet
// CRagdollMagnet Offsets
CRagdollMagnet.m_bDisabled = findOffsetByName(j, "CRagdollMagnet", "m_bDisabled");
CRagdollMagnet.m_radius = findOffsetByName(j, "CRagdollMagnet", "m_radius");
CRagdollMagnet.m_force = findOffsetByName(j, "CRagdollMagnet", "m_force");
CRagdollMagnet.m_axis = findOffsetByName(j, "CRagdollMagnet", "m_axis");

// Atribuições para CFuncBrush
// CFuncBrush Offsets
CFuncBrush.m_iSolidity = findOffsetByName(j, "CFuncBrush", "m_iSolidity");
CFuncBrush.m_iDisabled = findOffsetByName(j, "CFuncBrush", "m_iDisabled");
CFuncBrush.m_bSolidBsp = findOffsetByName(j, "CFuncBrush", "m_bSolidBsp");
CFuncBrush.m_iszExcludedClass = findOffsetByName(j, "CFuncBrush", "m_iszExcludedClass");
CFuncBrush.m_bInvertExclusion = findOffsetByName(j, "CFuncBrush", "m_bInvertExclusion");
CFuncBrush.m_bScriptedMovement = findOffsetByName(j, "CFuncBrush", "m_bScriptedMovement");

// Atribuições para CPointProximitySensor
// CPointProximitySensor Offsets
CPointProximitySensor.m_bDisabled = findOffsetByName(j, "CPointProximitySensor", "m_bDisabled");
CPointProximitySensor.m_hTargetEntity = findOffsetByName(j, "CPointProximitySensor", "m_hTargetEntity");
CPointProximitySensor.m_Distance = findOffsetByName(j, "CPointProximitySensor", "m_Distance");

// Atribuições para CFilterClass
// CFilterClass Offsets
CFilterClass.m_iFilterClass = findOffsetByName(j, "CFilterClass", "m_iFilterClass");

// Atribuições para CPhysBox
// CPhysBox Offsets
CPhysBox.m_damageType = findOffsetByName(j, "CPhysBox", "m_damageType");
CPhysBox.m_damageToEnableMotion = findOffsetByName(j, "CPhysBox", "m_damageToEnableMotion");
CPhysBox.m_flForceToEnableMotion = findOffsetByName(j, "CPhysBox", "m_flForceToEnableMotion");
CPhysBox.m_angPreferredCarryAngles = findOffsetByName(j, "CPhysBox", "m_angPreferredCarryAngles");
CPhysBox.m_bNotSolidToWorld = findOffsetByName(j, "CPhysBox", "m_bNotSolidToWorld");
CPhysBox.m_bEnableUseOutput = findOffsetByName(j, "CPhysBox", "m_bEnableUseOutput");
CPhysBox.m_iExploitableByPlayer = findOffsetByName(j, "CPhysBox", "m_iExploitableByPlayer");
CPhysBox.m_flTouchOutputPerEntityDelay = findOffsetByName(j, "CPhysBox", "m_flTouchOutputPerEntityDelay");
CPhysBox.m_OnDamaged = findOffsetByName(j, "CPhysBox", "m_OnDamaged");
CPhysBox.m_OnAwakened = findOffsetByName(j, "CPhysBox", "m_OnAwakened");
CPhysBox.m_OnMotionEnabled = findOffsetByName(j, "CPhysBox", "m_OnMotionEnabled");
CPhysBox.m_OnPlayerUse = findOffsetByName(j, "CPhysBox", "m_OnPlayerUse");
CPhysBox.m_OnStartTouch = findOffsetByName(j, "CPhysBox", "m_OnStartTouch");
CPhysBox.m_hCarryingPlayer = findOffsetByName(j, "CPhysBox", "m_hCarryingPlayer");

// Atribuições para CBaseGrenade
// CBaseGrenade Offsets
CBaseGrenade.m_OnPlayerPickup = findOffsetByName(j, "CBaseGrenade", "m_OnPlayerPickup");
CBaseGrenade.m_OnExplode = findOffsetByName(j, "CBaseGrenade", "m_OnExplode");
CBaseGrenade.m_bHasWarnedAI = findOffsetByName(j, "CBaseGrenade", "m_bHasWarnedAI");
CBaseGrenade.m_bIsSmokeGrenade = findOffsetByName(j, "CBaseGrenade", "m_bIsSmokeGrenade");
CBaseGrenade.m_bIsLive = findOffsetByName(j, "CBaseGrenade", "m_bIsLive");
CBaseGrenade.m_DmgRadius = findOffsetByName(j, "CBaseGrenade", "m_DmgRadius");
CBaseGrenade.m_flDetonateTime = findOffsetByName(j, "CBaseGrenade", "m_flDetonateTime");
CBaseGrenade.m_flWarnAITime = findOffsetByName(j, "CBaseGrenade", "m_flWarnAITime");
CBaseGrenade.m_flDamage = findOffsetByName(j, "CBaseGrenade", "m_flDamage");
CBaseGrenade.m_iszBounceSound = findOffsetByName(j, "CBaseGrenade", "m_iszBounceSound");
CBaseGrenade.m_ExplosionSound = findOffsetByName(j, "CBaseGrenade", "m_ExplosionSound");
CBaseGrenade.m_hThrower = findOffsetByName(j, "CBaseGrenade", "m_hThrower");
CBaseGrenade.m_flNextAttack = findOffsetByName(j, "CBaseGrenade", "m_flNextAttack");
CBaseGrenade.m_hOriginalThrower = findOffsetByName(j, "CBaseGrenade", "m_hOriginalThrower");

// Atribuições para CTimerEntity
// CTimerEntity Offsets
CTimerEntity.m_OnTimer = findOffsetByName(j, "CTimerEntity", "m_OnTimer");
CTimerEntity.m_OnTimerHigh = findOffsetByName(j, "CTimerEntity", "m_OnTimerHigh");
CTimerEntity.m_OnTimerLow = findOffsetByName(j, "CTimerEntity", "m_OnTimerLow");
CTimerEntity.m_iDisabled = findOffsetByName(j, "CTimerEntity", "m_iDisabled");
CTimerEntity.m_flInitialDelay = findOffsetByName(j, "CTimerEntity", "m_flInitialDelay");
CTimerEntity.m_flRefireTime = findOffsetByName(j, "CTimerEntity", "m_flRefireTime");
CTimerEntity.m_bUpDownState = findOffsetByName(j, "CTimerEntity", "m_bUpDownState");
CTimerEntity.m_iUseRandomTime = findOffsetByName(j, "CTimerEntity", "m_iUseRandomTime");
CTimerEntity.m_bPauseAfterFiring = findOffsetByName(j, "CTimerEntity", "m_bPauseAfterFiring");
CTimerEntity.m_flLowerRandomBound = findOffsetByName(j, "CTimerEntity", "m_flLowerRandomBound");
CTimerEntity.m_flUpperRandomBound = findOffsetByName(j, "CTimerEntity", "m_flUpperRandomBound");
CTimerEntity.m_flRemainingTime = findOffsetByName(j, "CTimerEntity", "m_flRemainingTime");
CTimerEntity.m_bPaused = findOffsetByName(j, "CTimerEntity", "m_bPaused");

// Atribuições para CEnvWind
// CEnvWind Offsets
CEnvWind.m_EnvWindShared = findOffsetByName(j, "CEnvWind", "m_EnvWindShared");

// Atribuições para CCSWeaponBase
// CCSWeaponBase Offsets
CCSWeaponBase.m_bRemoveable = findOffsetByName(j, "CCSWeaponBase", "m_bRemoveable");
CCSWeaponBase.m_flFireSequenceStartTime = findOffsetByName(j, "CCSWeaponBase", "m_flFireSequenceStartTime");
CCSWeaponBase.m_nFireSequenceStartTimeChange = findOffsetByName(j, "CCSWeaponBase", "m_nFireSequenceStartTimeChange");
CCSWeaponBase.m_nFireSequenceStartTimeAck = findOffsetByName(j, "CCSWeaponBase", "m_nFireSequenceStartTimeAck");
CCSWeaponBase.m_ePlayerFireEvent = findOffsetByName(j, "CCSWeaponBase", "m_ePlayerFireEvent");
CCSWeaponBase.m_ePlayerFireEventAttackType = findOffsetByName(j, "CCSWeaponBase", "m_ePlayerFireEventAttackType");
CCSWeaponBase.m_seqIdle = findOffsetByName(j, "CCSWeaponBase", "m_seqIdle");
CCSWeaponBase.m_seqFirePrimary = findOffsetByName(j, "CCSWeaponBase", "m_seqFirePrimary");
CCSWeaponBase.m_seqFireSecondary = findOffsetByName(j, "CCSWeaponBase", "m_seqFireSecondary");
CCSWeaponBase.m_thirdPersonFireSequences = findOffsetByName(j, "CCSWeaponBase", "m_thirdPersonFireSequences");
CCSWeaponBase.m_hCurrentThirdPersonSequence = findOffsetByName(j, "CCSWeaponBase", "m_hCurrentThirdPersonSequence");
CCSWeaponBase.m_nSilencerBoneIndex = findOffsetByName(j, "CCSWeaponBase", "m_nSilencerBoneIndex");
CCSWeaponBase.m_thirdPersonSequences = findOffsetByName(j, "CCSWeaponBase", "m_thirdPersonSequences");
CCSWeaponBase.m_bPlayerAmmoStockOnPickup = findOffsetByName(j, "CCSWeaponBase", "m_bPlayerAmmoStockOnPickup");
CCSWeaponBase.m_bRequireUseToTouch = findOffsetByName(j, "CCSWeaponBase", "m_bRequireUseToTouch");
CCSWeaponBase.m_iState = findOffsetByName(j, "CCSWeaponBase", "m_iState");
CCSWeaponBase.m_flLastTimeInAir = findOffsetByName(j, "CCSWeaponBase", "m_flLastTimeInAir");
CCSWeaponBase.m_flLastDeployTime = findOffsetByName(j, "CCSWeaponBase", "m_flLastDeployTime");
CCSWeaponBase.m_nLastEmptySoundCmdNum = findOffsetByName(j, "CCSWeaponBase", "m_nLastEmptySoundCmdNum");
CCSWeaponBase.m_nViewModelIndex = findOffsetByName(j, "CCSWeaponBase", "m_nViewModelIndex");
CCSWeaponBase.m_bReloadsWithClips = findOffsetByName(j, "CCSWeaponBase", "m_bReloadsWithClips");
CCSWeaponBase.m_flTimeWeaponIdle = findOffsetByName(j, "CCSWeaponBase", "m_flTimeWeaponIdle");
CCSWeaponBase.m_bFireOnEmpty = findOffsetByName(j, "CCSWeaponBase", "m_bFireOnEmpty");
CCSWeaponBase.m_OnPlayerPickup = findOffsetByName(j, "CCSWeaponBase", "m_OnPlayerPickup");
CCSWeaponBase.m_weaponMode = findOffsetByName(j, "CCSWeaponBase", "m_weaponMode");
CCSWeaponBase.m_flTurningInaccuracyDelta = findOffsetByName(j, "CCSWeaponBase", "m_flTurningInaccuracyDelta");
CCSWeaponBase.m_vecTurningInaccuracyEyeDirLast = findOffsetByName(j, "CCSWeaponBase", "m_vecTurningInaccuracyEyeDirLast");
CCSWeaponBase.m_flTurningInaccuracy = findOffsetByName(j, "CCSWeaponBase", "m_flTurningInaccuracy");
CCSWeaponBase.m_fAccuracyPenalty = findOffsetByName(j, "CCSWeaponBase", "m_fAccuracyPenalty");
CCSWeaponBase.m_flLastAccuracyUpdateTime = findOffsetByName(j, "CCSWeaponBase", "m_flLastAccuracyUpdateTime");
CCSWeaponBase.m_fAccuracySmoothedForZoom = findOffsetByName(j, "CCSWeaponBase", "m_fAccuracySmoothedForZoom");
CCSWeaponBase.m_fScopeZoomEndTime = findOffsetByName(j, "CCSWeaponBase", "m_fScopeZoomEndTime");
CCSWeaponBase.m_iRecoilIndex = findOffsetByName(j, "CCSWeaponBase", "m_iRecoilIndex");
CCSWeaponBase.m_flRecoilIndex = findOffsetByName(j, "CCSWeaponBase", "m_flRecoilIndex");
CCSWeaponBase.m_bBurstMode = findOffsetByName(j, "CCSWeaponBase", "m_bBurstMode");
CCSWeaponBase.m_nPostponeFireReadyTicks = findOffsetByName(j, "CCSWeaponBase", "m_nPostponeFireReadyTicks");
CCSWeaponBase.m_flPostponeFireReadyFrac = findOffsetByName(j, "CCSWeaponBase", "m_flPostponeFireReadyFrac");
CCSWeaponBase.m_bInReload = findOffsetByName(j, "CCSWeaponBase", "m_bInReload");
CCSWeaponBase.m_bReloadVisuallyComplete = findOffsetByName(j, "CCSWeaponBase", "m_bReloadVisuallyComplete");
CCSWeaponBase.m_flDroppedAtTime = findOffsetByName(j, "CCSWeaponBase", "m_flDroppedAtTime");
CCSWeaponBase.m_bIsHauledBack = findOffsetByName(j, "CCSWeaponBase", "m_bIsHauledBack");
CCSWeaponBase.m_bSilencerOn = findOffsetByName(j, "CCSWeaponBase", "m_bSilencerOn");
CCSWeaponBase.m_flTimeSilencerSwitchComplete = findOffsetByName(j, "CCSWeaponBase", "m_flTimeSilencerSwitchComplete");
CCSWeaponBase.m_iOriginalTeamNumber = findOffsetByName(j, "CCSWeaponBase", "m_iOriginalTeamNumber");
CCSWeaponBase.m_iMostRecentTeamNumber = findOffsetByName(j, "CCSWeaponBase", "m_iMostRecentTeamNumber");
CCSWeaponBase.m_bDroppedNearBuyZone = findOffsetByName(j, "CCSWeaponBase", "m_bDroppedNearBuyZone");
CCSWeaponBase.m_flNextAttackRenderTimeOffset = findOffsetByName(j, "CCSWeaponBase", "m_flNextAttackRenderTimeOffset");
CCSWeaponBase.m_bCanBePickedUp = findOffsetByName(j, "CCSWeaponBase", "m_bCanBePickedUp");
CCSWeaponBase.m_bUseCanOverrideNextOwnerTouchTime = findOffsetByName(j, "CCSWeaponBase", "m_bUseCanOverrideNextOwnerTouchTime");
CCSWeaponBase.m_nextOwnerTouchTime = findOffsetByName(j, "CCSWeaponBase", "m_nextOwnerTouchTime");
CCSWeaponBase.m_nextPrevOwnerTouchTime = findOffsetByName(j, "CCSWeaponBase", "m_nextPrevOwnerTouchTime");
CCSWeaponBase.m_nextPrevOwnerUseTime = findOffsetByName(j, "CCSWeaponBase", "m_nextPrevOwnerUseTime");
CCSWeaponBase.m_hPrevOwner = findOffsetByName(j, "CCSWeaponBase", "m_hPrevOwner");
CCSWeaponBase.m_nDropTick = findOffsetByName(j, "CCSWeaponBase", "m_nDropTick");
CCSWeaponBase.m_donated = findOffsetByName(j, "CCSWeaponBase", "m_donated");
CCSWeaponBase.m_fLastShotTime = findOffsetByName(j, "CCSWeaponBase", "m_fLastShotTime");
CCSWeaponBase.m_bWasOwnedByCT = findOffsetByName(j, "CCSWeaponBase", "m_bWasOwnedByCT");
CCSWeaponBase.m_bWasOwnedByTerrorist = findOffsetByName(j, "CCSWeaponBase", "m_bWasOwnedByTerrorist");
CCSWeaponBase.m_bFiredOutOfAmmoEvent = findOffsetByName(j, "CCSWeaponBase", "m_bFiredOutOfAmmoEvent");
CCSWeaponBase.m_numRemoveUnownedWeaponThink = findOffsetByName(j, "CCSWeaponBase", "m_numRemoveUnownedWeaponThink");
CCSWeaponBase.m_IronSightController = findOffsetByName(j, "CCSWeaponBase", "m_IronSightController");
CCSWeaponBase.m_iIronSightMode = findOffsetByName(j, "CCSWeaponBase", "m_iIronSightMode");
CCSWeaponBase.m_flLastLOSTraceFailureTime = findOffsetByName(j, "CCSWeaponBase", "m_flLastLOSTraceFailureTime");
CCSWeaponBase.m_iNumEmptyAttacks = findOffsetByName(j, "CCSWeaponBase", "m_iNumEmptyAttacks");
CCSWeaponBase.m_flWatTickOffset = findOffsetByName(j, "CCSWeaponBase", "m_flWatTickOffset");

// Atribuições para CRagdollConstraint
// CRagdollConstraint Offsets
CRagdollConstraint.m_xmin = findOffsetByName(j, "CRagdollConstraint", "m_xmin");
CRagdollConstraint.m_xmax = findOffsetByName(j, "CRagdollConstraint", "m_xmax");
CRagdollConstraint.m_ymin = findOffsetByName(j, "CRagdollConstraint", "m_ymin");
CRagdollConstraint.m_ymax = findOffsetByName(j, "CRagdollConstraint", "m_ymax");
CRagdollConstraint.m_zmin = findOffsetByName(j, "CRagdollConstraint", "m_zmin");
CRagdollConstraint.m_zmax = findOffsetByName(j, "CRagdollConstraint", "m_zmax");
CRagdollConstraint.m_xfriction = findOffsetByName(j, "CRagdollConstraint", "m_xfriction");
CRagdollConstraint.m_yfriction = findOffsetByName(j, "CRagdollConstraint", "m_yfriction");
CRagdollConstraint.m_zfriction = findOffsetByName(j, "CRagdollConstraint", "m_zfriction");

// Atribuições para CPhysExplosion
// CPhysExplosion Offsets
CPhysExplosion.m_bExplodeOnSpawn = findOffsetByName(j, "CPhysExplosion", "m_bExplodeOnSpawn");
CPhysExplosion.m_flMagnitude = findOffsetByName(j, "CPhysExplosion", "m_flMagnitude");
CPhysExplosion.m_flDamage = findOffsetByName(j, "CPhysExplosion", "m_flDamage");
CPhysExplosion.m_radius = findOffsetByName(j, "CPhysExplosion", "m_radius");
CPhysExplosion.m_targetEntityName = findOffsetByName(j, "CPhysExplosion", "m_targetEntityName");
CPhysExplosion.m_flInnerRadius = findOffsetByName(j, "CPhysExplosion", "m_flInnerRadius");
CPhysExplosion.m_flPushScale = findOffsetByName(j, "CPhysExplosion", "m_flPushScale");
CPhysExplosion.m_bConvertToDebrisWhenPossible = findOffsetByName(j, "CPhysExplosion", "m_bConvertToDebrisWhenPossible");
CPhysExplosion.m_OnPushedPlayer = findOffsetByName(j, "CPhysExplosion", "m_OnPushedPlayer");

// Atribuições para CPointPush
// CPointPush Offsets
CPointPush.m_bEnabled = findOffsetByName(j, "CPointPush", "m_bEnabled");
CPointPush.m_flMagnitude = findOffsetByName(j, "CPointPush", "m_flMagnitude");
CPointPush.m_flRadius = findOffsetByName(j, "CPointPush", "m_flRadius");
CPointPush.m_flInnerRadius = findOffsetByName(j, "CPointPush", "m_flInnerRadius");
CPointPush.m_flConeOfInfluence = findOffsetByName(j, "CPointPush", "m_flConeOfInfluence");
CPointPush.m_iszFilterName = findOffsetByName(j, "CPointPush", "m_iszFilterName");
CPointPush.m_hFilter = findOffsetByName(j, "CPointPush", "m_hFilter");

// Atribuições para CCredits
// CCredits Offsets
CCredits.m_OnCreditsDone = findOffsetByName(j, "CCredits", "m_OnCreditsDone");
CCredits.m_bRolledOutroCredits = findOffsetByName(j, "CCredits", "m_bRolledOutroCredits");
CCredits.m_flLogoLength = findOffsetByName(j, "CCredits", "m_flLogoLength");

// Atribuições para CCSPlayerResource
// CCSPlayerResource Offsets
CCSPlayerResource.m_bHostageAlive = findOffsetByName(j, "CCSPlayerResource", "m_bHostageAlive");
CCSPlayerResource.m_isHostageFollowingSomeone = findOffsetByName(j, "CCSPlayerResource", "m_isHostageFollowingSomeone");
CCSPlayerResource.m_iHostageEntityIDs = findOffsetByName(j, "CCSPlayerResource", "m_iHostageEntityIDs");
CCSPlayerResource.m_bombsiteCenterA = findOffsetByName(j, "CCSPlayerResource", "m_bombsiteCenterA");
CCSPlayerResource.m_bombsiteCenterB = findOffsetByName(j, "CCSPlayerResource", "m_bombsiteCenterB");
CCSPlayerResource.m_hostageRescueX = findOffsetByName(j, "CCSPlayerResource", "m_hostageRescueX");
CCSPlayerResource.m_hostageRescueY = findOffsetByName(j, "CCSPlayerResource", "m_hostageRescueY");
CCSPlayerResource.m_hostageRescueZ = findOffsetByName(j, "CCSPlayerResource", "m_hostageRescueZ");
CCSPlayerResource.m_bEndMatchNextMapAllVoted = findOffsetByName(j, "CCSPlayerResource", "m_bEndMatchNextMapAllVoted");
CCSPlayerResource.m_foundGoalPositions = findOffsetByName(j, "CCSPlayerResource", "m_foundGoalPositions");

// Atribuições para CCSTeam
// CCSTeam Offsets
CCSTeam.m_nLastRecievedShorthandedRoundBonus = findOffsetByName(j, "CCSTeam", "m_nLastRecievedShorthandedRoundBonus");
CCSTeam.m_nShorthandedRoundBonusStartRound = findOffsetByName(j, "CCSTeam", "m_nShorthandedRoundBonusStartRound");
CCSTeam.m_bSurrendered = findOffsetByName(j, "CCSTeam", "m_bSurrendered");
CCSTeam.m_szTeamMatchStat = findOffsetByName(j, "CCSTeam", "m_szTeamMatchStat");
CCSTeam.m_numMapVictories = findOffsetByName(j, "CCSTeam", "m_numMapVictories");
CCSTeam.m_scoreFirstHalf = findOffsetByName(j, "CCSTeam", "m_scoreFirstHalf");
CCSTeam.m_scoreSecondHalf = findOffsetByName(j, "CCSTeam", "m_scoreSecondHalf");
CCSTeam.m_scoreOvertime = findOffsetByName(j, "CCSTeam", "m_scoreOvertime");
CCSTeam.m_szClanTeamname = findOffsetByName(j, "CCSTeam", "m_szClanTeamname");
CCSTeam.m_iClanID = findOffsetByName(j, "CCSTeam", "m_iClanID");
CCSTeam.m_szTeamFlagImage = findOffsetByName(j, "CCSTeam", "m_szTeamFlagImage");
CCSTeam.m_szTeamLogoImage = findOffsetByName(j, "CCSTeam", "m_szTeamLogoImage");
CCSTeam.m_flNextResourceTime = findOffsetByName(j, "CCSTeam", "m_flNextResourceTime");
CCSTeam.m_iLastUpdateSentAt = findOffsetByName(j, "CCSTeam", "m_iLastUpdateSentAt");

// Atribuições para CTriggerImpact
// CTriggerImpact Offsets
CTriggerImpact.m_flMagnitude = findOffsetByName(j, "CTriggerImpact", "m_flMagnitude");
CTriggerImpact.m_flNoise = findOffsetByName(j, "CTriggerImpact", "m_flNoise");
CTriggerImpact.m_flViewkick = findOffsetByName(j, "CTriggerImpact", "m_flViewkick");
CTriggerImpact.m_pOutputForce = findOffsetByName(j, "CTriggerImpact", "m_pOutputForce");

// Atribuições para CSun
// CSun Offsets
CSun.m_vDirection = findOffsetByName(j, "CSun", "m_vDirection");
CSun.m_clrOverlay = findOffsetByName(j, "CSun", "m_clrOverlay");
CSun.m_iszEffectName = findOffsetByName(j, "CSun", "m_iszEffectName");
CSun.m_iszSSEffectName = findOffsetByName(j, "CSun", "m_iszSSEffectName");
CSun.m_bOn = findOffsetByName(j, "CSun", "m_bOn");
CSun.m_bmaxColor = findOffsetByName(j, "CSun", "m_bmaxColor");
CSun.m_flSize = findOffsetByName(j, "CSun", "m_flSize");
CSun.m_flRotation = findOffsetByName(j, "CSun", "m_flRotation");
CSun.m_flHazeScale = findOffsetByName(j, "CSun", "m_flHazeScale");
CSun.m_flAlphaHaze = findOffsetByName(j, "CSun", "m_flAlphaHaze");
CSun.m_flAlphaHdr = findOffsetByName(j, "CSun", "m_flAlphaHdr");
CSun.m_flAlphaScale = findOffsetByName(j, "CSun", "m_flAlphaScale");
CSun.m_flHDRColorScale = findOffsetByName(j, "CSun", "m_flHDRColorScale");
CSun.m_flFarZScale = findOffsetByName(j, "CSun", "m_flFarZScale");

// Atribuições para CTriggerDetectBulletFire
// CTriggerDetectBulletFire Offsets
CTriggerDetectBulletFire.m_bPlayerFireOnly = findOffsetByName(j, "CTriggerDetectBulletFire", "m_bPlayerFireOnly");
CTriggerDetectBulletFire.m_OnDetectedBulletFire = findOffsetByName(j, "CTriggerDetectBulletFire", "m_OnDetectedBulletFire");

// Atribuições para CPointGiveAmmo
// CPointGiveAmmo Offsets
CPointGiveAmmo.m_pActivator = findOffsetByName(j, "CPointGiveAmmo", "m_pActivator");

// Atribuições para CPathParticleRope
// CPathParticleRope Offsets
CPathParticleRope.m_bStartActive = findOffsetByName(j, "CPathParticleRope", "m_bStartActive");
CPathParticleRope.m_flMaxSimulationTime = findOffsetByName(j, "CPathParticleRope", "m_flMaxSimulationTime");
CPathParticleRope.m_iszEffectName = findOffsetByName(j, "CPathParticleRope", "m_iszEffectName");
CPathParticleRope.m_PathNodes_Name = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_Name");
CPathParticleRope.m_flParticleSpacing = findOffsetByName(j, "CPathParticleRope", "m_flParticleSpacing");
CPathParticleRope.m_flSlack = findOffsetByName(j, "CPathParticleRope", "m_flSlack");
CPathParticleRope.m_flRadius = findOffsetByName(j, "CPathParticleRope", "m_flRadius");
CPathParticleRope.m_ColorTint = findOffsetByName(j, "CPathParticleRope", "m_ColorTint");
CPathParticleRope.m_nEffectState = findOffsetByName(j, "CPathParticleRope", "m_nEffectState");
CPathParticleRope.m_iEffectIndex = findOffsetByName(j, "CPathParticleRope", "m_iEffectIndex");
CPathParticleRope.m_PathNodes_Position = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_Position");
CPathParticleRope.m_PathNodes_TangentIn = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_TangentIn");
CPathParticleRope.m_PathNodes_TangentOut = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_TangentOut");
CPathParticleRope.m_PathNodes_Color = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_Color");
CPathParticleRope.m_PathNodes_PinEnabled = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_PinEnabled");
CPathParticleRope.m_PathNodes_RadiusScale = findOffsetByName(j, "CPathParticleRope", "m_PathNodes_RadiusScale");

// Atribuições para CPlayerVisibility
// CPlayerVisibility Offsets
CPlayerVisibility.m_flVisibilityStrength = findOffsetByName(j, "CPlayerVisibility", "m_flVisibilityStrength");
CPlayerVisibility.m_flFogDistanceMultiplier = findOffsetByName(j, "CPlayerVisibility", "m_flFogDistanceMultiplier");
CPlayerVisibility.m_flFogMaxDensityMultiplier = findOffsetByName(j, "CPlayerVisibility", "m_flFogMaxDensityMultiplier");
CPlayerVisibility.m_flFadeTime = findOffsetByName(j, "CPlayerVisibility", "m_flFadeTime");
CPlayerVisibility.m_bStartDisabled = findOffsetByName(j, "CPlayerVisibility", "m_bStartDisabled");
CPlayerVisibility.m_bIsEnabled = findOffsetByName(j, "CPlayerVisibility", "m_bIsEnabled");

// Atribuições para CTriggerTeleport
// CTriggerTeleport Offsets
CTriggerTeleport.m_iLandmark = findOffsetByName(j, "CTriggerTeleport", "m_iLandmark");
CTriggerTeleport.m_bUseLandmarkAngles = findOffsetByName(j, "CTriggerTeleport", "m_bUseLandmarkAngles");
CTriggerTeleport.m_bMirrorPlayer = findOffsetByName(j, "CTriggerTeleport", "m_bMirrorPlayer");
CTriggerTeleport.m_bCheckDestIfClearForPlayer = findOffsetByName(j, "CTriggerTeleport", "m_bCheckDestIfClearForPlayer");

// Atribuições para CFuncMover
// CFuncMover Offsets
CFuncMover.m_bCreateMovableNavMesh = findOffsetByName(j, "CFuncMover", "m_bCreateMovableNavMesh");
CFuncMover.m_iszPathName = findOffsetByName(j, "CFuncMover", "m_iszPathName");
CFuncMover.m_hPathMover = findOffsetByName(j, "CFuncMover", "m_hPathMover");
CFuncMover.m_iszPathNodeStart = findOffsetByName(j, "CFuncMover", "m_iszPathNodeStart");
CFuncMover.m_eMoveType = findOffsetByName(j, "CFuncMover", "m_eMoveType");
CFuncMover.m_bIsReversing = findOffsetByName(j, "CFuncMover", "m_bIsReversing");
CFuncMover.m_vTarget = findOffsetByName(j, "CFuncMover", "m_vTarget");
CFuncMover.m_flStartSpeed = findOffsetByName(j, "CFuncMover", "m_flStartSpeed");
CFuncMover.m_flPathLocation = findOffsetByName(j, "CFuncMover", "m_flPathLocation");
CFuncMover.m_flT = findOffsetByName(j, "CFuncMover", "m_flT");
CFuncMover.m_nCurrentNodeIndex = findOffsetByName(j, "CFuncMover", "m_nCurrentNodeIndex");
CFuncMover.m_nPreviousNodeIndex = findOffsetByName(j, "CFuncMover", "m_nPreviousNodeIndex");
CFuncMover.m_bFixedOrientation = findOffsetByName(j, "CFuncMover", "m_bFixedOrientation");
CFuncMover.m_bFixedPitch = findOffsetByName(j, "CFuncMover", "m_bFixedPitch");
CFuncMover.m_eSolidType = findOffsetByName(j, "CFuncMover", "m_eSolidType");
CFuncMover.m_bIsMoving = findOffsetByName(j, "CFuncMover", "m_bIsMoving");
CFuncMover.m_flTimeToReachMaxSpeed = findOffsetByName(j, "CFuncMover", "m_flTimeToReachMaxSpeed");
CFuncMover.m_flDistanceToReachMaxSpeed = findOffsetByName(j, "CFuncMover", "m_flDistanceToReachMaxSpeed");
CFuncMover.m_flTimeToReachZeroSpeed = findOffsetByName(j, "CFuncMover", "m_flTimeToReachZeroSpeed");
CFuncMover.m_flDistanceToReachZeroSpeed = findOffsetByName(j, "CFuncMover", "m_flDistanceToReachZeroSpeed");
CFuncMover.m_flTimeMovementStart = findOffsetByName(j, "CFuncMover", "m_flTimeMovementStart");
CFuncMover.m_flTimeMovementStop = findOffsetByName(j, "CFuncMover", "m_flTimeMovementStop");
CFuncMover.m_hStopAtNode = findOffsetByName(j, "CFuncMover", "m_hStopAtNode");
CFuncMover.m_flPathLocationToBeginStop = findOffsetByName(j, "CFuncMover", "m_flPathLocationToBeginStop");
CFuncMover.m_iszStartForwardSound = findOffsetByName(j, "CFuncMover", "m_iszStartForwardSound");
CFuncMover.m_iszLoopForwardSound = findOffsetByName(j, "CFuncMover", "m_iszLoopForwardSound");
CFuncMover.m_iszStopForwardSound = findOffsetByName(j, "CFuncMover", "m_iszStopForwardSound");
CFuncMover.m_iszStartReverseSound = findOffsetByName(j, "CFuncMover", "m_iszStartReverseSound");
CFuncMover.m_iszLoopReverseSound = findOffsetByName(j, "CFuncMover", "m_iszLoopReverseSound");
CFuncMover.m_iszStopReverseSound = findOffsetByName(j, "CFuncMover", "m_iszStopReverseSound");
CFuncMover.m_iszArriveAtDestinationSound = findOffsetByName(j, "CFuncMover", "m_iszArriveAtDestinationSound");
CFuncMover.m_OnMovementEnd = findOffsetByName(j, "CFuncMover", "m_OnMovementEnd");
CFuncMover.m_bStartAtEnd = findOffsetByName(j, "CFuncMover", "m_bStartAtEnd");
CFuncMover.m_eOrientationUpdate = findOffsetByName(j, "CFuncMover", "m_eOrientationUpdate");
CFuncMover.m_flTimeStartOrientationChange = findOffsetByName(j, "CFuncMover", "m_flTimeStartOrientationChange");
CFuncMover.m_flTimeToBlendToNewOrientation = findOffsetByName(j, "CFuncMover", "m_flTimeToBlendToNewOrientation");
CFuncMover.m_flDurationBlendToNewOrientationRan = findOffsetByName(j, "CFuncMover", "m_flDurationBlendToNewOrientationRan");
CFuncMover.m_qOriginalOrientation = findOffsetByName(j, "CFuncMover", "m_qOriginalOrientation");

// Atribuições para CBubbling
// CBubbling Offsets
CBubbling.m_density = findOffsetByName(j, "CBubbling", "m_density");
CBubbling.m_frequency = findOffsetByName(j, "CBubbling", "m_frequency");
CBubbling.m_state = findOffsetByName(j, "CBubbling", "m_state");

// Atribuições para CCSGameRules
// CCSGameRules Offsets
CCSGameRules.m_bFreezePeriod = findOffsetByName(j, "CCSGameRules", "m_bFreezePeriod");
CCSGameRules.m_bWarmupPeriod = findOffsetByName(j, "CCSGameRules", "m_bWarmupPeriod");
CCSGameRules.m_fWarmupPeriodEnd = findOffsetByName(j, "CCSGameRules", "m_fWarmupPeriodEnd");
CCSGameRules.m_fWarmupPeriodStart = findOffsetByName(j, "CCSGameRules", "m_fWarmupPeriodStart");
CCSGameRules.m_bServerPaused = findOffsetByName(j, "CCSGameRules", "m_bServerPaused");
CCSGameRules.m_bTerroristTimeOutActive = findOffsetByName(j, "CCSGameRules", "m_bTerroristTimeOutActive");
CCSGameRules.m_bCTTimeOutActive = findOffsetByName(j, "CCSGameRules", "m_bCTTimeOutActive");
CCSGameRules.m_flTerroristTimeOutRemaining = findOffsetByName(j, "CCSGameRules", "m_flTerroristTimeOutRemaining");
CCSGameRules.m_flCTTimeOutRemaining = findOffsetByName(j, "CCSGameRules", "m_flCTTimeOutRemaining");
CCSGameRules.m_nTerroristTimeOuts = findOffsetByName(j, "CCSGameRules", "m_nTerroristTimeOuts");
CCSGameRules.m_nCTTimeOuts = findOffsetByName(j, "CCSGameRules", "m_nCTTimeOuts");
CCSGameRules.m_bTechnicalTimeOut = findOffsetByName(j, "CCSGameRules", "m_bTechnicalTimeOut");
CCSGameRules.m_bMatchWaitingForResume = findOffsetByName(j, "CCSGameRules", "m_bMatchWaitingForResume");
CCSGameRules.m_iRoundTime = findOffsetByName(j, "CCSGameRules", "m_iRoundTime");
CCSGameRules.m_fMatchStartTime = findOffsetByName(j, "CCSGameRules", "m_fMatchStartTime");
CCSGameRules.m_fRoundStartTime = findOffsetByName(j, "CCSGameRules", "m_fRoundStartTime");
CCSGameRules.m_flRestartRoundTime = findOffsetByName(j, "CCSGameRules", "m_flRestartRoundTime");
CCSGameRules.m_bGameRestart = findOffsetByName(j, "CCSGameRules", "m_bGameRestart");
CCSGameRules.m_flGameStartTime = findOffsetByName(j, "CCSGameRules", "m_flGameStartTime");
CCSGameRules.m_timeUntilNextPhaseStarts = findOffsetByName(j, "CCSGameRules", "m_timeUntilNextPhaseStarts");
CCSGameRules.m_gamePhase = findOffsetByName(j, "CCSGameRules", "m_gamePhase");
CCSGameRules.m_totalRoundsPlayed = findOffsetByName(j, "CCSGameRules", "m_totalRoundsPlayed");
CCSGameRules.m_nRoundsPlayedThisPhase = findOffsetByName(j, "CCSGameRules", "m_nRoundsPlayedThisPhase");
CCSGameRules.m_nOvertimePlaying = findOffsetByName(j, "CCSGameRules", "m_nOvertimePlaying");
CCSGameRules.m_iHostagesRemaining = findOffsetByName(j, "CCSGameRules", "m_iHostagesRemaining");
CCSGameRules.m_bAnyHostageReached = findOffsetByName(j, "CCSGameRules", "m_bAnyHostageReached");
CCSGameRules.m_bMapHasBombTarget = findOffsetByName(j, "CCSGameRules", "m_bMapHasBombTarget");
CCSGameRules.m_bMapHasRescueZone = findOffsetByName(j, "CCSGameRules", "m_bMapHasRescueZone");
CCSGameRules.m_bMapHasBuyZone = findOffsetByName(j, "CCSGameRules", "m_bMapHasBuyZone");
CCSGameRules.m_bIsQueuedMatchmaking = findOffsetByName(j, "CCSGameRules", "m_bIsQueuedMatchmaking");
CCSGameRules.m_nQueuedMatchmakingMode = findOffsetByName(j, "CCSGameRules", "m_nQueuedMatchmakingMode");
CCSGameRules.m_bIsValveDS = findOffsetByName(j, "CCSGameRules", "m_bIsValveDS");
CCSGameRules.m_bLogoMap = findOffsetByName(j, "CCSGameRules", "m_bLogoMap");
CCSGameRules.m_bPlayAllStepSoundsOnServer = findOffsetByName(j, "CCSGameRules", "m_bPlayAllStepSoundsOnServer");
CCSGameRules.m_iSpectatorSlotCount = findOffsetByName(j, "CCSGameRules", "m_iSpectatorSlotCount");
CCSGameRules.m_MatchDevice = findOffsetByName(j, "CCSGameRules", "m_MatchDevice");
CCSGameRules.m_bHasMatchStarted = findOffsetByName(j, "CCSGameRules", "m_bHasMatchStarted");
CCSGameRules.m_nNextMapInMapgroup = findOffsetByName(j, "CCSGameRules", "m_nNextMapInMapgroup");
CCSGameRules.m_szTournamentEventName = findOffsetByName(j, "CCSGameRules", "m_szTournamentEventName");
CCSGameRules.m_szTournamentEventStage = findOffsetByName(j, "CCSGameRules", "m_szTournamentEventStage");
CCSGameRules.m_szMatchStatTxt = findOffsetByName(j, "CCSGameRules", "m_szMatchStatTxt");
CCSGameRules.m_szTournamentPredictionsTxt = findOffsetByName(j, "CCSGameRules", "m_szTournamentPredictionsTxt");
CCSGameRules.m_nTournamentPredictionsPct = findOffsetByName(j, "CCSGameRules", "m_nTournamentPredictionsPct");
CCSGameRules.m_flCMMItemDropRevealStartTime = findOffsetByName(j, "CCSGameRules", "m_flCMMItemDropRevealStartTime");
CCSGameRules.m_flCMMItemDropRevealEndTime = findOffsetByName(j, "CCSGameRules", "m_flCMMItemDropRevealEndTime");
CCSGameRules.m_bIsDroppingItems = findOffsetByName(j, "CCSGameRules", "m_bIsDroppingItems");
CCSGameRules.m_bIsQuestEligible = findOffsetByName(j, "CCSGameRules", "m_bIsQuestEligible");
CCSGameRules.m_bIsHltvActive = findOffsetByName(j, "CCSGameRules", "m_bIsHltvActive");
CCSGameRules.m_arrProhibitedItemIndices = findOffsetByName(j, "CCSGameRules", "m_arrProhibitedItemIndices");
CCSGameRules.m_arrTournamentActiveCasterAccounts = findOffsetByName(j, "CCSGameRules", "m_arrTournamentActiveCasterAccounts");
CCSGameRules.m_numBestOfMaps = findOffsetByName(j, "CCSGameRules", "m_numBestOfMaps");
CCSGameRules.m_nHalloweenMaskListSeed = findOffsetByName(j, "CCSGameRules", "m_nHalloweenMaskListSeed");
CCSGameRules.m_bBombDropped = findOffsetByName(j, "CCSGameRules", "m_bBombDropped");
CCSGameRules.m_bBombPlanted = findOffsetByName(j, "CCSGameRules", "m_bBombPlanted");
CCSGameRules.m_iRoundWinStatus = findOffsetByName(j, "CCSGameRules", "m_iRoundWinStatus");
CCSGameRules.m_eRoundWinReason = findOffsetByName(j, "CCSGameRules", "m_eRoundWinReason");
CCSGameRules.m_bTCantBuy = findOffsetByName(j, "CCSGameRules", "m_bTCantBuy");
CCSGameRules.m_bCTCantBuy = findOffsetByName(j, "CCSGameRules", "m_bCTCantBuy");
CCSGameRules.m_iMatchStats_RoundResults = findOffsetByName(j, "CCSGameRules", "m_iMatchStats_RoundResults");
CCSGameRules.m_iMatchStats_PlayersAlive_CT = findOffsetByName(j, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT");
CCSGameRules.m_iMatchStats_PlayersAlive_T = findOffsetByName(j, "CCSGameRules", "m_iMatchStats_PlayersAlive_T");
CCSGameRules.m_TeamRespawnWaveTimes = findOffsetByName(j, "CCSGameRules", "m_TeamRespawnWaveTimes");
CCSGameRules.m_flNextRespawnWave = findOffsetByName(j, "CCSGameRules", "m_flNextRespawnWave");
CCSGameRules.m_nServerQuestID = findOffsetByName(j, "CCSGameRules", "m_nServerQuestID");
CCSGameRules.m_vMinimapMins = findOffsetByName(j, "CCSGameRules", "m_vMinimapMins");
CCSGameRules.m_vMinimapMaxs = findOffsetByName(j, "CCSGameRules", "m_vMinimapMaxs");
CCSGameRules.m_MinimapVerticalSectionHeights = findOffsetByName(j, "CCSGameRules", "m_MinimapVerticalSectionHeights");
CCSGameRules.m_bSpawnedTerrorHuntHeavy = findOffsetByName(j, "CCSGameRules", "m_bSpawnedTerrorHuntHeavy");
CCSGameRules.m_nEndMatchMapGroupVoteTypes = findOffsetByName(j, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes");
CCSGameRules.m_nEndMatchMapGroupVoteOptions = findOffsetByName(j, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions");
CCSGameRules.m_nEndMatchMapVoteWinner = findOffsetByName(j, "CCSGameRules", "m_nEndMatchMapVoteWinner");
CCSGameRules.m_iNumConsecutiveCTLoses = findOffsetByName(j, "CCSGameRules", "m_iNumConsecutiveCTLoses");
CCSGameRules.m_iNumConsecutiveTerroristLoses = findOffsetByName(j, "CCSGameRules", "m_iNumConsecutiveTerroristLoses");
CCSGameRules.m_bHasHostageBeenTouched = findOffsetByName(j, "CCSGameRules", "m_bHasHostageBeenTouched");
CCSGameRules.m_flIntermissionStartTime = findOffsetByName(j, "CCSGameRules", "m_flIntermissionStartTime");
CCSGameRules.m_flIntermissionEndTime = findOffsetByName(j, "CCSGameRules", "m_flIntermissionEndTime");
CCSGameRules.m_bLevelInitialized = findOffsetByName(j, "CCSGameRules", "m_bLevelInitialized");
CCSGameRules.m_iTotalRoundsPlayed = findOffsetByName(j, "CCSGameRules", "m_iTotalRoundsPlayed");
CCSGameRules.m_iUnBalancedRounds = findOffsetByName(j, "CCSGameRules", "m_iUnBalancedRounds");
CCSGameRules.m_endMatchOnRoundReset = findOffsetByName(j, "CCSGameRules", "m_endMatchOnRoundReset");
CCSGameRules.m_endMatchOnThink = findOffsetByName(j, "CCSGameRules", "m_endMatchOnThink");
CCSGameRules.m_iFreezeTime = findOffsetByName(j, "CCSGameRules", "m_iFreezeTime");
CCSGameRules.m_iNumTerrorist = findOffsetByName(j, "CCSGameRules", "m_iNumTerrorist");
CCSGameRules.m_iNumCT = findOffsetByName(j, "CCSGameRules", "m_iNumCT");
CCSGameRules.m_iNumSpawnableTerrorist = findOffsetByName(j, "CCSGameRules", "m_iNumSpawnableTerrorist");
CCSGameRules.m_iNumSpawnableCT = findOffsetByName(j, "CCSGameRules", "m_iNumSpawnableCT");
CCSGameRules.m_arrSelectedHostageSpawnIndices = findOffsetByName(j, "CCSGameRules", "m_arrSelectedHostageSpawnIndices");
CCSGameRules.m_nSpawnPointsRandomSeed = findOffsetByName(j, "CCSGameRules", "m_nSpawnPointsRandomSeed");
CCSGameRules.m_bFirstConnected = findOffsetByName(j, "CCSGameRules", "m_bFirstConnected");
CCSGameRules.m_bCompleteReset = findOffsetByName(j, "CCSGameRules", "m_bCompleteReset");
CCSGameRules.m_bPickNewTeamsOnReset = findOffsetByName(j, "CCSGameRules", "m_bPickNewTeamsOnReset");
CCSGameRules.m_bScrambleTeamsOnRestart = findOffsetByName(j, "CCSGameRules", "m_bScrambleTeamsOnRestart");
CCSGameRules.m_bSwapTeamsOnRestart = findOffsetByName(j, "CCSGameRules", "m_bSwapTeamsOnRestart");
CCSGameRules.m_nEndMatchTiedVotes = findOffsetByName(j, "CCSGameRules", "m_nEndMatchTiedVotes");
CCSGameRules.m_bNeedToAskPlayersForContinueVote = findOffsetByName(j, "CCSGameRules", "m_bNeedToAskPlayersForContinueVote");
CCSGameRules.m_numQueuedMatchmakingAccounts = findOffsetByName(j, "CCSGameRules", "m_numQueuedMatchmakingAccounts");
CCSGameRules.m_fAvgPlayerRank = findOffsetByName(j, "CCSGameRules", "m_fAvgPlayerRank");
CCSGameRules.m_pQueuedMatchmakingReservationString = findOffsetByName(j, "CCSGameRules", "m_pQueuedMatchmakingReservationString");
CCSGameRules.m_numTotalTournamentDrops = findOffsetByName(j, "CCSGameRules", "m_numTotalTournamentDrops");
CCSGameRules.m_numSpectatorsCountMax = findOffsetByName(j, "CCSGameRules", "m_numSpectatorsCountMax");
CCSGameRules.m_numSpectatorsCountMaxTV = findOffsetByName(j, "CCSGameRules", "m_numSpectatorsCountMaxTV");
CCSGameRules.m_numSpectatorsCountMaxLnk = findOffsetByName(j, "CCSGameRules", "m_numSpectatorsCountMaxLnk");
CCSGameRules.m_bForceTeamChangeSilent = findOffsetByName(j, "CCSGameRules", "m_bForceTeamChangeSilent");
CCSGameRules.m_bLoadingRoundBackupData = findOffsetByName(j, "CCSGameRules", "m_bLoadingRoundBackupData");
CCSGameRules.m_nMatchInfoShowType = findOffsetByName(j, "CCSGameRules", "m_nMatchInfoShowType");
CCSGameRules.m_flMatchInfoDecidedTime = findOffsetByName(j, "CCSGameRules", "m_flMatchInfoDecidedTime");
CCSGameRules.mTeamDMLastWinningTeamNumber = findOffsetByName(j, "CCSGameRules", "mTeamDMLastWinningTeamNumber");
CCSGameRules.mTeamDMLastThinkTime = findOffsetByName(j, "CCSGameRules", "mTeamDMLastThinkTime");
CCSGameRules.m_flTeamDMLastAnnouncementTime = findOffsetByName(j, "CCSGameRules", "m_flTeamDMLastAnnouncementTime");
CCSGameRules.m_iAccountTerrorist = findOffsetByName(j, "CCSGameRules", "m_iAccountTerrorist");
CCSGameRules.m_iAccountCT = findOffsetByName(j, "CCSGameRules", "m_iAccountCT");
CCSGameRules.m_iSpawnPointCount_Terrorist = findOffsetByName(j, "CCSGameRules", "m_iSpawnPointCount_Terrorist");
CCSGameRules.m_iSpawnPointCount_CT = findOffsetByName(j, "CCSGameRules", "m_iSpawnPointCount_CT");
CCSGameRules.m_iMaxNumTerrorists = findOffsetByName(j, "CCSGameRules", "m_iMaxNumTerrorists");
CCSGameRules.m_iMaxNumCTs = findOffsetByName(j, "CCSGameRules", "m_iMaxNumCTs");
CCSGameRules.m_iLoserBonusMostRecentTeam = findOffsetByName(j, "CCSGameRules", "m_iLoserBonusMostRecentTeam");
CCSGameRules.m_tmNextPeriodicThink = findOffsetByName(j, "CCSGameRules", "m_tmNextPeriodicThink");
CCSGameRules.m_bVoiceWonMatchBragFired = findOffsetByName(j, "CCSGameRules", "m_bVoiceWonMatchBragFired");
CCSGameRules.m_fWarmupNextChatNoticeTime = findOffsetByName(j, "CCSGameRules", "m_fWarmupNextChatNoticeTime");
CCSGameRules.m_iHostagesRescued = findOffsetByName(j, "CCSGameRules", "m_iHostagesRescued");
CCSGameRules.m_iHostagesTouched = findOffsetByName(j, "CCSGameRules", "m_iHostagesTouched");
CCSGameRules.m_flNextHostageAnnouncement = findOffsetByName(j, "CCSGameRules", "m_flNextHostageAnnouncement");
CCSGameRules.m_bNoTerroristsKilled = findOffsetByName(j, "CCSGameRules", "m_bNoTerroristsKilled");
CCSGameRules.m_bNoCTsKilled = findOffsetByName(j, "CCSGameRules", "m_bNoCTsKilled");
CCSGameRules.m_bNoEnemiesKilled = findOffsetByName(j, "CCSGameRules", "m_bNoEnemiesKilled");
CCSGameRules.m_bCanDonateWeapons = findOffsetByName(j, "CCSGameRules", "m_bCanDonateWeapons");
CCSGameRules.m_firstKillTime = findOffsetByName(j, "CCSGameRules", "m_firstKillTime");
CCSGameRules.m_firstBloodTime = findOffsetByName(j, "CCSGameRules", "m_firstBloodTime");
CCSGameRules.m_hostageWasInjured = findOffsetByName(j, "CCSGameRules", "m_hostageWasInjured");
CCSGameRules.m_hostageWasKilled = findOffsetByName(j, "CCSGameRules", "m_hostageWasKilled");
CCSGameRules.m_bVoteCalled = findOffsetByName(j, "CCSGameRules", "m_bVoteCalled");
CCSGameRules.m_bServerVoteOnReset = findOffsetByName(j, "CCSGameRules", "m_bServerVoteOnReset");
CCSGameRules.m_flVoteCheckThrottle = findOffsetByName(j, "CCSGameRules", "m_flVoteCheckThrottle");
CCSGameRules.m_bBuyTimeEnded = findOffsetByName(j, "CCSGameRules", "m_bBuyTimeEnded");
CCSGameRules.m_nLastFreezeEndBeep = findOffsetByName(j, "CCSGameRules", "m_nLastFreezeEndBeep");
CCSGameRules.m_bTargetBombed = findOffsetByName(j, "CCSGameRules", "m_bTargetBombed");
CCSGameRules.m_bBombDefused = findOffsetByName(j, "CCSGameRules", "m_bBombDefused");
CCSGameRules.m_bMapHasBombZone = findOffsetByName(j, "CCSGameRules", "m_bMapHasBombZone");
CCSGameRules.m_vecMainCTSpawnPos = findOffsetByName(j, "CCSGameRules", "m_vecMainCTSpawnPos");
CCSGameRules.m_CTSpawnPointsMasterList = findOffsetByName(j, "CCSGameRules", "m_CTSpawnPointsMasterList");
CCSGameRules.m_TerroristSpawnPointsMasterList = findOffsetByName(j, "CCSGameRules", "m_TerroristSpawnPointsMasterList");
CCSGameRules.m_bRespawningAllRespawnablePlayers = findOffsetByName(j, "CCSGameRules", "m_bRespawningAllRespawnablePlayers");
CCSGameRules.m_iNextCTSpawnPoint = findOffsetByName(j, "CCSGameRules", "m_iNextCTSpawnPoint");
CCSGameRules.m_flCTSpawnPointUsedTime = findOffsetByName(j, "CCSGameRules", "m_flCTSpawnPointUsedTime");
CCSGameRules.m_iNextTerroristSpawnPoint = findOffsetByName(j, "CCSGameRules", "m_iNextTerroristSpawnPoint");
CCSGameRules.m_flTerroristSpawnPointUsedTime = findOffsetByName(j, "CCSGameRules", "m_flTerroristSpawnPointUsedTime");
CCSGameRules.m_CTSpawnPoints = findOffsetByName(j, "CCSGameRules", "m_CTSpawnPoints");
CCSGameRules.m_TerroristSpawnPoints = findOffsetByName(j, "CCSGameRules", "m_TerroristSpawnPoints");
CCSGameRules.m_bIsUnreservedGameServer = findOffsetByName(j, "CCSGameRules", "m_bIsUnreservedGameServer");
CCSGameRules.m_fAutobalanceDisplayTime = findOffsetByName(j, "CCSGameRules", "m_fAutobalanceDisplayTime");
CCSGameRules.m_bAllowWeaponSwitch = findOffsetByName(j, "CCSGameRules", "m_bAllowWeaponSwitch");
CCSGameRules.m_bRoundTimeWarningTriggered = findOffsetByName(j, "CCSGameRules", "m_bRoundTimeWarningTriggered");
CCSGameRules.m_phaseChangeAnnouncementTime = findOffsetByName(j, "CCSGameRules", "m_phaseChangeAnnouncementTime");
CCSGameRules.m_fNextUpdateTeamClanNamesTime = findOffsetByName(j, "CCSGameRules", "m_fNextUpdateTeamClanNamesTime");
CCSGameRules.m_flLastThinkTime = findOffsetByName(j, "CCSGameRules", "m_flLastThinkTime");
CCSGameRules.m_fAccumulatedRoundOffDamage = findOffsetByName(j, "CCSGameRules", "m_fAccumulatedRoundOffDamage");
CCSGameRules.m_nShorthandedBonusLastEvalRound = findOffsetByName(j, "CCSGameRules", "m_nShorthandedBonusLastEvalRound");
CCSGameRules.m_nMatchAbortedEarlyReason = findOffsetByName(j, "CCSGameRules", "m_nMatchAbortedEarlyReason");
CCSGameRules.m_bHasTriggeredRoundStartMusic = findOffsetByName(j, "CCSGameRules", "m_bHasTriggeredRoundStartMusic");
CCSGameRules.m_bSwitchingTeamsAtRoundReset = findOffsetByName(j, "CCSGameRules", "m_bSwitchingTeamsAtRoundReset");
CCSGameRules.m_pGameModeRules = findOffsetByName(j, "CCSGameRules", "m_pGameModeRules");
CCSGameRules.m_BtGlobalBlackboard = findOffsetByName(j, "CCSGameRules", "m_BtGlobalBlackboard");
CCSGameRules.m_hPlayerResource = findOffsetByName(j, "CCSGameRules", "m_hPlayerResource");
CCSGameRules.m_RetakeRules = findOffsetByName(j, "CCSGameRules", "m_RetakeRules");
CCSGameRules.m_arrTeamUniqueKillWeaponsMatch = findOffsetByName(j, "CCSGameRules", "m_arrTeamUniqueKillWeaponsMatch");
CCSGameRules.m_bTeamLastKillUsedUniqueWeaponMatch = findOffsetByName(j, "CCSGameRules", "m_bTeamLastKillUsedUniqueWeaponMatch");
CCSGameRules.m_nMatchEndCount = findOffsetByName(j, "CCSGameRules", "m_nMatchEndCount");
CCSGameRules.m_nTTeamIntroVariant = findOffsetByName(j, "CCSGameRules", "m_nTTeamIntroVariant");
CCSGameRules.m_nCTTeamIntroVariant = findOffsetByName(j, "CCSGameRules", "m_nCTTeamIntroVariant");
CCSGameRules.m_bTeamIntroPeriod = findOffsetByName(j, "CCSGameRules", "m_bTeamIntroPeriod");
CCSGameRules.m_fTeamIntroPeriodEnd = findOffsetByName(j, "CCSGameRules", "m_fTeamIntroPeriodEnd");
CCSGameRules.m_bPlayedTeamIntroVO = findOffsetByName(j, "CCSGameRules", "m_bPlayedTeamIntroVO");
CCSGameRules.m_iRoundEndWinnerTeam = findOffsetByName(j, "CCSGameRules", "m_iRoundEndWinnerTeam");
CCSGameRules.m_eRoundEndReason = findOffsetByName(j, "CCSGameRules", "m_eRoundEndReason");
CCSGameRules.m_bRoundEndShowTimerDefend = findOffsetByName(j, "CCSGameRules", "m_bRoundEndShowTimerDefend");
CCSGameRules.m_iRoundEndTimerTime = findOffsetByName(j, "CCSGameRules", "m_iRoundEndTimerTime");
CCSGameRules.m_sRoundEndFunFactToken = findOffsetByName(j, "CCSGameRules", "m_sRoundEndFunFactToken");
CCSGameRules.m_iRoundEndFunFactPlayerSlot = findOffsetByName(j, "CCSGameRules", "m_iRoundEndFunFactPlayerSlot");
CCSGameRules.m_iRoundEndFunFactData1 = findOffsetByName(j, "CCSGameRules", "m_iRoundEndFunFactData1");
CCSGameRules.m_iRoundEndFunFactData2 = findOffsetByName(j, "CCSGameRules", "m_iRoundEndFunFactData2");
CCSGameRules.m_iRoundEndFunFactData3 = findOffsetByName(j, "CCSGameRules", "m_iRoundEndFunFactData3");
CCSGameRules.m_sRoundEndMessage = findOffsetByName(j, "CCSGameRules", "m_sRoundEndMessage");
CCSGameRules.m_iRoundEndPlayerCount = findOffsetByName(j, "CCSGameRules", "m_iRoundEndPlayerCount");
CCSGameRules.m_bRoundEndNoMusic = findOffsetByName(j, "CCSGameRules", "m_bRoundEndNoMusic");
CCSGameRules.m_iRoundEndLegacy = findOffsetByName(j, "CCSGameRules", "m_iRoundEndLegacy");
CCSGameRules.m_nRoundEndCount = findOffsetByName(j, "CCSGameRules", "m_nRoundEndCount");
CCSGameRules.m_iRoundStartRoundNumber = findOffsetByName(j, "CCSGameRules", "m_iRoundStartRoundNumber");
CCSGameRules.m_nRoundStartCount = findOffsetByName(j, "CCSGameRules", "m_nRoundStartCount");
CCSGameRules.m_flLastPerfSampleTime = findOffsetByName(j, "CCSGameRules", "m_flLastPerfSampleTime");

// Atribuições para CAI_ChangeHintGroup
// CAI_ChangeHintGroup Offsets
CAI_ChangeHintGroup.m_iSearchType = findOffsetByName(j, "CAI_ChangeHintGroup", "m_iSearchType");
CAI_ChangeHintGroup.m_strSearchName = findOffsetByName(j, "CAI_ChangeHintGroup", "m_strSearchName");
CAI_ChangeHintGroup.m_strNewHintGroup = findOffsetByName(j, "CAI_ChangeHintGroup", "m_strNewHintGroup");
CAI_ChangeHintGroup.m_flRadius = findOffsetByName(j, "CAI_ChangeHintGroup", "m_flRadius");

// Atribuições para CColorCorrectionVolume
// CColorCorrectionVolume Offsets
CColorCorrectionVolume.m_bEnabled = findOffsetByName(j, "CColorCorrectionVolume", "m_bEnabled");
CColorCorrectionVolume.m_MaxWeight = findOffsetByName(j, "CColorCorrectionVolume", "m_MaxWeight");
CColorCorrectionVolume.m_FadeDuration = findOffsetByName(j, "CColorCorrectionVolume", "m_FadeDuration");
CColorCorrectionVolume.m_bStartDisabled = findOffsetByName(j, "CColorCorrectionVolume", "m_bStartDisabled");
CColorCorrectionVolume.m_Weight = findOffsetByName(j, "CColorCorrectionVolume", "m_Weight");
CColorCorrectionVolume.m_lookupFilename = findOffsetByName(j, "CColorCorrectionVolume", "m_lookupFilename");
CColorCorrectionVolume.m_LastEnterWeight = findOffsetByName(j, "CColorCorrectionVolume", "m_LastEnterWeight");
CColorCorrectionVolume.m_LastEnterTime = findOffsetByName(j, "CColorCorrectionVolume", "m_LastEnterTime");
CColorCorrectionVolume.m_LastExitWeight = findOffsetByName(j, "CColorCorrectionVolume", "m_LastExitWeight");
CColorCorrectionVolume.m_LastExitTime = findOffsetByName(j, "CColorCorrectionVolume", "m_LastExitTime");

// Atribuições para CFilterEnemy
// CFilterEnemy Offsets
CFilterEnemy.m_iszEnemyName = findOffsetByName(j, "CFilterEnemy", "m_iszEnemyName");
CFilterEnemy.m_flRadius = findOffsetByName(j, "CFilterEnemy", "m_flRadius");
CFilterEnemy.m_flOuterRadius = findOffsetByName(j, "CFilterEnemy", "m_flOuterRadius");
CFilterEnemy.m_nMaxSquadmatesPerEnemy = findOffsetByName(j, "CFilterEnemy", "m_nMaxSquadmatesPerEnemy");
CFilterEnemy.m_iszPlayerName = findOffsetByName(j, "CFilterEnemy", "m_iszPlayerName");

// Atribuições para CEnvCubemapFog
// CEnvCubemapFog Offsets
CEnvCubemapFog.m_flEndDistance = findOffsetByName(j, "CEnvCubemapFog", "m_flEndDistance");
CEnvCubemapFog.m_flStartDistance = findOffsetByName(j, "CEnvCubemapFog", "m_flStartDistance");
CEnvCubemapFog.m_flFogFalloffExponent = findOffsetByName(j, "CEnvCubemapFog", "m_flFogFalloffExponent");
CEnvCubemapFog.m_bHeightFogEnabled = findOffsetByName(j, "CEnvCubemapFog", "m_bHeightFogEnabled");
CEnvCubemapFog.m_flFogHeightWidth = findOffsetByName(j, "CEnvCubemapFog", "m_flFogHeightWidth");
CEnvCubemapFog.m_flFogHeightEnd = findOffsetByName(j, "CEnvCubemapFog", "m_flFogHeightEnd");
CEnvCubemapFog.m_flFogHeightStart = findOffsetByName(j, "CEnvCubemapFog", "m_flFogHeightStart");
CEnvCubemapFog.m_flFogHeightExponent = findOffsetByName(j, "CEnvCubemapFog", "m_flFogHeightExponent");
CEnvCubemapFog.m_flLODBias = findOffsetByName(j, "CEnvCubemapFog", "m_flLODBias");
CEnvCubemapFog.m_bActive = findOffsetByName(j, "CEnvCubemapFog", "m_bActive");
CEnvCubemapFog.m_bStartDisabled = findOffsetByName(j, "CEnvCubemapFog", "m_bStartDisabled");
CEnvCubemapFog.m_flFogMaxOpacity = findOffsetByName(j, "CEnvCubemapFog", "m_flFogMaxOpacity");
CEnvCubemapFog.m_nCubemapSourceType = findOffsetByName(j, "CEnvCubemapFog", "m_nCubemapSourceType");
CEnvCubemapFog.m_hSkyMaterial = findOffsetByName(j, "CEnvCubemapFog", "m_hSkyMaterial");
CEnvCubemapFog.m_iszSkyEntity = findOffsetByName(j, "CEnvCubemapFog", "m_iszSkyEntity");
CEnvCubemapFog.m_hFogCubemapTexture = findOffsetByName(j, "CEnvCubemapFog", "m_hFogCubemapTexture");
CEnvCubemapFog.m_bHasHeightFogEnd = findOffsetByName(j, "CEnvCubemapFog", "m_bHasHeightFogEnd");
CEnvCubemapFog.m_bFirstTime = findOffsetByName(j, "CEnvCubemapFog", "m_bFirstTime");

// Atribuições para CEnvExplosion
// CEnvExplosion Offsets
CEnvExplosion.m_iMagnitude = findOffsetByName(j, "CEnvExplosion", "m_iMagnitude");
CEnvExplosion.m_flPlayerDamage = findOffsetByName(j, "CEnvExplosion", "m_flPlayerDamage");
CEnvExplosion.m_iRadiusOverride = findOffsetByName(j, "CEnvExplosion", "m_iRadiusOverride");
CEnvExplosion.m_flInnerRadius = findOffsetByName(j, "CEnvExplosion", "m_flInnerRadius");
CEnvExplosion.m_spriteScale = findOffsetByName(j, "CEnvExplosion", "m_spriteScale");
CEnvExplosion.m_flDamageForce = findOffsetByName(j, "CEnvExplosion", "m_flDamageForce");
CEnvExplosion.m_hInflictor = findOffsetByName(j, "CEnvExplosion", "m_hInflictor");
CEnvExplosion.m_iCustomDamageType = findOffsetByName(j, "CEnvExplosion", "m_iCustomDamageType");
CEnvExplosion.m_bCreateDebris = findOffsetByName(j, "CEnvExplosion", "m_bCreateDebris");
CEnvExplosion.m_iszExplosionType = findOffsetByName(j, "CEnvExplosion", "m_iszExplosionType");
CEnvExplosion.m_iszCustomEffectName = findOffsetByName(j, "CEnvExplosion", "m_iszCustomEffectName");
CEnvExplosion.m_iszCustomSoundName = findOffsetByName(j, "CEnvExplosion", "m_iszCustomSoundName");
CEnvExplosion.m_iClassIgnore = findOffsetByName(j, "CEnvExplosion", "m_iClassIgnore");
CEnvExplosion.m_iClassIgnore2 = findOffsetByName(j, "CEnvExplosion", "m_iClassIgnore2");
CEnvExplosion.m_iszEntityIgnoreName = findOffsetByName(j, "CEnvExplosion", "m_iszEntityIgnoreName");
CEnvExplosion.m_hEntityIgnore = findOffsetByName(j, "CEnvExplosion", "m_hEntityIgnore");

// Atribuições para CSoundEventAABBEntity
// CSoundEventAABBEntity Offsets
CSoundEventAABBEntity.m_vMins = findOffsetByName(j, "CSoundEventAABBEntity", "m_vMins");
CSoundEventAABBEntity.m_vMaxs = findOffsetByName(j, "CSoundEventAABBEntity", "m_vMaxs");

// Atribuições para CPointCommentaryNode
// CPointCommentaryNode Offsets
CPointCommentaryNode.m_iszPreCommands = findOffsetByName(j, "CPointCommentaryNode", "m_iszPreCommands");
CPointCommentaryNode.m_iszPostCommands = findOffsetByName(j, "CPointCommentaryNode", "m_iszPostCommands");
CPointCommentaryNode.m_iszCommentaryFile = findOffsetByName(j, "CPointCommentaryNode", "m_iszCommentaryFile");
CPointCommentaryNode.m_iszViewTarget = findOffsetByName(j, "CPointCommentaryNode", "m_iszViewTarget");
CPointCommentaryNode.m_hViewTarget = findOffsetByName(j, "CPointCommentaryNode", "m_hViewTarget");
CPointCommentaryNode.m_hViewTargetAngles = findOffsetByName(j, "CPointCommentaryNode", "m_hViewTargetAngles");
CPointCommentaryNode.m_iszViewPosition = findOffsetByName(j, "CPointCommentaryNode", "m_iszViewPosition");
CPointCommentaryNode.m_hViewPosition = findOffsetByName(j, "CPointCommentaryNode", "m_hViewPosition");
CPointCommentaryNode.m_hViewPositionMover = findOffsetByName(j, "CPointCommentaryNode", "m_hViewPositionMover");
CPointCommentaryNode.m_bPreventMovement = findOffsetByName(j, "CPointCommentaryNode", "m_bPreventMovement");
CPointCommentaryNode.m_bUnderCrosshair = findOffsetByName(j, "CPointCommentaryNode", "m_bUnderCrosshair");
CPointCommentaryNode.m_bUnstoppable = findOffsetByName(j, "CPointCommentaryNode", "m_bUnstoppable");
CPointCommentaryNode.m_flFinishedTime = findOffsetByName(j, "CPointCommentaryNode", "m_flFinishedTime");
CPointCommentaryNode.m_vecFinishOrigin = findOffsetByName(j, "CPointCommentaryNode", "m_vecFinishOrigin");
CPointCommentaryNode.m_vecOriginalAngles = findOffsetByName(j, "CPointCommentaryNode", "m_vecOriginalAngles");
CPointCommentaryNode.m_vecFinishAngles = findOffsetByName(j, "CPointCommentaryNode", "m_vecFinishAngles");
CPointCommentaryNode.m_bPreventChangesWhileMoving = findOffsetByName(j, "CPointCommentaryNode", "m_bPreventChangesWhileMoving");
CPointCommentaryNode.m_bDisabled = findOffsetByName(j, "CPointCommentaryNode", "m_bDisabled");
CPointCommentaryNode.m_vecTeleportOrigin = findOffsetByName(j, "CPointCommentaryNode", "m_vecTeleportOrigin");
CPointCommentaryNode.m_flAbortedPlaybackAt = findOffsetByName(j, "CPointCommentaryNode", "m_flAbortedPlaybackAt");
CPointCommentaryNode.m_pOnCommentaryStarted = findOffsetByName(j, "CPointCommentaryNode", "m_pOnCommentaryStarted");
CPointCommentaryNode.m_pOnCommentaryStopped = findOffsetByName(j, "CPointCommentaryNode", "m_pOnCommentaryStopped");
CPointCommentaryNode.m_bActive = findOffsetByName(j, "CPointCommentaryNode", "m_bActive");
CPointCommentaryNode.m_flStartTime = findOffsetByName(j, "CPointCommentaryNode", "m_flStartTime");
CPointCommentaryNode.m_flStartTimeInCommentary = findOffsetByName(j, "CPointCommentaryNode", "m_flStartTimeInCommentary");
CPointCommentaryNode.m_iszTitle = findOffsetByName(j, "CPointCommentaryNode", "m_iszTitle");
CPointCommentaryNode.m_iszSpeakers = findOffsetByName(j, "CPointCommentaryNode", "m_iszSpeakers");
CPointCommentaryNode.m_iNodeNumber = findOffsetByName(j, "CPointCommentaryNode", "m_iNodeNumber");
CPointCommentaryNode.m_iNodeNumberMax = findOffsetByName(j, "CPointCommentaryNode", "m_iNodeNumberMax");
CPointCommentaryNode.m_bListenedTo = findOffsetByName(j, "CPointCommentaryNode", "m_bListenedTo");

// Atribuições para CPointClientUIWorldPanel
// CPointClientUIWorldPanel Offsets
CPointClientUIWorldPanel.m_bIgnoreInput = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bIgnoreInput");
CPointClientUIWorldPanel.m_bLit = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bLit");
CPointClientUIWorldPanel.m_bFollowPlayerAcrossTeleport = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");
CPointClientUIWorldPanel.m_flWidth = findOffsetByName(j, "CPointClientUIWorldPanel", "m_flWidth");
CPointClientUIWorldPanel.m_flHeight = findOffsetByName(j, "CPointClientUIWorldPanel", "m_flHeight");
CPointClientUIWorldPanel.m_flDPI = findOffsetByName(j, "CPointClientUIWorldPanel", "m_flDPI");
CPointClientUIWorldPanel.m_flInteractDistance = findOffsetByName(j, "CPointClientUIWorldPanel", "m_flInteractDistance");
CPointClientUIWorldPanel.m_flDepthOffset = findOffsetByName(j, "CPointClientUIWorldPanel", "m_flDepthOffset");
CPointClientUIWorldPanel.m_unOwnerContext = findOffsetByName(j, "CPointClientUIWorldPanel", "m_unOwnerContext");
CPointClientUIWorldPanel.m_unHorizontalAlign = findOffsetByName(j, "CPointClientUIWorldPanel", "m_unHorizontalAlign");
CPointClientUIWorldPanel.m_unVerticalAlign = findOffsetByName(j, "CPointClientUIWorldPanel", "m_unVerticalAlign");
CPointClientUIWorldPanel.m_unOrientation = findOffsetByName(j, "CPointClientUIWorldPanel", "m_unOrientation");
CPointClientUIWorldPanel.m_bAllowInteractionFromAllSceneWorlds = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");
CPointClientUIWorldPanel.m_vecCSSClasses = findOffsetByName(j, "CPointClientUIWorldPanel", "m_vecCSSClasses");
CPointClientUIWorldPanel.m_bOpaque = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bOpaque");
CPointClientUIWorldPanel.m_bNoDepth = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bNoDepth");
CPointClientUIWorldPanel.m_bRenderBackface = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bRenderBackface");
CPointClientUIWorldPanel.m_bUseOffScreenIndicator = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator");
CPointClientUIWorldPanel.m_bExcludeFromSaveGames = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames");
CPointClientUIWorldPanel.m_bGrabbable = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bGrabbable");
CPointClientUIWorldPanel.m_bOnlyRenderToTexture = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture");
CPointClientUIWorldPanel.m_bDisableMipGen = findOffsetByName(j, "CPointClientUIWorldPanel", "m_bDisableMipGen");
CPointClientUIWorldPanel.m_nExplicitImageLayout = findOffsetByName(j, "CPointClientUIWorldPanel", "m_nExplicitImageLayout");

// Atribuições para CFilterContext
// CFilterContext Offsets
CFilterContext.m_iFilterContext = findOffsetByName(j, "CFilterContext", "m_iFilterContext");

// Atribuições para CFilterAttributeInt
// CFilterAttributeInt Offsets
CFilterAttributeInt.m_sAttributeName = findOffsetByName(j, "CFilterAttributeInt", "m_sAttributeName");

// Atribuições para CAISound
// CAISound Offsets
CAISound.m_iSoundType = findOffsetByName(j, "CAISound", "m_iSoundType");
CAISound.m_iSoundFlags = findOffsetByName(j, "CAISound", "m_iSoundFlags");
CAISound.m_iVolume = findOffsetByName(j, "CAISound", "m_iVolume");
CAISound.m_iSoundIndex = findOffsetByName(j, "CAISound", "m_iSoundIndex");
CAISound.m_flDuration = findOffsetByName(j, "CAISound", "m_flDuration");
CAISound.m_iszProxyEntityName = findOffsetByName(j, "CAISound", "m_iszProxyEntityName");

// Atribuições para CPointEntityFinder
// CPointEntityFinder Offsets
CPointEntityFinder.m_hEntity = findOffsetByName(j, "CPointEntityFinder", "m_hEntity");
CPointEntityFinder.m_iFilterName = findOffsetByName(j, "CPointEntityFinder", "m_iFilterName");
CPointEntityFinder.m_hFilter = findOffsetByName(j, "CPointEntityFinder", "m_hFilter");
CPointEntityFinder.m_iRefName = findOffsetByName(j, "CPointEntityFinder", "m_iRefName");
CPointEntityFinder.m_hReference = findOffsetByName(j, "CPointEntityFinder", "m_hReference");
CPointEntityFinder.m_FindMethod = findOffsetByName(j, "CPointEntityFinder", "m_FindMethod");
CPointEntityFinder.m_OnFoundEntity = findOffsetByName(j, "CPointEntityFinder", "m_OnFoundEntity");

// Atribuições para CEnvSky
// CEnvSky Offsets
CEnvSky.m_hSkyMaterial = findOffsetByName(j, "CEnvSky", "m_hSkyMaterial");
CEnvSky.m_hSkyMaterialLightingOnly = findOffsetByName(j, "CEnvSky", "m_hSkyMaterialLightingOnly");
CEnvSky.m_bStartDisabled = findOffsetByName(j, "CEnvSky", "m_bStartDisabled");
CEnvSky.m_vTintColor = findOffsetByName(j, "CEnvSky", "m_vTintColor");
CEnvSky.m_vTintColorLightingOnly = findOffsetByName(j, "CEnvSky", "m_vTintColorLightingOnly");
CEnvSky.m_flBrightnessScale = findOffsetByName(j, "CEnvSky", "m_flBrightnessScale");
CEnvSky.m_nFogType = findOffsetByName(j, "CEnvSky", "m_nFogType");
CEnvSky.m_flFogMinStart = findOffsetByName(j, "CEnvSky", "m_flFogMinStart");
CEnvSky.m_flFogMinEnd = findOffsetByName(j, "CEnvSky", "m_flFogMinEnd");
CEnvSky.m_flFogMaxStart = findOffsetByName(j, "CEnvSky", "m_flFogMaxStart");
CEnvSky.m_flFogMaxEnd = findOffsetByName(j, "CEnvSky", "m_flFogMaxEnd");
CEnvSky.m_bEnabled = findOffsetByName(j, "CEnvSky", "m_bEnabled");

// Atribuições para CPointVelocitySensor
// CPointVelocitySensor Offsets
CPointVelocitySensor.m_hTargetEntity = findOffsetByName(j, "CPointVelocitySensor", "m_hTargetEntity");
CPointVelocitySensor.m_vecAxis = findOffsetByName(j, "CPointVelocitySensor", "m_vecAxis");
CPointVelocitySensor.m_bEnabled = findOffsetByName(j, "CPointVelocitySensor", "m_bEnabled");
CPointVelocitySensor.m_fPrevVelocity = findOffsetByName(j, "CPointVelocitySensor", "m_fPrevVelocity");
CPointVelocitySensor.m_flAvgInterval = findOffsetByName(j, "CPointVelocitySensor", "m_flAvgInterval");
CPointVelocitySensor.m_Velocity = findOffsetByName(j, "CPointVelocitySensor", "m_Velocity");

// Atribuições para CFilterMassGreater
// CFilterMassGreater Offsets
CFilterMassGreater.m_fFilterMass = findOffsetByName(j, "CFilterMassGreater", "m_fFilterMass");

// Atribuições para FilterTeam
// FilterTeam Offsets
FilterTeam.m_iFilterTeam = findOffsetByName(j, "FilterTeam", "m_iFilterTeam");

// Atribuições para CFuncTankTrain
// CFuncTankTrain Offsets
CFuncTankTrain.m_OnDeath = findOffsetByName(j, "CFuncTankTrain", "m_OnDeath");

// Atribuições para CMarkupVolumeTagged_NavGame
// CMarkupVolumeTagged_NavGame Offsets
CMarkupVolumeTagged_NavGame.m_bFloodFillAttribute = findOffsetByName(j, "CMarkupVolumeTagged_NavGame", "m_bFloodFillAttribute");

// Atribuições para CBuyZone
// CBuyZone Offsets
CBuyZone.m_LegacyTeamNum = findOffsetByName(j, "CBuyZone", "m_LegacyTeamNum");

// Atribuições para CPhysForce
// CPhysForce Offsets
CPhysForce.m_nameAttach = findOffsetByName(j, "CPhysForce", "m_nameAttach");
CPhysForce.m_force = findOffsetByName(j, "CPhysForce", "m_force");
CPhysForce.m_forceTime = findOffsetByName(j, "CPhysForce", "m_forceTime");
CPhysForce.m_attachedObject = findOffsetByName(j, "CPhysForce", "m_attachedObject");
CPhysForce.m_wasRestored = findOffsetByName(j, "CPhysForce", "m_wasRestored");
CPhysForce.m_integrator = findOffsetByName(j, "CPhysForce", "m_integrator");

// Atribuições para CLogicDistanceAutosave
// CLogicDistanceAutosave Offsets
CLogicDistanceAutosave.m_iszTargetEntity = findOffsetByName(j, "CLogicDistanceAutosave", "m_iszTargetEntity");
CLogicDistanceAutosave.m_flDistanceToPlayer = findOffsetByName(j, "CLogicDistanceAutosave", "m_flDistanceToPlayer");
CLogicDistanceAutosave.m_bForceNewLevelUnit = findOffsetByName(j, "CLogicDistanceAutosave", "m_bForceNewLevelUnit");
CLogicDistanceAutosave.m_bCheckCough = findOffsetByName(j, "CLogicDistanceAutosave", "m_bCheckCough");
CLogicDistanceAutosave.m_bThinkDangerous = findOffsetByName(j, "CLogicDistanceAutosave", "m_bThinkDangerous");
CLogicDistanceAutosave.m_flDangerousTime = findOffsetByName(j, "CLogicDistanceAutosave", "m_flDangerousTime");

// Atribuições para CSoundOpvarSetAABBEntity
// CSoundOpvarSetAABBEntity Offsets
CSoundOpvarSetAABBEntity.m_vDistanceInnerMins = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMins");
CSoundOpvarSetAABBEntity.m_vDistanceInnerMaxs = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMaxs");
CSoundOpvarSetAABBEntity.m_vDistanceOuterMins = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMins");
CSoundOpvarSetAABBEntity.m_vDistanceOuterMaxs = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMaxs");
CSoundOpvarSetAABBEntity.m_nAABBDirection = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_nAABBDirection");
CSoundOpvarSetAABBEntity.m_vInnerMins = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vInnerMins");
CSoundOpvarSetAABBEntity.m_vInnerMaxs = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vInnerMaxs");
CSoundOpvarSetAABBEntity.m_vOuterMins = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vOuterMins");
CSoundOpvarSetAABBEntity.m_vOuterMaxs = findOffsetByName(j, "CSoundOpvarSetAABBEntity", "m_vOuterMaxs");

// Atribuições para CEnvWindShared__WindVariationEvent_t
// CEnvWindShared__WindVariationEvent_t Offsets
CEnvWindShared__WindVariationEvent_t.m_flWindAngleVariation = findOffsetByName(j, "CEnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation");
CEnvWindShared__WindVariationEvent_t.m_flWindSpeedVariation = findOffsetByName(j, "CEnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation");

// Atribuições para CScriptTriggerOnce
// CScriptTriggerOnce Offsets
CScriptTriggerOnce.m_vExtent = findOffsetByName(j, "CScriptTriggerOnce", "m_vExtent");

// Atribuições para CFlashbangProjectile
// CFlashbangProjectile Offsets
CFlashbangProjectile.m_flTimeToDetonate = findOffsetByName(j, "CFlashbangProjectile", "m_flTimeToDetonate");
CFlashbangProjectile.m_numOpponentsHit = findOffsetByName(j, "CFlashbangProjectile", "m_numOpponentsHit");
CFlashbangProjectile.m_numTeammatesHit = findOffsetByName(j, "CFlashbangProjectile", "m_numTeammatesHit");

// Atribuições para CPointClientUIWorldTextPanel
// CPointClientUIWorldTextPanel Offsets
CPointClientUIWorldTextPanel.m_messageText = findOffsetByName(j, "CPointClientUIWorldTextPanel", "m_messageText");

// Atribuições para CLogicBranch
// CLogicBranch Offsets
CLogicBranch.m_bInValue = findOffsetByName(j, "CLogicBranch", "m_bInValue");
CLogicBranch.m_Listeners = findOffsetByName(j, "CLogicBranch", "m_Listeners");
CLogicBranch.m_OnTrue = findOffsetByName(j, "CLogicBranch", "m_OnTrue");
CLogicBranch.m_OnFalse = findOffsetByName(j, "CLogicBranch", "m_OnFalse");

// Atribuições para CBaseButton
// CBaseButton Offsets
CBaseButton.m_angMoveEntitySpace = findOffsetByName(j, "CBaseButton", "m_angMoveEntitySpace");
CBaseButton.m_fStayPushed = findOffsetByName(j, "CBaseButton", "m_fStayPushed");
CBaseButton.m_fRotating = findOffsetByName(j, "CBaseButton", "m_fRotating");
CBaseButton.m_ls = findOffsetByName(j, "CBaseButton", "m_ls");
CBaseButton.m_sUseSound = findOffsetByName(j, "CBaseButton", "m_sUseSound");
CBaseButton.m_sLockedSound = findOffsetByName(j, "CBaseButton", "m_sLockedSound");
CBaseButton.m_sUnlockedSound = findOffsetByName(j, "CBaseButton", "m_sUnlockedSound");
CBaseButton.m_sOverrideAnticipationName = findOffsetByName(j, "CBaseButton", "m_sOverrideAnticipationName");
CBaseButton.m_bLocked = findOffsetByName(j, "CBaseButton", "m_bLocked");
CBaseButton.m_bDisabled = findOffsetByName(j, "CBaseButton", "m_bDisabled");
CBaseButton.m_flUseLockedTime = findOffsetByName(j, "CBaseButton", "m_flUseLockedTime");
CBaseButton.m_bSolidBsp = findOffsetByName(j, "CBaseButton", "m_bSolidBsp");
CBaseButton.m_OnDamaged = findOffsetByName(j, "CBaseButton", "m_OnDamaged");
CBaseButton.m_OnPressed = findOffsetByName(j, "CBaseButton", "m_OnPressed");
CBaseButton.m_OnUseLocked = findOffsetByName(j, "CBaseButton", "m_OnUseLocked");
CBaseButton.m_OnIn = findOffsetByName(j, "CBaseButton", "m_OnIn");
CBaseButton.m_OnOut = findOffsetByName(j, "CBaseButton", "m_OnOut");
CBaseButton.m_nState = findOffsetByName(j, "CBaseButton", "m_nState");
CBaseButton.m_hConstraint = findOffsetByName(j, "CBaseButton", "m_hConstraint");
CBaseButton.m_hConstraintParent = findOffsetByName(j, "CBaseButton", "m_hConstraintParent");
CBaseButton.m_bForceNpcExclude = findOffsetByName(j, "CBaseButton", "m_bForceNpcExclude");
CBaseButton.m_sGlowEntity = findOffsetByName(j, "CBaseButton", "m_sGlowEntity");
CBaseButton.m_glowEntity = findOffsetByName(j, "CBaseButton", "m_glowEntity");
CBaseButton.m_usable = findOffsetByName(j, "CBaseButton", "m_usable");
CBaseButton.m_szDisplayText = findOffsetByName(j, "CBaseButton", "m_szDisplayText");

// Atribuições para CPhysLength
// CPhysLength Offsets
CPhysLength.m_offset = findOffsetByName(j, "CPhysLength", "m_offset");
CPhysLength.m_vecAttach = findOffsetByName(j, "CPhysLength", "m_vecAttach");
CPhysLength.m_addLength = findOffsetByName(j, "CPhysLength", "m_addLength");
CPhysLength.m_minLength = findOffsetByName(j, "CPhysLength", "m_minLength");
CPhysLength.m_totalLength = findOffsetByName(j, "CPhysLength", "m_totalLength");
CPhysLength.m_bEnableCollision = findOffsetByName(j, "CPhysLength", "m_bEnableCollision");

// Atribuições para CLogicNPCCounter
// CLogicNPCCounter Offsets
CLogicNPCCounter.m_OnMinCountAll = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinCountAll");
CLogicNPCCounter.m_OnMaxCountAll = findOffsetByName(j, "CLogicNPCCounter", "m_OnMaxCountAll");
CLogicNPCCounter.m_OnFactorAll = findOffsetByName(j, "CLogicNPCCounter", "m_OnFactorAll");
CLogicNPCCounter.m_OnMinPlayerDistAll = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinPlayerDistAll");
CLogicNPCCounter.m_OnMinCount_1 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinCount_1");
CLogicNPCCounter.m_OnMaxCount_1 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMaxCount_1");
CLogicNPCCounter.m_OnFactor_1 = findOffsetByName(j, "CLogicNPCCounter", "m_OnFactor_1");
CLogicNPCCounter.m_OnMinPlayerDist_1 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinPlayerDist_1");
CLogicNPCCounter.m_OnMinCount_2 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinCount_2");
CLogicNPCCounter.m_OnMaxCount_2 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMaxCount_2");
CLogicNPCCounter.m_OnFactor_2 = findOffsetByName(j, "CLogicNPCCounter", "m_OnFactor_2");
CLogicNPCCounter.m_OnMinPlayerDist_2 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinPlayerDist_2");
CLogicNPCCounter.m_OnMinCount_3 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinCount_3");
CLogicNPCCounter.m_OnMaxCount_3 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMaxCount_3");
CLogicNPCCounter.m_OnFactor_3 = findOffsetByName(j, "CLogicNPCCounter", "m_OnFactor_3");
CLogicNPCCounter.m_OnMinPlayerDist_3 = findOffsetByName(j, "CLogicNPCCounter", "m_OnMinPlayerDist_3");
CLogicNPCCounter.m_hSource = findOffsetByName(j, "CLogicNPCCounter", "m_hSource");
CLogicNPCCounter.m_iszSourceEntityName = findOffsetByName(j, "CLogicNPCCounter", "m_iszSourceEntityName");
CLogicNPCCounter.m_flDistanceMax = findOffsetByName(j, "CLogicNPCCounter", "m_flDistanceMax");
CLogicNPCCounter.m_bDisabled = findOffsetByName(j, "CLogicNPCCounter", "m_bDisabled");
CLogicNPCCounter.m_nMinCountAll = findOffsetByName(j, "CLogicNPCCounter", "m_nMinCountAll");
CLogicNPCCounter.m_nMaxCountAll = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxCountAll");
CLogicNPCCounter.m_nMinFactorAll = findOffsetByName(j, "CLogicNPCCounter", "m_nMinFactorAll");
CLogicNPCCounter.m_nMaxFactorAll = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxFactorAll");
CLogicNPCCounter.m_iszNPCClassname_1 = findOffsetByName(j, "CLogicNPCCounter", "m_iszNPCClassname_1");
CLogicNPCCounter.m_nNPCState_1 = findOffsetByName(j, "CLogicNPCCounter", "m_nNPCState_1");
CLogicNPCCounter.m_bInvertState_1 = findOffsetByName(j, "CLogicNPCCounter", "m_bInvertState_1");
CLogicNPCCounter.m_nMinCount_1 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinCount_1");
CLogicNPCCounter.m_nMaxCount_1 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxCount_1");
CLogicNPCCounter.m_nMinFactor_1 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinFactor_1");
CLogicNPCCounter.m_nMaxFactor_1 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxFactor_1");
CLogicNPCCounter.m_flDefaultDist_1 = findOffsetByName(j, "CLogicNPCCounter", "m_flDefaultDist_1");
CLogicNPCCounter.m_iszNPCClassname_2 = findOffsetByName(j, "CLogicNPCCounter", "m_iszNPCClassname_2");
CLogicNPCCounter.m_nNPCState_2 = findOffsetByName(j, "CLogicNPCCounter", "m_nNPCState_2");
CLogicNPCCounter.m_bInvertState_2 = findOffsetByName(j, "CLogicNPCCounter", "m_bInvertState_2");
CLogicNPCCounter.m_nMinCount_2 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinCount_2");
CLogicNPCCounter.m_nMaxCount_2 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxCount_2");
CLogicNPCCounter.m_nMinFactor_2 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinFactor_2");
CLogicNPCCounter.m_nMaxFactor_2 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxFactor_2");
CLogicNPCCounter.m_flDefaultDist_2 = findOffsetByName(j, "CLogicNPCCounter", "m_flDefaultDist_2");
CLogicNPCCounter.m_iszNPCClassname_3 = findOffsetByName(j, "CLogicNPCCounter", "m_iszNPCClassname_3");
CLogicNPCCounter.m_nNPCState_3 = findOffsetByName(j, "CLogicNPCCounter", "m_nNPCState_3");
CLogicNPCCounter.m_bInvertState_3 = findOffsetByName(j, "CLogicNPCCounter", "m_bInvertState_3");
CLogicNPCCounter.m_nMinCount_3 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinCount_3");
CLogicNPCCounter.m_nMaxCount_3 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxCount_3");
CLogicNPCCounter.m_nMinFactor_3 = findOffsetByName(j, "CLogicNPCCounter", "m_nMinFactor_3");
CLogicNPCCounter.m_nMaxFactor_3 = findOffsetByName(j, "CLogicNPCCounter", "m_nMaxFactor_3");
CLogicNPCCounter.m_flDefaultDist_3 = findOffsetByName(j, "CLogicNPCCounter", "m_flDefaultDist_3");

// Atribuições para CCSGOViewModel
// CCSGOViewModel Offsets
CCSGOViewModel.m_bShouldIgnoreOffsetAndAccuracy = findOffsetByName(j, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy");

// Atribuições para CWeaponShield
// CWeaponShield Offsets
CWeaponShield.m_flBulletDamageAbsorbed = findOffsetByName(j, "CWeaponShield", "m_flBulletDamageAbsorbed");
CWeaponShield.m_flLastBulletHitSoundTime = findOffsetByName(j, "CWeaponShield", "m_flLastBulletHitSoundTime");
CWeaponShield.m_flDisplayHealth = findOffsetByName(j, "CWeaponShield", "m_flDisplayHealth");

// Atribuições para CBlood
// CBlood Offsets
CBlood.m_vecSprayAngles = findOffsetByName(j, "CBlood", "m_vecSprayAngles");
CBlood.m_vecSprayDir = findOffsetByName(j, "CBlood", "m_vecSprayDir");
CBlood.m_flAmount = findOffsetByName(j, "CBlood", "m_flAmount");
CBlood.m_Color = findOffsetByName(j, "CBlood", "m_Color");

// Atribuições para CEnvFade
// CEnvFade Offsets
CEnvFade.m_fadeColor = findOffsetByName(j, "CEnvFade", "m_fadeColor");
CEnvFade.m_Duration = findOffsetByName(j, "CEnvFade", "m_Duration");
CEnvFade.m_HoldDuration = findOffsetByName(j, "CEnvFade", "m_HoldDuration");
CEnvFade.m_OnBeginFade = findOffsetByName(j, "CEnvFade", "m_OnBeginFade");

// Atribuições para CBreakableProp
// CBreakableProp Offsets
CBreakableProp.m_CPropDataComponent = findOffsetByName(j, "CBreakableProp", "m_CPropDataComponent");
CBreakableProp.m_OnBreak = findOffsetByName(j, "CBreakableProp", "m_OnBreak");
CBreakableProp.m_OnHealthChanged = findOffsetByName(j, "CBreakableProp", "m_OnHealthChanged");
CBreakableProp.m_OnTakeDamage = findOffsetByName(j, "CBreakableProp", "m_OnTakeDamage");
CBreakableProp.m_impactEnergyScale = findOffsetByName(j, "CBreakableProp", "m_impactEnergyScale");
CBreakableProp.m_iMinHealthDmg = findOffsetByName(j, "CBreakableProp", "m_iMinHealthDmg");
CBreakableProp.m_preferredCarryAngles = findOffsetByName(j, "CBreakableProp", "m_preferredCarryAngles");
CBreakableProp.m_flPressureDelay = findOffsetByName(j, "CBreakableProp", "m_flPressureDelay");
CBreakableProp.m_flDefBurstScale = findOffsetByName(j, "CBreakableProp", "m_flDefBurstScale");
CBreakableProp.m_vDefBurstOffset = findOffsetByName(j, "CBreakableProp", "m_vDefBurstOffset");
CBreakableProp.m_hBreaker = findOffsetByName(j, "CBreakableProp", "m_hBreaker");
CBreakableProp.m_PerformanceMode = findOffsetByName(j, "CBreakableProp", "m_PerformanceMode");
CBreakableProp.m_flPreventDamageBeforeTime = findOffsetByName(j, "CBreakableProp", "m_flPreventDamageBeforeTime");
CBreakableProp.m_BreakableContentsType = findOffsetByName(j, "CBreakableProp", "m_BreakableContentsType");
CBreakableProp.m_strBreakableContentsPropGroupOverride = findOffsetByName(j, "CBreakableProp", "m_strBreakableContentsPropGroupOverride");
CBreakableProp.m_strBreakableContentsParticleOverride = findOffsetByName(j, "CBreakableProp", "m_strBreakableContentsParticleOverride");
CBreakableProp.m_bHasBreakPiecesOrCommands = findOffsetByName(j, "CBreakableProp", "m_bHasBreakPiecesOrCommands");
CBreakableProp.m_explodeDamage = findOffsetByName(j, "CBreakableProp", "m_explodeDamage");
CBreakableProp.m_explodeRadius = findOffsetByName(j, "CBreakableProp", "m_explodeRadius");
CBreakableProp.m_explosionDelay = findOffsetByName(j, "CBreakableProp", "m_explosionDelay");
CBreakableProp.m_explosionBuildupSound = findOffsetByName(j, "CBreakableProp", "m_explosionBuildupSound");
CBreakableProp.m_explosionCustomEffect = findOffsetByName(j, "CBreakableProp", "m_explosionCustomEffect");
CBreakableProp.m_explosionCustomSound = findOffsetByName(j, "CBreakableProp", "m_explosionCustomSound");
CBreakableProp.m_explosionModifier = findOffsetByName(j, "CBreakableProp", "m_explosionModifier");
CBreakableProp.m_hPhysicsAttacker = findOffsetByName(j, "CBreakableProp", "m_hPhysicsAttacker");
CBreakableProp.m_flLastPhysicsInfluenceTime = findOffsetByName(j, "CBreakableProp", "m_flLastPhysicsInfluenceTime");
CBreakableProp.m_bOriginalBlockLOS = findOffsetByName(j, "CBreakableProp", "m_bOriginalBlockLOS");
CBreakableProp.m_flDefaultFadeScale = findOffsetByName(j, "CBreakableProp", "m_flDefaultFadeScale");
CBreakableProp.m_hLastAttacker = findOffsetByName(j, "CBreakableProp", "m_hLastAttacker");
CBreakableProp.m_hFlareEnt = findOffsetByName(j, "CBreakableProp", "m_hFlareEnt");
CBreakableProp.m_bUsePuntSound = findOffsetByName(j, "CBreakableProp", "m_bUsePuntSound");
CBreakableProp.m_iszPuntSound = findOffsetByName(j, "CBreakableProp", "m_iszPuntSound");
CBreakableProp.m_noGhostCollision = findOffsetByName(j, "CBreakableProp", "m_noGhostCollision");

// Atribuições para CBaseCombatCharacter
// CBaseCombatCharacter Offsets
CBaseCombatCharacter.m_bForceServerRagdoll = findOffsetByName(j, "CBaseCombatCharacter", "m_bForceServerRagdoll");
CBaseCombatCharacter.m_hMyWearables = findOffsetByName(j, "CBaseCombatCharacter", "m_hMyWearables");
CBaseCombatCharacter.m_impactEnergyScale = findOffsetByName(j, "CBaseCombatCharacter", "m_impactEnergyScale");
CBaseCombatCharacter.m_bApplyStressDamage = findOffsetByName(j, "CBaseCombatCharacter", "m_bApplyStressDamage");
CBaseCombatCharacter.m_iDamageCount = findOffsetByName(j, "CBaseCombatCharacter", "m_iDamageCount");
CBaseCombatCharacter.m_pVecRelationships = findOffsetByName(j, "CBaseCombatCharacter", "m_pVecRelationships");
CBaseCombatCharacter.m_strRelationships = findOffsetByName(j, "CBaseCombatCharacter", "m_strRelationships");
CBaseCombatCharacter.m_eHull = findOffsetByName(j, "CBaseCombatCharacter", "m_eHull");
CBaseCombatCharacter.m_nNavHullIdx = findOffsetByName(j, "CBaseCombatCharacter", "m_nNavHullIdx");

// Atribuições para CInferno
// CInferno Offsets
CInferno.m_firePositions = findOffsetByName(j, "CInferno", "m_firePositions");
CInferno.m_fireParentPositions = findOffsetByName(j, "CInferno", "m_fireParentPositions");
CInferno.m_bFireIsBurning = findOffsetByName(j, "CInferno", "m_bFireIsBurning");
CInferno.m_BurnNormal = findOffsetByName(j, "CInferno", "m_BurnNormal");
CInferno.m_fireCount = findOffsetByName(j, "CInferno", "m_fireCount");
CInferno.m_nInfernoType = findOffsetByName(j, "CInferno", "m_nInfernoType");
CInferno.m_nFireEffectTickBegin = findOffsetByName(j, "CInferno", "m_nFireEffectTickBegin");
CInferno.m_nFireLifetime = findOffsetByName(j, "CInferno", "m_nFireLifetime");
CInferno.m_bInPostEffectTime = findOffsetByName(j, "CInferno", "m_bInPostEffectTime");
CInferno.m_nFiresExtinguishCount = findOffsetByName(j, "CInferno", "m_nFiresExtinguishCount");
CInferno.m_bWasCreatedInSmoke = findOffsetByName(j, "CInferno", "m_bWasCreatedInSmoke");
CInferno.m_extent = findOffsetByName(j, "CInferno", "m_extent");
CInferno.m_damageTimer = findOffsetByName(j, "CInferno", "m_damageTimer");
CInferno.m_damageRampTimer = findOffsetByName(j, "CInferno", "m_damageRampTimer");
CInferno.m_splashVelocity = findOffsetByName(j, "CInferno", "m_splashVelocity");
CInferno.m_InitialSplashVelocity = findOffsetByName(j, "CInferno", "m_InitialSplashVelocity");
CInferno.m_startPos = findOffsetByName(j, "CInferno", "m_startPos");
CInferno.m_vecOriginalSpawnLocation = findOffsetByName(j, "CInferno", "m_vecOriginalSpawnLocation");
CInferno.m_activeTimer = findOffsetByName(j, "CInferno", "m_activeTimer");
CInferno.m_fireSpawnOffset = findOffsetByName(j, "CInferno", "m_fireSpawnOffset");
CInferno.m_nMaxFlames = findOffsetByName(j, "CInferno", "m_nMaxFlames");
CInferno.m_nSpreadCount = findOffsetByName(j, "CInferno", "m_nSpreadCount");
CInferno.m_BookkeepingTimer = findOffsetByName(j, "CInferno", "m_BookkeepingTimer");
CInferno.m_NextSpreadTimer = findOffsetByName(j, "CInferno", "m_NextSpreadTimer");
CInferno.m_nSourceItemDefIndex = findOffsetByName(j, "CInferno", "m_nSourceItemDefIndex");

// Atribuições para CEnvGlobal
// CEnvGlobal Offsets
CEnvGlobal.m_outCounter = findOffsetByName(j, "CEnvGlobal", "m_outCounter");
CEnvGlobal.m_globalstate = findOffsetByName(j, "CEnvGlobal", "m_globalstate");
CEnvGlobal.m_triggermode = findOffsetByName(j, "CEnvGlobal", "m_triggermode");
CEnvGlobal.m_initialstate = findOffsetByName(j, "CEnvGlobal", "m_initialstate");
CEnvGlobal.m_counter = findOffsetByName(j, "CEnvGlobal", "m_counter");

// Atribuições para CBaseFilter
// CBaseFilter Offsets
CBaseFilter.m_bNegated = findOffsetByName(j, "CBaseFilter", "m_bNegated");
CBaseFilter.m_OnPass = findOffsetByName(j, "CBaseFilter", "m_OnPass");
CBaseFilter.m_OnFail = findOffsetByName(j, "CBaseFilter", "m_OnFail");

// Atribuições para CTeam
// CTeam Offsets
CTeam.m_aPlayerControllers = findOffsetByName(j, "CTeam", "m_aPlayerControllers");
CTeam.m_aPlayers = findOffsetByName(j, "CTeam", "m_aPlayers");
CTeam.m_iScore = findOffsetByName(j, "CTeam", "m_iScore");
CTeam.m_szTeamname = findOffsetByName(j, "CTeam", "m_szTeamname");

// Atribuições para CSprite
// CSprite Offsets
CSprite.m_hSpriteMaterial = findOffsetByName(j, "CSprite", "m_hSpriteMaterial");
CSprite.m_hAttachedToEntity = findOffsetByName(j, "CSprite", "m_hAttachedToEntity");
CSprite.m_nAttachment = findOffsetByName(j, "CSprite", "m_nAttachment");
CSprite.m_flSpriteFramerate = findOffsetByName(j, "CSprite", "m_flSpriteFramerate");
CSprite.m_flFrame = findOffsetByName(j, "CSprite", "m_flFrame");
CSprite.m_flDieTime = findOffsetByName(j, "CSprite", "m_flDieTime");
CSprite.m_nBrightness = findOffsetByName(j, "CSprite", "m_nBrightness");
CSprite.m_flBrightnessDuration = findOffsetByName(j, "CSprite", "m_flBrightnessDuration");
CSprite.m_flSpriteScale = findOffsetByName(j, "CSprite", "m_flSpriteScale");
CSprite.m_flScaleDuration = findOffsetByName(j, "CSprite", "m_flScaleDuration");
CSprite.m_bWorldSpaceScale = findOffsetByName(j, "CSprite", "m_bWorldSpaceScale");
CSprite.m_flGlowProxySize = findOffsetByName(j, "CSprite", "m_flGlowProxySize");
CSprite.m_flHDRColorScale = findOffsetByName(j, "CSprite", "m_flHDRColorScale");
CSprite.m_flLastTime = findOffsetByName(j, "CSprite", "m_flLastTime");
CSprite.m_flMaxFrame = findOffsetByName(j, "CSprite", "m_flMaxFrame");
CSprite.m_flStartScale = findOffsetByName(j, "CSprite", "m_flStartScale");
CSprite.m_flDestScale = findOffsetByName(j, "CSprite", "m_flDestScale");
CSprite.m_flScaleTimeStart = findOffsetByName(j, "CSprite", "m_flScaleTimeStart");
CSprite.m_nStartBrightness = findOffsetByName(j, "CSprite", "m_nStartBrightness");
CSprite.m_nDestBrightness = findOffsetByName(j, "CSprite", "m_nDestBrightness");
CSprite.m_flBrightnessTimeStart = findOffsetByName(j, "CSprite", "m_flBrightnessTimeStart");
CSprite.m_nSpriteWidth = findOffsetByName(j, "CSprite", "m_nSpriteWidth");
CSprite.m_nSpriteHeight = findOffsetByName(j, "CSprite", "m_nSpriteHeight");

// Atribuições para CPathMover
// CPathMover Offsets
CPathMover.m_vecPathNodes = findOffsetByName(j, "CPathMover", "m_vecPathNodes");
CPathMover.m_flPathLength = findOffsetByName(j, "CPathMover", "m_flPathLength");
CPathMover.m_bClosedLoop = findOffsetByName(j, "CPathMover", "m_bClosedLoop");

// Atribuições para CChicken
// CChicken Offsets
CChicken.m_AttributeManager = findOffsetByName(j, "CChicken", "m_AttributeManager");
CChicken.m_updateTimer = findOffsetByName(j, "CChicken", "m_updateTimer");
CChicken.m_stuckAnchor = findOffsetByName(j, "CChicken", "m_stuckAnchor");
CChicken.m_stuckTimer = findOffsetByName(j, "CChicken", "m_stuckTimer");
CChicken.m_collisionStuckTimer = findOffsetByName(j, "CChicken", "m_collisionStuckTimer");
CChicken.m_isOnGround = findOffsetByName(j, "CChicken", "m_isOnGround");
CChicken.m_vFallVelocity = findOffsetByName(j, "CChicken", "m_vFallVelocity");
CChicken.m_desiredActivity = findOffsetByName(j, "CChicken", "m_desiredActivity");
CChicken.m_currentActivity = findOffsetByName(j, "CChicken", "m_currentActivity");
CChicken.m_activityTimer = findOffsetByName(j, "CChicken", "m_activityTimer");
CChicken.m_turnRate = findOffsetByName(j, "CChicken", "m_turnRate");
CChicken.m_fleeFrom = findOffsetByName(j, "CChicken", "m_fleeFrom");
CChicken.m_moveRateThrottleTimer = findOffsetByName(j, "CChicken", "m_moveRateThrottleTimer");
CChicken.m_startleTimer = findOffsetByName(j, "CChicken", "m_startleTimer");
CChicken.m_vocalizeTimer = findOffsetByName(j, "CChicken", "m_vocalizeTimer");
CChicken.m_flWhenZombified = findOffsetByName(j, "CChicken", "m_flWhenZombified");
CChicken.m_jumpedThisFrame = findOffsetByName(j, "CChicken", "m_jumpedThisFrame");
CChicken.m_leader = findOffsetByName(j, "CChicken", "m_leader");
CChicken.m_reuseTimer = findOffsetByName(j, "CChicken", "m_reuseTimer");
CChicken.m_hasBeenUsed = findOffsetByName(j, "CChicken", "m_hasBeenUsed");
CChicken.m_jumpTimer = findOffsetByName(j, "CChicken", "m_jumpTimer");
CChicken.m_flLastJumpTime = findOffsetByName(j, "CChicken", "m_flLastJumpTime");
CChicken.m_bInJump = findOffsetByName(j, "CChicken", "m_bInJump");
CChicken.m_repathTimer = findOffsetByName(j, "CChicken", "m_repathTimer");
CChicken.m_vecPathGoal = findOffsetByName(j, "CChicken", "m_vecPathGoal");
CChicken.m_flActiveFollowStartTime = findOffsetByName(j, "CChicken", "m_flActiveFollowStartTime");
CChicken.m_followMinuteTimer = findOffsetByName(j, "CChicken", "m_followMinuteTimer");
CChicken.m_BlockDirectionTimer = findOffsetByName(j, "CChicken", "m_BlockDirectionTimer");

// Atribuições para CChangeLevel
// CChangeLevel Offsets
CChangeLevel.m_sMapName = findOffsetByName(j, "CChangeLevel", "m_sMapName");
CChangeLevel.m_sLandmarkName = findOffsetByName(j, "CChangeLevel", "m_sLandmarkName");
CChangeLevel.m_OnChangeLevel = findOffsetByName(j, "CChangeLevel", "m_OnChangeLevel");
CChangeLevel.m_bTouched = findOffsetByName(j, "CChangeLevel", "m_bTouched");
CChangeLevel.m_bNoTouch = findOffsetByName(j, "CChangeLevel", "m_bNoTouch");
CChangeLevel.m_bNewChapter = findOffsetByName(j, "CChangeLevel", "m_bNewChapter");
CChangeLevel.m_bOnChangeLevelFired = findOffsetByName(j, "CChangeLevel", "m_bOnChangeLevelFired");

// Atribuições para CTriggerLerpObject
// CTriggerLerpObject Offsets
CTriggerLerpObject.m_iszLerpTarget = findOffsetByName(j, "CTriggerLerpObject", "m_iszLerpTarget");
CTriggerLerpObject.m_hLerpTarget = findOffsetByName(j, "CTriggerLerpObject", "m_hLerpTarget");
CTriggerLerpObject.m_iszLerpTargetAttachment = findOffsetByName(j, "CTriggerLerpObject", "m_iszLerpTargetAttachment");
CTriggerLerpObject.m_hLerpTargetAttachment = findOffsetByName(j, "CTriggerLerpObject", "m_hLerpTargetAttachment");
CTriggerLerpObject.m_flLerpDuration = findOffsetByName(j, "CTriggerLerpObject", "m_flLerpDuration");
CTriggerLerpObject.m_bLerpRestoreMoveType = findOffsetByName(j, "CTriggerLerpObject", "m_bLerpRestoreMoveType");
CTriggerLerpObject.m_bSingleLerpObject = findOffsetByName(j, "CTriggerLerpObject", "m_bSingleLerpObject");
CTriggerLerpObject.m_vecLerpingObjects = findOffsetByName(j, "CTriggerLerpObject", "m_vecLerpingObjects");
CTriggerLerpObject.m_iszLerpEffect = findOffsetByName(j, "CTriggerLerpObject", "m_iszLerpEffect");
CTriggerLerpObject.m_iszLerpSound = findOffsetByName(j, "CTriggerLerpObject", "m_iszLerpSound");
CTriggerLerpObject.m_bAttachTouchingObject = findOffsetByName(j, "CTriggerLerpObject", "m_bAttachTouchingObject");
CTriggerLerpObject.m_hEntityToWaitForDisconnect = findOffsetByName(j, "CTriggerLerpObject", "m_hEntityToWaitForDisconnect");
CTriggerLerpObject.m_OnLerpStarted = findOffsetByName(j, "CTriggerLerpObject", "m_OnLerpStarted");
CTriggerLerpObject.m_OnLerpFinished = findOffsetByName(j, "CTriggerLerpObject", "m_OnLerpFinished");

// Atribuições para CBaseTrigger
// CBaseTrigger Offsets
CBaseTrigger.m_bDisabled = findOffsetByName(j, "CBaseTrigger", "m_bDisabled");
CBaseTrigger.m_iFilterName = findOffsetByName(j, "CBaseTrigger", "m_iFilterName");
CBaseTrigger.m_hFilter = findOffsetByName(j, "CBaseTrigger", "m_hFilter");
CBaseTrigger.m_OnStartTouch = findOffsetByName(j, "CBaseTrigger", "m_OnStartTouch");
CBaseTrigger.m_OnStartTouchAll = findOffsetByName(j, "CBaseTrigger", "m_OnStartTouchAll");
CBaseTrigger.m_OnEndTouch = findOffsetByName(j, "CBaseTrigger", "m_OnEndTouch");
CBaseTrigger.m_OnEndTouchAll = findOffsetByName(j, "CBaseTrigger", "m_OnEndTouchAll");
CBaseTrigger.m_OnTouching = findOffsetByName(j, "CBaseTrigger", "m_OnTouching");
CBaseTrigger.m_OnTouchingEachEntity = findOffsetByName(j, "CBaseTrigger", "m_OnTouchingEachEntity");
CBaseTrigger.m_OnNotTouching = findOffsetByName(j, "CBaseTrigger", "m_OnNotTouching");
CBaseTrigger.m_hTouchingEntities = findOffsetByName(j, "CBaseTrigger", "m_hTouchingEntities");
CBaseTrigger.m_bClientSidePredicted = findOffsetByName(j, "CBaseTrigger", "m_bClientSidePredicted");

// Atribuições para CEconEntity
// CEconEntity Offsets
CEconEntity.m_AttributeManager = findOffsetByName(j, "CEconEntity", "m_AttributeManager");
CEconEntity.m_OriginalOwnerXuidLow = findOffsetByName(j, "CEconEntity", "m_OriginalOwnerXuidLow");
CEconEntity.m_OriginalOwnerXuidHigh = findOffsetByName(j, "CEconEntity", "m_OriginalOwnerXuidHigh");
CEconEntity.m_nFallbackPaintKit = findOffsetByName(j, "CEconEntity", "m_nFallbackPaintKit");
CEconEntity.m_nFallbackSeed = findOffsetByName(j, "CEconEntity", "m_nFallbackSeed");
CEconEntity.m_flFallbackWear = findOffsetByName(j, "CEconEntity", "m_flFallbackWear");
CEconEntity.m_nFallbackStatTrak = findOffsetByName(j, "CEconEntity", "m_nFallbackStatTrak");
CEconEntity.m_hOldProvidee = findOffsetByName(j, "CEconEntity", "m_hOldProvidee");
CEconEntity.m_iOldOwnerClass = findOffsetByName(j, "CEconEntity", "m_iOldOwnerClass");

// Atribuições para CPointWorldText
// CPointWorldText Offsets
CPointWorldText.m_messageText = findOffsetByName(j, "CPointWorldText", "m_messageText");
CPointWorldText.m_FontName = findOffsetByName(j, "CPointWorldText", "m_FontName");
CPointWorldText.m_BackgroundMaterialName = findOffsetByName(j, "CPointWorldText", "m_BackgroundMaterialName");
CPointWorldText.m_bEnabled = findOffsetByName(j, "CPointWorldText", "m_bEnabled");
CPointWorldText.m_bFullbright = findOffsetByName(j, "CPointWorldText", "m_bFullbright");
CPointWorldText.m_flWorldUnitsPerPx = findOffsetByName(j, "CPointWorldText", "m_flWorldUnitsPerPx");
CPointWorldText.m_flFontSize = findOffsetByName(j, "CPointWorldText", "m_flFontSize");
CPointWorldText.m_flDepthOffset = findOffsetByName(j, "CPointWorldText", "m_flDepthOffset");
CPointWorldText.m_bDrawBackground = findOffsetByName(j, "CPointWorldText", "m_bDrawBackground");
CPointWorldText.m_flBackgroundBorderWidth = findOffsetByName(j, "CPointWorldText", "m_flBackgroundBorderWidth");
CPointWorldText.m_flBackgroundBorderHeight = findOffsetByName(j, "CPointWorldText", "m_flBackgroundBorderHeight");
CPointWorldText.m_flBackgroundWorldToUV = findOffsetByName(j, "CPointWorldText", "m_flBackgroundWorldToUV");
CPointWorldText.m_Color = findOffsetByName(j, "CPointWorldText", "m_Color");
CPointWorldText.m_nJustifyHorizontal = findOffsetByName(j, "CPointWorldText", "m_nJustifyHorizontal");
CPointWorldText.m_nJustifyVertical = findOffsetByName(j, "CPointWorldText", "m_nJustifyVertical");
CPointWorldText.m_nReorientMode = findOffsetByName(j, "CPointWorldText", "m_nReorientMode");

// Atribuições para CSoundAreaEntityOrientedBox
// CSoundAreaEntityOrientedBox Offsets
CSoundAreaEntityOrientedBox.m_vMin = findOffsetByName(j, "CSoundAreaEntityOrientedBox", "m_vMin");
CSoundAreaEntityOrientedBox.m_vMax = findOffsetByName(j, "CSoundAreaEntityOrientedBox", "m_vMax");

// Atribuições para CTriggerPhysics
// CTriggerPhysics Offsets
CTriggerPhysics.m_gravityScale = findOffsetByName(j, "CTriggerPhysics", "m_gravityScale");
CTriggerPhysics.m_linearLimit = findOffsetByName(j, "CTriggerPhysics", "m_linearLimit");
CTriggerPhysics.m_linearDamping = findOffsetByName(j, "CTriggerPhysics", "m_linearDamping");
CTriggerPhysics.m_angularLimit = findOffsetByName(j, "CTriggerPhysics", "m_angularLimit");
CTriggerPhysics.m_angularDamping = findOffsetByName(j, "CTriggerPhysics", "m_angularDamping");
CTriggerPhysics.m_linearForce = findOffsetByName(j, "CTriggerPhysics", "m_linearForce");
CTriggerPhysics.m_flFrequency = findOffsetByName(j, "CTriggerPhysics", "m_flFrequency");
CTriggerPhysics.m_flDampingRatio = findOffsetByName(j, "CTriggerPhysics", "m_flDampingRatio");
CTriggerPhysics.m_vecLinearForcePointAt = findOffsetByName(j, "CTriggerPhysics", "m_vecLinearForcePointAt");
CTriggerPhysics.m_bCollapseToForcePoint = findOffsetByName(j, "CTriggerPhysics", "m_bCollapseToForcePoint");
CTriggerPhysics.m_vecLinearForcePointAtWorld = findOffsetByName(j, "CTriggerPhysics", "m_vecLinearForcePointAtWorld");
CTriggerPhysics.m_vecLinearForceDirection = findOffsetByName(j, "CTriggerPhysics", "m_vecLinearForceDirection");
CTriggerPhysics.m_bConvertToDebrisWhenPossible = findOffsetByName(j, "CTriggerPhysics", "m_bConvertToDebrisWhenPossible");

// Atribuições para CFuncShatterglass
// CFuncShatterglass Offsets
CFuncShatterglass.m_matPanelTransform = findOffsetByName(j, "CFuncShatterglass", "m_matPanelTransform");
CFuncShatterglass.m_matPanelTransformWsTemp = findOffsetByName(j, "CFuncShatterglass", "m_matPanelTransformWsTemp");
CFuncShatterglass.m_vecShatterGlassShards = findOffsetByName(j, "CFuncShatterglass", "m_vecShatterGlassShards");
CFuncShatterglass.m_PanelSize = findOffsetByName(j, "CFuncShatterglass", "m_PanelSize");
CFuncShatterglass.m_flLastShatterSoundEmitTime = findOffsetByName(j, "CFuncShatterglass", "m_flLastShatterSoundEmitTime");
CFuncShatterglass.m_flLastCleanupTime = findOffsetByName(j, "CFuncShatterglass", "m_flLastCleanupTime");
CFuncShatterglass.m_flInitAtTime = findOffsetByName(j, "CFuncShatterglass", "m_flInitAtTime");
CFuncShatterglass.m_flGlassThickness = findOffsetByName(j, "CFuncShatterglass", "m_flGlassThickness");
CFuncShatterglass.m_flSpawnInvulnerability = findOffsetByName(j, "CFuncShatterglass", "m_flSpawnInvulnerability");
CFuncShatterglass.m_bBreakSilent = findOffsetByName(j, "CFuncShatterglass", "m_bBreakSilent");
CFuncShatterglass.m_bBreakShardless = findOffsetByName(j, "CFuncShatterglass", "m_bBreakShardless");
CFuncShatterglass.m_bBroken = findOffsetByName(j, "CFuncShatterglass", "m_bBroken");
CFuncShatterglass.m_bGlassNavIgnore = findOffsetByName(j, "CFuncShatterglass", "m_bGlassNavIgnore");
CFuncShatterglass.m_bGlassInFrame = findOffsetByName(j, "CFuncShatterglass", "m_bGlassInFrame");
CFuncShatterglass.m_bStartBroken = findOffsetByName(j, "CFuncShatterglass", "m_bStartBroken");
CFuncShatterglass.m_iInitialDamageType = findOffsetByName(j, "CFuncShatterglass", "m_iInitialDamageType");
CFuncShatterglass.m_szDamagePositioningEntityName01 = findOffsetByName(j, "CFuncShatterglass", "m_szDamagePositioningEntityName01");
CFuncShatterglass.m_szDamagePositioningEntityName02 = findOffsetByName(j, "CFuncShatterglass", "m_szDamagePositioningEntityName02");
CFuncShatterglass.m_szDamagePositioningEntityName03 = findOffsetByName(j, "CFuncShatterglass", "m_szDamagePositioningEntityName03");
CFuncShatterglass.m_szDamagePositioningEntityName04 = findOffsetByName(j, "CFuncShatterglass", "m_szDamagePositioningEntityName04");
CFuncShatterglass.m_vInitialDamagePositions = findOffsetByName(j, "CFuncShatterglass", "m_vInitialDamagePositions");
CFuncShatterglass.m_vExtraDamagePositions = findOffsetByName(j, "CFuncShatterglass", "m_vExtraDamagePositions");
CFuncShatterglass.m_vInitialPanelVertices = findOffsetByName(j, "CFuncShatterglass", "m_vInitialPanelVertices");
CFuncShatterglass.m_OnBroken = findOffsetByName(j, "CFuncShatterglass", "m_OnBroken");
CFuncShatterglass.m_iSurfaceType = findOffsetByName(j, "CFuncShatterglass", "m_iSurfaceType");
CFuncShatterglass.m_hMaterialDamageBase = findOffsetByName(j, "CFuncShatterglass", "m_hMaterialDamageBase");

// Atribuições para CSoundEventSphereEntity
// CSoundEventSphereEntity Offsets
CSoundEventSphereEntity.m_flRadius = findOffsetByName(j, "CSoundEventSphereEntity", "m_flRadius");

// Atribuições para CPlantedC4
// CPlantedC4 Offsets
CPlantedC4.m_bBombTicking = findOffsetByName(j, "CPlantedC4", "m_bBombTicking");
CPlantedC4.m_flC4Blow = findOffsetByName(j, "CPlantedC4", "m_flC4Blow");
CPlantedC4.m_nBombSite = findOffsetByName(j, "CPlantedC4", "m_nBombSite");
CPlantedC4.m_nSourceSoundscapeHash = findOffsetByName(j, "CPlantedC4", "m_nSourceSoundscapeHash");
CPlantedC4.m_AttributeManager = findOffsetByName(j, "CPlantedC4", "m_AttributeManager");
CPlantedC4.m_OnBombDefused = findOffsetByName(j, "CPlantedC4", "m_OnBombDefused");
CPlantedC4.m_OnBombBeginDefuse = findOffsetByName(j, "CPlantedC4", "m_OnBombBeginDefuse");
CPlantedC4.m_OnBombDefuseAborted = findOffsetByName(j, "CPlantedC4", "m_OnBombDefuseAborted");
CPlantedC4.m_bCannotBeDefused = findOffsetByName(j, "CPlantedC4", "m_bCannotBeDefused");
CPlantedC4.m_entitySpottedState = findOffsetByName(j, "CPlantedC4", "m_entitySpottedState");
CPlantedC4.m_nSpotRules = findOffsetByName(j, "CPlantedC4", "m_nSpotRules");
CPlantedC4.m_bTrainingPlacedByPlayer = findOffsetByName(j, "CPlantedC4", "m_bTrainingPlacedByPlayer");
CPlantedC4.m_bHasExploded = findOffsetByName(j, "CPlantedC4", "m_bHasExploded");
CPlantedC4.m_flTimerLength = findOffsetByName(j, "CPlantedC4", "m_flTimerLength");
CPlantedC4.m_bBeingDefused = findOffsetByName(j, "CPlantedC4", "m_bBeingDefused");
CPlantedC4.m_fLastDefuseTime = findOffsetByName(j, "CPlantedC4", "m_fLastDefuseTime");
CPlantedC4.m_flDefuseLength = findOffsetByName(j, "CPlantedC4", "m_flDefuseLength");
CPlantedC4.m_flDefuseCountDown = findOffsetByName(j, "CPlantedC4", "m_flDefuseCountDown");
CPlantedC4.m_bBombDefused = findOffsetByName(j, "CPlantedC4", "m_bBombDefused");
CPlantedC4.m_hBombDefuser = findOffsetByName(j, "CPlantedC4", "m_hBombDefuser");
CPlantedC4.m_hControlPanel = findOffsetByName(j, "CPlantedC4", "m_hControlPanel");
CPlantedC4.m_iProgressBarTime = findOffsetByName(j, "CPlantedC4", "m_iProgressBarTime");
CPlantedC4.m_bVoiceAlertFired = findOffsetByName(j, "CPlantedC4", "m_bVoiceAlertFired");
CPlantedC4.m_bVoiceAlertPlayed = findOffsetByName(j, "CPlantedC4", "m_bVoiceAlertPlayed");
CPlantedC4.m_flNextBotBeepTime = findOffsetByName(j, "CPlantedC4", "m_flNextBotBeepTime");
CPlantedC4.m_angCatchUpToPlayerEye = findOffsetByName(j, "CPlantedC4", "m_angCatchUpToPlayerEye");
CPlantedC4.m_flLastSpinDetectionTime = findOffsetByName(j, "CPlantedC4", "m_flLastSpinDetectionTime");

// Atribuições para CPointClientUIDialog
// CPointClientUIDialog Offsets
CPointClientUIDialog.m_hActivator = findOffsetByName(j, "CPointClientUIDialog", "m_hActivator");
CPointClientUIDialog.m_bStartEnabled = findOffsetByName(j, "CPointClientUIDialog", "m_bStartEnabled");

// Atribuições para CEnvSplash
// CEnvSplash Offsets
CEnvSplash.m_flScale = findOffsetByName(j, "CEnvSplash", "m_flScale");

// Atribuições para CPointCameraVFOV
// CPointCameraVFOV Offsets
CPointCameraVFOV.m_flVerticalFOV = findOffsetByName(j, "CPointCameraVFOV", "m_flVerticalFOV");

// Atribuições para CWeaponTaser
// CWeaponTaser Offsets
CWeaponTaser.m_fFireTime = findOffsetByName(j, "CWeaponTaser", "m_fFireTime");
CWeaponTaser.m_nLastAttackTick = findOffsetByName(j, "CWeaponTaser", "m_nLastAttackTick");

// Atribuições para CMarkupVolume
// CMarkupVolume Offsets
CMarkupVolume.m_bDisabled = findOffsetByName(j, "CMarkupVolume", "m_bDisabled");

// Atribuições para CMessage
// CMessage Offsets
CMessage.m_iszMessage = findOffsetByName(j, "CMessage", "m_iszMessage");
CMessage.m_MessageVolume = findOffsetByName(j, "CMessage", "m_MessageVolume");
CMessage.m_MessageAttenuation = findOffsetByName(j, "CMessage", "m_MessageAttenuation");
CMessage.m_Radius = findOffsetByName(j, "CMessage", "m_Radius");
CMessage.m_sNoise = findOffsetByName(j, "CMessage", "m_sNoise");
CMessage.m_OnShowMessage = findOffsetByName(j, "CMessage", "m_OnShowMessage");

// Atribuições para CLogicGameEventListener
// CLogicGameEventListener Offsets
CLogicGameEventListener.m_OnEventFired = findOffsetByName(j, "CLogicGameEventListener", "m_OnEventFired");
CLogicGameEventListener.m_iszGameEventName = findOffsetByName(j, "CLogicGameEventListener", "m_iszGameEventName");
CLogicGameEventListener.m_iszGameEventItem = findOffsetByName(j, "CLogicGameEventListener", "m_iszGameEventItem");
CLogicGameEventListener.m_bEnabled = findOffsetByName(j, "CLogicGameEventListener", "m_bEnabled");
CLogicGameEventListener.m_bStartDisabled = findOffsetByName(j, "CLogicGameEventListener", "m_bStartDisabled");

// Atribuições para CBreakable
// CBreakable Offsets
CBreakable.m_CPropDataComponent = findOffsetByName(j, "CBreakable", "m_CPropDataComponent");
CBreakable.m_Material = findOffsetByName(j, "CBreakable", "m_Material");
CBreakable.m_hBreaker = findOffsetByName(j, "CBreakable", "m_hBreaker");
CBreakable.m_Explosion = findOffsetByName(j, "CBreakable", "m_Explosion");
CBreakable.m_iszSpawnObject = findOffsetByName(j, "CBreakable", "m_iszSpawnObject");
CBreakable.m_flPressureDelay = findOffsetByName(j, "CBreakable", "m_flPressureDelay");
CBreakable.m_iMinHealthDmg = findOffsetByName(j, "CBreakable", "m_iMinHealthDmg");
CBreakable.m_iszPropData = findOffsetByName(j, "CBreakable", "m_iszPropData");
CBreakable.m_impactEnergyScale = findOffsetByName(j, "CBreakable", "m_impactEnergyScale");
CBreakable.m_nOverrideBlockLOS = findOffsetByName(j, "CBreakable", "m_nOverrideBlockLOS");
CBreakable.m_OnBreak = findOffsetByName(j, "CBreakable", "m_OnBreak");
CBreakable.m_OnHealthChanged = findOffsetByName(j, "CBreakable", "m_OnHealthChanged");
CBreakable.m_PerformanceMode = findOffsetByName(j, "CBreakable", "m_PerformanceMode");
CBreakable.m_hPhysicsAttacker = findOffsetByName(j, "CBreakable", "m_hPhysicsAttacker");
CBreakable.m_flLastPhysicsInfluenceTime = findOffsetByName(j, "CBreakable", "m_flLastPhysicsInfluenceTime");

// Atribuições para CBaseToggle
// CBaseToggle Offsets
CBaseToggle.m_toggle_state = findOffsetByName(j, "CBaseToggle", "m_toggle_state");
CBaseToggle.m_flMoveDistance = findOffsetByName(j, "CBaseToggle", "m_flMoveDistance");
CBaseToggle.m_flWait = findOffsetByName(j, "CBaseToggle", "m_flWait");
CBaseToggle.m_flLip = findOffsetByName(j, "CBaseToggle", "m_flLip");
CBaseToggle.m_bAlwaysFireBlockedOutputs = findOffsetByName(j, "CBaseToggle", "m_bAlwaysFireBlockedOutputs");
CBaseToggle.m_vecPosition1 = findOffsetByName(j, "CBaseToggle", "m_vecPosition1");
CBaseToggle.m_vecPosition2 = findOffsetByName(j, "CBaseToggle", "m_vecPosition2");
CBaseToggle.m_vecMoveAng = findOffsetByName(j, "CBaseToggle", "m_vecMoveAng");
CBaseToggle.m_vecAngle1 = findOffsetByName(j, "CBaseToggle", "m_vecAngle1");
CBaseToggle.m_vecAngle2 = findOffsetByName(j, "CBaseToggle", "m_vecAngle2");
CBaseToggle.m_flHeight = findOffsetByName(j, "CBaseToggle", "m_flHeight");
CBaseToggle.m_hActivator = findOffsetByName(j, "CBaseToggle", "m_hActivator");
CBaseToggle.m_vecFinalDest = findOffsetByName(j, "CBaseToggle", "m_vecFinalDest");
CBaseToggle.m_vecFinalAngle = findOffsetByName(j, "CBaseToggle", "m_vecFinalAngle");
CBaseToggle.m_movementType = findOffsetByName(j, "CBaseToggle", "m_movementType");
CBaseToggle.m_sMaster = findOffsetByName(j, "CBaseToggle", "m_sMaster");

// Atribuições para CMomentaryRotButton
// CMomentaryRotButton Offsets
CMomentaryRotButton.m_Position = findOffsetByName(j, "CMomentaryRotButton", "m_Position");
CMomentaryRotButton.m_OnUnpressed = findOffsetByName(j, "CMomentaryRotButton", "m_OnUnpressed");
CMomentaryRotButton.m_OnFullyOpen = findOffsetByName(j, "CMomentaryRotButton", "m_OnFullyOpen");
CMomentaryRotButton.m_OnFullyClosed = findOffsetByName(j, "CMomentaryRotButton", "m_OnFullyClosed");
CMomentaryRotButton.m_OnReachedPosition = findOffsetByName(j, "CMomentaryRotButton", "m_OnReachedPosition");
CMomentaryRotButton.m_lastUsed = findOffsetByName(j, "CMomentaryRotButton", "m_lastUsed");
CMomentaryRotButton.m_start = findOffsetByName(j, "CMomentaryRotButton", "m_start");
CMomentaryRotButton.m_end = findOffsetByName(j, "CMomentaryRotButton", "m_end");
CMomentaryRotButton.m_IdealYaw = findOffsetByName(j, "CMomentaryRotButton", "m_IdealYaw");
CMomentaryRotButton.m_sNoise = findOffsetByName(j, "CMomentaryRotButton", "m_sNoise");
CMomentaryRotButton.m_bUpdateTarget = findOffsetByName(j, "CMomentaryRotButton", "m_bUpdateTarget");
CMomentaryRotButton.m_direction = findOffsetByName(j, "CMomentaryRotButton", "m_direction");
CMomentaryRotButton.m_returnSpeed = findOffsetByName(j, "CMomentaryRotButton", "m_returnSpeed");
CMomentaryRotButton.m_flStartPosition = findOffsetByName(j, "CMomentaryRotButton", "m_flStartPosition");

// Atribuições para CGameText
// CGameText Offsets
CGameText.m_iszMessage = findOffsetByName(j, "CGameText", "m_iszMessage");
CGameText.m_textParms = findOffsetByName(j, "CGameText", "m_textParms");

// Atribuições para CTextureBasedAnimatable
// CTextureBasedAnimatable Offsets
CTextureBasedAnimatable.m_bLoop = findOffsetByName(j, "CTextureBasedAnimatable", "m_bLoop");
CTextureBasedAnimatable.m_flFPS = findOffsetByName(j, "CTextureBasedAnimatable", "m_flFPS");
CTextureBasedAnimatable.m_hPositionKeys = findOffsetByName(j, "CTextureBasedAnimatable", "m_hPositionKeys");
CTextureBasedAnimatable.m_hRotationKeys = findOffsetByName(j, "CTextureBasedAnimatable", "m_hRotationKeys");
CTextureBasedAnimatable.m_vAnimationBoundsMin = findOffsetByName(j, "CTextureBasedAnimatable", "m_vAnimationBoundsMin");
CTextureBasedAnimatable.m_vAnimationBoundsMax = findOffsetByName(j, "CTextureBasedAnimatable", "m_vAnimationBoundsMax");
CTextureBasedAnimatable.m_flStartTime = findOffsetByName(j, "CTextureBasedAnimatable", "m_flStartTime");
CTextureBasedAnimatable.m_flStartFrame = findOffsetByName(j, "CTextureBasedAnimatable", "m_flStartFrame");

// Atribuições para CMarkupVolumeWithRef
// CMarkupVolumeWithRef Offsets
CMarkupVolumeWithRef.m_bUseRef = findOffsetByName(j, "CMarkupVolumeWithRef", "m_bUseRef");
CMarkupVolumeWithRef.m_vRefPos = findOffsetByName(j, "CMarkupVolumeWithRef", "m_vRefPos");
CMarkupVolumeWithRef.m_flRefDot = findOffsetByName(j, "CMarkupVolumeWithRef", "m_flRefDot");

// Atribuições para CPhysThruster
// CPhysThruster Offsets
CPhysThruster.m_localOrigin = findOffsetByName(j, "CPhysThruster", "m_localOrigin");

// Atribuições para CShatterGlassShardPhysics
// CShatterGlassShardPhysics Offsets
CShatterGlassShardPhysics.m_bDebris = findOffsetByName(j, "CShatterGlassShardPhysics", "m_bDebris");
CShatterGlassShardPhysics.m_hParentShard = findOffsetByName(j, "CShatterGlassShardPhysics", "m_hParentShard");
CShatterGlassShardPhysics.m_ShardDesc = findOffsetByName(j, "CShatterGlassShardPhysics", "m_ShardDesc");

// Atribuições para CFilterModel
// CFilterModel Offsets
CFilterModel.m_iFilterModel = findOffsetByName(j, "CFilterModel", "m_iFilterModel");

// Atribuições para CCSPlayerPawnBase
// CCSPlayerPawnBase Offsets
CCSPlayerPawnBase.m_CTouchExpansionComponent = findOffsetByName(j, "CCSPlayerPawnBase", "m_CTouchExpansionComponent");
CCSPlayerPawnBase.m_pPingServices = findOffsetByName(j, "CCSPlayerPawnBase", "m_pPingServices");
CCSPlayerPawnBase.m_pViewModelServices = findOffsetByName(j, "CCSPlayerPawnBase", "m_pViewModelServices");
CCSPlayerPawnBase.m_blindUntilTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_blindUntilTime");
CCSPlayerPawnBase.m_blindStartTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_blindStartTime");
CCSPlayerPawnBase.m_iPlayerState = findOffsetByName(j, "CCSPlayerPawnBase", "m_iPlayerState");
CCSPlayerPawnBase.m_bRespawning = findOffsetByName(j, "CCSPlayerPawnBase", "m_bRespawning");
CCSPlayerPawnBase.m_fImmuneToGunGameDamageTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_fImmuneToGunGameDamageTime");
CCSPlayerPawnBase.m_bGunGameImmunity = findOffsetByName(j, "CCSPlayerPawnBase", "m_bGunGameImmunity");
CCSPlayerPawnBase.m_fMolotovDamageTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_fMolotovDamageTime");
CCSPlayerPawnBase.m_bHasMovedSinceSpawn = findOffsetByName(j, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn");
CCSPlayerPawnBase.m_iNumSpawns = findOffsetByName(j, "CCSPlayerPawnBase", "m_iNumSpawns");
CCSPlayerPawnBase.m_flIdleTimeSinceLastAction = findOffsetByName(j, "CCSPlayerPawnBase", "m_flIdleTimeSinceLastAction");
CCSPlayerPawnBase.m_fNextRadarUpdateTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_fNextRadarUpdateTime");
CCSPlayerPawnBase.m_flFlashDuration = findOffsetByName(j, "CCSPlayerPawnBase", "m_flFlashDuration");
CCSPlayerPawnBase.m_flFlashMaxAlpha = findOffsetByName(j, "CCSPlayerPawnBase", "m_flFlashMaxAlpha");
CCSPlayerPawnBase.m_flProgressBarStartTime = findOffsetByName(j, "CCSPlayerPawnBase", "m_flProgressBarStartTime");
CCSPlayerPawnBase.m_iProgressBarDuration = findOffsetByName(j, "CCSPlayerPawnBase", "m_iProgressBarDuration");
CCSPlayerPawnBase.m_angEyeAngles = findOffsetByName(j, "CCSPlayerPawnBase", "m_angEyeAngles");
CCSPlayerPawnBase.m_wasNotKilledNaturally = findOffsetByName(j, "CCSPlayerPawnBase", "m_wasNotKilledNaturally");
CCSPlayerPawnBase.m_bCommittingSuicideOnTeamChange = findOffsetByName(j, "CCSPlayerPawnBase", "m_bCommittingSuicideOnTeamChange");
CCSPlayerPawnBase.m_hOriginalController = findOffsetByName(j, "CCSPlayerPawnBase", "m_hOriginalController");

// Atribuições para CPathTrack
// CPathTrack Offsets
CPathTrack.m_pnext = findOffsetByName(j, "CPathTrack", "m_pnext");
CPathTrack.m_pprevious = findOffsetByName(j, "CPathTrack", "m_pprevious");
CPathTrack.m_paltpath = findOffsetByName(j, "CPathTrack", "m_paltpath");
CPathTrack.m_flRadius = findOffsetByName(j, "CPathTrack", "m_flRadius");
CPathTrack.m_length = findOffsetByName(j, "CPathTrack", "m_length");
CPathTrack.m_altName = findOffsetByName(j, "CPathTrack", "m_altName");
CPathTrack.m_nIterVal = findOffsetByName(j, "CPathTrack", "m_nIterVal");
CPathTrack.m_eOrientationType = findOffsetByName(j, "CPathTrack", "m_eOrientationType");
CPathTrack.m_OnPass = findOffsetByName(j, "CPathTrack", "m_OnPass");

// Atribuições para CLogicDistanceCheck
// CLogicDistanceCheck Offsets
CLogicDistanceCheck.m_iszEntityA = findOffsetByName(j, "CLogicDistanceCheck", "m_iszEntityA");
CLogicDistanceCheck.m_iszEntityB = findOffsetByName(j, "CLogicDistanceCheck", "m_iszEntityB");
CLogicDistanceCheck.m_flZone1Distance = findOffsetByName(j, "CLogicDistanceCheck", "m_flZone1Distance");
CLogicDistanceCheck.m_flZone2Distance = findOffsetByName(j, "CLogicDistanceCheck", "m_flZone2Distance");
CLogicDistanceCheck.m_InZone1 = findOffsetByName(j, "CLogicDistanceCheck", "m_InZone1");
CLogicDistanceCheck.m_InZone2 = findOffsetByName(j, "CLogicDistanceCheck", "m_InZone2");
CLogicDistanceCheck.m_InZone3 = findOffsetByName(j, "CLogicDistanceCheck", "m_InZone3");

// Atribuições para COmniLight
// COmniLight Offsets
COmniLight.m_flInnerAngle = findOffsetByName(j, "COmniLight", "m_flInnerAngle");
COmniLight.m_flOuterAngle = findOffsetByName(j, "COmniLight", "m_flOuterAngle");
COmniLight.m_bShowLight = findOffsetByName(j, "COmniLight", "m_bShowLight");

// Atribuições para CInfoVisibilityBox
// CInfoVisibilityBox Offsets
CInfoVisibilityBox.m_nMode = findOffsetByName(j, "CInfoVisibilityBox", "m_nMode");
CInfoVisibilityBox.m_vBoxSize = findOffsetByName(j, "CInfoVisibilityBox", "m_vBoxSize");
CInfoVisibilityBox.m_bEnabled = findOffsetByName(j, "CInfoVisibilityBox", "m_bEnabled");

// Atribuições para CSoundOpvarSetPathCornerEntity
// CSoundOpvarSetPathCornerEntity Offsets
CSoundOpvarSetPathCornerEntity.m_flDistMinSqr = findOffsetByName(j, "CSoundOpvarSetPathCornerEntity", "m_flDistMinSqr");
CSoundOpvarSetPathCornerEntity.m_flDistMaxSqr = findOffsetByName(j, "CSoundOpvarSetPathCornerEntity", "m_flDistMaxSqr");
CSoundOpvarSetPathCornerEntity.m_iszPathCornerEntityName = findOffsetByName(j, "CSoundOpvarSetPathCornerEntity", "m_iszPathCornerEntityName");

// Atribuições para CEntityFlame
// CEntityFlame Offsets
CEntityFlame.m_hEntAttached = findOffsetByName(j, "CEntityFlame", "m_hEntAttached");
CEntityFlame.m_bCheapEffect = findOffsetByName(j, "CEntityFlame", "m_bCheapEffect");
CEntityFlame.m_flSize = findOffsetByName(j, "CEntityFlame", "m_flSize");
CEntityFlame.m_bUseHitboxes = findOffsetByName(j, "CEntityFlame", "m_bUseHitboxes");
CEntityFlame.m_iNumHitboxFires = findOffsetByName(j, "CEntityFlame", "m_iNumHitboxFires");
CEntityFlame.m_flHitboxFireScale = findOffsetByName(j, "CEntityFlame", "m_flHitboxFireScale");
CEntityFlame.m_flLifetime = findOffsetByName(j, "CEntityFlame", "m_flLifetime");
CEntityFlame.m_hAttacker = findOffsetByName(j, "CEntityFlame", "m_hAttacker");
CEntityFlame.m_iDangerSound = findOffsetByName(j, "CEntityFlame", "m_iDangerSound");
CEntityFlame.m_flDirectDamagePerSecond = findOffsetByName(j, "CEntityFlame", "m_flDirectDamagePerSecond");
CEntityFlame.m_iCustomDamageType = findOffsetByName(j, "CEntityFlame", "m_iCustomDamageType");

// Atribuições para CCSWeaponBaseGun
// CCSWeaponBaseGun Offsets
CCSWeaponBaseGun.m_zoomLevel = findOffsetByName(j, "CCSWeaponBaseGun", "m_zoomLevel");
CCSWeaponBaseGun.m_iBurstShotsRemaining = findOffsetByName(j, "CCSWeaponBaseGun", "m_iBurstShotsRemaining");
CCSWeaponBaseGun.m_silencedModelIndex = findOffsetByName(j, "CCSWeaponBaseGun", "m_silencedModelIndex");
CCSWeaponBaseGun.m_inPrecache = findOffsetByName(j, "CCSWeaponBaseGun", "m_inPrecache");
CCSWeaponBaseGun.m_bNeedsBoltAction = findOffsetByName(j, "CCSWeaponBaseGun", "m_bNeedsBoltAction");
CCSWeaponBaseGun.m_bSkillReloadAvailable = findOffsetByName(j, "CCSWeaponBaseGun", "m_bSkillReloadAvailable");
CCSWeaponBaseGun.m_bSkillReloadLiftedReloadKey = findOffsetByName(j, "CCSWeaponBaseGun", "m_bSkillReloadLiftedReloadKey");
CCSWeaponBaseGun.m_bSkillBoltInterruptAvailable = findOffsetByName(j, "CCSWeaponBaseGun", "m_bSkillBoltInterruptAvailable");
CCSWeaponBaseGun.m_bSkillBoltLiftedFireKey = findOffsetByName(j, "CCSWeaponBaseGun", "m_bSkillBoltLiftedFireKey");

// Atribuições para CBot
// CBot Offsets
CBot.m_pController = findOffsetByName(j, "CBot", "m_pController");
CBot.m_pPlayer = findOffsetByName(j, "CBot", "m_pPlayer");
CBot.m_bHasSpawned = findOffsetByName(j, "CBot", "m_bHasSpawned");
CBot.m_id = findOffsetByName(j, "CBot", "m_id");
CBot.m_isRunning = findOffsetByName(j, "CBot", "m_isRunning");
CBot.m_isCrouching = findOffsetByName(j, "CBot", "m_isCrouching");
CBot.m_forwardSpeed = findOffsetByName(j, "CBot", "m_forwardSpeed");
CBot.m_leftSpeed = findOffsetByName(j, "CBot", "m_leftSpeed");
CBot.m_verticalSpeed = findOffsetByName(j, "CBot", "m_verticalSpeed");
CBot.m_buttonFlags = findOffsetByName(j, "CBot", "m_buttonFlags");
CBot.m_jumpTimestamp = findOffsetByName(j, "CBot", "m_jumpTimestamp");
CBot.m_viewForward = findOffsetByName(j, "CBot", "m_viewForward");
CBot.m_postureStackIndex = findOffsetByName(j, "CBot", "m_postureStackIndex");

// Atribuições para CGunTarget
// CGunTarget Offsets
CGunTarget.m_on = findOffsetByName(j, "CGunTarget", "m_on");
CGunTarget.m_hTargetEnt = findOffsetByName(j, "CGunTarget", "m_hTargetEnt");
CGunTarget.m_OnDeath = findOffsetByName(j, "CGunTarget", "m_OnDeath");

// Atribuições para CSoundEventParameter
// CSoundEventParameter Offsets
CSoundEventParameter.m_iszParamName = findOffsetByName(j, "CSoundEventParameter", "m_iszParamName");
CSoundEventParameter.m_flFloatValue = findOffsetByName(j, "CSoundEventParameter", "m_flFloatValue");

// Atribuições para CMarkupVolumeTagged
// CMarkupVolumeTagged Offsets
CMarkupVolumeTagged.m_bIsGroup = findOffsetByName(j, "CMarkupVolumeTagged", "m_bIsGroup");
CMarkupVolumeTagged.m_bGroupByPrefab = findOffsetByName(j, "CMarkupVolumeTagged", "m_bGroupByPrefab");
CMarkupVolumeTagged.m_bGroupByVolume = findOffsetByName(j, "CMarkupVolumeTagged", "m_bGroupByVolume");
CMarkupVolumeTagged.m_bGroupOtherGroups = findOffsetByName(j, "CMarkupVolumeTagged", "m_bGroupOtherGroups");
CMarkupVolumeTagged.m_bIsInGroup = findOffsetByName(j, "CMarkupVolumeTagged", "m_bIsInGroup");

// Atribuições para CTestEffect
// CTestEffect Offsets
CTestEffect.m_iLoop = findOffsetByName(j, "CTestEffect", "m_iLoop");
CTestEffect.m_iBeam = findOffsetByName(j, "CTestEffect", "m_iBeam");
CTestEffect.m_pBeam = findOffsetByName(j, "CTestEffect", "m_pBeam");
CTestEffect.m_flBeamTime = findOffsetByName(j, "CTestEffect", "m_flBeamTime");
CTestEffect.m_flStartTime = findOffsetByName(j, "CTestEffect", "m_flStartTime");

// Atribuições para CScriptNavBlocker
// CScriptNavBlocker Offsets
CScriptNavBlocker.m_vExtent = findOffsetByName(j, "CScriptNavBlocker", "m_vExtent");

// Atribuições para CConstraintAnchor
// CConstraintAnchor Offsets
CConstraintAnchor.m_massScale = findOffsetByName(j, "CConstraintAnchor", "m_massScale");

// Atribuições para CSceneEntity
// CSceneEntity Offsets
CSceneEntity.m_iszSceneFile = findOffsetByName(j, "CSceneEntity", "m_iszSceneFile");
CSceneEntity.m_iszResumeSceneFile = findOffsetByName(j, "CSceneEntity", "m_iszResumeSceneFile");
CSceneEntity.m_iszTarget1 = findOffsetByName(j, "CSceneEntity", "m_iszTarget1");
CSceneEntity.m_iszTarget2 = findOffsetByName(j, "CSceneEntity", "m_iszTarget2");
CSceneEntity.m_iszTarget3 = findOffsetByName(j, "CSceneEntity", "m_iszTarget3");
CSceneEntity.m_iszTarget4 = findOffsetByName(j, "CSceneEntity", "m_iszTarget4");
CSceneEntity.m_iszTarget5 = findOffsetByName(j, "CSceneEntity", "m_iszTarget5");
CSceneEntity.m_iszTarget6 = findOffsetByName(j, "CSceneEntity", "m_iszTarget6");
CSceneEntity.m_iszTarget7 = findOffsetByName(j, "CSceneEntity", "m_iszTarget7");
CSceneEntity.m_iszTarget8 = findOffsetByName(j, "CSceneEntity", "m_iszTarget8");
CSceneEntity.m_hTarget1 = findOffsetByName(j, "CSceneEntity", "m_hTarget1");
CSceneEntity.m_hTarget2 = findOffsetByName(j, "CSceneEntity", "m_hTarget2");
CSceneEntity.m_hTarget3 = findOffsetByName(j, "CSceneEntity", "m_hTarget3");
CSceneEntity.m_hTarget4 = findOffsetByName(j, "CSceneEntity", "m_hTarget4");
CSceneEntity.m_hTarget5 = findOffsetByName(j, "CSceneEntity", "m_hTarget5");
CSceneEntity.m_hTarget6 = findOffsetByName(j, "CSceneEntity", "m_hTarget6");
CSceneEntity.m_hTarget7 = findOffsetByName(j, "CSceneEntity", "m_hTarget7");
CSceneEntity.m_hTarget8 = findOffsetByName(j, "CSceneEntity", "m_hTarget8");
CSceneEntity.m_sTargetAttachment = findOffsetByName(j, "CSceneEntity", "m_sTargetAttachment");
CSceneEntity.m_bIsPlayingBack = findOffsetByName(j, "CSceneEntity", "m_bIsPlayingBack");
CSceneEntity.m_bPaused = findOffsetByName(j, "CSceneEntity", "m_bPaused");
CSceneEntity.m_bMultiplayer = findOffsetByName(j, "CSceneEntity", "m_bMultiplayer");
CSceneEntity.m_bAutogenerated = findOffsetByName(j, "CSceneEntity", "m_bAutogenerated");
CSceneEntity.m_flForceClientTime = findOffsetByName(j, "CSceneEntity", "m_flForceClientTime");
CSceneEntity.m_flCurrentTime = findOffsetByName(j, "CSceneEntity", "m_flCurrentTime");
CSceneEntity.m_flFrameTime = findOffsetByName(j, "CSceneEntity", "m_flFrameTime");
CSceneEntity.m_bCancelAtNextInterrupt = findOffsetByName(j, "CSceneEntity", "m_bCancelAtNextInterrupt");
CSceneEntity.m_fPitch = findOffsetByName(j, "CSceneEntity", "m_fPitch");
CSceneEntity.m_bAutomated = findOffsetByName(j, "CSceneEntity", "m_bAutomated");
CSceneEntity.m_nAutomatedAction = findOffsetByName(j, "CSceneEntity", "m_nAutomatedAction");
CSceneEntity.m_flAutomationDelay = findOffsetByName(j, "CSceneEntity", "m_flAutomationDelay");
CSceneEntity.m_flAutomationTime = findOffsetByName(j, "CSceneEntity", "m_flAutomationTime");
CSceneEntity.m_hWaitingForThisResumeScene = findOffsetByName(j, "CSceneEntity", "m_hWaitingForThisResumeScene");
CSceneEntity.m_bWaitingForResumeScene = findOffsetByName(j, "CSceneEntity", "m_bWaitingForResumeScene");
CSceneEntity.m_bPausedViaInput = findOffsetByName(j, "CSceneEntity", "m_bPausedViaInput");
CSceneEntity.m_bPauseAtNextInterrupt = findOffsetByName(j, "CSceneEntity", "m_bPauseAtNextInterrupt");
CSceneEntity.m_bWaitingForActor = findOffsetByName(j, "CSceneEntity", "m_bWaitingForActor");
CSceneEntity.m_bWaitingForInterrupt = findOffsetByName(j, "CSceneEntity", "m_bWaitingForInterrupt");
CSceneEntity.m_bInterruptedActorsScenes = findOffsetByName(j, "CSceneEntity", "m_bInterruptedActorsScenes");
CSceneEntity.m_bBreakOnNonIdle = findOffsetByName(j, "CSceneEntity", "m_bBreakOnNonIdle");
CSceneEntity.m_bSceneFinished = findOffsetByName(j, "CSceneEntity", "m_bSceneFinished");
CSceneEntity.m_hActorList = findOffsetByName(j, "CSceneEntity", "m_hActorList");
CSceneEntity.m_hRemoveActorList = findOffsetByName(j, "CSceneEntity", "m_hRemoveActorList");
CSceneEntity.m_nSceneFlushCounter = findOffsetByName(j, "CSceneEntity", "m_nSceneFlushCounter");
CSceneEntity.m_nSceneStringIndex = findOffsetByName(j, "CSceneEntity", "m_nSceneStringIndex");
CSceneEntity.m_OnStart = findOffsetByName(j, "CSceneEntity", "m_OnStart");
CSceneEntity.m_OnCompletion = findOffsetByName(j, "CSceneEntity", "m_OnCompletion");
CSceneEntity.m_OnCanceled = findOffsetByName(j, "CSceneEntity", "m_OnCanceled");
CSceneEntity.m_OnPaused = findOffsetByName(j, "CSceneEntity", "m_OnPaused");
CSceneEntity.m_OnResumed = findOffsetByName(j, "CSceneEntity", "m_OnResumed");
CSceneEntity.m_OnTrigger = findOffsetByName(j, "CSceneEntity", "m_OnTrigger");
CSceneEntity.m_hInterruptScene = findOffsetByName(j, "CSceneEntity", "m_hInterruptScene");
CSceneEntity.m_nInterruptCount = findOffsetByName(j, "CSceneEntity", "m_nInterruptCount");
CSceneEntity.m_bSceneMissing = findOffsetByName(j, "CSceneEntity", "m_bSceneMissing");
CSceneEntity.m_bInterrupted = findOffsetByName(j, "CSceneEntity", "m_bInterrupted");
CSceneEntity.m_bCompletedEarly = findOffsetByName(j, "CSceneEntity", "m_bCompletedEarly");
CSceneEntity.m_bInterruptSceneFinished = findOffsetByName(j, "CSceneEntity", "m_bInterruptSceneFinished");
CSceneEntity.m_bRestoring = findOffsetByName(j, "CSceneEntity", "m_bRestoring");
CSceneEntity.m_hNotifySceneCompletion = findOffsetByName(j, "CSceneEntity", "m_hNotifySceneCompletion");
CSceneEntity.m_hListManagers = findOffsetByName(j, "CSceneEntity", "m_hListManagers");
CSceneEntity.m_iszSoundName = findOffsetByName(j, "CSceneEntity", "m_iszSoundName");
CSceneEntity.m_iszSequenceName = findOffsetByName(j, "CSceneEntity", "m_iszSequenceName");
CSceneEntity.m_hActor = findOffsetByName(j, "CSceneEntity", "m_hActor");
CSceneEntity.m_hActivator = findOffsetByName(j, "CSceneEntity", "m_hActivator");
CSceneEntity.m_BusyActor = findOffsetByName(j, "CSceneEntity", "m_BusyActor");
CSceneEntity.m_iPlayerDeathBehavior = findOffsetByName(j, "CSceneEntity", "m_iPlayerDeathBehavior");

// Atribuições para CLogicActiveAutosave
// CLogicActiveAutosave Offsets
CLogicActiveAutosave.m_TriggerHitPoints = findOffsetByName(j, "CLogicActiveAutosave", "m_TriggerHitPoints");
CLogicActiveAutosave.m_flTimeToTrigger = findOffsetByName(j, "CLogicActiveAutosave", "m_flTimeToTrigger");
CLogicActiveAutosave.m_flStartTime = findOffsetByName(j, "CLogicActiveAutosave", "m_flStartTime");
CLogicActiveAutosave.m_flDangerousTime = findOffsetByName(j, "CLogicActiveAutosave", "m_flDangerousTime");

// Atribuições para CEnvBeverage
// CEnvBeverage Offsets
CEnvBeverage.m_CanInDispenser = findOffsetByName(j, "CEnvBeverage", "m_CanInDispenser");
CEnvBeverage.m_nBeverageType = findOffsetByName(j, "CEnvBeverage", "m_nBeverageType");

// Atribuições para CVoteController
// CVoteController Offsets
CVoteController.m_iActiveIssueIndex = findOffsetByName(j, "CVoteController", "m_iActiveIssueIndex");
CVoteController.m_iOnlyTeamToVote = findOffsetByName(j, "CVoteController", "m_iOnlyTeamToVote");
CVoteController.m_nVoteOptionCount = findOffsetByName(j, "CVoteController", "m_nVoteOptionCount");
CVoteController.m_nPotentialVotes = findOffsetByName(j, "CVoteController", "m_nPotentialVotes");
CVoteController.m_bIsYesNoVote = findOffsetByName(j, "CVoteController", "m_bIsYesNoVote");
CVoteController.m_acceptingVotesTimer = findOffsetByName(j, "CVoteController", "m_acceptingVotesTimer");
CVoteController.m_executeCommandTimer = findOffsetByName(j, "CVoteController", "m_executeCommandTimer");
CVoteController.m_resetVoteTimer = findOffsetByName(j, "CVoteController", "m_resetVoteTimer");
CVoteController.m_nVotesCast = findOffsetByName(j, "CVoteController", "m_nVotesCast");
CVoteController.m_playerHoldingVote = findOffsetByName(j, "CVoteController", "m_playerHoldingVote");
CVoteController.m_playerOverrideForVote = findOffsetByName(j, "CVoteController", "m_playerOverrideForVote");
CVoteController.m_nHighestCountIndex = findOffsetByName(j, "CVoteController", "m_nHighestCountIndex");
CVoteController.m_potentialIssues = findOffsetByName(j, "CVoteController", "m_potentialIssues");
CVoteController.m_VoteOptions = findOffsetByName(j, "CVoteController", "m_VoteOptions");

// Atribuições para CBaseFlex
// CBaseFlex Offsets
CBaseFlex.m_flexWeight = findOffsetByName(j, "CBaseFlex", "m_flexWeight");
CBaseFlex.m_vLookTargetPosition = findOffsetByName(j, "CBaseFlex", "m_vLookTargetPosition");
CBaseFlex.m_blinktoggle = findOffsetByName(j, "CBaseFlex", "m_blinktoggle");
CBaseFlex.m_flAllowResponsesEndTime = findOffsetByName(j, "CBaseFlex", "m_flAllowResponsesEndTime");
CBaseFlex.m_flLastFlexAnimationTime = findOffsetByName(j, "CBaseFlex", "m_flLastFlexAnimationTime");
CBaseFlex.m_nNextSceneEventId = findOffsetByName(j, "CBaseFlex", "m_nNextSceneEventId");
CBaseFlex.m_bUpdateLayerPriorities = findOffsetByName(j, "CBaseFlex", "m_bUpdateLayerPriorities");

// Atribuições para CScriptTriggerHurt
// CScriptTriggerHurt Offsets
CScriptTriggerHurt.m_vExtent = findOffsetByName(j, "CScriptTriggerHurt", "m_vExtent");

// Atribuições para CMathColorBlend
// CMathColorBlend Offsets
CMathColorBlend.m_flInMin = findOffsetByName(j, "CMathColorBlend", "m_flInMin");
CMathColorBlend.m_flInMax = findOffsetByName(j, "CMathColorBlend", "m_flInMax");
CMathColorBlend.m_OutColor1 = findOffsetByName(j, "CMathColorBlend", "m_OutColor1");
CMathColorBlend.m_OutColor2 = findOffsetByName(j, "CMathColorBlend", "m_OutColor2");
CMathColorBlend.m_OutValue = findOffsetByName(j, "CMathColorBlend", "m_OutValue");

// Atribuições para CEnvScreenOverlay
// CEnvScreenOverlay Offsets
CEnvScreenOverlay.m_iszOverlayNames = findOffsetByName(j, "CEnvScreenOverlay", "m_iszOverlayNames");
CEnvScreenOverlay.m_flOverlayTimes = findOffsetByName(j, "CEnvScreenOverlay", "m_flOverlayTimes");
CEnvScreenOverlay.m_flStartTime = findOffsetByName(j, "CEnvScreenOverlay", "m_flStartTime");
CEnvScreenOverlay.m_iDesiredOverlay = findOffsetByName(j, "CEnvScreenOverlay", "m_iDesiredOverlay");
CEnvScreenOverlay.m_bIsActive = findOffsetByName(j, "CEnvScreenOverlay", "m_bIsActive");

// Atribuições para CCSPlayerPawn
// CCSPlayerPawn Offsets
CCSPlayerPawn.m_pBulletServices = findOffsetByName(j, "CCSPlayerPawn", "m_pBulletServices");
CCSPlayerPawn.m_pHostageServices = findOffsetByName(j, "CCSPlayerPawn", "m_pHostageServices");
CCSPlayerPawn.m_pBuyServices = findOffsetByName(j, "CCSPlayerPawn", "m_pBuyServices");
CCSPlayerPawn.m_pActionTrackingServices = findOffsetByName(j, "CCSPlayerPawn", "m_pActionTrackingServices");
CCSPlayerPawn.m_pRadioServices = findOffsetByName(j, "CCSPlayerPawn", "m_pRadioServices");
CCSPlayerPawn.m_pDamageReactServices = findOffsetByName(j, "CCSPlayerPawn", "m_pDamageReactServices");
CCSPlayerPawn.m_nCharacterDefIndex = findOffsetByName(j, "CCSPlayerPawn", "m_nCharacterDefIndex");
CCSPlayerPawn.m_bHasFemaleVoice = findOffsetByName(j, "CCSPlayerPawn", "m_bHasFemaleVoice");
CCSPlayerPawn.m_strVOPrefix = findOffsetByName(j, "CCSPlayerPawn", "m_strVOPrefix");
CCSPlayerPawn.m_szLastPlaceName = findOffsetByName(j, "CCSPlayerPawn", "m_szLastPlaceName");
CCSPlayerPawn.m_bInHostageResetZone = findOffsetByName(j, "CCSPlayerPawn", "m_bInHostageResetZone");
CCSPlayerPawn.m_bInBuyZone = findOffsetByName(j, "CCSPlayerPawn", "m_bInBuyZone");
CCSPlayerPawn.m_TouchingBuyZones = findOffsetByName(j, "CCSPlayerPawn", "m_TouchingBuyZones");
CCSPlayerPawn.m_bWasInBuyZone = findOffsetByName(j, "CCSPlayerPawn", "m_bWasInBuyZone");
CCSPlayerPawn.m_bInHostageRescueZone = findOffsetByName(j, "CCSPlayerPawn", "m_bInHostageRescueZone");
CCSPlayerPawn.m_bInBombZone = findOffsetByName(j, "CCSPlayerPawn", "m_bInBombZone");
CCSPlayerPawn.m_bWasInHostageRescueZone = findOffsetByName(j, "CCSPlayerPawn", "m_bWasInHostageRescueZone");
CCSPlayerPawn.m_iRetakesOffering = findOffsetByName(j, "CCSPlayerPawn", "m_iRetakesOffering");
CCSPlayerPawn.m_iRetakesOfferingCard = findOffsetByName(j, "CCSPlayerPawn", "m_iRetakesOfferingCard");
CCSPlayerPawn.m_bRetakesHasDefuseKit = findOffsetByName(j, "CCSPlayerPawn", "m_bRetakesHasDefuseKit");
CCSPlayerPawn.m_bRetakesMVPLastRound = findOffsetByName(j, "CCSPlayerPawn", "m_bRetakesMVPLastRound");
CCSPlayerPawn.m_iRetakesMVPBoostItem = findOffsetByName(j, "CCSPlayerPawn", "m_iRetakesMVPBoostItem");
CCSPlayerPawn.m_RetakesMVPBoostExtraUtility = findOffsetByName(j, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility");
CCSPlayerPawn.m_flHealthShotBoostExpirationTime = findOffsetByName(j, "CCSPlayerPawn", "m_flHealthShotBoostExpirationTime");
CCSPlayerPawn.m_flLandingTimeSeconds = findOffsetByName(j, "CCSPlayerPawn", "m_flLandingTimeSeconds");
CCSPlayerPawn.m_aimPunchAngle = findOffsetByName(j, "CCSPlayerPawn", "m_aimPunchAngle");
CCSPlayerPawn.m_aimPunchAngleVel = findOffsetByName(j, "CCSPlayerPawn", "m_aimPunchAngleVel");
CCSPlayerPawn.m_aimPunchTickBase = findOffsetByName(j, "CCSPlayerPawn", "m_aimPunchTickBase");
CCSPlayerPawn.m_aimPunchTickFraction = findOffsetByName(j, "CCSPlayerPawn", "m_aimPunchTickFraction");
CCSPlayerPawn.m_aimPunchCache = findOffsetByName(j, "CCSPlayerPawn", "m_aimPunchCache");
CCSPlayerPawn.m_bIsBuyMenuOpen = findOffsetByName(j, "CCSPlayerPawn", "m_bIsBuyMenuOpen");
CCSPlayerPawn.m_xLastHeadBoneTransform = findOffsetByName(j, "CCSPlayerPawn", "m_xLastHeadBoneTransform");
CCSPlayerPawn.m_bLastHeadBoneTransformIsValid = findOffsetByName(j, "CCSPlayerPawn", "m_bLastHeadBoneTransformIsValid");
CCSPlayerPawn.m_lastLandTime = findOffsetByName(j, "CCSPlayerPawn", "m_lastLandTime");
CCSPlayerPawn.m_bOnGroundLastTick = findOffsetByName(j, "CCSPlayerPawn", "m_bOnGroundLastTick");
CCSPlayerPawn.m_iPlayerLocked = findOffsetByName(j, "CCSPlayerPawn", "m_iPlayerLocked");
CCSPlayerPawn.m_flTimeOfLastInjury = findOffsetByName(j, "CCSPlayerPawn", "m_flTimeOfLastInjury");
CCSPlayerPawn.m_flNextSprayDecalTime = findOffsetByName(j, "CCSPlayerPawn", "m_flNextSprayDecalTime");
CCSPlayerPawn.m_bNextSprayDecalTimeExpedited = findOffsetByName(j, "CCSPlayerPawn", "m_bNextSprayDecalTimeExpedited");
CCSPlayerPawn.m_nRagdollDamageBone = findOffsetByName(j, "CCSPlayerPawn", "m_nRagdollDamageBone");
CCSPlayerPawn.m_vRagdollDamageForce = findOffsetByName(j, "CCSPlayerPawn", "m_vRagdollDamageForce");
CCSPlayerPawn.m_vRagdollDamagePosition = findOffsetByName(j, "CCSPlayerPawn", "m_vRagdollDamagePosition");
CCSPlayerPawn.m_szRagdollDamageWeaponName = findOffsetByName(j, "CCSPlayerPawn", "m_szRagdollDamageWeaponName");
CCSPlayerPawn.m_bRagdollDamageHeadshot = findOffsetByName(j, "CCSPlayerPawn", "m_bRagdollDamageHeadshot");
CCSPlayerPawn.m_vRagdollServerOrigin = findOffsetByName(j, "CCSPlayerPawn", "m_vRagdollServerOrigin");
CCSPlayerPawn.m_EconGloves = findOffsetByName(j, "CCSPlayerPawn", "m_EconGloves");
CCSPlayerPawn.m_nEconGlovesChanged = findOffsetByName(j, "CCSPlayerPawn", "m_nEconGlovesChanged");
CCSPlayerPawn.m_qDeathEyeAngles = findOffsetByName(j, "CCSPlayerPawn", "m_qDeathEyeAngles");
CCSPlayerPawn.m_bSkipOneHeadConstraintUpdate = findOffsetByName(j, "CCSPlayerPawn", "m_bSkipOneHeadConstraintUpdate");
CCSPlayerPawn.m_bLeftHanded = findOffsetByName(j, "CCSPlayerPawn", "m_bLeftHanded");
CCSPlayerPawn.m_fSwitchedHandednessTime = findOffsetByName(j, "CCSPlayerPawn", "m_fSwitchedHandednessTime");
CCSPlayerPawn.m_flViewmodelOffsetX = findOffsetByName(j, "CCSPlayerPawn", "m_flViewmodelOffsetX");
CCSPlayerPawn.m_flViewmodelOffsetY = findOffsetByName(j, "CCSPlayerPawn", "m_flViewmodelOffsetY");
CCSPlayerPawn.m_flViewmodelOffsetZ = findOffsetByName(j, "CCSPlayerPawn", "m_flViewmodelOffsetZ");
CCSPlayerPawn.m_flViewmodelFOV = findOffsetByName(j, "CCSPlayerPawn", "m_flViewmodelFOV");
CCSPlayerPawn.m_bIsWalking = findOffsetByName(j, "CCSPlayerPawn", "m_bIsWalking");
CCSPlayerPawn.m_fLastGivenDefuserTime = findOffsetByName(j, "CCSPlayerPawn", "m_fLastGivenDefuserTime");
CCSPlayerPawn.m_fLastGivenBombTime = findOffsetByName(j, "CCSPlayerPawn", "m_fLastGivenBombTime");
CCSPlayerPawn.m_flDealtDamageToEnemyMostRecentTimestamp = findOffsetByName(j, "CCSPlayerPawn", "m_flDealtDamageToEnemyMostRecentTimestamp");
CCSPlayerPawn.m_iDisplayHistoryBits = findOffsetByName(j, "CCSPlayerPawn", "m_iDisplayHistoryBits");
CCSPlayerPawn.m_flLastAttackedTeammate = findOffsetByName(j, "CCSPlayerPawn", "m_flLastAttackedTeammate");
CCSPlayerPawn.m_allowAutoFollowTime = findOffsetByName(j, "CCSPlayerPawn", "m_allowAutoFollowTime");
CCSPlayerPawn.m_bResetArmorNextSpawn = findOffsetByName(j, "CCSPlayerPawn", "m_bResetArmorNextSpawn");
CCSPlayerPawn.m_nLastKillerIndex = findOffsetByName(j, "CCSPlayerPawn", "m_nLastKillerIndex");
CCSPlayerPawn.m_entitySpottedState = findOffsetByName(j, "CCSPlayerPawn", "m_entitySpottedState");
CCSPlayerPawn.m_nSpotRules = findOffsetByName(j, "CCSPlayerPawn", "m_nSpotRules");
CCSPlayerPawn.m_bIsScoped = findOffsetByName(j, "CCSPlayerPawn", "m_bIsScoped");
CCSPlayerPawn.m_bResumeZoom = findOffsetByName(j, "CCSPlayerPawn", "m_bResumeZoom");
CCSPlayerPawn.m_bIsDefusing = findOffsetByName(j, "CCSPlayerPawn", "m_bIsDefusing");
CCSPlayerPawn.m_bIsGrabbingHostage = findOffsetByName(j, "CCSPlayerPawn", "m_bIsGrabbingHostage");
CCSPlayerPawn.m_iBlockingUseActionInProgress = findOffsetByName(j, "CCSPlayerPawn", "m_iBlockingUseActionInProgress");
CCSPlayerPawn.m_flEmitSoundTime = findOffsetByName(j, "CCSPlayerPawn", "m_flEmitSoundTime");
CCSPlayerPawn.m_bInNoDefuseArea = findOffsetByName(j, "CCSPlayerPawn", "m_bInNoDefuseArea");
CCSPlayerPawn.m_iBombSiteIndex = findOffsetByName(j, "CCSPlayerPawn", "m_iBombSiteIndex");
CCSPlayerPawn.m_nWhichBombZone = findOffsetByName(j, "CCSPlayerPawn", "m_nWhichBombZone");
CCSPlayerPawn.m_bInBombZoneTrigger = findOffsetByName(j, "CCSPlayerPawn", "m_bInBombZoneTrigger");
CCSPlayerPawn.m_bWasInBombZoneTrigger = findOffsetByName(j, "CCSPlayerPawn", "m_bWasInBombZoneTrigger");
CCSPlayerPawn.m_iShotsFired = findOffsetByName(j, "CCSPlayerPawn", "m_iShotsFired");
CCSPlayerPawn.m_flFlinchStack = findOffsetByName(j, "CCSPlayerPawn", "m_flFlinchStack");
CCSPlayerPawn.m_flVelocityModifier = findOffsetByName(j, "CCSPlayerPawn", "m_flVelocityModifier");
CCSPlayerPawn.m_flHitHeading = findOffsetByName(j, "CCSPlayerPawn", "m_flHitHeading");
CCSPlayerPawn.m_nHitBodyPart = findOffsetByName(j, "CCSPlayerPawn", "m_nHitBodyPart");
CCSPlayerPawn.m_vecTotalBulletForce = findOffsetByName(j, "CCSPlayerPawn", "m_vecTotalBulletForce");
CCSPlayerPawn.m_bWaitForNoAttack = findOffsetByName(j, "CCSPlayerPawn", "m_bWaitForNoAttack");
CCSPlayerPawn.m_ignoreLadderJumpTime = findOffsetByName(j, "CCSPlayerPawn", "m_ignoreLadderJumpTime");
CCSPlayerPawn.m_bKilledByHeadshot = findOffsetByName(j, "CCSPlayerPawn", "m_bKilledByHeadshot");
CCSPlayerPawn.m_LastHitBox = findOffsetByName(j, "CCSPlayerPawn", "m_LastHitBox");
CCSPlayerPawn.m_LastHealth = findOffsetByName(j, "CCSPlayerPawn", "m_LastHealth");
CCSPlayerPawn.m_pBot = findOffsetByName(j, "CCSPlayerPawn", "m_pBot");
CCSPlayerPawn.m_bBotAllowActive = findOffsetByName(j, "CCSPlayerPawn", "m_bBotAllowActive");
CCSPlayerPawn.m_thirdPersonHeading = findOffsetByName(j, "CCSPlayerPawn", "m_thirdPersonHeading");
CCSPlayerPawn.m_flSlopeDropOffset = findOffsetByName(j, "CCSPlayerPawn", "m_flSlopeDropOffset");
CCSPlayerPawn.m_flSlopeDropHeight = findOffsetByName(j, "CCSPlayerPawn", "m_flSlopeDropHeight");
CCSPlayerPawn.m_vHeadConstraintOffset = findOffsetByName(j, "CCSPlayerPawn", "m_vHeadConstraintOffset");
CCSPlayerPawn.m_nLastPickupPriority = findOffsetByName(j, "CCSPlayerPawn", "m_nLastPickupPriority");
CCSPlayerPawn.m_flLastPickupPriorityTime = findOffsetByName(j, "CCSPlayerPawn", "m_flLastPickupPriorityTime");
CCSPlayerPawn.m_ArmorValue = findOffsetByName(j, "CCSPlayerPawn", "m_ArmorValue");
CCSPlayerPawn.m_unCurrentEquipmentValue = findOffsetByName(j, "CCSPlayerPawn", "m_unCurrentEquipmentValue");
CCSPlayerPawn.m_unRoundStartEquipmentValue = findOffsetByName(j, "CCSPlayerPawn", "m_unRoundStartEquipmentValue");
CCSPlayerPawn.m_unFreezetimeEndEquipmentValue = findOffsetByName(j, "CCSPlayerPawn", "m_unFreezetimeEndEquipmentValue");
CCSPlayerPawn.m_iLastWeaponFireUsercmd = findOffsetByName(j, "CCSPlayerPawn", "m_iLastWeaponFireUsercmd");
CCSPlayerPawn.m_bIsSpawning = findOffsetByName(j, "CCSPlayerPawn", "m_bIsSpawning");
CCSPlayerPawn.m_iDeathFlags = findOffsetByName(j, "CCSPlayerPawn", "m_iDeathFlags");
CCSPlayerPawn.m_bHasDeathInfo = findOffsetByName(j, "CCSPlayerPawn", "m_bHasDeathInfo");
CCSPlayerPawn.m_flDeathInfoTime = findOffsetByName(j, "CCSPlayerPawn", "m_flDeathInfoTime");
CCSPlayerPawn.m_vecDeathInfoOrigin = findOffsetByName(j, "CCSPlayerPawn", "m_vecDeathInfoOrigin");
CCSPlayerPawn.m_vecPlayerPatchEconIndices = findOffsetByName(j, "CCSPlayerPawn", "m_vecPlayerPatchEconIndices");
CCSPlayerPawn.m_GunGameImmunityColor = findOffsetByName(j, "CCSPlayerPawn", "m_GunGameImmunityColor");
CCSPlayerPawn.m_grenadeParameterStashTime = findOffsetByName(j, "CCSPlayerPawn", "m_grenadeParameterStashTime");
CCSPlayerPawn.m_bGrenadeParametersStashed = findOffsetByName(j, "CCSPlayerPawn", "m_bGrenadeParametersStashed");
CCSPlayerPawn.m_angStashedShootAngles = findOffsetByName(j, "CCSPlayerPawn", "m_angStashedShootAngles");
CCSPlayerPawn.m_vecStashedGrenadeThrowPosition = findOffsetByName(j, "CCSPlayerPawn", "m_vecStashedGrenadeThrowPosition");
CCSPlayerPawn.m_vecStashedVelocity = findOffsetByName(j, "CCSPlayerPawn", "m_vecStashedVelocity");
CCSPlayerPawn.m_angShootAngleHistory = findOffsetByName(j, "CCSPlayerPawn", "m_angShootAngleHistory");
CCSPlayerPawn.m_vecThrowPositionHistory = findOffsetByName(j, "CCSPlayerPawn", "m_vecThrowPositionHistory");
CCSPlayerPawn.m_vecVelocityHistory = findOffsetByName(j, "CCSPlayerPawn", "m_vecVelocityHistory");
CCSPlayerPawn.m_PredictedDamageTags = findOffsetByName(j, "CCSPlayerPawn", "m_PredictedDamageTags");
CCSPlayerPawn.m_nHighestAppliedDamageTagTick = findOffsetByName(j, "CCSPlayerPawn", "m_nHighestAppliedDamageTagTick");

// Atribuições para CEconItemView
// CEconItemView Offsets
CEconItemView.m_iItemDefinitionIndex = findOffsetByName(j, "CEconItemView", "m_iItemDefinitionIndex");
CEconItemView.m_iEntityQuality = findOffsetByName(j, "CEconItemView", "m_iEntityQuality");
CEconItemView.m_iEntityLevel = findOffsetByName(j, "CEconItemView", "m_iEntityLevel");
CEconItemView.m_iItemID = findOffsetByName(j, "CEconItemView", "m_iItemID");
CEconItemView.m_iItemIDHigh = findOffsetByName(j, "CEconItemView", "m_iItemIDHigh");
CEconItemView.m_iItemIDLow = findOffsetByName(j, "CEconItemView", "m_iItemIDLow");
CEconItemView.m_iAccountID = findOffsetByName(j, "CEconItemView", "m_iAccountID");
CEconItemView.m_iInventoryPosition = findOffsetByName(j, "CEconItemView", "m_iInventoryPosition");
CEconItemView.m_bInitialized = findOffsetByName(j, "CEconItemView", "m_bInitialized");
CEconItemView.m_AttributeList = findOffsetByName(j, "CEconItemView", "m_AttributeList");
CEconItemView.m_NetworkedDynamicAttributes = findOffsetByName(j, "CEconItemView", "m_NetworkedDynamicAttributes");
CEconItemView.m_szCustomName = findOffsetByName(j, "CEconItemView", "m_szCustomName");
CEconItemView.m_szCustomNameOverride = findOffsetByName(j, "CEconItemView", "m_szCustomNameOverride");

// Atribuições para CBasePlayerPawn
// CBasePlayerPawn Offsets
CBasePlayerPawn.m_pWeaponServices = findOffsetByName(j, "CBasePlayerPawn", "m_pWeaponServices");
CBasePlayerPawn.m_pItemServices = findOffsetByName(j, "CBasePlayerPawn", "m_pItemServices");
CBasePlayerPawn.m_pAutoaimServices = findOffsetByName(j, "CBasePlayerPawn", "m_pAutoaimServices");
CBasePlayerPawn.m_pObserverServices = findOffsetByName(j, "CBasePlayerPawn", "m_pObserverServices");
CBasePlayerPawn.m_pWaterServices = findOffsetByName(j, "CBasePlayerPawn", "m_pWaterServices");
CBasePlayerPawn.m_pUseServices = findOffsetByName(j, "CBasePlayerPawn", "m_pUseServices");
CBasePlayerPawn.m_pFlashlightServices = findOffsetByName(j, "CBasePlayerPawn", "m_pFlashlightServices");
CBasePlayerPawn.m_pCameraServices = findOffsetByName(j, "CBasePlayerPawn", "m_pCameraServices");
CBasePlayerPawn.m_pMovementServices = findOffsetByName(j, "CBasePlayerPawn", "m_pMovementServices");
CBasePlayerPawn.m_ServerViewAngleChanges = findOffsetByName(j, "CBasePlayerPawn", "m_ServerViewAngleChanges");
CBasePlayerPawn.m_nHighestGeneratedServerViewAngleChangeIndex = findOffsetByName(j, "CBasePlayerPawn", "m_nHighestGeneratedServerViewAngleChangeIndex");
CBasePlayerPawn.v_angle = findOffsetByName(j, "CBasePlayerPawn", "v_angle");
CBasePlayerPawn.v_anglePrevious = findOffsetByName(j, "CBasePlayerPawn", "v_anglePrevious");
CBasePlayerPawn.m_iHideHUD = findOffsetByName(j, "CBasePlayerPawn", "m_iHideHUD");
CBasePlayerPawn.m_skybox3d = findOffsetByName(j, "CBasePlayerPawn", "m_skybox3d");
CBasePlayerPawn.m_fTimeLastHurt = findOffsetByName(j, "CBasePlayerPawn", "m_fTimeLastHurt");
CBasePlayerPawn.m_flDeathTime = findOffsetByName(j, "CBasePlayerPawn", "m_flDeathTime");
CBasePlayerPawn.m_fNextSuicideTime = findOffsetByName(j, "CBasePlayerPawn", "m_fNextSuicideTime");
CBasePlayerPawn.m_fInitHUD = findOffsetByName(j, "CBasePlayerPawn", "m_fInitHUD");
CBasePlayerPawn.m_pExpresser = findOffsetByName(j, "CBasePlayerPawn", "m_pExpresser");
CBasePlayerPawn.m_hController = findOffsetByName(j, "CBasePlayerPawn", "m_hController");
CBasePlayerPawn.m_fHltvReplayDelay = findOffsetByName(j, "CBasePlayerPawn", "m_fHltvReplayDelay");
CBasePlayerPawn.m_fHltvReplayEnd = findOffsetByName(j, "CBasePlayerPawn", "m_fHltvReplayEnd");
CBasePlayerPawn.m_iHltvReplayEntity = findOffsetByName(j, "CBasePlayerPawn", "m_iHltvReplayEntity");
CBasePlayerPawn.m_sndOpvarLatchData = findOffsetByName(j, "CBasePlayerPawn", "m_sndOpvarLatchData");

// Atribuições para CPostProcessingVolume
// CPostProcessingVolume Offsets
CPostProcessingVolume.m_hPostSettings = findOffsetByName(j, "CPostProcessingVolume", "m_hPostSettings");
CPostProcessingVolume.m_flFadeDuration = findOffsetByName(j, "CPostProcessingVolume", "m_flFadeDuration");
CPostProcessingVolume.m_flMinLogExposure = findOffsetByName(j, "CPostProcessingVolume", "m_flMinLogExposure");
CPostProcessingVolume.m_flMaxLogExposure = findOffsetByName(j, "CPostProcessingVolume", "m_flMaxLogExposure");
CPostProcessingVolume.m_flMinExposure = findOffsetByName(j, "CPostProcessingVolume", "m_flMinExposure");
CPostProcessingVolume.m_flMaxExposure = findOffsetByName(j, "CPostProcessingVolume", "m_flMaxExposure");
CPostProcessingVolume.m_flExposureCompensation = findOffsetByName(j, "CPostProcessingVolume", "m_flExposureCompensation");
CPostProcessingVolume.m_flExposureFadeSpeedUp = findOffsetByName(j, "CPostProcessingVolume", "m_flExposureFadeSpeedUp");
CPostProcessingVolume.m_flExposureFadeSpeedDown = findOffsetByName(j, "CPostProcessingVolume", "m_flExposureFadeSpeedDown");
CPostProcessingVolume.m_flTonemapEVSmoothingRange = findOffsetByName(j, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange");
CPostProcessingVolume.m_bMaster = findOffsetByName(j, "CPostProcessingVolume", "m_bMaster");
CPostProcessingVolume.m_bExposureControl = findOffsetByName(j, "CPostProcessingVolume", "m_bExposureControl");
CPostProcessingVolume.m_flRate = findOffsetByName(j, "CPostProcessingVolume", "m_flRate");
CPostProcessingVolume.m_flTonemapPercentTarget = findOffsetByName(j, "CPostProcessingVolume", "m_flTonemapPercentTarget");
CPostProcessingVolume.m_flTonemapPercentBrightPixels = findOffsetByName(j, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels");
CPostProcessingVolume.m_flTonemapMinAvgLum = findOffsetByName(j, "CPostProcessingVolume", "m_flTonemapMinAvgLum");

// Atribuições para CSpotlightEnd
// CSpotlightEnd Offsets
CSpotlightEnd.m_flLightScale = findOffsetByName(j, "CSpotlightEnd", "m_flLightScale");
CSpotlightEnd.m_Radius = findOffsetByName(j, "CSpotlightEnd", "m_Radius");
CSpotlightEnd.m_vSpotlightDir = findOffsetByName(j, "CSpotlightEnd", "m_vSpotlightDir");
CSpotlightEnd.m_vSpotlightOrg = findOffsetByName(j, "CSpotlightEnd", "m_vSpotlightOrg");

// Atribuições para CRuleEntity
// CRuleEntity Offsets
CRuleEntity.m_iszMaster = findOffsetByName(j, "CRuleEntity", "m_iszMaster");

// Atribuições para CCSGO_TeamPreviewCharacterPosition
// CCSGO_TeamPreviewCharacterPosition Offsets
CCSGO_TeamPreviewCharacterPosition.m_nVariant = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_nVariant");
CCSGO_TeamPreviewCharacterPosition.m_nRandom = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_nRandom");
CCSGO_TeamPreviewCharacterPosition.m_nOrdinal = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_nOrdinal");
CCSGO_TeamPreviewCharacterPosition.m_sWeaponName = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_sWeaponName");
CCSGO_TeamPreviewCharacterPosition.m_xuid = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_xuid");
CCSGO_TeamPreviewCharacterPosition.m_agentItem = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_agentItem");
CCSGO_TeamPreviewCharacterPosition.m_glovesItem = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_glovesItem");
CCSGO_TeamPreviewCharacterPosition.m_weaponItem = findOffsetByName(j, "CCSGO_TeamPreviewCharacterPosition", "m_weaponItem");

// Atribuições para CTriggerDetectExplosion
// CTriggerDetectExplosion Offsets
CTriggerDetectExplosion.m_OnDetectedExplosion = findOffsetByName(j, "CTriggerDetectExplosion", "m_OnDetectedExplosion");

// Atribuições para CSoundStackSave
// CSoundStackSave Offsets
CSoundStackSave.m_iszStackName = findOffsetByName(j, "CSoundStackSave", "m_iszStackName");

// Atribuições para CPhysHinge
// CPhysHinge Offsets
CPhysHinge.m_soundInfo = findOffsetByName(j, "CPhysHinge", "m_soundInfo");
CPhysHinge.m_NotifyMinLimitReached = findOffsetByName(j, "CPhysHinge", "m_NotifyMinLimitReached");
CPhysHinge.m_NotifyMaxLimitReached = findOffsetByName(j, "CPhysHinge", "m_NotifyMaxLimitReached");
CPhysHinge.m_bAtMinLimit = findOffsetByName(j, "CPhysHinge", "m_bAtMinLimit");
CPhysHinge.m_bAtMaxLimit = findOffsetByName(j, "CPhysHinge", "m_bAtMaxLimit");
CPhysHinge.m_hinge = findOffsetByName(j, "CPhysHinge", "m_hinge");
CPhysHinge.m_hingeFriction = findOffsetByName(j, "CPhysHinge", "m_hingeFriction");
CPhysHinge.m_systemLoadScale = findOffsetByName(j, "CPhysHinge", "m_systemLoadScale");
CPhysHinge.m_bIsAxisLocal = findOffsetByName(j, "CPhysHinge", "m_bIsAxisLocal");
CPhysHinge.m_flMinRotation = findOffsetByName(j, "CPhysHinge", "m_flMinRotation");
CPhysHinge.m_flMaxRotation = findOffsetByName(j, "CPhysHinge", "m_flMaxRotation");
CPhysHinge.m_flInitialRotation = findOffsetByName(j, "CPhysHinge", "m_flInitialRotation");
CPhysHinge.m_flMotorFrequency = findOffsetByName(j, "CPhysHinge", "m_flMotorFrequency");
CPhysHinge.m_flMotorDampingRatio = findOffsetByName(j, "CPhysHinge", "m_flMotorDampingRatio");
CPhysHinge.m_flAngleSpeed = findOffsetByName(j, "CPhysHinge", "m_flAngleSpeed");
CPhysHinge.m_flAngleSpeedThreshold = findOffsetByName(j, "CPhysHinge", "m_flAngleSpeedThreshold");
CPhysHinge.m_OnStartMoving = findOffsetByName(j, "CPhysHinge", "m_OnStartMoving");
CPhysHinge.m_OnStopMoving = findOffsetByName(j, "CPhysHinge", "m_OnStopMoving");

// Atribuições para CSingleplayRules
// CSingleplayRules Offsets
CSingleplayRules.m_bSinglePlayerGameEnding = findOffsetByName(j, "CSingleplayRules", "m_bSinglePlayerGameEnding");

// Atribuições para CFilterProximity
// CFilterProximity Offsets
CFilterProximity.m_flRadius = findOffsetByName(j, "CFilterProximity", "m_flRadius");

// Atribuições para CEconWearable
// CEconWearable Offsets
CEconWearable.m_nForceSkin = findOffsetByName(j, "CEconWearable", "m_nForceSkin");
CEconWearable.m_bAlwaysAllow = findOffsetByName(j, "CEconWearable", "m_bAlwaysAllow");

// Atribuições para CFuncConveyor
// CFuncConveyor Offsets
CFuncConveyor.m_szConveyorModels = findOffsetByName(j, "CFuncConveyor", "m_szConveyorModels");
CFuncConveyor.m_flTransitionDurationSeconds = findOffsetByName(j, "CFuncConveyor", "m_flTransitionDurationSeconds");
CFuncConveyor.m_angMoveEntitySpace = findOffsetByName(j, "CFuncConveyor", "m_angMoveEntitySpace");
CFuncConveyor.m_vecMoveDirEntitySpace = findOffsetByName(j, "CFuncConveyor", "m_vecMoveDirEntitySpace");
CFuncConveyor.m_flTargetSpeed = findOffsetByName(j, "CFuncConveyor", "m_flTargetSpeed");
CFuncConveyor.m_nTransitionStartTick = findOffsetByName(j, "CFuncConveyor", "m_nTransitionStartTick");
CFuncConveyor.m_nTransitionDurationTicks = findOffsetByName(j, "CFuncConveyor", "m_nTransitionDurationTicks");
CFuncConveyor.m_flTransitionStartSpeed = findOffsetByName(j, "CFuncConveyor", "m_flTransitionStartSpeed");
CFuncConveyor.m_hConveyorModels = findOffsetByName(j, "CFuncConveyor", "m_hConveyorModels");

// Atribuições para CMathCounter
// CMathCounter Offsets
CMathCounter.m_flMin = findOffsetByName(j, "CMathCounter", "m_flMin");
CMathCounter.m_flMax = findOffsetByName(j, "CMathCounter", "m_flMax");
CMathCounter.m_bHitMin = findOffsetByName(j, "CMathCounter", "m_bHitMin");
CMathCounter.m_bHitMax = findOffsetByName(j, "CMathCounter", "m_bHitMax");
CMathCounter.m_bDisabled = findOffsetByName(j, "CMathCounter", "m_bDisabled");
CMathCounter.m_OutValue = findOffsetByName(j, "CMathCounter", "m_OutValue");
CMathCounter.m_OnGetValue = findOffsetByName(j, "CMathCounter", "m_OnGetValue");
CMathCounter.m_OnHitMin = findOffsetByName(j, "CMathCounter", "m_OnHitMin");
CMathCounter.m_OnHitMax = findOffsetByName(j, "CMathCounter", "m_OnHitMax");
CMathCounter.m_OnChangedFromMin = findOffsetByName(j, "CMathCounter", "m_OnChangedFromMin");
CMathCounter.m_OnChangedFromMax = findOffsetByName(j, "CMathCounter", "m_OnChangedFromMax");

// Atribuições para CRectLight
// CRectLight Offsets
CRectLight.m_bShowLight = findOffsetByName(j, "CRectLight", "m_bShowLight");

// Atribuições para CRotDoor
// CRotDoor Offsets
CRotDoor.m_bSolidBsp = findOffsetByName(j, "CRotDoor", "m_bSolidBsp");

// Atribuições para CLogicLineToEntity
// CLogicLineToEntity Offsets
CLogicLineToEntity.m_Line = findOffsetByName(j, "CLogicLineToEntity", "m_Line");
CLogicLineToEntity.m_SourceName = findOffsetByName(j, "CLogicLineToEntity", "m_SourceName");
CLogicLineToEntity.m_StartEntity = findOffsetByName(j, "CLogicLineToEntity", "m_StartEntity");
CLogicLineToEntity.m_EndEntity = findOffsetByName(j, "CLogicLineToEntity", "m_EndEntity");

// Atribuições para CGameRules
// CGameRules Offsets
CGameRules.__m_pChainEntity = findOffsetByName(j, "CGameRules", "__m_pChainEntity");
CGameRules.m_szQuestName = findOffsetByName(j, "CGameRules", "m_szQuestName");
CGameRules.m_nQuestPhase = findOffsetByName(j, "CGameRules", "m_nQuestPhase");
CGameRules.m_nTotalPausedTicks = findOffsetByName(j, "CGameRules", "m_nTotalPausedTicks");
CGameRules.m_nPauseStartTick = findOffsetByName(j, "CGameRules", "m_nPauseStartTick");
CGameRules.m_bGamePaused = findOffsetByName(j, "CGameRules", "m_bGamePaused");

// Atribuições para CEnvCubemap
// CEnvCubemap Offsets
CEnvCubemap.m_Entity_hCubemapTexture = findOffsetByName(j, "CEnvCubemap", "m_Entity_hCubemapTexture");
CEnvCubemap.m_Entity_bCustomCubemapTexture = findOffsetByName(j, "CEnvCubemap", "m_Entity_bCustomCubemapTexture");
CEnvCubemap.m_Entity_flInfluenceRadius = findOffsetByName(j, "CEnvCubemap", "m_Entity_flInfluenceRadius");
CEnvCubemap.m_Entity_vBoxProjectMins = findOffsetByName(j, "CEnvCubemap", "m_Entity_vBoxProjectMins");
CEnvCubemap.m_Entity_vBoxProjectMaxs = findOffsetByName(j, "CEnvCubemap", "m_Entity_vBoxProjectMaxs");
CEnvCubemap.m_Entity_bMoveable = findOffsetByName(j, "CEnvCubemap", "m_Entity_bMoveable");
CEnvCubemap.m_Entity_nHandshake = findOffsetByName(j, "CEnvCubemap", "m_Entity_nHandshake");
CEnvCubemap.m_Entity_nEnvCubeMapArrayIndex = findOffsetByName(j, "CEnvCubemap", "m_Entity_nEnvCubeMapArrayIndex");
CEnvCubemap.m_Entity_nPriority = findOffsetByName(j, "CEnvCubemap", "m_Entity_nPriority");
CEnvCubemap.m_Entity_flEdgeFadeDist = findOffsetByName(j, "CEnvCubemap", "m_Entity_flEdgeFadeDist");
CEnvCubemap.m_Entity_vEdgeFadeDists = findOffsetByName(j, "CEnvCubemap", "m_Entity_vEdgeFadeDists");
CEnvCubemap.m_Entity_flDiffuseScale = findOffsetByName(j, "CEnvCubemap", "m_Entity_flDiffuseScale");
CEnvCubemap.m_Entity_bStartDisabled = findOffsetByName(j, "CEnvCubemap", "m_Entity_bStartDisabled");
CEnvCubemap.m_Entity_bDefaultEnvMap = findOffsetByName(j, "CEnvCubemap", "m_Entity_bDefaultEnvMap");
CEnvCubemap.m_Entity_bDefaultSpecEnvMap = findOffsetByName(j, "CEnvCubemap", "m_Entity_bDefaultSpecEnvMap");
CEnvCubemap.m_Entity_bIndoorCubeMap = findOffsetByName(j, "CEnvCubemap", "m_Entity_bIndoorCubeMap");
CEnvCubemap.m_Entity_bCopyDiffuseFromDefaultCubemap = findOffsetByName(j, "CEnvCubemap", "m_Entity_bCopyDiffuseFromDefaultCubemap");
CEnvCubemap.m_Entity_bEnabled = findOffsetByName(j, "CEnvCubemap", "m_Entity_bEnabled");

// Atribuições para CRetakeGameRules
// CRetakeGameRules Offsets
CRetakeGameRules.m_nMatchSeed = findOffsetByName(j, "CRetakeGameRules", "m_nMatchSeed");
CRetakeGameRules.m_bBlockersPresent = findOffsetByName(j, "CRetakeGameRules", "m_bBlockersPresent");
CRetakeGameRules.m_bRoundInProgress = findOffsetByName(j, "CRetakeGameRules", "m_bRoundInProgress");
CRetakeGameRules.m_iFirstSecondHalfRound = findOffsetByName(j, "CRetakeGameRules", "m_iFirstSecondHalfRound");
CRetakeGameRules.m_iBombSite = findOffsetByName(j, "CRetakeGameRules", "m_iBombSite");

// Atribuições para CColorCorrection
// CColorCorrection Offsets
CColorCorrection.m_flFadeInDuration = findOffsetByName(j, "CColorCorrection", "m_flFadeInDuration");
CColorCorrection.m_flFadeOutDuration = findOffsetByName(j, "CColorCorrection", "m_flFadeOutDuration");
CColorCorrection.m_flStartFadeInWeight = findOffsetByName(j, "CColorCorrection", "m_flStartFadeInWeight");
CColorCorrection.m_flStartFadeOutWeight = findOffsetByName(j, "CColorCorrection", "m_flStartFadeOutWeight");
CColorCorrection.m_flTimeStartFadeIn = findOffsetByName(j, "CColorCorrection", "m_flTimeStartFadeIn");
CColorCorrection.m_flTimeStartFadeOut = findOffsetByName(j, "CColorCorrection", "m_flTimeStartFadeOut");
CColorCorrection.m_flMaxWeight = findOffsetByName(j, "CColorCorrection", "m_flMaxWeight");
CColorCorrection.m_bStartDisabled = findOffsetByName(j, "CColorCorrection", "m_bStartDisabled");
CColorCorrection.m_bEnabled = findOffsetByName(j, "CColorCorrection", "m_bEnabled");
CColorCorrection.m_bMaster = findOffsetByName(j, "CColorCorrection", "m_bMaster");
CColorCorrection.m_bClientSide = findOffsetByName(j, "CColorCorrection", "m_bClientSide");
CColorCorrection.m_bExclusive = findOffsetByName(j, "CColorCorrection", "m_bExclusive");
CColorCorrection.m_MinFalloff = findOffsetByName(j, "CColorCorrection", "m_MinFalloff");
CColorCorrection.m_MaxFalloff = findOffsetByName(j, "CColorCorrection", "m_MaxFalloff");
CColorCorrection.m_flCurWeight = findOffsetByName(j, "CColorCorrection", "m_flCurWeight");
CColorCorrection.m_netlookupFilename = findOffsetByName(j, "CColorCorrection", "m_netlookupFilename");
CColorCorrection.m_lookupFilename = findOffsetByName(j, "CColorCorrection", "m_lookupFilename");

// Atribuições para CC4
// CC4 Offsets
CC4.m_vecLastValidPlayerHeldPosition = findOffsetByName(j, "CC4", "m_vecLastValidPlayerHeldPosition");
CC4.m_vecLastValidDroppedPosition = findOffsetByName(j, "CC4", "m_vecLastValidDroppedPosition");
CC4.m_bDoValidDroppedPositionCheck = findOffsetByName(j, "CC4", "m_bDoValidDroppedPositionCheck");
CC4.m_bStartedArming = findOffsetByName(j, "CC4", "m_bStartedArming");
CC4.m_fArmedTime = findOffsetByName(j, "CC4", "m_fArmedTime");
CC4.m_bBombPlacedAnimation = findOffsetByName(j, "CC4", "m_bBombPlacedAnimation");
CC4.m_bIsPlantingViaUse = findOffsetByName(j, "CC4", "m_bIsPlantingViaUse");
CC4.m_entitySpottedState = findOffsetByName(j, "CC4", "m_entitySpottedState");
CC4.m_nSpotRules = findOffsetByName(j, "CC4", "m_nSpotRules");
CC4.m_bPlayedArmingBeeps = findOffsetByName(j, "CC4", "m_bPlayedArmingBeeps");
CC4.m_bBombPlanted = findOffsetByName(j, "CC4", "m_bBombPlanted");

// Atribuições para CPointPrefab
// CPointPrefab Offsets
CPointPrefab.m_targetMapName = findOffsetByName(j, "CPointPrefab", "m_targetMapName");
CPointPrefab.m_forceWorldGroupID = findOffsetByName(j, "CPointPrefab", "m_forceWorldGroupID");
CPointPrefab.m_associatedRelayTargetName = findOffsetByName(j, "CPointPrefab", "m_associatedRelayTargetName");
CPointPrefab.m_fixupNames = findOffsetByName(j, "CPointPrefab", "m_fixupNames");
CPointPrefab.m_bLoadDynamic = findOffsetByName(j, "CPointPrefab", "m_bLoadDynamic");
CPointPrefab.m_associatedRelayEntity = findOffsetByName(j, "CPointPrefab", "m_associatedRelayEntity");

// Atribuições para CBaseDoor
// CBaseDoor Offsets
CBaseDoor.m_angMoveEntitySpace = findOffsetByName(j, "CBaseDoor", "m_angMoveEntitySpace");
CBaseDoor.m_vecMoveDirParentSpace = findOffsetByName(j, "CBaseDoor", "m_vecMoveDirParentSpace");
CBaseDoor.m_ls = findOffsetByName(j, "CBaseDoor", "m_ls");
CBaseDoor.m_bForceClosed = findOffsetByName(j, "CBaseDoor", "m_bForceClosed");
CBaseDoor.m_bDoorGroup = findOffsetByName(j, "CBaseDoor", "m_bDoorGroup");
CBaseDoor.m_bLocked = findOffsetByName(j, "CBaseDoor", "m_bLocked");
CBaseDoor.m_bIgnoreDebris = findOffsetByName(j, "CBaseDoor", "m_bIgnoreDebris");
CBaseDoor.m_eSpawnPosition = findOffsetByName(j, "CBaseDoor", "m_eSpawnPosition");
CBaseDoor.m_flBlockDamage = findOffsetByName(j, "CBaseDoor", "m_flBlockDamage");
CBaseDoor.m_NoiseMoving = findOffsetByName(j, "CBaseDoor", "m_NoiseMoving");
CBaseDoor.m_NoiseArrived = findOffsetByName(j, "CBaseDoor", "m_NoiseArrived");
CBaseDoor.m_NoiseMovingClosed = findOffsetByName(j, "CBaseDoor", "m_NoiseMovingClosed");
CBaseDoor.m_NoiseArrivedClosed = findOffsetByName(j, "CBaseDoor", "m_NoiseArrivedClosed");
CBaseDoor.m_ChainTarget = findOffsetByName(j, "CBaseDoor", "m_ChainTarget");
CBaseDoor.m_OnBlockedClosing = findOffsetByName(j, "CBaseDoor", "m_OnBlockedClosing");
CBaseDoor.m_OnBlockedOpening = findOffsetByName(j, "CBaseDoor", "m_OnBlockedOpening");
CBaseDoor.m_OnUnblockedClosing = findOffsetByName(j, "CBaseDoor", "m_OnUnblockedClosing");
CBaseDoor.m_OnUnblockedOpening = findOffsetByName(j, "CBaseDoor", "m_OnUnblockedOpening");
CBaseDoor.m_OnFullyClosed = findOffsetByName(j, "CBaseDoor", "m_OnFullyClosed");
CBaseDoor.m_OnFullyOpen = findOffsetByName(j, "CBaseDoor", "m_OnFullyOpen");
CBaseDoor.m_OnClose = findOffsetByName(j, "CBaseDoor", "m_OnClose");
CBaseDoor.m_OnOpen = findOffsetByName(j, "CBaseDoor", "m_OnOpen");
CBaseDoor.m_OnLockedUse = findOffsetByName(j, "CBaseDoor", "m_OnLockedUse");
CBaseDoor.m_bLoopMoveSound = findOffsetByName(j, "CBaseDoor", "m_bLoopMoveSound");
CBaseDoor.m_bCreateNavObstacle = findOffsetByName(j, "CBaseDoor", "m_bCreateNavObstacle");
CBaseDoor.m_isChaining = findOffsetByName(j, "CBaseDoor", "m_isChaining");
CBaseDoor.m_bIsUsable = findOffsetByName(j, "CBaseDoor", "m_bIsUsable");

// Atribuições para CTankTrainAI
// CTankTrainAI Offsets
CTankTrainAI.m_hTrain = findOffsetByName(j, "CTankTrainAI", "m_hTrain");
CTankTrainAI.m_hTargetEntity = findOffsetByName(j, "CTankTrainAI", "m_hTargetEntity");
CTankTrainAI.m_soundPlaying = findOffsetByName(j, "CTankTrainAI", "m_soundPlaying");
CTankTrainAI.m_startSoundName = findOffsetByName(j, "CTankTrainAI", "m_startSoundName");
CTankTrainAI.m_engineSoundName = findOffsetByName(j, "CTankTrainAI", "m_engineSoundName");
CTankTrainAI.m_movementSoundName = findOffsetByName(j, "CTankTrainAI", "m_movementSoundName");
CTankTrainAI.m_targetEntityName = findOffsetByName(j, "CTankTrainAI", "m_targetEntityName");

// Atribuições para CGameGibManager
// CGameGibManager Offsets
CGameGibManager.m_bAllowNewGibs = findOffsetByName(j, "CGameGibManager", "m_bAllowNewGibs");
CGameGibManager.m_iCurrentMaxPieces = findOffsetByName(j, "CGameGibManager", "m_iCurrentMaxPieces");
CGameGibManager.m_iMaxPieces = findOffsetByName(j, "CGameGibManager", "m_iMaxPieces");
CGameGibManager.m_iLastFrame = findOffsetByName(j, "CGameGibManager", "m_iLastFrame");

// Atribuições para SpawnPoint
// SpawnPoint Offsets
SpawnPoint.m_iPriority = findOffsetByName(j, "SpawnPoint", "m_iPriority");
SpawnPoint.m_bEnabled = findOffsetByName(j, "SpawnPoint", "m_bEnabled");
SpawnPoint.m_nType = findOffsetByName(j, "SpawnPoint", "m_nType");

// Atribuições para CFuncPlatRot
// CFuncPlatRot Offsets
CFuncPlatRot.m_end = findOffsetByName(j, "CFuncPlatRot", "m_end");
CFuncPlatRot.m_start = findOffsetByName(j, "CFuncPlatRot", "m_start");

// Atribuições para CEnvSpark
// CEnvSpark Offsets
CEnvSpark.m_flDelay = findOffsetByName(j, "CEnvSpark", "m_flDelay");
CEnvSpark.m_nMagnitude = findOffsetByName(j, "CEnvSpark", "m_nMagnitude");
CEnvSpark.m_nTrailLength = findOffsetByName(j, "CEnvSpark", "m_nTrailLength");
CEnvSpark.m_nType = findOffsetByName(j, "CEnvSpark", "m_nType");
CEnvSpark.m_OnSpark = findOffsetByName(j, "CEnvSpark", "m_OnSpark");

// Atribuições para CFuncTrain
// CFuncTrain Offsets
CFuncTrain.m_hCurrentTarget = findOffsetByName(j, "CFuncTrain", "m_hCurrentTarget");
CFuncTrain.m_activated = findOffsetByName(j, "CFuncTrain", "m_activated");
CFuncTrain.m_hEnemy = findOffsetByName(j, "CFuncTrain", "m_hEnemy");
CFuncTrain.m_flBlockDamage = findOffsetByName(j, "CFuncTrain", "m_flBlockDamage");
CFuncTrain.m_flNextBlockTime = findOffsetByName(j, "CFuncTrain", "m_flNextBlockTime");
CFuncTrain.m_iszLastTarget = findOffsetByName(j, "CFuncTrain", "m_iszLastTarget");

// Atribuições para CHostage
// CHostage Offsets
CHostage.m_OnHostageBeginGrab = findOffsetByName(j, "CHostage", "m_OnHostageBeginGrab");
CHostage.m_OnFirstPickedUp = findOffsetByName(j, "CHostage", "m_OnFirstPickedUp");
CHostage.m_OnDroppedNotRescued = findOffsetByName(j, "CHostage", "m_OnDroppedNotRescued");
CHostage.m_OnRescued = findOffsetByName(j, "CHostage", "m_OnRescued");
CHostage.m_entitySpottedState = findOffsetByName(j, "CHostage", "m_entitySpottedState");
CHostage.m_nSpotRules = findOffsetByName(j, "CHostage", "m_nSpotRules");
CHostage.m_uiHostageSpawnExclusionGroupMask = findOffsetByName(j, "CHostage", "m_uiHostageSpawnExclusionGroupMask");
CHostage.m_nHostageSpawnRandomFactor = findOffsetByName(j, "CHostage", "m_nHostageSpawnRandomFactor");
CHostage.m_bRemove = findOffsetByName(j, "CHostage", "m_bRemove");
CHostage.m_vel = findOffsetByName(j, "CHostage", "m_vel");
CHostage.m_isRescued = findOffsetByName(j, "CHostage", "m_isRescued");
CHostage.m_jumpedThisFrame = findOffsetByName(j, "CHostage", "m_jumpedThisFrame");
CHostage.m_nHostageState = findOffsetByName(j, "CHostage", "m_nHostageState");
CHostage.m_leader = findOffsetByName(j, "CHostage", "m_leader");
CHostage.m_lastLeader = findOffsetByName(j, "CHostage", "m_lastLeader");
CHostage.m_reuseTimer = findOffsetByName(j, "CHostage", "m_reuseTimer");
CHostage.m_hasBeenUsed = findOffsetByName(j, "CHostage", "m_hasBeenUsed");
CHostage.m_accel = findOffsetByName(j, "CHostage", "m_accel");
CHostage.m_isRunning = findOffsetByName(j, "CHostage", "m_isRunning");
CHostage.m_isCrouching = findOffsetByName(j, "CHostage", "m_isCrouching");
CHostage.m_jumpTimer = findOffsetByName(j, "CHostage", "m_jumpTimer");
CHostage.m_isWaitingForLeader = findOffsetByName(j, "CHostage", "m_isWaitingForLeader");
CHostage.m_repathTimer = findOffsetByName(j, "CHostage", "m_repathTimer");
CHostage.m_inhibitDoorTimer = findOffsetByName(j, "CHostage", "m_inhibitDoorTimer");
CHostage.m_inhibitObstacleAvoidanceTimer = findOffsetByName(j, "CHostage", "m_inhibitObstacleAvoidanceTimer");
CHostage.m_wiggleTimer = findOffsetByName(j, "CHostage", "m_wiggleTimer");
CHostage.m_isAdjusted = findOffsetByName(j, "CHostage", "m_isAdjusted");
CHostage.m_bHandsHaveBeenCut = findOffsetByName(j, "CHostage", "m_bHandsHaveBeenCut");
CHostage.m_hHostageGrabber = findOffsetByName(j, "CHostage", "m_hHostageGrabber");
CHostage.m_fLastGrabTime = findOffsetByName(j, "CHostage", "m_fLastGrabTime");
CHostage.m_vecPositionWhenStartedDroppingToGround = findOffsetByName(j, "CHostage", "m_vecPositionWhenStartedDroppingToGround");
CHostage.m_vecGrabbedPos = findOffsetByName(j, "CHostage", "m_vecGrabbedPos");
CHostage.m_flRescueStartTime = findOffsetByName(j, "CHostage", "m_flRescueStartTime");
CHostage.m_flGrabSuccessTime = findOffsetByName(j, "CHostage", "m_flGrabSuccessTime");
CHostage.m_flDropStartTime = findOffsetByName(j, "CHostage", "m_flDropStartTime");
CHostage.m_nApproachRewardPayouts = findOffsetByName(j, "CHostage", "m_nApproachRewardPayouts");
CHostage.m_nPickupEventCount = findOffsetByName(j, "CHostage", "m_nPickupEventCount");
CHostage.m_vecSpawnGroundPos = findOffsetByName(j, "CHostage", "m_vecSpawnGroundPos");
CHostage.m_vecHostageResetPosition = findOffsetByName(j, "CHostage", "m_vecHostageResetPosition");

// Atribuições para CNavLinkAreaEntity
// CNavLinkAreaEntity Offsets
CNavLinkAreaEntity.m_flWidth = findOffsetByName(j, "CNavLinkAreaEntity", "m_flWidth");
CNavLinkAreaEntity.m_vLocatorOffset = findOffsetByName(j, "CNavLinkAreaEntity", "m_vLocatorOffset");
CNavLinkAreaEntity.m_qLocatorAnglesOffset = findOffsetByName(j, "CNavLinkAreaEntity", "m_qLocatorAnglesOffset");
CNavLinkAreaEntity.m_strMovementForward = findOffsetByName(j, "CNavLinkAreaEntity", "m_strMovementForward");
CNavLinkAreaEntity.m_strMovementReverse = findOffsetByName(j, "CNavLinkAreaEntity", "m_strMovementReverse");
CNavLinkAreaEntity.m_nNavLinkIdForward = findOffsetByName(j, "CNavLinkAreaEntity", "m_nNavLinkIdForward");
CNavLinkAreaEntity.m_nNavLinkIdReverse = findOffsetByName(j, "CNavLinkAreaEntity", "m_nNavLinkIdReverse");
CNavLinkAreaEntity.m_bEnabled = findOffsetByName(j, "CNavLinkAreaEntity", "m_bEnabled");
CNavLinkAreaEntity.m_strFilterName = findOffsetByName(j, "CNavLinkAreaEntity", "m_strFilterName");
CNavLinkAreaEntity.m_hFilter = findOffsetByName(j, "CNavLinkAreaEntity", "m_hFilter");
CNavLinkAreaEntity.m_OnNavLinkStart = findOffsetByName(j, "CNavLinkAreaEntity", "m_OnNavLinkStart");
CNavLinkAreaEntity.m_OnNavLinkFinish = findOffsetByName(j, "CNavLinkAreaEntity", "m_OnNavLinkFinish");
CNavLinkAreaEntity.m_bIsTerminus = findOffsetByName(j, "CNavLinkAreaEntity", "m_bIsTerminus");

// Atribuições para CFuncMoveLinear
// CFuncMoveLinear Offsets
CFuncMoveLinear.m_authoredPosition = findOffsetByName(j, "CFuncMoveLinear", "m_authoredPosition");
CFuncMoveLinear.m_angMoveEntitySpace = findOffsetByName(j, "CFuncMoveLinear", "m_angMoveEntitySpace");
CFuncMoveLinear.m_vecMoveDirParentSpace = findOffsetByName(j, "CFuncMoveLinear", "m_vecMoveDirParentSpace");
CFuncMoveLinear.m_soundStart = findOffsetByName(j, "CFuncMoveLinear", "m_soundStart");
CFuncMoveLinear.m_soundStop = findOffsetByName(j, "CFuncMoveLinear", "m_soundStop");
CFuncMoveLinear.m_currentSound = findOffsetByName(j, "CFuncMoveLinear", "m_currentSound");
CFuncMoveLinear.m_flBlockDamage = findOffsetByName(j, "CFuncMoveLinear", "m_flBlockDamage");
CFuncMoveLinear.m_flStartPosition = findOffsetByName(j, "CFuncMoveLinear", "m_flStartPosition");
CFuncMoveLinear.m_OnFullyOpen = findOffsetByName(j, "CFuncMoveLinear", "m_OnFullyOpen");
CFuncMoveLinear.m_OnFullyClosed = findOffsetByName(j, "CFuncMoveLinear", "m_OnFullyClosed");
CFuncMoveLinear.m_bCreateMovableNavMesh = findOffsetByName(j, "CFuncMoveLinear", "m_bCreateMovableNavMesh");
CFuncMoveLinear.m_bCreateNavObstacle = findOffsetByName(j, "CFuncMoveLinear", "m_bCreateNavObstacle");

// Atribuições para CCommentaryAuto
// CCommentaryAuto Offsets
CCommentaryAuto.m_OnCommentaryNewGame = findOffsetByName(j, "CCommentaryAuto", "m_OnCommentaryNewGame");
CCommentaryAuto.m_OnCommentaryMidGame = findOffsetByName(j, "CCommentaryAuto", "m_OnCommentaryMidGame");
CCommentaryAuto.m_OnCommentaryMultiplayerSpawn = findOffsetByName(j, "CCommentaryAuto", "m_OnCommentaryMultiplayerSpawn");

// Atribuições para CBaseEntity
// CBaseEntity Offsets
CBaseEntity.m_CBodyComponent = findOffsetByName(j, "CBaseEntity", "m_CBodyComponent");
CBaseEntity.m_NetworkTransmitComponent = findOffsetByName(j, "CBaseEntity", "m_NetworkTransmitComponent");
CBaseEntity.m_aThinkFunctions = findOffsetByName(j, "CBaseEntity", "m_aThinkFunctions");
CBaseEntity.m_iCurrentThinkContext = findOffsetByName(j, "CBaseEntity", "m_iCurrentThinkContext");
CBaseEntity.m_nLastThinkTick = findOffsetByName(j, "CBaseEntity", "m_nLastThinkTick");
CBaseEntity.m_bDisabledContextThinks = findOffsetByName(j, "CBaseEntity", "m_bDisabledContextThinks");
CBaseEntity.m_isSteadyState = findOffsetByName(j, "CBaseEntity", "m_isSteadyState");
CBaseEntity.m_lastNetworkChange = findOffsetByName(j, "CBaseEntity", "m_lastNetworkChange");
CBaseEntity.m_ResponseContexts = findOffsetByName(j, "CBaseEntity", "m_ResponseContexts");
CBaseEntity.m_iszResponseContext = findOffsetByName(j, "CBaseEntity", "m_iszResponseContext");
CBaseEntity.m_iHealth = findOffsetByName(j, "CBaseEntity", "m_iHealth");
CBaseEntity.m_iMaxHealth = findOffsetByName(j, "CBaseEntity", "m_iMaxHealth");
CBaseEntity.m_lifeState = findOffsetByName(j, "CBaseEntity", "m_lifeState");
CBaseEntity.m_flDamageAccumulator = findOffsetByName(j, "CBaseEntity", "m_flDamageAccumulator");
CBaseEntity.m_bTakesDamage = findOffsetByName(j, "CBaseEntity", "m_bTakesDamage");
CBaseEntity.m_nTakeDamageFlags = findOffsetByName(j, "CBaseEntity", "m_nTakeDamageFlags");
CBaseEntity.m_nPlatformType = findOffsetByName(j, "CBaseEntity", "m_nPlatformType");
CBaseEntity.m_MoveCollide = findOffsetByName(j, "CBaseEntity", "m_MoveCollide");
CBaseEntity.m_MoveType = findOffsetByName(j, "CBaseEntity", "m_MoveType");
CBaseEntity.m_nActualMoveType = findOffsetByName(j, "CBaseEntity", "m_nActualMoveType");
CBaseEntity.m_nWaterTouch = findOffsetByName(j, "CBaseEntity", "m_nWaterTouch");
CBaseEntity.m_nSlimeTouch = findOffsetByName(j, "CBaseEntity", "m_nSlimeTouch");
CBaseEntity.m_bRestoreInHierarchy = findOffsetByName(j, "CBaseEntity", "m_bRestoreInHierarchy");
CBaseEntity.m_target = findOffsetByName(j, "CBaseEntity", "m_target");
CBaseEntity.m_hDamageFilter = findOffsetByName(j, "CBaseEntity", "m_hDamageFilter");
CBaseEntity.m_iszDamageFilterName = findOffsetByName(j, "CBaseEntity", "m_iszDamageFilterName");
CBaseEntity.m_flMoveDoneTime = findOffsetByName(j, "CBaseEntity", "m_flMoveDoneTime");
CBaseEntity.m_nSubclassID = findOffsetByName(j, "CBaseEntity", "m_nSubclassID");
CBaseEntity.m_flAnimTime = findOffsetByName(j, "CBaseEntity", "m_flAnimTime");
CBaseEntity.m_flSimulationTime = findOffsetByName(j, "CBaseEntity", "m_flSimulationTime");
CBaseEntity.m_flCreateTime = findOffsetByName(j, "CBaseEntity", "m_flCreateTime");
CBaseEntity.m_bClientSideRagdoll = findOffsetByName(j, "CBaseEntity", "m_bClientSideRagdoll");
CBaseEntity.m_ubInterpolationFrame = findOffsetByName(j, "CBaseEntity", "m_ubInterpolationFrame");
CBaseEntity.m_vPrevVPhysicsUpdatePos = findOffsetByName(j, "CBaseEntity", "m_vPrevVPhysicsUpdatePos");
CBaseEntity.m_iTeamNum = findOffsetByName(j, "CBaseEntity", "m_iTeamNum");
CBaseEntity.m_iGlobalname = findOffsetByName(j, "CBaseEntity", "m_iGlobalname");
CBaseEntity.m_iSentToClients = findOffsetByName(j, "CBaseEntity", "m_iSentToClients");
CBaseEntity.m_flSpeed = findOffsetByName(j, "CBaseEntity", "m_flSpeed");
CBaseEntity.m_sUniqueHammerID = findOffsetByName(j, "CBaseEntity", "m_sUniqueHammerID");
CBaseEntity.m_spawnflags = findOffsetByName(j, "CBaseEntity", "m_spawnflags");
CBaseEntity.m_nNextThinkTick = findOffsetByName(j, "CBaseEntity", "m_nNextThinkTick");
CBaseEntity.m_nSimulationTick = findOffsetByName(j, "CBaseEntity", "m_nSimulationTick");
CBaseEntity.m_OnKilled = findOffsetByName(j, "CBaseEntity", "m_OnKilled");
CBaseEntity.m_fFlags = findOffsetByName(j, "CBaseEntity", "m_fFlags");
CBaseEntity.m_vecAbsVelocity = findOffsetByName(j, "CBaseEntity", "m_vecAbsVelocity");
CBaseEntity.m_vecVelocity = findOffsetByName(j, "CBaseEntity", "m_vecVelocity");
CBaseEntity.m_vecBaseVelocity = findOffsetByName(j, "CBaseEntity", "m_vecBaseVelocity");
CBaseEntity.m_nPushEnumCount = findOffsetByName(j, "CBaseEntity", "m_nPushEnumCount");
CBaseEntity.m_pCollision = findOffsetByName(j, "CBaseEntity", "m_pCollision");
CBaseEntity.m_hEffectEntity = findOffsetByName(j, "CBaseEntity", "m_hEffectEntity");
CBaseEntity.m_hOwnerEntity = findOffsetByName(j, "CBaseEntity", "m_hOwnerEntity");
CBaseEntity.m_fEffects = findOffsetByName(j, "CBaseEntity", "m_fEffects");
CBaseEntity.m_hGroundEntity = findOffsetByName(j, "CBaseEntity", "m_hGroundEntity");
CBaseEntity.m_nGroundBodyIndex = findOffsetByName(j, "CBaseEntity", "m_nGroundBodyIndex");
CBaseEntity.m_flFriction = findOffsetByName(j, "CBaseEntity", "m_flFriction");
CBaseEntity.m_flElasticity = findOffsetByName(j, "CBaseEntity", "m_flElasticity");
CBaseEntity.m_flGravityScale = findOffsetByName(j, "CBaseEntity", "m_flGravityScale");
CBaseEntity.m_flTimeScale = findOffsetByName(j, "CBaseEntity", "m_flTimeScale");
CBaseEntity.m_flWaterLevel = findOffsetByName(j, "CBaseEntity", "m_flWaterLevel");
CBaseEntity.m_bAnimatedEveryTick = findOffsetByName(j, "CBaseEntity", "m_bAnimatedEveryTick");
CBaseEntity.m_bDisableLowViolence = findOffsetByName(j, "CBaseEntity", "m_bDisableLowViolence");
CBaseEntity.m_nWaterType = findOffsetByName(j, "CBaseEntity", "m_nWaterType");
CBaseEntity.m_iEFlags = findOffsetByName(j, "CBaseEntity", "m_iEFlags");
CBaseEntity.m_OnUser1 = findOffsetByName(j, "CBaseEntity", "m_OnUser1");
CBaseEntity.m_OnUser2 = findOffsetByName(j, "CBaseEntity", "m_OnUser2");
CBaseEntity.m_OnUser3 = findOffsetByName(j, "CBaseEntity", "m_OnUser3");
CBaseEntity.m_OnUser4 = findOffsetByName(j, "CBaseEntity", "m_OnUser4");
CBaseEntity.m_iInitialTeamNum = findOffsetByName(j, "CBaseEntity", "m_iInitialTeamNum");
CBaseEntity.m_flNavIgnoreUntilTime = findOffsetByName(j, "CBaseEntity", "m_flNavIgnoreUntilTime");
CBaseEntity.m_vecAngVelocity = findOffsetByName(j, "CBaseEntity", "m_vecAngVelocity");
CBaseEntity.m_bNetworkQuantizeOriginAndAngles = findOffsetByName(j, "CBaseEntity", "m_bNetworkQuantizeOriginAndAngles");
CBaseEntity.m_bLagCompensate = findOffsetByName(j, "CBaseEntity", "m_bLagCompensate");
CBaseEntity.m_flOverriddenFriction = findOffsetByName(j, "CBaseEntity", "m_flOverriddenFriction");
CBaseEntity.m_pBlocker = findOffsetByName(j, "CBaseEntity", "m_pBlocker");
CBaseEntity.m_flLocalTime = findOffsetByName(j, "CBaseEntity", "m_flLocalTime");
CBaseEntity.m_flVPhysicsUpdateLocalTime = findOffsetByName(j, "CBaseEntity", "m_flVPhysicsUpdateLocalTime");
CBaseEntity.m_nBloodType = findOffsetByName(j, "CBaseEntity", "m_nBloodType");

// Atribuições para CLogicMeasureMovement
// CLogicMeasureMovement Offsets
CLogicMeasureMovement.m_strMeasureTarget = findOffsetByName(j, "CLogicMeasureMovement", "m_strMeasureTarget");
CLogicMeasureMovement.m_strMeasureReference = findOffsetByName(j, "CLogicMeasureMovement", "m_strMeasureReference");
CLogicMeasureMovement.m_strTargetReference = findOffsetByName(j, "CLogicMeasureMovement", "m_strTargetReference");
CLogicMeasureMovement.m_hMeasureTarget = findOffsetByName(j, "CLogicMeasureMovement", "m_hMeasureTarget");
CLogicMeasureMovement.m_hMeasureReference = findOffsetByName(j, "CLogicMeasureMovement", "m_hMeasureReference");
CLogicMeasureMovement.m_hTarget = findOffsetByName(j, "CLogicMeasureMovement", "m_hTarget");
CLogicMeasureMovement.m_hTargetReference = findOffsetByName(j, "CLogicMeasureMovement", "m_hTargetReference");
CLogicMeasureMovement.m_flScale = findOffsetByName(j, "CLogicMeasureMovement", "m_flScale");
CLogicMeasureMovement.m_nMeasureType = findOffsetByName(j, "CLogicMeasureMovement", "m_nMeasureType");

// Atribuições para CVoiceContainerBlender
// CVoiceContainerBlender Offsets
CVoiceContainerBlender.m_firstSound = findOffsetByName(j, "CVoiceContainerBlender", "m_firstSound");
CVoiceContainerBlender.m_secondSound = findOffsetByName(j, "CVoiceContainerBlender", "m_secondSound");
CVoiceContainerBlender.m_flBlendFactor = findOffsetByName(j, "CVoiceContainerBlender", "m_flBlendFactor");

// Atribuições para VMixFreeverbDesc_t
// VMixFreeverbDesc_t Offsets
VMixFreeverbDesc_t.m_flRoomSize = findOffsetByName(j, "VMixFreeverbDesc_t", "m_flRoomSize");
VMixFreeverbDesc_t.m_flDamp = findOffsetByName(j, "VMixFreeverbDesc_t", "m_flDamp");
VMixFreeverbDesc_t.m_flWidth = findOffsetByName(j, "VMixFreeverbDesc_t", "m_flWidth");
VMixFreeverbDesc_t.m_flLateReflections = findOffsetByName(j, "VMixFreeverbDesc_t", "m_flLateReflections");

// Atribuições para CVoiceContainerStaticAdditiveSynth__CHarmonic
// CVoiceContainerStaticAdditiveSynth__CHarmonic Offsets
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_nWaveform = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_nWaveform");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_nFundamental = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_nFundamental");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_nOctave = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_nOctave");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_flCents = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_flCents");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_flPhase = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_flPhase");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_curve = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_curve");
CVoiceContainerStaticAdditiveSynth__CHarmonic.m_volumeScaling = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CHarmonic", "m_volumeScaling");

// Atribuições para CVoiceContainerStaticAdditiveSynth__CTone
// CVoiceContainerStaticAdditiveSynth__CTone Offsets
CVoiceContainerStaticAdditiveSynth__CTone.m_harmonics = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CTone", "m_harmonics");
CVoiceContainerStaticAdditiveSynth__CTone.m_curve = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CTone", "m_curve");
CVoiceContainerStaticAdditiveSynth__CTone.m_bSyncInstances = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CTone", "m_bSyncInstances");

// Atribuições para CVoiceContainerRandomSampler
// CVoiceContainerRandomSampler Offsets
CVoiceContainerRandomSampler.m_flAmplitude = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_flAmplitude");
CVoiceContainerRandomSampler.m_flAmplitudeJitter = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_flAmplitudeJitter");
CVoiceContainerRandomSampler.m_flTimeJitter = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_flTimeJitter");
CVoiceContainerRandomSampler.m_flMaxLength = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_flMaxLength");
CVoiceContainerRandomSampler.m_nNumDelayVariations = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_nNumDelayVariations");
CVoiceContainerRandomSampler.m_grainResources = findOffsetByName(j, "CVoiceContainerRandomSampler", "m_grainResources");

// Atribuições para CVSound
// CVSound Offsets
CVSound.m_nRate = findOffsetByName(j, "CVSound", "m_nRate");
CVSound.m_nFormat = findOffsetByName(j, "CVSound", "m_nFormat");
CVSound.m_nChannels = findOffsetByName(j, "CVSound", "m_nChannels");
CVSound.m_nLoopStart = findOffsetByName(j, "CVSound", "m_nLoopStart");
CVSound.m_nSampleCount = findOffsetByName(j, "CVSound", "m_nSampleCount");
CVSound.m_flDuration = findOffsetByName(j, "CVSound", "m_flDuration");
CVSound.m_Sentences = findOffsetByName(j, "CVSound", "m_Sentences");
CVSound.m_nStreamingSize = findOffsetByName(j, "CVSound", "m_nStreamingSize");
CVSound.m_nSeekTable = findOffsetByName(j, "CVSound", "m_nSeekTable");
CVSound.m_nLoopEnd = findOffsetByName(j, "CVSound", "m_nLoopEnd");
CVSound.m_encodedHeader = findOffsetByName(j, "CVSound", "m_encodedHeader");

// Atribuições para CDSPPresetMixgroupModifierTable
// CDSPPresetMixgroupModifierTable Offsets
CDSPPresetMixgroupModifierTable.m_table = findOffsetByName(j, "CDSPPresetMixgroupModifierTable", "m_table");

// Atribuições para CSosGroupActionSoundeventClusterSchema
// CSosGroupActionSoundeventClusterSchema Offsets
CSosGroupActionSoundeventClusterSchema.m_nMinNearby = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_nMinNearby");
CSosGroupActionSoundeventClusterSchema.m_flClusterEpsilon = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_flClusterEpsilon");
CSosGroupActionSoundeventClusterSchema.m_shouldPlayOpvar = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayOpvar");
CSosGroupActionSoundeventClusterSchema.m_shouldPlayClusterChild = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayClusterChild");
CSosGroupActionSoundeventClusterSchema.m_clusterSizeOpvar = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_clusterSizeOpvar");
CSosGroupActionSoundeventClusterSchema.m_groupBoundingBoxMinsOpvar = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMinsOpvar");
CSosGroupActionSoundeventClusterSchema.m_groupBoundingBoxMaxsOpvar = findOffsetByName(j, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMaxsOpvar");

// Atribuições para CSosGroupActionSetSoundeventParameterSchema
// CSosGroupActionSetSoundeventParameterSchema Offsets
CSosGroupActionSetSoundeventParameterSchema.m_nMaxCount = findOffsetByName(j, "CSosGroupActionSetSoundeventParameterSchema", "m_nMaxCount");
CSosGroupActionSetSoundeventParameterSchema.m_flMinValue = findOffsetByName(j, "CSosGroupActionSetSoundeventParameterSchema", "m_flMinValue");
CSosGroupActionSetSoundeventParameterSchema.m_flMaxValue = findOffsetByName(j, "CSosGroupActionSetSoundeventParameterSchema", "m_flMaxValue");
CSosGroupActionSetSoundeventParameterSchema.m_opvarName = findOffsetByName(j, "CSosGroupActionSetSoundeventParameterSchema", "m_opvarName");
CSosGroupActionSetSoundeventParameterSchema.m_nSortType = findOffsetByName(j, "CSosGroupActionSetSoundeventParameterSchema", "m_nSortType");

// Atribuições para CSoundContainerReference
// CSoundContainerReference Offsets
CSoundContainerReference.m_bUseReference = findOffsetByName(j, "CSoundContainerReference", "m_bUseReference");
CSoundContainerReference.m_sound = findOffsetByName(j, "CSoundContainerReference", "m_sound");
CSoundContainerReference.m_pSound = findOffsetByName(j, "CSoundContainerReference", "m_pSound");

// Atribuições para VMixSubgraphSwitchDesc_t
// VMixSubgraphSwitchDesc_t Offsets
VMixSubgraphSwitchDesc_t.m_interpolationMode = findOffsetByName(j, "VMixSubgraphSwitchDesc_t", "m_interpolationMode");
VMixSubgraphSwitchDesc_t.m_bOnlyTailsOnFadeOut = findOffsetByName(j, "VMixSubgraphSwitchDesc_t", "m_bOnlyTailsOnFadeOut");
VMixSubgraphSwitchDesc_t.m_flInterpolationTime = findOffsetByName(j, "VMixSubgraphSwitchDesc_t", "m_flInterpolationTime");

// Atribuições para CVoiceContainerAnalysisBase
// CVoiceContainerAnalysisBase Offsets
CVoiceContainerAnalysisBase.m_bRegenerateCurveOnCompile = findOffsetByName(j, "CVoiceContainerAnalysisBase", "m_bRegenerateCurveOnCompile");
CVoiceContainerAnalysisBase.m_curve = findOffsetByName(j, "CVoiceContainerAnalysisBase", "m_curve");

// Atribuições para CSosGroupActionSoundeventMinMaxValuesSchema
// CSosGroupActionSoundeventMinMaxValuesSchema Offsets
CSosGroupActionSoundeventMinMaxValuesSchema.m_strQueryPublicFieldName = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_strQueryPublicFieldName");
CSosGroupActionSoundeventMinMaxValuesSchema.m_strDelayPublicFieldName = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_strDelayPublicFieldName");
CSosGroupActionSoundeventMinMaxValuesSchema.m_bExcludeStoppedSounds = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_bExcludeStoppedSounds");
CSosGroupActionSoundeventMinMaxValuesSchema.m_bExcludeDelayedSounds = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_bExcludeDelayedSounds");
CSosGroupActionSoundeventMinMaxValuesSchema.m_bExcludeSoundsBelowThreshold = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_bExcludeSoundsBelowThreshold");
CSosGroupActionSoundeventMinMaxValuesSchema.m_flExcludeSoundsMinThresholdValue = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_flExcludeSoundsMinThresholdValue");
CSosGroupActionSoundeventMinMaxValuesSchema.m_bExcludSoundsAboveThreshold = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_bExcludSoundsAboveThreshold");
CSosGroupActionSoundeventMinMaxValuesSchema.m_flExcludeSoundsMaxThresholdValue = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_flExcludeSoundsMaxThresholdValue");
CSosGroupActionSoundeventMinMaxValuesSchema.m_strMinValueName = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_strMinValueName");
CSosGroupActionSoundeventMinMaxValuesSchema.m_strMaxValueName = findOffsetByName(j, "CSosGroupActionSoundeventMinMaxValuesSchema", "m_strMaxValueName");

// Atribuições para VMixPannerDesc_t
// VMixPannerDesc_t Offsets
VMixPannerDesc_t.m_type = findOffsetByName(j, "VMixPannerDesc_t", "m_type");
VMixPannerDesc_t.m_flStrength = findOffsetByName(j, "VMixPannerDesc_t", "m_flStrength");

// Atribuições para CSosGroupActionSoundeventPrioritySchema
// CSosGroupActionSoundeventPrioritySchema Offsets
CSosGroupActionSoundeventPrioritySchema.m_priorityValue = findOffsetByName(j, "CSosGroupActionSoundeventPrioritySchema", "m_priorityValue");
CSosGroupActionSoundeventPrioritySchema.m_priorityVolumeScalar = findOffsetByName(j, "CSosGroupActionSoundeventPrioritySchema", "m_priorityVolumeScalar");
CSosGroupActionSoundeventPrioritySchema.m_priorityContributeButDontRead = findOffsetByName(j, "CSosGroupActionSoundeventPrioritySchema", "m_priorityContributeButDontRead");
CSosGroupActionSoundeventPrioritySchema.m_bPriorityReadButDontContribute = findOffsetByName(j, "CSosGroupActionSoundeventPrioritySchema", "m_bPriorityReadButDontContribute");

// Atribuições para CVoiceContainerRealtimeFMSineWave
// CVoiceContainerRealtimeFMSineWave Offsets
CVoiceContainerRealtimeFMSineWave.m_flCarrierFrequency = findOffsetByName(j, "CVoiceContainerRealtimeFMSineWave", "m_flCarrierFrequency");
CVoiceContainerRealtimeFMSineWave.m_flModulatorFrequency = findOffsetByName(j, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorFrequency");
CVoiceContainerRealtimeFMSineWave.m_flModulatorAmount = findOffsetByName(j, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorAmount");

// Atribuições para SelectedEditItemInfo_t
// SelectedEditItemInfo_t Offsets
SelectedEditItemInfo_t.m_EditItems = findOffsetByName(j, "SelectedEditItemInfo_t", "m_EditItems");

// Atribuições para VMixModDelayDesc_t
// VMixModDelayDesc_t Offsets
VMixModDelayDesc_t.m_feedbackFilter = findOffsetByName(j, "VMixModDelayDesc_t", "m_feedbackFilter");
VMixModDelayDesc_t.m_bPhaseInvert = findOffsetByName(j, "VMixModDelayDesc_t", "m_bPhaseInvert");
VMixModDelayDesc_t.m_flGlideTime = findOffsetByName(j, "VMixModDelayDesc_t", "m_flGlideTime");
VMixModDelayDesc_t.m_flDelay = findOffsetByName(j, "VMixModDelayDesc_t", "m_flDelay");
VMixModDelayDesc_t.m_flOutputGain = findOffsetByName(j, "VMixModDelayDesc_t", "m_flOutputGain");
VMixModDelayDesc_t.m_flFeedbackGain = findOffsetByName(j, "VMixModDelayDesc_t", "m_flFeedbackGain");
VMixModDelayDesc_t.m_flModRate = findOffsetByName(j, "VMixModDelayDesc_t", "m_flModRate");
VMixModDelayDesc_t.m_flModDepth = findOffsetByName(j, "VMixModDelayDesc_t", "m_flModDepth");
VMixModDelayDesc_t.m_bApplyAntialiasing = findOffsetByName(j, "VMixModDelayDesc_t", "m_bApplyAntialiasing");

// Atribuições para VMixBoxverbDesc_t
// VMixBoxverbDesc_t Offsets
VMixBoxverbDesc_t.m_flSizeMax = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flSizeMax");
VMixBoxverbDesc_t.m_flSizeMin = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flSizeMin");
VMixBoxverbDesc_t.m_flComplexity = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flComplexity");
VMixBoxverbDesc_t.m_flDiffusion = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flDiffusion");
VMixBoxverbDesc_t.m_flModDepth = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flModDepth");
VMixBoxverbDesc_t.m_flModRate = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flModRate");
VMixBoxverbDesc_t.m_bParallel = findOffsetByName(j, "VMixBoxverbDesc_t", "m_bParallel");
VMixBoxverbDesc_t.m_filterType = findOffsetByName(j, "VMixBoxverbDesc_t", "m_filterType");
VMixBoxverbDesc_t.m_flWidth = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flWidth");
VMixBoxverbDesc_t.m_flHeight = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flHeight");
VMixBoxverbDesc_t.m_flDepth = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flDepth");
VMixBoxverbDesc_t.m_flFeedbackScale = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flFeedbackScale");
VMixBoxverbDesc_t.m_flFeedbackWidth = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flFeedbackWidth");
VMixBoxverbDesc_t.m_flFeedbackHeight = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flFeedbackHeight");
VMixBoxverbDesc_t.m_flFeedbackDepth = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flFeedbackDepth");
VMixBoxverbDesc_t.m_flOutputGain = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flOutputGain");
VMixBoxverbDesc_t.m_flTaps = findOffsetByName(j, "VMixBoxverbDesc_t", "m_flTaps");

// Atribuições para CSosGroupActionSchema
// CSosGroupActionSchema Offsets
CSosGroupActionSchema.m_name = findOffsetByName(j, "CSosGroupActionSchema", "m_name");
CSosGroupActionSchema.m_actionType = findOffsetByName(j, "CSosGroupActionSchema", "m_actionType");
CSosGroupActionSchema.m_actionInstanceType = findOffsetByName(j, "CSosGroupActionSchema", "m_actionInstanceType");

// Atribuições para CSosSoundEventGroupSchema
// CSosSoundEventGroupSchema Offsets
CSosSoundEventGroupSchema.m_name = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_name");
CSosSoundEventGroupSchema.m_nType = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_nType");
CSosSoundEventGroupSchema.m_bIsBlocking = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_bIsBlocking");
CSosSoundEventGroupSchema.m_nBlockMaxCount = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_nBlockMaxCount");
CSosSoundEventGroupSchema.m_bInvertMatch = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_bInvertMatch");
CSosSoundEventGroupSchema.m_matchPattern = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_matchPattern");
CSosSoundEventGroupSchema.m_branchPattern = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_branchPattern");
CSosSoundEventGroupSchema.m_flLifeSpanTime = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_flLifeSpanTime");
CSosSoundEventGroupSchema.m_vActions = findOffsetByName(j, "CSosSoundEventGroupSchema", "m_vActions");

// Atribuições para CSosGroupBranchPattern
// CSosGroupBranchPattern Offsets
CSosGroupBranchPattern.m_bMatchEventName = findOffsetByName(j, "CSosGroupBranchPattern", "m_bMatchEventName");
CSosGroupBranchPattern.m_bMatchEventSubString = findOffsetByName(j, "CSosGroupBranchPattern", "m_bMatchEventSubString");
CSosGroupBranchPattern.m_bMatchEntIndex = findOffsetByName(j, "CSosGroupBranchPattern", "m_bMatchEntIndex");
CSosGroupBranchPattern.m_bMatchOpvar = findOffsetByName(j, "CSosGroupBranchPattern", "m_bMatchOpvar");
CSosGroupBranchPattern.m_bMatchString = findOffsetByName(j, "CSosGroupBranchPattern", "m_bMatchString");

// Atribuições para VMixDynamics3BandDesc_t
// VMixDynamics3BandDesc_t Offsets
VMixDynamics3BandDesc_t.m_fldbGainOutput = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_fldbGainOutput");
VMixDynamics3BandDesc_t.m_flRMSTimeMS = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flRMSTimeMS");
VMixDynamics3BandDesc_t.m_fldbKneeWidth = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_fldbKneeWidth");
VMixDynamics3BandDesc_t.m_flDepth = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flDepth");
VMixDynamics3BandDesc_t.m_flWetMix = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flWetMix");
VMixDynamics3BandDesc_t.m_flTimeScale = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flTimeScale");
VMixDynamics3BandDesc_t.m_flLowCutoffFreq = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flLowCutoffFreq");
VMixDynamics3BandDesc_t.m_flHighCutoffFreq = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_flHighCutoffFreq");
VMixDynamics3BandDesc_t.m_bPeakMode = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_bPeakMode");
VMixDynamics3BandDesc_t.m_bandDesc = findOffsetByName(j, "VMixDynamics3BandDesc_t", "m_bandDesc");

// Atribuições para CDSPMixgroupModifier
// CDSPMixgroupModifier Offsets
CDSPMixgroupModifier.m_mixgroup = findOffsetByName(j, "CDSPMixgroupModifier", "m_mixgroup");
CDSPMixgroupModifier.m_flModifier = findOffsetByName(j, "CDSPMixgroupModifier", "m_flModifier");
CDSPMixgroupModifier.m_flModifierMin = findOffsetByName(j, "CDSPMixgroupModifier", "m_flModifierMin");
CDSPMixgroupModifier.m_flSourceModifier = findOffsetByName(j, "CDSPMixgroupModifier", "m_flSourceModifier");
CDSPMixgroupModifier.m_flSourceModifierMin = findOffsetByName(j, "CDSPMixgroupModifier", "m_flSourceModifierMin");
CDSPMixgroupModifier.m_flListenerReverbModifierWhenSourceReverbIsActive = findOffsetByName(j, "CDSPMixgroupModifier", "m_flListenerReverbModifierWhenSourceReverbIsActive");

// Atribuições para CAudioMorphData
// CAudioMorphData Offsets
CAudioMorphData.m_times = findOffsetByName(j, "CAudioMorphData", "m_times");
CAudioMorphData.m_nameHashCodes = findOffsetByName(j, "CAudioMorphData", "m_nameHashCodes");
CAudioMorphData.m_nameStrings = findOffsetByName(j, "CAudioMorphData", "m_nameStrings");
CAudioMorphData.m_samples = findOffsetByName(j, "CAudioMorphData", "m_samples");
CAudioMorphData.m_flEaseIn = findOffsetByName(j, "CAudioMorphData", "m_flEaseIn");
CAudioMorphData.m_flEaseOut = findOffsetByName(j, "CAudioMorphData", "m_flEaseOut");

// Atribuições para CVoiceContainerStaticAdditiveSynth
// CVoiceContainerStaticAdditiveSynth Offsets
CVoiceContainerStaticAdditiveSynth.m_tones = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth", "m_tones");

// Atribuições para CVoiceContainerShapedNoise
// CVoiceContainerShapedNoise Offsets
CVoiceContainerShapedNoise.m_bUseCurveForFrequency = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_bUseCurveForFrequency");
CVoiceContainerShapedNoise.m_flFrequency = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_flFrequency");
CVoiceContainerShapedNoise.m_frequencySweep = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_frequencySweep");
CVoiceContainerShapedNoise.m_bUseCurveForResonance = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_bUseCurveForResonance");
CVoiceContainerShapedNoise.m_flResonance = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_flResonance");
CVoiceContainerShapedNoise.m_resonanceSweep = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_resonanceSweep");
CVoiceContainerShapedNoise.m_bUseCurveForAmplitude = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_bUseCurveForAmplitude");
CVoiceContainerShapedNoise.m_flGainInDecibels = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_flGainInDecibels");
CVoiceContainerShapedNoise.m_gainSweep = findOffsetByName(j, "CVoiceContainerShapedNoise", "m_gainSweep");

// Atribuições para CDspPresetModifierList
// CDspPresetModifierList Offsets
CDspPresetModifierList.m_dspName = findOffsetByName(j, "CDspPresetModifierList", "m_dspName");
CDspPresetModifierList.m_modifiers = findOffsetByName(j, "CDspPresetModifierList", "m_modifiers");

// Atribuições para CVoiceContainerBase
// CVoiceContainerBase Offsets
CVoiceContainerBase.m_vSound = findOffsetByName(j, "CVoiceContainerBase", "m_vSound");
CVoiceContainerBase.m_pEnvelopeAnalyzer = findOffsetByName(j, "CVoiceContainerBase", "m_pEnvelopeAnalyzer");

// Atribuições para CVoiceContainerGranulator
// CVoiceContainerGranulator Offsets
CVoiceContainerGranulator.m_flGrainLength = findOffsetByName(j, "CVoiceContainerGranulator", "m_flGrainLength");
CVoiceContainerGranulator.m_flGrainCrossfadeAmount = findOffsetByName(j, "CVoiceContainerGranulator", "m_flGrainCrossfadeAmount");
CVoiceContainerGranulator.m_flStartJitter = findOffsetByName(j, "CVoiceContainerGranulator", "m_flStartJitter");
CVoiceContainerGranulator.m_flPlaybackJitter = findOffsetByName(j, "CVoiceContainerGranulator", "m_flPlaybackJitter");
CVoiceContainerGranulator.m_sourceAudio = findOffsetByName(j, "CVoiceContainerGranulator", "m_sourceAudio");

// Atribuições para VMixDelayDesc_t
// VMixDelayDesc_t Offsets
VMixDelayDesc_t.m_feedbackFilter = findOffsetByName(j, "VMixDelayDesc_t", "m_feedbackFilter");
VMixDelayDesc_t.m_bEnableFilter = findOffsetByName(j, "VMixDelayDesc_t", "m_bEnableFilter");
VMixDelayDesc_t.m_flDelay = findOffsetByName(j, "VMixDelayDesc_t", "m_flDelay");
VMixDelayDesc_t.m_flDirectGain = findOffsetByName(j, "VMixDelayDesc_t", "m_flDirectGain");
VMixDelayDesc_t.m_flDelayGain = findOffsetByName(j, "VMixDelayDesc_t", "m_flDelayGain");
VMixDelayDesc_t.m_flFeedbackGain = findOffsetByName(j, "VMixDelayDesc_t", "m_flFeedbackGain");
VMixDelayDesc_t.m_flWidth = findOffsetByName(j, "VMixDelayDesc_t", "m_flWidth");

// Atribuições para VMixEQ8Desc_t
// VMixEQ8Desc_t Offsets
VMixEQ8Desc_t.m_stages = findOffsetByName(j, "VMixEQ8Desc_t", "m_stages");

// Atribuições para CAudioPhonemeTag
// CAudioPhonemeTag Offsets
CAudioPhonemeTag.m_flStartTime = findOffsetByName(j, "CAudioPhonemeTag", "m_flStartTime");
CAudioPhonemeTag.m_flEndTime = findOffsetByName(j, "CAudioPhonemeTag", "m_flEndTime");
CAudioPhonemeTag.m_nPhonemeCode = findOffsetByName(j, "CAudioPhonemeTag", "m_nPhonemeCode");

// Atribuições para CSosGroupActionSoundeventCountSchema
// CSosGroupActionSoundeventCountSchema Offsets
CSosGroupActionSoundeventCountSchema.m_bExcludeStoppedSounds = findOffsetByName(j, "CSosGroupActionSoundeventCountSchema", "m_bExcludeStoppedSounds");
CSosGroupActionSoundeventCountSchema.m_strCountKeyName = findOffsetByName(j, "CSosGroupActionSoundeventCountSchema", "m_strCountKeyName");

// Atribuições para CVoiceContainerEnvelopeAnalyzer
// CVoiceContainerEnvelopeAnalyzer Offsets
CVoiceContainerEnvelopeAnalyzer.m_mode = findOffsetByName(j, "CVoiceContainerEnvelopeAnalyzer", "m_mode");
CVoiceContainerEnvelopeAnalyzer.m_nSamples = findOffsetByName(j, "CVoiceContainerEnvelopeAnalyzer", "m_nSamples");
CVoiceContainerEnvelopeAnalyzer.m_flThreshold = findOffsetByName(j, "CVoiceContainerEnvelopeAnalyzer", "m_flThreshold");

// Atribuições para CSoundEventMetaData
// CSoundEventMetaData Offsets
CSoundEventMetaData.m_soundEventVMix = findOffsetByName(j, "CSoundEventMetaData", "m_soundEventVMix");

// Atribuições para VMixPitchShiftDesc_t
// VMixPitchShiftDesc_t Offsets
VMixPitchShiftDesc_t.m_nGrainSampleCount = findOffsetByName(j, "VMixPitchShiftDesc_t", "m_nGrainSampleCount");
VMixPitchShiftDesc_t.m_flPitchShift = findOffsetByName(j, "VMixPitchShiftDesc_t", "m_flPitchShift");
VMixPitchShiftDesc_t.m_nQuality = findOffsetByName(j, "VMixPitchShiftDesc_t", "m_nQuality");
VMixPitchShiftDesc_t.m_nProcType = findOffsetByName(j, "VMixPitchShiftDesc_t", "m_nProcType");

// Atribuições para CAudioEmphasisSample
// CAudioEmphasisSample Offsets
CAudioEmphasisSample.m_flTime = findOffsetByName(j, "CAudioEmphasisSample", "m_flTime");
CAudioEmphasisSample.m_flValue = findOffsetByName(j, "CAudioEmphasisSample", "m_flValue");

// Atribuições para CVoiceContainerSet
// CVoiceContainerSet Offsets
CVoiceContainerSet.m_soundsToPlay = findOffsetByName(j, "CVoiceContainerSet", "m_soundsToPlay");

// Atribuições para VMixConvolutionDesc_t
// VMixConvolutionDesc_t Offsets
VMixConvolutionDesc_t.m_fldbGain = findOffsetByName(j, "VMixConvolutionDesc_t", "m_fldbGain");
VMixConvolutionDesc_t.m_flPreDelayMS = findOffsetByName(j, "VMixConvolutionDesc_t", "m_flPreDelayMS");
VMixConvolutionDesc_t.m_flWetMix = findOffsetByName(j, "VMixConvolutionDesc_t", "m_flWetMix");
VMixConvolutionDesc_t.m_fldbLow = findOffsetByName(j, "VMixConvolutionDesc_t", "m_fldbLow");
VMixConvolutionDesc_t.m_fldbMid = findOffsetByName(j, "VMixConvolutionDesc_t", "m_fldbMid");
VMixConvolutionDesc_t.m_fldbHigh = findOffsetByName(j, "VMixConvolutionDesc_t", "m_fldbHigh");
VMixConvolutionDesc_t.m_flLowCutoffFreq = findOffsetByName(j, "VMixConvolutionDesc_t", "m_flLowCutoffFreq");
VMixConvolutionDesc_t.m_flHighCutoffFreq = findOffsetByName(j, "VMixConvolutionDesc_t", "m_flHighCutoffFreq");

// Atribuições para CVoiceContainerSetElement
// CVoiceContainerSetElement Offsets
CVoiceContainerSetElement.m_sound = findOffsetByName(j, "CVoiceContainerSetElement", "m_sound");
CVoiceContainerSetElement.m_flVolumeDB = findOffsetByName(j, "CVoiceContainerSetElement", "m_flVolumeDB");

// Atribuições para CSosSoundEventGroupListSchema
// CSosSoundEventGroupListSchema Offsets
CSosSoundEventGroupListSchema.m_groupList = findOffsetByName(j, "CSosSoundEventGroupListSchema", "m_groupList");

// Atribuições para CSosGroupMatchPattern
// CSosGroupMatchPattern Offsets
CSosGroupMatchPattern.m_matchSoundEventName = findOffsetByName(j, "CSosGroupMatchPattern", "m_matchSoundEventName");
CSosGroupMatchPattern.m_matchSoundEventSubString = findOffsetByName(j, "CSosGroupMatchPattern", "m_matchSoundEventSubString");
CSosGroupMatchPattern.m_flEntIndex = findOffsetByName(j, "CSosGroupMatchPattern", "m_flEntIndex");
CSosGroupMatchPattern.m_flOpvar = findOffsetByName(j, "CSosGroupMatchPattern", "m_flOpvar");
CSosGroupMatchPattern.m_opvarString = findOffsetByName(j, "CSosGroupMatchPattern", "m_opvarString");

// Atribuições para SosEditItemInfo_t
// SosEditItemInfo_t Offsets
SosEditItemInfo_t.itemType = findOffsetByName(j, "SosEditItemInfo_t", "itemType");
SosEditItemInfo_t.itemName = findOffsetByName(j, "SosEditItemInfo_t", "itemName");
SosEditItemInfo_t.itemTypeName = findOffsetByName(j, "SosEditItemInfo_t", "itemTypeName");
SosEditItemInfo_t.itemKVString = findOffsetByName(j, "SosEditItemInfo_t", "itemKVString");
SosEditItemInfo_t.itemPos = findOffsetByName(j, "SosEditItemInfo_t", "itemPos");

// Atribuições para VMixPlateverbDesc_t
// VMixPlateverbDesc_t Offsets
VMixPlateverbDesc_t.m_flPrefilter = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flPrefilter");
VMixPlateverbDesc_t.m_flInputDiffusion1 = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flInputDiffusion1");
VMixPlateverbDesc_t.m_flInputDiffusion2 = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flInputDiffusion2");
VMixPlateverbDesc_t.m_flDecay = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flDecay");
VMixPlateverbDesc_t.m_flDamp = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flDamp");
VMixPlateverbDesc_t.m_flFeedbackDiffusion1 = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion1");
VMixPlateverbDesc_t.m_flFeedbackDiffusion2 = findOffsetByName(j, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion2");

// Atribuições para CSoundContainerReferenceArray
// CSoundContainerReferenceArray Offsets
CSoundContainerReferenceArray.m_bUseReference = findOffsetByName(j, "CSoundContainerReferenceArray", "m_bUseReference");
CSoundContainerReferenceArray.m_sounds = findOffsetByName(j, "CSoundContainerReferenceArray", "m_sounds");
CSoundContainerReferenceArray.m_pSounds = findOffsetByName(j, "CSoundContainerReferenceArray", "m_pSounds");

// Atribuições para VMixDiffusorDesc_t
// VMixDiffusorDesc_t Offsets
VMixDiffusorDesc_t.m_flSize = findOffsetByName(j, "VMixDiffusorDesc_t", "m_flSize");
VMixDiffusorDesc_t.m_flComplexity = findOffsetByName(j, "VMixDiffusorDesc_t", "m_flComplexity");
VMixDiffusorDesc_t.m_flFeedback = findOffsetByName(j, "VMixDiffusorDesc_t", "m_flFeedback");
VMixDiffusorDesc_t.m_flOutputGain = findOffsetByName(j, "VMixDiffusorDesc_t", "m_flOutputGain");

// Atribuições para VMixDynamicsCompressorDesc_t
// VMixDynamicsCompressorDesc_t Offsets
VMixDynamicsCompressorDesc_t.m_fldbOutputGain = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_fldbOutputGain");
VMixDynamicsCompressorDesc_t.m_fldbCompressionThreshold = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_fldbCompressionThreshold");
VMixDynamicsCompressorDesc_t.m_fldbKneeWidth = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_fldbKneeWidth");
VMixDynamicsCompressorDesc_t.m_flCompressionRatio = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_flCompressionRatio");
VMixDynamicsCompressorDesc_t.m_flAttackTimeMS = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_flAttackTimeMS");
VMixDynamicsCompressorDesc_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_flReleaseTimeMS");
VMixDynamicsCompressorDesc_t.m_flRMSTimeMS = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_flRMSTimeMS");
VMixDynamicsCompressorDesc_t.m_flWetMix = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_flWetMix");
VMixDynamicsCompressorDesc_t.m_bPeakMode = findOffsetByName(j, "VMixDynamicsCompressorDesc_t", "m_bPeakMode");

// Atribuições para VMixShaperDesc_t
// VMixShaperDesc_t Offsets
VMixShaperDesc_t.m_nShape = findOffsetByName(j, "VMixShaperDesc_t", "m_nShape");
VMixShaperDesc_t.m_fldbDrive = findOffsetByName(j, "VMixShaperDesc_t", "m_fldbDrive");
VMixShaperDesc_t.m_fldbOutputGain = findOffsetByName(j, "VMixShaperDesc_t", "m_fldbOutputGain");
VMixShaperDesc_t.m_flWetMix = findOffsetByName(j, "VMixShaperDesc_t", "m_flWetMix");
VMixShaperDesc_t.m_nOversampleFactor = findOffsetByName(j, "VMixShaperDesc_t", "m_nOversampleFactor");

// Atribuições para VMixEnvelopeDesc_t
// VMixEnvelopeDesc_t Offsets
VMixEnvelopeDesc_t.m_flAttackTimeMS = findOffsetByName(j, "VMixEnvelopeDesc_t", "m_flAttackTimeMS");
VMixEnvelopeDesc_t.m_flHoldTimeMS = findOffsetByName(j, "VMixEnvelopeDesc_t", "m_flHoldTimeMS");
VMixEnvelopeDesc_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixEnvelopeDesc_t", "m_flReleaseTimeMS");

// Atribuições para CAudioSentence
// CAudioSentence Offsets
CAudioSentence.m_bShouldVoiceDuck = findOffsetByName(j, "CAudioSentence", "m_bShouldVoiceDuck");
CAudioSentence.m_RunTimePhonemes = findOffsetByName(j, "CAudioSentence", "m_RunTimePhonemes");
CAudioSentence.m_EmphasisSamples = findOffsetByName(j, "CAudioSentence", "m_EmphasisSamples");
CAudioSentence.m_morphData = findOffsetByName(j, "CAudioSentence", "m_morphData");

// Atribuições para CSosGroupActionLimitSchema
// CSosGroupActionLimitSchema Offsets
CSosGroupActionLimitSchema.m_nMaxCount = findOffsetByName(j, "CSosGroupActionLimitSchema", "m_nMaxCount");
CSosGroupActionLimitSchema.m_nStopType = findOffsetByName(j, "CSosGroupActionLimitSchema", "m_nStopType");
CSosGroupActionLimitSchema.m_nSortType = findOffsetByName(j, "CSosGroupActionLimitSchema", "m_nSortType");

// Atribuições para CVoiceContainerAmpedDecayingSineWave
// CVoiceContainerAmpedDecayingSineWave Offsets
CVoiceContainerAmpedDecayingSineWave.m_flGainAmount = findOffsetByName(j, "CVoiceContainerAmpedDecayingSineWave", "m_flGainAmount");

// Atribuições para CVoiceContainerEnvelope
// CVoiceContainerEnvelope Offsets
CVoiceContainerEnvelope.m_sound = findOffsetByName(j, "CVoiceContainerEnvelope", "m_sound");
CVoiceContainerEnvelope.m_analysisContainer = findOffsetByName(j, "CVoiceContainerEnvelope", "m_analysisContainer");

// Atribuições para VMixAutoFilterDesc_t
// VMixAutoFilterDesc_t Offsets
VMixAutoFilterDesc_t.m_flEnvelopeAmount = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flEnvelopeAmount");
VMixAutoFilterDesc_t.m_flAttackTimeMS = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flAttackTimeMS");
VMixAutoFilterDesc_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flReleaseTimeMS");
VMixAutoFilterDesc_t.m_filter = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_filter");
VMixAutoFilterDesc_t.m_flLFOAmount = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flLFOAmount");
VMixAutoFilterDesc_t.m_flLFORate = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flLFORate");
VMixAutoFilterDesc_t.m_flPhase = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_flPhase");
VMixAutoFilterDesc_t.m_nLFOShape = findOffsetByName(j, "VMixAutoFilterDesc_t", "m_nLFOShape");

// Atribuições para VMixDynamicsBand_t
// VMixDynamicsBand_t Offsets
VMixDynamicsBand_t.m_fldbGainInput = findOffsetByName(j, "VMixDynamicsBand_t", "m_fldbGainInput");
VMixDynamicsBand_t.m_fldbGainOutput = findOffsetByName(j, "VMixDynamicsBand_t", "m_fldbGainOutput");
VMixDynamicsBand_t.m_fldbThresholdBelow = findOffsetByName(j, "VMixDynamicsBand_t", "m_fldbThresholdBelow");
VMixDynamicsBand_t.m_fldbThresholdAbove = findOffsetByName(j, "VMixDynamicsBand_t", "m_fldbThresholdAbove");
VMixDynamicsBand_t.m_flRatioBelow = findOffsetByName(j, "VMixDynamicsBand_t", "m_flRatioBelow");
VMixDynamicsBand_t.m_flRatioAbove = findOffsetByName(j, "VMixDynamicsBand_t", "m_flRatioAbove");
VMixDynamicsBand_t.m_flAttackTimeMS = findOffsetByName(j, "VMixDynamicsBand_t", "m_flAttackTimeMS");
VMixDynamicsBand_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixDynamicsBand_t", "m_flReleaseTimeMS");
VMixDynamicsBand_t.m_bEnable = findOffsetByName(j, "VMixDynamicsBand_t", "m_bEnable");
VMixDynamicsBand_t.m_bSolo = findOffsetByName(j, "VMixDynamicsBand_t", "m_bSolo");

// Atribuições para VMixEffectChainDesc_t
// VMixEffectChainDesc_t Offsets
VMixEffectChainDesc_t.m_flCrossfadeTime = findOffsetByName(j, "VMixEffectChainDesc_t", "m_flCrossfadeTime");

// Atribuições para CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance
// CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance Offsets
CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance.m_flMinVolume = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance", "m_flMinVolume");
CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance.m_nInstancesAtMinVolume = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance", "m_nInstancesAtMinVolume");
CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance.m_flMaxVolume = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance", "m_flMaxVolume");
CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance.m_nInstancesAtMaxVolume = findOffsetByName(j, "CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance", "m_nInstancesAtMaxVolume");

// Atribuições para CVoiceContainerSelector
// CVoiceContainerSelector Offsets
CVoiceContainerSelector.m_mode = findOffsetByName(j, "CVoiceContainerSelector", "m_mode");
CVoiceContainerSelector.m_soundsToPlay = findOffsetByName(j, "CVoiceContainerSelector", "m_soundsToPlay");
CVoiceContainerSelector.m_fProbabilityWeights = findOffsetByName(j, "CVoiceContainerSelector", "m_fProbabilityWeights");

// Atribuições para CSosGroupActionTimeBlockLimitSchema
// CSosGroupActionTimeBlockLimitSchema Offsets
CSosGroupActionTimeBlockLimitSchema.m_nMaxCount = findOffsetByName(j, "CSosGroupActionTimeBlockLimitSchema", "m_nMaxCount");
CSosGroupActionTimeBlockLimitSchema.m_flMaxDuration = findOffsetByName(j, "CSosGroupActionTimeBlockLimitSchema", "m_flMaxDuration");

// Atribuições para CTestBlendContainer
// CTestBlendContainer Offsets
CTestBlendContainer.m_firstSound = findOffsetByName(j, "CTestBlendContainer", "m_firstSound");
CTestBlendContainer.m_secondSound = findOffsetByName(j, "CTestBlendContainer", "m_secondSound");

// Atribuições para CSosGroupActionMemberCountEnvelopeSchema
// CSosGroupActionMemberCountEnvelopeSchema Offsets
CSosGroupActionMemberCountEnvelopeSchema.m_nBaseCount = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_nBaseCount");
CSosGroupActionMemberCountEnvelopeSchema.m_nTargetCount = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_nTargetCount");
CSosGroupActionMemberCountEnvelopeSchema.m_flBaseValue = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_flBaseValue");
CSosGroupActionMemberCountEnvelopeSchema.m_flTargetValue = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_flTargetValue");
CSosGroupActionMemberCountEnvelopeSchema.m_flAttack = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_flAttack");
CSosGroupActionMemberCountEnvelopeSchema.m_flDecay = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_flDecay");
CSosGroupActionMemberCountEnvelopeSchema.m_resultVarName = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_resultVarName");
CSosGroupActionMemberCountEnvelopeSchema.m_bSaveToGroup = findOffsetByName(j, "CSosGroupActionMemberCountEnvelopeSchema", "m_bSaveToGroup");

// Atribuições para CVoiceContainerSwitch
// CVoiceContainerSwitch Offsets
CVoiceContainerSwitch.m_soundsToPlay = findOffsetByName(j, "CVoiceContainerSwitch", "m_soundsToPlay");

// Atribuições para CSosGroupActionTimeLimitSchema
// CSosGroupActionTimeLimitSchema Offsets
CSosGroupActionTimeLimitSchema.m_flMaxDuration = findOffsetByName(j, "CSosGroupActionTimeLimitSchema", "m_flMaxDuration");

// Atribuições para VMixVocoderDesc_t
// VMixVocoderDesc_t Offsets
VMixVocoderDesc_t.m_nBandCount = findOffsetByName(j, "VMixVocoderDesc_t", "m_nBandCount");
VMixVocoderDesc_t.m_flBandwidth = findOffsetByName(j, "VMixVocoderDesc_t", "m_flBandwidth");
VMixVocoderDesc_t.m_fldBModGain = findOffsetByName(j, "VMixVocoderDesc_t", "m_fldBModGain");
VMixVocoderDesc_t.m_flFreqRangeStart = findOffsetByName(j, "VMixVocoderDesc_t", "m_flFreqRangeStart");
VMixVocoderDesc_t.m_flFreqRangeEnd = findOffsetByName(j, "VMixVocoderDesc_t", "m_flFreqRangeEnd");
VMixVocoderDesc_t.m_fldBUnvoicedGain = findOffsetByName(j, "VMixVocoderDesc_t", "m_fldBUnvoicedGain");
VMixVocoderDesc_t.m_flAttackTimeMS = findOffsetByName(j, "VMixVocoderDesc_t", "m_flAttackTimeMS");
VMixVocoderDesc_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixVocoderDesc_t", "m_flReleaseTimeMS");
VMixVocoderDesc_t.m_nDebugBand = findOffsetByName(j, "VMixVocoderDesc_t", "m_nDebugBand");
VMixVocoderDesc_t.m_bPeakMode = findOffsetByName(j, "VMixVocoderDesc_t", "m_bPeakMode");

// Atribuições para VMixUtilityDesc_t
// VMixUtilityDesc_t Offsets
VMixUtilityDesc_t.m_nOp = findOffsetByName(j, "VMixUtilityDesc_t", "m_nOp");
VMixUtilityDesc_t.m_flInputPan = findOffsetByName(j, "VMixUtilityDesc_t", "m_flInputPan");
VMixUtilityDesc_t.m_flOutputBalance = findOffsetByName(j, "VMixUtilityDesc_t", "m_flOutputBalance");
VMixUtilityDesc_t.m_fldbOutputGain = findOffsetByName(j, "VMixUtilityDesc_t", "m_fldbOutputGain");
VMixUtilityDesc_t.m_bBassMono = findOffsetByName(j, "VMixUtilityDesc_t", "m_bBassMono");
VMixUtilityDesc_t.m_flBassFreq = findOffsetByName(j, "VMixUtilityDesc_t", "m_flBassFreq");

// Atribuições para CVoiceContainerLoopTrigger
// CVoiceContainerLoopTrigger Offsets
CVoiceContainerLoopTrigger.m_sound = findOffsetByName(j, "CVoiceContainerLoopTrigger", "m_sound");
CVoiceContainerLoopTrigger.m_flRetriggerTimeMin = findOffsetByName(j, "CVoiceContainerLoopTrigger", "m_flRetriggerTimeMin");
CVoiceContainerLoopTrigger.m_flRetriggerTimeMax = findOffsetByName(j, "CVoiceContainerLoopTrigger", "m_flRetriggerTimeMax");
CVoiceContainerLoopTrigger.m_flFadeTime = findOffsetByName(j, "CVoiceContainerLoopTrigger", "m_flFadeTime");
CVoiceContainerLoopTrigger.m_bCrossFade = findOffsetByName(j, "CVoiceContainerLoopTrigger", "m_bCrossFade");

// Atribuições para CVoiceContainerDecayingSineWave
// CVoiceContainerDecayingSineWave Offsets
CVoiceContainerDecayingSineWave.m_flFrequency = findOffsetByName(j, "CVoiceContainerDecayingSineWave", "m_flFrequency");
CVoiceContainerDecayingSineWave.m_flDecayTime = findOffsetByName(j, "CVoiceContainerDecayingSineWave", "m_flDecayTime");

// Atribuições para VMixFilterDesc_t
// VMixFilterDesc_t Offsets
VMixFilterDesc_t.m_nFilterType = findOffsetByName(j, "VMixFilterDesc_t", "m_nFilterType");
VMixFilterDesc_t.m_nFilterSlope = findOffsetByName(j, "VMixFilterDesc_t", "m_nFilterSlope");
VMixFilterDesc_t.m_bEnabled = findOffsetByName(j, "VMixFilterDesc_t", "m_bEnabled");
VMixFilterDesc_t.m_fldbGain = findOffsetByName(j, "VMixFilterDesc_t", "m_fldbGain");
VMixFilterDesc_t.m_flCutoffFreq = findOffsetByName(j, "VMixFilterDesc_t", "m_flCutoffFreq");
VMixFilterDesc_t.m_flQ = findOffsetByName(j, "VMixFilterDesc_t", "m_flQ");

// Atribuições para VMixOscDesc_t
// VMixOscDesc_t Offsets
VMixOscDesc_t.oscType = findOffsetByName(j, "VMixOscDesc_t", "oscType");
VMixOscDesc_t.m_freq = findOffsetByName(j, "VMixOscDesc_t", "m_freq");
VMixOscDesc_t.m_flPhase = findOffsetByName(j, "VMixOscDesc_t", "m_flPhase");

// Atribuições para VMixDynamicsDesc_t
// VMixDynamicsDesc_t Offsets
VMixDynamicsDesc_t.m_fldbGain = findOffsetByName(j, "VMixDynamicsDesc_t", "m_fldbGain");
VMixDynamicsDesc_t.m_fldbNoiseGateThreshold = findOffsetByName(j, "VMixDynamicsDesc_t", "m_fldbNoiseGateThreshold");
VMixDynamicsDesc_t.m_fldbCompressionThreshold = findOffsetByName(j, "VMixDynamicsDesc_t", "m_fldbCompressionThreshold");
VMixDynamicsDesc_t.m_fldbLimiterThreshold = findOffsetByName(j, "VMixDynamicsDesc_t", "m_fldbLimiterThreshold");
VMixDynamicsDesc_t.m_fldbKneeWidth = findOffsetByName(j, "VMixDynamicsDesc_t", "m_fldbKneeWidth");
VMixDynamicsDesc_t.m_flRatio = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flRatio");
VMixDynamicsDesc_t.m_flLimiterRatio = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flLimiterRatio");
VMixDynamicsDesc_t.m_flAttackTimeMS = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flAttackTimeMS");
VMixDynamicsDesc_t.m_flReleaseTimeMS = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flReleaseTimeMS");
VMixDynamicsDesc_t.m_flRMSTimeMS = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flRMSTimeMS");
VMixDynamicsDesc_t.m_flWetMix = findOffsetByName(j, "VMixDynamicsDesc_t", "m_flWetMix");
VMixDynamicsDesc_t.m_bPeakMode = findOffsetByName(j, "VMixDynamicsDesc_t", "m_bPeakMode");

// Atribuições para RnSoftbodySpring_t
// RnSoftbodySpring_t Offsets
RnSoftbodySpring_t.m_nParticle = findOffsetByName(j, "RnSoftbodySpring_t", "m_nParticle");
RnSoftbodySpring_t.m_flLength = findOffsetByName(j, "RnSoftbodySpring_t", "m_flLength");

// Atribuições para RnSoftbodyParticle_t
// RnSoftbodyParticle_t Offsets
RnSoftbodyParticle_t.m_flMassInv = findOffsetByName(j, "RnSoftbodyParticle_t", "m_flMassInv");

// Atribuições para RnHullDesc_t
// RnHullDesc_t Offsets
RnHullDesc_t.m_Hull = findOffsetByName(j, "RnHullDesc_t", "m_Hull");

// Atribuições para RnSoftbodyCapsule_t
// RnSoftbodyCapsule_t Offsets
RnSoftbodyCapsule_t.m_vCenter = findOffsetByName(j, "RnSoftbodyCapsule_t", "m_vCenter");
RnSoftbodyCapsule_t.m_flRadius = findOffsetByName(j, "RnSoftbodyCapsule_t", "m_flRadius");
RnSoftbodyCapsule_t.m_nParticle = findOffsetByName(j, "RnSoftbodyCapsule_t", "m_nParticle");

// Atribuições para RnCapsuleDesc_t
// RnCapsuleDesc_t Offsets
RnCapsuleDesc_t.m_Capsule = findOffsetByName(j, "RnCapsuleDesc_t", "m_Capsule");

// Atribuições para RnSphereDesc_t
// RnSphereDesc_t Offsets
RnSphereDesc_t.m_Sphere = findOffsetByName(j, "RnSphereDesc_t", "m_Sphere");

// Atribuições para RnMeshDesc_t
// RnMeshDesc_t Offsets
RnMeshDesc_t.m_Mesh = findOffsetByName(j, "RnMeshDesc_t", "m_Mesh");

// Atribuições para PhysFeModelDesc_t
// PhysFeModelDesc_t Offsets
PhysFeModelDesc_t.m_CtrlHash = findOffsetByName(j, "PhysFeModelDesc_t", "m_CtrlHash");
PhysFeModelDesc_t.m_CtrlName = findOffsetByName(j, "PhysFeModelDesc_t", "m_CtrlName");
PhysFeModelDesc_t.m_nStaticNodeFlags = findOffsetByName(j, "PhysFeModelDesc_t", "m_nStaticNodeFlags");
PhysFeModelDesc_t.m_nDynamicNodeFlags = findOffsetByName(j, "PhysFeModelDesc_t", "m_nDynamicNodeFlags");
PhysFeModelDesc_t.m_flLocalForce = findOffsetByName(j, "PhysFeModelDesc_t", "m_flLocalForce");
PhysFeModelDesc_t.m_flLocalRotation = findOffsetByName(j, "PhysFeModelDesc_t", "m_flLocalRotation");
PhysFeModelDesc_t.m_nNodeCount = findOffsetByName(j, "PhysFeModelDesc_t", "m_nNodeCount");
PhysFeModelDesc_t.m_nStaticNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_nStaticNodes");
PhysFeModelDesc_t.m_nRotLockStaticNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_nRotLockStaticNodes");
PhysFeModelDesc_t.m_nFirstPositionDrivenNode = findOffsetByName(j, "PhysFeModelDesc_t", "m_nFirstPositionDrivenNode");
PhysFeModelDesc_t.m_nSimdTriCount1 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nSimdTriCount1");
PhysFeModelDesc_t.m_nSimdTriCount2 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nSimdTriCount2");
PhysFeModelDesc_t.m_nSimdQuadCount1 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nSimdQuadCount1");
PhysFeModelDesc_t.m_nSimdQuadCount2 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nSimdQuadCount2");
PhysFeModelDesc_t.m_nQuadCount1 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nQuadCount1");
PhysFeModelDesc_t.m_nQuadCount2 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nQuadCount2");
PhysFeModelDesc_t.m_nTreeDepth = findOffsetByName(j, "PhysFeModelDesc_t", "m_nTreeDepth");
PhysFeModelDesc_t.m_nNodeBaseJiggleboneDependsCount = findOffsetByName(j, "PhysFeModelDesc_t", "m_nNodeBaseJiggleboneDependsCount");
PhysFeModelDesc_t.m_nRopeCount = findOffsetByName(j, "PhysFeModelDesc_t", "m_nRopeCount");
PhysFeModelDesc_t.m_Ropes = findOffsetByName(j, "PhysFeModelDesc_t", "m_Ropes");
PhysFeModelDesc_t.m_NodeBases = findOffsetByName(j, "PhysFeModelDesc_t", "m_NodeBases");
PhysFeModelDesc_t.m_SimdNodeBases = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdNodeBases");
PhysFeModelDesc_t.m_Quads = findOffsetByName(j, "PhysFeModelDesc_t", "m_Quads");
PhysFeModelDesc_t.m_SimdQuads = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdQuads");
PhysFeModelDesc_t.m_SimdTris = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdTris");
PhysFeModelDesc_t.m_SimdRods = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdRods");
PhysFeModelDesc_t.m_SimdRodsAnim = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdRodsAnim");
PhysFeModelDesc_t.m_InitPose = findOffsetByName(j, "PhysFeModelDesc_t", "m_InitPose");
PhysFeModelDesc_t.m_Rods = findOffsetByName(j, "PhysFeModelDesc_t", "m_Rods");
PhysFeModelDesc_t.m_Twists = findOffsetByName(j, "PhysFeModelDesc_t", "m_Twists");
PhysFeModelDesc_t.m_HingeLimits = findOffsetByName(j, "PhysFeModelDesc_t", "m_HingeLimits");
PhysFeModelDesc_t.m_AntiTunnelProbes = findOffsetByName(j, "PhysFeModelDesc_t", "m_AntiTunnelProbes");
PhysFeModelDesc_t.m_AntiTunnelTargetNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_AntiTunnelTargetNodes");
PhysFeModelDesc_t.m_AxialEdges = findOffsetByName(j, "PhysFeModelDesc_t", "m_AxialEdges");
PhysFeModelDesc_t.m_NodeInvMasses = findOffsetByName(j, "PhysFeModelDesc_t", "m_NodeInvMasses");
PhysFeModelDesc_t.m_CtrlOffsets = findOffsetByName(j, "PhysFeModelDesc_t", "m_CtrlOffsets");
PhysFeModelDesc_t.m_CtrlOsOffsets = findOffsetByName(j, "PhysFeModelDesc_t", "m_CtrlOsOffsets");
PhysFeModelDesc_t.m_FollowNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_FollowNodes");
PhysFeModelDesc_t.m_CollisionPlanes = findOffsetByName(j, "PhysFeModelDesc_t", "m_CollisionPlanes");
PhysFeModelDesc_t.m_NodeIntegrator = findOffsetByName(j, "PhysFeModelDesc_t", "m_NodeIntegrator");
PhysFeModelDesc_t.m_SpringIntegrator = findOffsetByName(j, "PhysFeModelDesc_t", "m_SpringIntegrator");
PhysFeModelDesc_t.m_SimdSpringIntegrator = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdSpringIntegrator");
PhysFeModelDesc_t.m_WorldCollisionParams = findOffsetByName(j, "PhysFeModelDesc_t", "m_WorldCollisionParams");
PhysFeModelDesc_t.m_LegacyStretchForce = findOffsetByName(j, "PhysFeModelDesc_t", "m_LegacyStretchForce");
PhysFeModelDesc_t.m_NodeCollisionRadii = findOffsetByName(j, "PhysFeModelDesc_t", "m_NodeCollisionRadii");
PhysFeModelDesc_t.m_DynNodeFriction = findOffsetByName(j, "PhysFeModelDesc_t", "m_DynNodeFriction");
PhysFeModelDesc_t.m_LocalRotation = findOffsetByName(j, "PhysFeModelDesc_t", "m_LocalRotation");
PhysFeModelDesc_t.m_LocalForce = findOffsetByName(j, "PhysFeModelDesc_t", "m_LocalForce");
PhysFeModelDesc_t.m_TaperedCapsuleStretches = findOffsetByName(j, "PhysFeModelDesc_t", "m_TaperedCapsuleStretches");
PhysFeModelDesc_t.m_TaperedCapsuleRigids = findOffsetByName(j, "PhysFeModelDesc_t", "m_TaperedCapsuleRigids");
PhysFeModelDesc_t.m_SphereRigids = findOffsetByName(j, "PhysFeModelDesc_t", "m_SphereRigids");
PhysFeModelDesc_t.m_WorldCollisionNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_WorldCollisionNodes");
PhysFeModelDesc_t.m_TreeParents = findOffsetByName(j, "PhysFeModelDesc_t", "m_TreeParents");
PhysFeModelDesc_t.m_TreeCollisionMasks = findOffsetByName(j, "PhysFeModelDesc_t", "m_TreeCollisionMasks");
PhysFeModelDesc_t.m_TreeChildren = findOffsetByName(j, "PhysFeModelDesc_t", "m_TreeChildren");
PhysFeModelDesc_t.m_FreeNodes = findOffsetByName(j, "PhysFeModelDesc_t", "m_FreeNodes");
PhysFeModelDesc_t.m_FitMatrices = findOffsetByName(j, "PhysFeModelDesc_t", "m_FitMatrices");
PhysFeModelDesc_t.m_FitWeights = findOffsetByName(j, "PhysFeModelDesc_t", "m_FitWeights");
PhysFeModelDesc_t.m_ReverseOffsets = findOffsetByName(j, "PhysFeModelDesc_t", "m_ReverseOffsets");
PhysFeModelDesc_t.m_AnimStrayRadii = findOffsetByName(j, "PhysFeModelDesc_t", "m_AnimStrayRadii");
PhysFeModelDesc_t.m_SimdAnimStrayRadii = findOffsetByName(j, "PhysFeModelDesc_t", "m_SimdAnimStrayRadii");
PhysFeModelDesc_t.m_KelagerBends = findOffsetByName(j, "PhysFeModelDesc_t", "m_KelagerBends");
PhysFeModelDesc_t.m_CtrlSoftOffsets = findOffsetByName(j, "PhysFeModelDesc_t", "m_CtrlSoftOffsets");
PhysFeModelDesc_t.m_JiggleBones = findOffsetByName(j, "PhysFeModelDesc_t", "m_JiggleBones");
PhysFeModelDesc_t.m_SourceElems = findOffsetByName(j, "PhysFeModelDesc_t", "m_SourceElems");
PhysFeModelDesc_t.m_GoalDampedSpringIntegrators = findOffsetByName(j, "PhysFeModelDesc_t", "m_GoalDampedSpringIntegrators");
PhysFeModelDesc_t.m_Tris = findOffsetByName(j, "PhysFeModelDesc_t", "m_Tris");
PhysFeModelDesc_t.m_nTriCount1 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nTriCount1");
PhysFeModelDesc_t.m_nTriCount2 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nTriCount2");
PhysFeModelDesc_t.m_nReservedUint8 = findOffsetByName(j, "PhysFeModelDesc_t", "m_nReservedUint8");
PhysFeModelDesc_t.m_nExtraPressureIterations = findOffsetByName(j, "PhysFeModelDesc_t", "m_nExtraPressureIterations");
PhysFeModelDesc_t.m_nExtraGoalIterations = findOffsetByName(j, "PhysFeModelDesc_t", "m_nExtraGoalIterations");
PhysFeModelDesc_t.m_nExtraIterations = findOffsetByName(j, "PhysFeModelDesc_t", "m_nExtraIterations");
PhysFeModelDesc_t.m_SDFRigids = findOffsetByName(j, "PhysFeModelDesc_t", "m_SDFRigids");
PhysFeModelDesc_t.m_BoxRigids = findOffsetByName(j, "PhysFeModelDesc_t", "m_BoxRigids");
PhysFeModelDesc_t.m_DynNodeVertexSet = findOffsetByName(j, "PhysFeModelDesc_t", "m_DynNodeVertexSet");
PhysFeModelDesc_t.m_VertexSetNames = findOffsetByName(j, "PhysFeModelDesc_t", "m_VertexSetNames");
PhysFeModelDesc_t.m_RigidColliderPriorities = findOffsetByName(j, "PhysFeModelDesc_t", "m_RigidColliderPriorities");
PhysFeModelDesc_t.m_MorphLayers = findOffsetByName(j, "PhysFeModelDesc_t", "m_MorphLayers");
PhysFeModelDesc_t.m_MorphSetData = findOffsetByName(j, "PhysFeModelDesc_t", "m_MorphSetData");
PhysFeModelDesc_t.m_VertexMaps = findOffsetByName(j, "PhysFeModelDesc_t", "m_VertexMaps");
PhysFeModelDesc_t.m_VertexMapValues = findOffsetByName(j, "PhysFeModelDesc_t", "m_VertexMapValues");
PhysFeModelDesc_t.m_Effects = findOffsetByName(j, "PhysFeModelDesc_t", "m_Effects");
PhysFeModelDesc_t.m_LockToParent = findOffsetByName(j, "PhysFeModelDesc_t", "m_LockToParent");
PhysFeModelDesc_t.m_LockToGoal = findOffsetByName(j, "PhysFeModelDesc_t", "m_LockToGoal");
PhysFeModelDesc_t.m_SkelParents = findOffsetByName(j, "PhysFeModelDesc_t", "m_SkelParents");
PhysFeModelDesc_t.m_DynNodeWindBases = findOffsetByName(j, "PhysFeModelDesc_t", "m_DynNodeWindBases");
PhysFeModelDesc_t.m_flInternalPressure = findOffsetByName(j, "PhysFeModelDesc_t", "m_flInternalPressure");
PhysFeModelDesc_t.m_flDefaultTimeDilation = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultTimeDilation");
PhysFeModelDesc_t.m_flWindage = findOffsetByName(j, "PhysFeModelDesc_t", "m_flWindage");
PhysFeModelDesc_t.m_flWindDrag = findOffsetByName(j, "PhysFeModelDesc_t", "m_flWindDrag");
PhysFeModelDesc_t.m_flDefaultSurfaceStretch = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultSurfaceStretch");
PhysFeModelDesc_t.m_flDefaultThreadStretch = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultThreadStretch");
PhysFeModelDesc_t.m_flDefaultGravityScale = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultGravityScale");
PhysFeModelDesc_t.m_flDefaultVelAirDrag = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultVelAirDrag");
PhysFeModelDesc_t.m_flDefaultExpAirDrag = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultExpAirDrag");
PhysFeModelDesc_t.m_flDefaultVelQuadAirDrag = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultVelQuadAirDrag");
PhysFeModelDesc_t.m_flDefaultExpQuadAirDrag = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultExpQuadAirDrag");
PhysFeModelDesc_t.m_flRodVelocitySmoothRate = findOffsetByName(j, "PhysFeModelDesc_t", "m_flRodVelocitySmoothRate");
PhysFeModelDesc_t.m_flQuadVelocitySmoothRate = findOffsetByName(j, "PhysFeModelDesc_t", "m_flQuadVelocitySmoothRate");
PhysFeModelDesc_t.m_flAddWorldCollisionRadius = findOffsetByName(j, "PhysFeModelDesc_t", "m_flAddWorldCollisionRadius");
PhysFeModelDesc_t.m_flDefaultVolumetricSolveAmount = findOffsetByName(j, "PhysFeModelDesc_t", "m_flDefaultVolumetricSolveAmount");
PhysFeModelDesc_t.m_flMotionSmoothCDT = findOffsetByName(j, "PhysFeModelDesc_t", "m_flMotionSmoothCDT");
PhysFeModelDesc_t.m_flLocalDrag1 = findOffsetByName(j, "PhysFeModelDesc_t", "m_flLocalDrag1");
PhysFeModelDesc_t.m_nRodVelocitySmoothIterations = findOffsetByName(j, "PhysFeModelDesc_t", "m_nRodVelocitySmoothIterations");
PhysFeModelDesc_t.m_nQuadVelocitySmoothIterations = findOffsetByName(j, "PhysFeModelDesc_t", "m_nQuadVelocitySmoothIterations");

// Atribuições para vphysics_save_cphysicsbody_t
// vphysics_save_cphysicsbody_t Offsets
vphysics_save_cphysicsbody_t.m_nOldPointer = findOffsetByName(j, "vphysics_save_cphysicsbody_t", "m_nOldPointer");

// Atribuições para FeBuildBoxRigid_t
// FeBuildBoxRigid_t Offsets
FeBuildBoxRigid_t.m_nPriority = findOffsetByName(j, "FeBuildBoxRigid_t", "m_nPriority");
FeBuildBoxRigid_t.m_nVertexMapHash = findOffsetByName(j, "FeBuildBoxRigid_t", "m_nVertexMapHash");

// Atribuições para CFeIndexedJiggleBone
// CFeIndexedJiggleBone Offsets
CFeIndexedJiggleBone.m_nNode = findOffsetByName(j, "CFeIndexedJiggleBone", "m_nNode");
CFeIndexedJiggleBone.m_nJiggleParent = findOffsetByName(j, "CFeIndexedJiggleBone", "m_nJiggleParent");
CFeIndexedJiggleBone.m_jiggleBone = findOffsetByName(j, "CFeIndexedJiggleBone", "m_jiggleBone");

// Atribuições para FeBandBendLimit_t
// FeBandBendLimit_t Offsets
FeBandBendLimit_t.flDistMin = findOffsetByName(j, "FeBandBendLimit_t", "flDistMin");
FeBandBendLimit_t.flDistMax = findOffsetByName(j, "FeBandBendLimit_t", "flDistMax");
FeBandBendLimit_t.nNode = findOffsetByName(j, "FeBandBendLimit_t", "nNode");

// Atribuições para FeTaperedCapsuleStretch_t
// FeTaperedCapsuleStretch_t Offsets
FeTaperedCapsuleStretch_t.nNode = findOffsetByName(j, "FeTaperedCapsuleStretch_t", "nNode");
FeTaperedCapsuleStretch_t.nCollisionMask = findOffsetByName(j, "FeTaperedCapsuleStretch_t", "nCollisionMask");
FeTaperedCapsuleStretch_t.nDummy = findOffsetByName(j, "FeTaperedCapsuleStretch_t", "nDummy");
FeTaperedCapsuleStretch_t.flRadius = findOffsetByName(j, "FeTaperedCapsuleStretch_t", "flRadius");

// Atribuições para constraint_axislimit_t
// constraint_axislimit_t Offsets
constraint_axislimit_t.flMinRotation = findOffsetByName(j, "constraint_axislimit_t", "flMinRotation");
constraint_axislimit_t.flMaxRotation = findOffsetByName(j, "constraint_axislimit_t", "flMaxRotation");
constraint_axislimit_t.flMotorTargetAngSpeed = findOffsetByName(j, "constraint_axislimit_t", "flMotorTargetAngSpeed");
constraint_axislimit_t.flMotorMaxTorque = findOffsetByName(j, "constraint_axislimit_t", "flMotorMaxTorque");

// Atribuições para FeSimdRodConstraintAnim_t
// FeSimdRodConstraintAnim_t Offsets
FeSimdRodConstraintAnim_t.nNode = findOffsetByName(j, "FeSimdRodConstraintAnim_t", "nNode");
FeSimdRodConstraintAnim_t.f4Weight0 = findOffsetByName(j, "FeSimdRodConstraintAnim_t", "f4Weight0");
FeSimdRodConstraintAnim_t.f4RelaxationFactor = findOffsetByName(j, "FeSimdRodConstraintAnim_t", "f4RelaxationFactor");

// Atribuições para FeSimdRodConstraint_t
// FeSimdRodConstraint_t Offsets
FeSimdRodConstraint_t.nNode = findOffsetByName(j, "FeSimdRodConstraint_t", "nNode");
FeSimdRodConstraint_t.f4MaxDist = findOffsetByName(j, "FeSimdRodConstraint_t", "f4MaxDist");
FeSimdRodConstraint_t.f4MinDist = findOffsetByName(j, "FeSimdRodConstraint_t", "f4MinDist");
FeSimdRodConstraint_t.f4Weight0 = findOffsetByName(j, "FeSimdRodConstraint_t", "f4Weight0");
FeSimdRodConstraint_t.f4RelaxationFactor = findOffsetByName(j, "FeSimdRodConstraint_t", "f4RelaxationFactor");

// Atribuições para constraint_hingeparams_t
// constraint_hingeparams_t Offsets
constraint_hingeparams_t.worldPosition = findOffsetByName(j, "constraint_hingeparams_t", "worldPosition");
constraint_hingeparams_t.worldAxisDirection = findOffsetByName(j, "constraint_hingeparams_t", "worldAxisDirection");
constraint_hingeparams_t.hingeAxis = findOffsetByName(j, "constraint_hingeparams_t", "hingeAxis");
constraint_hingeparams_t.constraint = findOffsetByName(j, "constraint_hingeparams_t", "constraint");

// Atribuições para FeBuildSphereRigid_t
// FeBuildSphereRigid_t Offsets
FeBuildSphereRigid_t.m_nPriority = findOffsetByName(j, "FeBuildSphereRigid_t", "m_nPriority");
FeBuildSphereRigid_t.m_nVertexMapHash = findOffsetByName(j, "FeBuildSphereRigid_t", "m_nVertexMapHash");

// Atribuições para FeSimdAnimStrayRadius_t
// FeSimdAnimStrayRadius_t Offsets
FeSimdAnimStrayRadius_t.nNode = findOffsetByName(j, "FeSimdAnimStrayRadius_t", "nNode");
FeSimdAnimStrayRadius_t.flMaxDist = findOffsetByName(j, "FeSimdAnimStrayRadius_t", "flMaxDist");
FeSimdAnimStrayRadius_t.flRelaxationFactor = findOffsetByName(j, "FeSimdAnimStrayRadius_t", "flRelaxationFactor");

// Atribuições para RnTriangle_t
// RnTriangle_t Offsets
RnTriangle_t.m_nIndex = findOffsetByName(j, "RnTriangle_t", "m_nIndex");

// Atribuições para FeProxyVertexMap_t
// FeProxyVertexMap_t Offsets
FeProxyVertexMap_t.m_Name = findOffsetByName(j, "FeProxyVertexMap_t", "m_Name");
FeProxyVertexMap_t.m_flWeight = findOffsetByName(j, "FeProxyVertexMap_t", "m_flWeight");

// Atribuições para FeNodeIntegrator_t
// FeNodeIntegrator_t Offsets
FeNodeIntegrator_t.flPointDamping = findOffsetByName(j, "FeNodeIntegrator_t", "flPointDamping");
FeNodeIntegrator_t.flAnimationForceAttraction = findOffsetByName(j, "FeNodeIntegrator_t", "flAnimationForceAttraction");
FeNodeIntegrator_t.flAnimationVertexAttraction = findOffsetByName(j, "FeNodeIntegrator_t", "flAnimationVertexAttraction");
FeNodeIntegrator_t.flGravity = findOffsetByName(j, "FeNodeIntegrator_t", "flGravity");

// Atribuições para RnCapsule_t
// RnCapsule_t Offsets
RnCapsule_t.m_vCenter = findOffsetByName(j, "RnCapsule_t", "m_vCenter");
RnCapsule_t.m_flRadius = findOffsetByName(j, "RnCapsule_t", "m_flRadius");

// Atribuições para CFeNamedJiggleBone
// CFeNamedJiggleBone Offsets
CFeNamedJiggleBone.m_strParentBone = findOffsetByName(j, "CFeNamedJiggleBone", "m_strParentBone");
CFeNamedJiggleBone.m_transform = findOffsetByName(j, "CFeNamedJiggleBone", "m_transform");
CFeNamedJiggleBone.m_nJiggleParent = findOffsetByName(j, "CFeNamedJiggleBone", "m_nJiggleParent");
CFeNamedJiggleBone.m_jiggleBone = findOffsetByName(j, "CFeNamedJiggleBone", "m_jiggleBone");

// Atribuições para FeAntiTunnelProbeBuild_t
// FeAntiTunnelProbeBuild_t Offsets
FeAntiTunnelProbeBuild_t.flWeight = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "flWeight");
FeAntiTunnelProbeBuild_t.flActivationDistance = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "flActivationDistance");
FeAntiTunnelProbeBuild_t.flBias = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "flBias");
FeAntiTunnelProbeBuild_t.flCurvature = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "flCurvature");
FeAntiTunnelProbeBuild_t.nFlags = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "nFlags");
FeAntiTunnelProbeBuild_t.nProbeNode = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "nProbeNode");
FeAntiTunnelProbeBuild_t.targetNodes = findOffsetByName(j, "FeAntiTunnelProbeBuild_t", "targetNodes");

// Atribuições para RnBodyDesc_t
// RnBodyDesc_t Offsets
RnBodyDesc_t.m_sDebugName = findOffsetByName(j, "RnBodyDesc_t", "m_sDebugName");
RnBodyDesc_t.m_vPosition = findOffsetByName(j, "RnBodyDesc_t", "m_vPosition");
RnBodyDesc_t.m_qOrientation = findOffsetByName(j, "RnBodyDesc_t", "m_qOrientation");
RnBodyDesc_t.m_vLinearVelocity = findOffsetByName(j, "RnBodyDesc_t", "m_vLinearVelocity");
RnBodyDesc_t.m_vAngularVelocity = findOffsetByName(j, "RnBodyDesc_t", "m_vAngularVelocity");
RnBodyDesc_t.m_vLocalMassCenter = findOffsetByName(j, "RnBodyDesc_t", "m_vLocalMassCenter");
RnBodyDesc_t.m_LocalInertiaInv = findOffsetByName(j, "RnBodyDesc_t", "m_LocalInertiaInv");
RnBodyDesc_t.m_flMassInv = findOffsetByName(j, "RnBodyDesc_t", "m_flMassInv");
RnBodyDesc_t.m_flGameMass = findOffsetByName(j, "RnBodyDesc_t", "m_flGameMass");
RnBodyDesc_t.m_flInertiaScaleInv = findOffsetByName(j, "RnBodyDesc_t", "m_flInertiaScaleInv");
RnBodyDesc_t.m_flLinearDamping = findOffsetByName(j, "RnBodyDesc_t", "m_flLinearDamping");
RnBodyDesc_t.m_flAngularDamping = findOffsetByName(j, "RnBodyDesc_t", "m_flAngularDamping");
RnBodyDesc_t.m_flLinearDrag = findOffsetByName(j, "RnBodyDesc_t", "m_flLinearDrag");
RnBodyDesc_t.m_flAngularDrag = findOffsetByName(j, "RnBodyDesc_t", "m_flAngularDrag");
RnBodyDesc_t.m_flLinearBuoyancyDrag = findOffsetByName(j, "RnBodyDesc_t", "m_flLinearBuoyancyDrag");
RnBodyDesc_t.m_flAngularBuoyancyDrag = findOffsetByName(j, "RnBodyDesc_t", "m_flAngularBuoyancyDrag");
RnBodyDesc_t.m_vLastAwakeForceAccum = findOffsetByName(j, "RnBodyDesc_t", "m_vLastAwakeForceAccum");
RnBodyDesc_t.m_vLastAwakeTorqueAccum = findOffsetByName(j, "RnBodyDesc_t", "m_vLastAwakeTorqueAccum");
RnBodyDesc_t.m_flBuoyancyFactor = findOffsetByName(j, "RnBodyDesc_t", "m_flBuoyancyFactor");
RnBodyDesc_t.m_flGravityScale = findOffsetByName(j, "RnBodyDesc_t", "m_flGravityScale");
RnBodyDesc_t.m_flTimeScale = findOffsetByName(j, "RnBodyDesc_t", "m_flTimeScale");
RnBodyDesc_t.m_nBodyType = findOffsetByName(j, "RnBodyDesc_t", "m_nBodyType");
RnBodyDesc_t.m_nGameIndex = findOffsetByName(j, "RnBodyDesc_t", "m_nGameIndex");
RnBodyDesc_t.m_nGameFlags = findOffsetByName(j, "RnBodyDesc_t", "m_nGameFlags");
RnBodyDesc_t.m_nMinVelocityIterations = findOffsetByName(j, "RnBodyDesc_t", "m_nMinVelocityIterations");
RnBodyDesc_t.m_nMinPositionIterations = findOffsetByName(j, "RnBodyDesc_t", "m_nMinPositionIterations");
RnBodyDesc_t.m_nMassPriority = findOffsetByName(j, "RnBodyDesc_t", "m_nMassPriority");
RnBodyDesc_t.m_bEnabled = findOffsetByName(j, "RnBodyDesc_t", "m_bEnabled");
RnBodyDesc_t.m_bSleeping = findOffsetByName(j, "RnBodyDesc_t", "m_bSleeping");
RnBodyDesc_t.m_bIsContinuousEnabled = findOffsetByName(j, "RnBodyDesc_t", "m_bIsContinuousEnabled");
RnBodyDesc_t.m_bDragEnabled = findOffsetByName(j, "RnBodyDesc_t", "m_bDragEnabled");
RnBodyDesc_t.m_bBuoyancyDragEnabled = findOffsetByName(j, "RnBodyDesc_t", "m_bBuoyancyDragEnabled");
RnBodyDesc_t.m_bGravityDisabled = findOffsetByName(j, "RnBodyDesc_t", "m_bGravityDisabled");
RnBodyDesc_t.m_bSpeculativeEnabled = findOffsetByName(j, "RnBodyDesc_t", "m_bSpeculativeEnabled");
RnBodyDesc_t.m_bHasShadowController = findOffsetByName(j, "RnBodyDesc_t", "m_bHasShadowController");

// Atribuições para OldFeEdge_t
// OldFeEdge_t Offsets
OldFeEdge_t.m_flK = findOffsetByName(j, "OldFeEdge_t", "m_flK");
OldFeEdge_t.invA = findOffsetByName(j, "OldFeEdge_t", "invA");
OldFeEdge_t.t = findOffsetByName(j, "OldFeEdge_t", "t");
OldFeEdge_t.flThetaRelaxed = findOffsetByName(j, "OldFeEdge_t", "flThetaRelaxed");
OldFeEdge_t.flThetaFactor = findOffsetByName(j, "OldFeEdge_t", "flThetaFactor");
OldFeEdge_t.c01 = findOffsetByName(j, "OldFeEdge_t", "c01");
OldFeEdge_t.c02 = findOffsetByName(j, "OldFeEdge_t", "c02");
OldFeEdge_t.c03 = findOffsetByName(j, "OldFeEdge_t", "c03");
OldFeEdge_t.c04 = findOffsetByName(j, "OldFeEdge_t", "c04");
OldFeEdge_t.flAxialModelDist = findOffsetByName(j, "OldFeEdge_t", "flAxialModelDist");
OldFeEdge_t.flAxialModelWeights = findOffsetByName(j, "OldFeEdge_t", "flAxialModelWeights");
OldFeEdge_t.m_nNode = findOffsetByName(j, "OldFeEdge_t", "m_nNode");

// Atribuições para FeFollowNode_t
// FeFollowNode_t Offsets
FeFollowNode_t.nParentNode = findOffsetByName(j, "FeFollowNode_t", "nParentNode");
FeFollowNode_t.nChildNode = findOffsetByName(j, "FeFollowNode_t", "nChildNode");
FeFollowNode_t.flWeight = findOffsetByName(j, "FeFollowNode_t", "flWeight");

// Atribuições para RnMesh_t
// RnMesh_t Offsets
RnMesh_t.m_vMin = findOffsetByName(j, "RnMesh_t", "m_vMin");
RnMesh_t.m_vMax = findOffsetByName(j, "RnMesh_t", "m_vMax");
RnMesh_t.m_Nodes = findOffsetByName(j, "RnMesh_t", "m_Nodes");
RnMesh_t.m_Vertices = findOffsetByName(j, "RnMesh_t", "m_Vertices");
RnMesh_t.m_Triangles = findOffsetByName(j, "RnMesh_t", "m_Triangles");
RnMesh_t.m_Wings = findOffsetByName(j, "RnMesh_t", "m_Wings");
RnMesh_t.m_Materials = findOffsetByName(j, "RnMesh_t", "m_Materials");
RnMesh_t.m_vOrthographicAreas = findOffsetByName(j, "RnMesh_t", "m_vOrthographicAreas");
RnMesh_t.m_nFlags = findOffsetByName(j, "RnMesh_t", "m_nFlags");
RnMesh_t.m_nDebugFlags = findOffsetByName(j, "RnMesh_t", "m_nDebugFlags");

// Atribuições para VertexPositionNormal_t
// VertexPositionNormal_t Offsets
VertexPositionNormal_t.m_vPosition = findOffsetByName(j, "VertexPositionNormal_t", "m_vPosition");
VertexPositionNormal_t.m_vNormal = findOffsetByName(j, "VertexPositionNormal_t", "m_vNormal");

// Atribuições para FeBuildSDFRigid_t
// FeBuildSDFRigid_t Offsets
FeBuildSDFRigid_t.m_nPriority = findOffsetByName(j, "FeBuildSDFRigid_t", "m_nPriority");
FeBuildSDFRigid_t.m_nVertexMapHash = findOffsetByName(j, "FeBuildSDFRigid_t", "m_nVertexMapHash");

// Atribuições para RnBlendVertex_t
// RnBlendVertex_t Offsets
RnBlendVertex_t.m_nWeight0 = findOffsetByName(j, "RnBlendVertex_t", "m_nWeight0");
RnBlendVertex_t.m_nIndex0 = findOffsetByName(j, "RnBlendVertex_t", "m_nIndex0");
RnBlendVertex_t.m_nWeight1 = findOffsetByName(j, "RnBlendVertex_t", "m_nWeight1");
RnBlendVertex_t.m_nIndex1 = findOffsetByName(j, "RnBlendVertex_t", "m_nIndex1");
RnBlendVertex_t.m_nWeight2 = findOffsetByName(j, "RnBlendVertex_t", "m_nWeight2");
RnBlendVertex_t.m_nIndex2 = findOffsetByName(j, "RnBlendVertex_t", "m_nIndex2");
RnBlendVertex_t.m_nFlags = findOffsetByName(j, "RnBlendVertex_t", "m_nFlags");
RnBlendVertex_t.m_nTargetIndex = findOffsetByName(j, "RnBlendVertex_t", "m_nTargetIndex");

// Atribuições para CFeMorphLayer
// CFeMorphLayer Offsets
CFeMorphLayer.m_Name = findOffsetByName(j, "CFeMorphLayer", "m_Name");
CFeMorphLayer.m_nNameHash = findOffsetByName(j, "CFeMorphLayer", "m_nNameHash");
CFeMorphLayer.m_Nodes = findOffsetByName(j, "CFeMorphLayer", "m_Nodes");
CFeMorphLayer.m_InitPos = findOffsetByName(j, "CFeMorphLayer", "m_InitPos");
CFeMorphLayer.m_Gravity = findOffsetByName(j, "CFeMorphLayer", "m_Gravity");
CFeMorphLayer.m_GoalStrength = findOffsetByName(j, "CFeMorphLayer", "m_GoalStrength");
CFeMorphLayer.m_GoalDamping = findOffsetByName(j, "CFeMorphLayer", "m_GoalDamping");

// Atribuições para FeCtrlSoftOffset_t
// FeCtrlSoftOffset_t Offsets
FeCtrlSoftOffset_t.nCtrlParent = findOffsetByName(j, "FeCtrlSoftOffset_t", "nCtrlParent");
FeCtrlSoftOffset_t.nCtrlChild = findOffsetByName(j, "FeCtrlSoftOffset_t", "nCtrlChild");
FeCtrlSoftOffset_t.vOffset = findOffsetByName(j, "FeCtrlSoftOffset_t", "vOffset");
FeCtrlSoftOffset_t.flAlpha = findOffsetByName(j, "FeCtrlSoftOffset_t", "flAlpha");

// Atribuições para FeVertexMapDesc_t
// FeVertexMapDesc_t Offsets
FeVertexMapDesc_t.sName = findOffsetByName(j, "FeVertexMapDesc_t", "sName");
FeVertexMapDesc_t.nNameHash = findOffsetByName(j, "FeVertexMapDesc_t", "nNameHash");
FeVertexMapDesc_t.nColor = findOffsetByName(j, "FeVertexMapDesc_t", "nColor");
FeVertexMapDesc_t.nFlags = findOffsetByName(j, "FeVertexMapDesc_t", "nFlags");
FeVertexMapDesc_t.nVertexBase = findOffsetByName(j, "FeVertexMapDesc_t", "nVertexBase");
FeVertexMapDesc_t.nVertexCount = findOffsetByName(j, "FeVertexMapDesc_t", "nVertexCount");
FeVertexMapDesc_t.nMapOffset = findOffsetByName(j, "FeVertexMapDesc_t", "nMapOffset");
FeVertexMapDesc_t.nNodeListOffset = findOffsetByName(j, "FeVertexMapDesc_t", "nNodeListOffset");
FeVertexMapDesc_t.vCenterOfMass = findOffsetByName(j, "FeVertexMapDesc_t", "vCenterOfMass");
FeVertexMapDesc_t.flVolumetricSolveStrength = findOffsetByName(j, "FeVertexMapDesc_t", "flVolumetricSolveStrength");
FeVertexMapDesc_t.nScaleSourceNode = findOffsetByName(j, "FeVertexMapDesc_t", "nScaleSourceNode");
FeVertexMapDesc_t.nNodeListCount = findOffsetByName(j, "FeVertexMapDesc_t", "nNodeListCount");

// Atribuições para FeTaperedCapsuleRigid_t
// FeTaperedCapsuleRigid_t Offsets
FeTaperedCapsuleRigid_t.vSphere = findOffsetByName(j, "FeTaperedCapsuleRigid_t", "vSphere");
FeTaperedCapsuleRigid_t.nNode = findOffsetByName(j, "FeTaperedCapsuleRigid_t", "nNode");
FeTaperedCapsuleRigid_t.nCollisionMask = findOffsetByName(j, "FeTaperedCapsuleRigid_t", "nCollisionMask");
FeTaperedCapsuleRigid_t.nVertexMapIndex = findOffsetByName(j, "FeTaperedCapsuleRigid_t", "nVertexMapIndex");
FeTaperedCapsuleRigid_t.nFlags = findOffsetByName(j, "FeTaperedCapsuleRigid_t", "nFlags");

// Atribuições para FeAnimStrayRadius_t
// FeAnimStrayRadius_t Offsets
FeAnimStrayRadius_t.nNode = findOffsetByName(j, "FeAnimStrayRadius_t", "nNode");
FeAnimStrayRadius_t.flMaxDist = findOffsetByName(j, "FeAnimStrayRadius_t", "flMaxDist");
FeAnimStrayRadius_t.flRelaxationFactor = findOffsetByName(j, "FeAnimStrayRadius_t", "flRelaxationFactor");

// Atribuições para FeEdgeDesc_t
// FeEdgeDesc_t Offsets
FeEdgeDesc_t.nEdge = findOffsetByName(j, "FeEdgeDesc_t", "nEdge");
FeEdgeDesc_t.nSide = findOffsetByName(j, "FeEdgeDesc_t", "nSide");
FeEdgeDesc_t.nVirtElem = findOffsetByName(j, "FeEdgeDesc_t", "nVirtElem");

// Atribuições para FeNodeReverseOffset_t
// FeNodeReverseOffset_t Offsets
FeNodeReverseOffset_t.vOffset = findOffsetByName(j, "FeNodeReverseOffset_t", "vOffset");
FeNodeReverseOffset_t.nBoneCtrl = findOffsetByName(j, "FeNodeReverseOffset_t", "nBoneCtrl");
FeNodeReverseOffset_t.nTargetNode = findOffsetByName(j, "FeNodeReverseOffset_t", "nTargetNode");

// Atribuições para RnPlane_t
// RnPlane_t Offsets
RnPlane_t.m_vNormal = findOffsetByName(j, "RnPlane_t", "m_vNormal");
RnPlane_t.m_flOffset = findOffsetByName(j, "RnPlane_t", "m_flOffset");

// Atribuições para FeSDFRigid_t
// FeSDFRigid_t Offsets
FeSDFRigid_t.vLocalMin = findOffsetByName(j, "FeSDFRigid_t", "vLocalMin");
FeSDFRigid_t.vLocalMax = findOffsetByName(j, "FeSDFRigid_t", "vLocalMax");
FeSDFRigid_t.flBounciness = findOffsetByName(j, "FeSDFRigid_t", "flBounciness");
FeSDFRigid_t.nNode = findOffsetByName(j, "FeSDFRigid_t", "nNode");
FeSDFRigid_t.nCollisionMask = findOffsetByName(j, "FeSDFRigid_t", "nCollisionMask");
FeSDFRigid_t.nVertexMapIndex = findOffsetByName(j, "FeSDFRigid_t", "nVertexMapIndex");
FeSDFRigid_t.nFlags = findOffsetByName(j, "FeSDFRigid_t", "nFlags");
FeSDFRigid_t.m_Distances = findOffsetByName(j, "FeSDFRigid_t", "m_Distances");
FeSDFRigid_t.m_nWidth = findOffsetByName(j, "FeSDFRigid_t", "m_nWidth");
FeSDFRigid_t.m_nHeight = findOffsetByName(j, "FeSDFRigid_t", "m_nHeight");
FeSDFRigid_t.m_nDepth = findOffsetByName(j, "FeSDFRigid_t", "m_nDepth");

// Atribuições para CFeJiggleBone
// CFeJiggleBone Offsets
CFeJiggleBone.m_nFlags = findOffsetByName(j, "CFeJiggleBone", "m_nFlags");
CFeJiggleBone.m_flLength = findOffsetByName(j, "CFeJiggleBone", "m_flLength");
CFeJiggleBone.m_flTipMass = findOffsetByName(j, "CFeJiggleBone", "m_flTipMass");
CFeJiggleBone.m_flYawStiffness = findOffsetByName(j, "CFeJiggleBone", "m_flYawStiffness");
CFeJiggleBone.m_flYawDamping = findOffsetByName(j, "CFeJiggleBone", "m_flYawDamping");
CFeJiggleBone.m_flPitchStiffness = findOffsetByName(j, "CFeJiggleBone", "m_flPitchStiffness");
CFeJiggleBone.m_flPitchDamping = findOffsetByName(j, "CFeJiggleBone", "m_flPitchDamping");
CFeJiggleBone.m_flAlongStiffness = findOffsetByName(j, "CFeJiggleBone", "m_flAlongStiffness");
CFeJiggleBone.m_flAlongDamping = findOffsetByName(j, "CFeJiggleBone", "m_flAlongDamping");
CFeJiggleBone.m_flAngleLimit = findOffsetByName(j, "CFeJiggleBone", "m_flAngleLimit");
CFeJiggleBone.m_flMinYaw = findOffsetByName(j, "CFeJiggleBone", "m_flMinYaw");
CFeJiggleBone.m_flMaxYaw = findOffsetByName(j, "CFeJiggleBone", "m_flMaxYaw");
CFeJiggleBone.m_flYawFriction = findOffsetByName(j, "CFeJiggleBone", "m_flYawFriction");
CFeJiggleBone.m_flYawBounce = findOffsetByName(j, "CFeJiggleBone", "m_flYawBounce");
CFeJiggleBone.m_flMinPitch = findOffsetByName(j, "CFeJiggleBone", "m_flMinPitch");
CFeJiggleBone.m_flMaxPitch = findOffsetByName(j, "CFeJiggleBone", "m_flMaxPitch");
CFeJiggleBone.m_flPitchFriction = findOffsetByName(j, "CFeJiggleBone", "m_flPitchFriction");
CFeJiggleBone.m_flPitchBounce = findOffsetByName(j, "CFeJiggleBone", "m_flPitchBounce");
CFeJiggleBone.m_flBaseMass = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMass");
CFeJiggleBone.m_flBaseStiffness = findOffsetByName(j, "CFeJiggleBone", "m_flBaseStiffness");
CFeJiggleBone.m_flBaseDamping = findOffsetByName(j, "CFeJiggleBone", "m_flBaseDamping");
CFeJiggleBone.m_flBaseMinLeft = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMinLeft");
CFeJiggleBone.m_flBaseMaxLeft = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMaxLeft");
CFeJiggleBone.m_flBaseLeftFriction = findOffsetByName(j, "CFeJiggleBone", "m_flBaseLeftFriction");
CFeJiggleBone.m_flBaseMinUp = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMinUp");
CFeJiggleBone.m_flBaseMaxUp = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMaxUp");
CFeJiggleBone.m_flBaseUpFriction = findOffsetByName(j, "CFeJiggleBone", "m_flBaseUpFriction");
CFeJiggleBone.m_flBaseMinForward = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMinForward");
CFeJiggleBone.m_flBaseMaxForward = findOffsetByName(j, "CFeJiggleBone", "m_flBaseMaxForward");
CFeJiggleBone.m_flBaseForwardFriction = findOffsetByName(j, "CFeJiggleBone", "m_flBaseForwardFriction");
CFeJiggleBone.m_flRadius0 = findOffsetByName(j, "CFeJiggleBone", "m_flRadius0");
CFeJiggleBone.m_flRadius1 = findOffsetByName(j, "CFeJiggleBone", "m_flRadius1");
CFeJiggleBone.m_vPoint0 = findOffsetByName(j, "CFeJiggleBone", "m_vPoint0");
CFeJiggleBone.m_vPoint1 = findOffsetByName(j, "CFeJiggleBone", "m_vPoint1");
CFeJiggleBone.m_nCollisionMask = findOffsetByName(j, "CFeJiggleBone", "m_nCollisionMask");

// Atribuições para CRegionSVM
// CRegionSVM Offsets
CRegionSVM.m_Planes = findOffsetByName(j, "CRegionSVM", "m_Planes");
CRegionSVM.m_Nodes = findOffsetByName(j, "CRegionSVM", "m_Nodes");

// Atribuições para FeWorldCollisionParams_t
// FeWorldCollisionParams_t Offsets
FeWorldCollisionParams_t.flWorldFriction = findOffsetByName(j, "FeWorldCollisionParams_t", "flWorldFriction");
FeWorldCollisionParams_t.flGroundFriction = findOffsetByName(j, "FeWorldCollisionParams_t", "flGroundFriction");
FeWorldCollisionParams_t.nListBegin = findOffsetByName(j, "FeWorldCollisionParams_t", "nListBegin");
FeWorldCollisionParams_t.nListEnd = findOffsetByName(j, "FeWorldCollisionParams_t", "nListEnd");

// Atribuições para RnNode_t
// RnNode_t Offsets
RnNode_t.m_vMin = findOffsetByName(j, "RnNode_t", "m_vMin");
RnNode_t.m_nChildren = findOffsetByName(j, "RnNode_t", "m_nChildren");
RnNode_t.m_vMax = findOffsetByName(j, "RnNode_t", "m_vMax");
RnNode_t.m_nTriangleOffset = findOffsetByName(j, "RnNode_t", "m_nTriangleOffset");

// Atribuições para FeFitMatrix_t
// FeFitMatrix_t Offsets
FeFitMatrix_t.bone = findOffsetByName(j, "FeFitMatrix_t", "bone");
FeFitMatrix_t.vCenter = findOffsetByName(j, "FeFitMatrix_t", "vCenter");
FeFitMatrix_t.nEnd = findOffsetByName(j, "FeFitMatrix_t", "nEnd");
FeFitMatrix_t.nNode = findOffsetByName(j, "FeFitMatrix_t", "nNode");
FeFitMatrix_t.nBeginDynamic = findOffsetByName(j, "FeFitMatrix_t", "nBeginDynamic");

// Atribuições para FeSimdQuad_t
// FeSimdQuad_t Offsets
FeSimdQuad_t.nNode = findOffsetByName(j, "FeSimdQuad_t", "nNode");
FeSimdQuad_t.f4Slack = findOffsetByName(j, "FeSimdQuad_t", "f4Slack");
FeSimdQuad_t.vShape = findOffsetByName(j, "FeSimdQuad_t", "vShape");
FeSimdQuad_t.f4Weights = findOffsetByName(j, "FeSimdQuad_t", "f4Weights");

// Atribuições para FeSimdSpringIntegrator_t
// FeSimdSpringIntegrator_t Offsets
FeSimdSpringIntegrator_t.nNode = findOffsetByName(j, "FeSimdSpringIntegrator_t", "nNode");
FeSimdSpringIntegrator_t.flSpringRestLength = findOffsetByName(j, "FeSimdSpringIntegrator_t", "flSpringRestLength");
FeSimdSpringIntegrator_t.flSpringConstant = findOffsetByName(j, "FeSimdSpringIntegrator_t", "flSpringConstant");
FeSimdSpringIntegrator_t.flSpringDamping = findOffsetByName(j, "FeSimdSpringIntegrator_t", "flSpringDamping");
FeSimdSpringIntegrator_t.flNodeWeight0 = findOffsetByName(j, "FeSimdSpringIntegrator_t", "flNodeWeight0");

// Atribuições para FeSimdNodeBase_t
// FeSimdNodeBase_t Offsets
FeSimdNodeBase_t.nNode = findOffsetByName(j, "FeSimdNodeBase_t", "nNode");
FeSimdNodeBase_t.nNodeX0 = findOffsetByName(j, "FeSimdNodeBase_t", "nNodeX0");
FeSimdNodeBase_t.nNodeX1 = findOffsetByName(j, "FeSimdNodeBase_t", "nNodeX1");
FeSimdNodeBase_t.nNodeY0 = findOffsetByName(j, "FeSimdNodeBase_t", "nNodeY0");
FeSimdNodeBase_t.nNodeY1 = findOffsetByName(j, "FeSimdNodeBase_t", "nNodeY1");
FeSimdNodeBase_t.nDummy = findOffsetByName(j, "FeSimdNodeBase_t", "nDummy");
FeSimdNodeBase_t.qAdjust = findOffsetByName(j, "FeSimdNodeBase_t", "qAdjust");

// Atribuições para FeQuad_t
// FeQuad_t Offsets
FeQuad_t.nNode = findOffsetByName(j, "FeQuad_t", "nNode");
FeQuad_t.flSlack = findOffsetByName(j, "FeQuad_t", "flSlack");
FeQuad_t.vShape = findOffsetByName(j, "FeQuad_t", "vShape");

// Atribuições para FeHingeLimit_t
// FeHingeLimit_t Offsets
FeHingeLimit_t.nNode = findOffsetByName(j, "FeHingeLimit_t", "nNode");
FeHingeLimit_t.nFlags = findOffsetByName(j, "FeHingeLimit_t", "nFlags");
FeHingeLimit_t.flWeight4 = findOffsetByName(j, "FeHingeLimit_t", "flWeight4");
FeHingeLimit_t.flWeight5 = findOffsetByName(j, "FeHingeLimit_t", "flWeight5");
FeHingeLimit_t.flAngleCenter = findOffsetByName(j, "FeHingeLimit_t", "flAngleCenter");
FeHingeLimit_t.flAngleExtents = findOffsetByName(j, "FeHingeLimit_t", "flAngleExtents");

// Atribuições para RnWing_t
// RnWing_t Offsets
RnWing_t.m_nIndex = findOffsetByName(j, "RnWing_t", "m_nIndex");

// Atribuições para FeWeightedNode_t
// FeWeightedNode_t Offsets
FeWeightedNode_t.nNode = findOffsetByName(j, "FeWeightedNode_t", "nNode");
FeWeightedNode_t.nWeight = findOffsetByName(j, "FeWeightedNode_t", "nWeight");

// Atribuições para FeEffectDesc_t
// FeEffectDesc_t Offsets
FeEffectDesc_t.sName = findOffsetByName(j, "FeEffectDesc_t", "sName");
FeEffectDesc_t.nNameHash = findOffsetByName(j, "FeEffectDesc_t", "nNameHash");
FeEffectDesc_t.nType = findOffsetByName(j, "FeEffectDesc_t", "nType");
FeEffectDesc_t.m_Params = findOffsetByName(j, "FeEffectDesc_t", "m_Params");

// Atribuições para FeSpringIntegrator_t
// FeSpringIntegrator_t Offsets
FeSpringIntegrator_t.nNode = findOffsetByName(j, "FeSpringIntegrator_t", "nNode");
FeSpringIntegrator_t.flSpringRestLength = findOffsetByName(j, "FeSpringIntegrator_t", "flSpringRestLength");
FeSpringIntegrator_t.flSpringConstant = findOffsetByName(j, "FeSpringIntegrator_t", "flSpringConstant");
FeSpringIntegrator_t.flSpringDamping = findOffsetByName(j, "FeSpringIntegrator_t", "flSpringDamping");
FeSpringIntegrator_t.flNodeWeight0 = findOffsetByName(j, "FeSpringIntegrator_t", "flNodeWeight0");

// Atribuições para FourVectors2D
// FourVectors2D Offsets
FourVectors2D.x = findOffsetByName(j, "FourVectors2D", "x");
FourVectors2D.y = findOffsetByName(j, "FourVectors2D", "y");

// Atribuições para FeKelagerBend2_t
// FeKelagerBend2_t Offsets
FeKelagerBend2_t.flWeight = findOffsetByName(j, "FeKelagerBend2_t", "flWeight");
FeKelagerBend2_t.flHeight0 = findOffsetByName(j, "FeKelagerBend2_t", "flHeight0");
FeKelagerBend2_t.nNode = findOffsetByName(j, "FeKelagerBend2_t", "nNode");
FeKelagerBend2_t.nReserved = findOffsetByName(j, "FeKelagerBend2_t", "nReserved");

// Atribuições para CastSphereSATParams_t
// CastSphereSATParams_t Offsets
CastSphereSATParams_t.m_vRayStart = findOffsetByName(j, "CastSphereSATParams_t", "m_vRayStart");
CastSphereSATParams_t.m_vRayDelta = findOffsetByName(j, "CastSphereSATParams_t", "m_vRayDelta");
CastSphereSATParams_t.m_flRadius = findOffsetByName(j, "CastSphereSATParams_t", "m_flRadius");
CastSphereSATParams_t.m_flMaxFraction = findOffsetByName(j, "CastSphereSATParams_t", "m_flMaxFraction");
CastSphereSATParams_t.m_flScale = findOffsetByName(j, "CastSphereSATParams_t", "m_flScale");
CastSphereSATParams_t.m_pHull = findOffsetByName(j, "CastSphereSATParams_t", "m_pHull");

// Atribuições para FeRigidColliderIndices_t
// FeRigidColliderIndices_t Offsets
FeRigidColliderIndices_t.m_nTaperedCapsuleRigidIndex = findOffsetByName(j, "FeRigidColliderIndices_t", "m_nTaperedCapsuleRigidIndex");
FeRigidColliderIndices_t.m_nSphereRigidIndex = findOffsetByName(j, "FeRigidColliderIndices_t", "m_nSphereRigidIndex");
FeRigidColliderIndices_t.m_nBoxRigidIndex = findOffsetByName(j, "FeRigidColliderIndices_t", "m_nBoxRigidIndex");
FeRigidColliderIndices_t.m_nSDFRigidIndex = findOffsetByName(j, "FeRigidColliderIndices_t", "m_nSDFRigidIndex");
FeRigidColliderIndices_t.m_nCollisionPlaneIndex = findOffsetByName(j, "FeRigidColliderIndices_t", "m_nCollisionPlaneIndex");

// Atribuições para FeCollisionPlane_t
// FeCollisionPlane_t Offsets
FeCollisionPlane_t.nCtrlParent = findOffsetByName(j, "FeCollisionPlane_t", "nCtrlParent");
FeCollisionPlane_t.nChildNode = findOffsetByName(j, "FeCollisionPlane_t", "nChildNode");
FeCollisionPlane_t.m_Plane = findOffsetByName(j, "FeCollisionPlane_t", "m_Plane");
FeCollisionPlane_t.flStrength = findOffsetByName(j, "FeCollisionPlane_t", "flStrength");

// Atribuições para FeStiffHingeBuild_t
// FeStiffHingeBuild_t Offsets
FeStiffHingeBuild_t.flMaxAngle = findOffsetByName(j, "FeStiffHingeBuild_t", "flMaxAngle");
FeStiffHingeBuild_t.flStrength = findOffsetByName(j, "FeStiffHingeBuild_t", "flStrength");
FeStiffHingeBuild_t.flMotionBias = findOffsetByName(j, "FeStiffHingeBuild_t", "flMotionBias");
FeStiffHingeBuild_t.nNode = findOffsetByName(j, "FeStiffHingeBuild_t", "nNode");

// Atribuições para FeBoxRigid_t
// FeBoxRigid_t Offsets
FeBoxRigid_t.tmFrame2 = findOffsetByName(j, "FeBoxRigid_t", "tmFrame2");
FeBoxRigid_t.nNode = findOffsetByName(j, "FeBoxRigid_t", "nNode");
FeBoxRigid_t.nCollisionMask = findOffsetByName(j, "FeBoxRigid_t", "nCollisionMask");
FeBoxRigid_t.vSize = findOffsetByName(j, "FeBoxRigid_t", "vSize");
FeBoxRigid_t.nVertexMapIndex = findOffsetByName(j, "FeBoxRigid_t", "nVertexMapIndex");
FeBoxRigid_t.nFlags = findOffsetByName(j, "FeBoxRigid_t", "nFlags");

// Atribuições para FeMorphLayerDepr_t
// FeMorphLayerDepr_t Offsets
FeMorphLayerDepr_t.m_Name = findOffsetByName(j, "FeMorphLayerDepr_t", "m_Name");
FeMorphLayerDepr_t.m_nNameHash = findOffsetByName(j, "FeMorphLayerDepr_t", "m_nNameHash");
FeMorphLayerDepr_t.m_Nodes = findOffsetByName(j, "FeMorphLayerDepr_t", "m_Nodes");
FeMorphLayerDepr_t.m_InitPos = findOffsetByName(j, "FeMorphLayerDepr_t", "m_InitPos");
FeMorphLayerDepr_t.m_Gravity = findOffsetByName(j, "FeMorphLayerDepr_t", "m_Gravity");
FeMorphLayerDepr_t.m_GoalStrength = findOffsetByName(j, "FeMorphLayerDepr_t", "m_GoalStrength");
FeMorphLayerDepr_t.m_GoalDamping = findOffsetByName(j, "FeMorphLayerDepr_t", "m_GoalDamping");
FeMorphLayerDepr_t.m_nFlags = findOffsetByName(j, "FeMorphLayerDepr_t", "m_nFlags");

// Atribuições para FeCtrlOffset_t
// FeCtrlOffset_t Offsets
FeCtrlOffset_t.vOffset = findOffsetByName(j, "FeCtrlOffset_t", "vOffset");
FeCtrlOffset_t.nCtrlParent = findOffsetByName(j, "FeCtrlOffset_t", "nCtrlParent");
FeCtrlOffset_t.nCtrlChild = findOffsetByName(j, "FeCtrlOffset_t", "nCtrlChild");

// Atribuições para FeNodeBase_t
// FeNodeBase_t Offsets
FeNodeBase_t.nNode = findOffsetByName(j, "FeNodeBase_t", "nNode");
FeNodeBase_t.nDummy = findOffsetByName(j, "FeNodeBase_t", "nDummy");
FeNodeBase_t.nNodeX0 = findOffsetByName(j, "FeNodeBase_t", "nNodeX0");
FeNodeBase_t.nNodeX1 = findOffsetByName(j, "FeNodeBase_t", "nNodeX1");
FeNodeBase_t.nNodeY0 = findOffsetByName(j, "FeNodeBase_t", "nNodeY0");
FeNodeBase_t.nNodeY1 = findOffsetByName(j, "FeNodeBase_t", "nNodeY1");
FeNodeBase_t.qAdjust = findOffsetByName(j, "FeNodeBase_t", "qAdjust");

// Atribuições para FeVertexMapBuild_t
// FeVertexMapBuild_t Offsets
FeVertexMapBuild_t.m_VertexMapName = findOffsetByName(j, "FeVertexMapBuild_t", "m_VertexMapName");
FeVertexMapBuild_t.m_nNameHash = findOffsetByName(j, "FeVertexMapBuild_t", "m_nNameHash");
FeVertexMapBuild_t.m_Color = findOffsetByName(j, "FeVertexMapBuild_t", "m_Color");
FeVertexMapBuild_t.m_flVolumetricSolveStrength = findOffsetByName(j, "FeVertexMapBuild_t", "m_flVolumetricSolveStrength");
FeVertexMapBuild_t.m_nScaleSourceNode = findOffsetByName(j, "FeVertexMapBuild_t", "m_nScaleSourceNode");
FeVertexMapBuild_t.m_Weights = findOffsetByName(j, "FeVertexMapBuild_t", "m_Weights");

// Atribuições para CFeVertexMapBuildArray
// CFeVertexMapBuildArray Offsets
CFeVertexMapBuildArray.m_Array = findOffsetByName(j, "CFeVertexMapBuildArray", "m_Array");

// Atribuições para FeTri_t
// FeTri_t Offsets
FeTri_t.nNode = findOffsetByName(j, "FeTri_t", "nNode");
FeTri_t.w1 = findOffsetByName(j, "FeTri_t", "w1");
FeTri_t.w2 = findOffsetByName(j, "FeTri_t", "w2");
FeTri_t.v1x = findOffsetByName(j, "FeTri_t", "v1x");
FeTri_t.v2 = findOffsetByName(j, "FeTri_t", "v2");

// Atribuições para RnHull_t
// RnHull_t Offsets
RnHull_t.m_vCentroid = findOffsetByName(j, "RnHull_t", "m_vCentroid");
RnHull_t.m_flMaxAngularRadius = findOffsetByName(j, "RnHull_t", "m_flMaxAngularRadius");
RnHull_t.m_Bounds = findOffsetByName(j, "RnHull_t", "m_Bounds");
RnHull_t.m_vOrthographicAreas = findOffsetByName(j, "RnHull_t", "m_vOrthographicAreas");
RnHull_t.m_MassProperties = findOffsetByName(j, "RnHull_t", "m_MassProperties");
RnHull_t.m_flVolume = findOffsetByName(j, "RnHull_t", "m_flVolume");
RnHull_t.m_flSurfaceArea = findOffsetByName(j, "RnHull_t", "m_flSurfaceArea");
RnHull_t.m_Vertices = findOffsetByName(j, "RnHull_t", "m_Vertices");
RnHull_t.m_VertexPositions = findOffsetByName(j, "RnHull_t", "m_VertexPositions");
RnHull_t.m_Edges = findOffsetByName(j, "RnHull_t", "m_Edges");
RnHull_t.m_Faces = findOffsetByName(j, "RnHull_t", "m_Faces");
RnHull_t.m_FacePlanes = findOffsetByName(j, "RnHull_t", "m_FacePlanes");
RnHull_t.m_nFlags = findOffsetByName(j, "RnHull_t", "m_nFlags");
RnHull_t.m_pRegionSVM = findOffsetByName(j, "RnHull_t", "m_pRegionSVM");

// Atribuições para CovMatrix3
// CovMatrix3 Offsets
CovMatrix3.m_vDiag = findOffsetByName(j, "CovMatrix3", "m_vDiag");
CovMatrix3.m_flXY = findOffsetByName(j, "CovMatrix3", "m_flXY");
CovMatrix3.m_flXZ = findOffsetByName(j, "CovMatrix3", "m_flXZ");
CovMatrix3.m_flYZ = findOffsetByName(j, "CovMatrix3", "m_flYZ");

// Atribuições para RnVertex_t
// RnVertex_t Offsets
RnVertex_t.m_nEdge = findOffsetByName(j, "RnVertex_t", "m_nEdge");

// Atribuições para Dop26_t
// Dop26_t Offsets
Dop26_t.m_flSupport = findOffsetByName(j, "Dop26_t", "m_flSupport");

// Atribuições para RnFace_t
// RnFace_t Offsets
RnFace_t.m_nEdge = findOffsetByName(j, "RnFace_t", "m_nEdge");

// Atribuições para FeCtrlOsOffset_t
// FeCtrlOsOffset_t Offsets
FeCtrlOsOffset_t.nCtrlParent = findOffsetByName(j, "FeCtrlOsOffset_t", "nCtrlParent");
FeCtrlOsOffset_t.nCtrlChild = findOffsetByName(j, "FeCtrlOsOffset_t", "nCtrlChild");

// Atribuições para FeAntiTunnelProbe_t
// FeAntiTunnelProbe_t Offsets
FeAntiTunnelProbe_t.flWeight = findOffsetByName(j, "FeAntiTunnelProbe_t", "flWeight");
FeAntiTunnelProbe_t.nFlags = findOffsetByName(j, "FeAntiTunnelProbe_t", "nFlags");
FeAntiTunnelProbe_t.nProbeNode = findOffsetByName(j, "FeAntiTunnelProbe_t", "nProbeNode");
FeAntiTunnelProbe_t.nCount = findOffsetByName(j, "FeAntiTunnelProbe_t", "nCount");
FeAntiTunnelProbe_t.nBegin = findOffsetByName(j, "FeAntiTunnelProbe_t", "nBegin");
FeAntiTunnelProbe_t.flActivationDistance = findOffsetByName(j, "FeAntiTunnelProbe_t", "flActivationDistance");
FeAntiTunnelProbe_t.flCurvatureRadius = findOffsetByName(j, "FeAntiTunnelProbe_t", "flCurvatureRadius");
FeAntiTunnelProbe_t.flBias = findOffsetByName(j, "FeAntiTunnelProbe_t", "flBias");

// Atribuições para FeSourceEdge_t
// FeSourceEdge_t Offsets
FeSourceEdge_t.nNode = findOffsetByName(j, "FeSourceEdge_t", "nNode");

// Atribuições para FeTwistConstraint_t
// FeTwistConstraint_t Offsets
FeTwistConstraint_t.nNodeOrient = findOffsetByName(j, "FeTwistConstraint_t", "nNodeOrient");
FeTwistConstraint_t.nNodeEnd = findOffsetByName(j, "FeTwistConstraint_t", "nNodeEnd");
FeTwistConstraint_t.flTwistRelax = findOffsetByName(j, "FeTwistConstraint_t", "flTwistRelax");
FeTwistConstraint_t.flSwingRelax = findOffsetByName(j, "FeTwistConstraint_t", "flSwingRelax");

// Atribuições para FeNodeWindBase_t
// FeNodeWindBase_t Offsets
FeNodeWindBase_t.nNodeX0 = findOffsetByName(j, "FeNodeWindBase_t", "nNodeX0");
FeNodeWindBase_t.nNodeX1 = findOffsetByName(j, "FeNodeWindBase_t", "nNodeX1");
FeNodeWindBase_t.nNodeY0 = findOffsetByName(j, "FeNodeWindBase_t", "nNodeY0");
FeNodeWindBase_t.nNodeY1 = findOffsetByName(j, "FeNodeWindBase_t", "nNodeY1");

// Atribuições para FeAxialEdgeBend_t
// FeAxialEdgeBend_t Offsets
FeAxialEdgeBend_t.te = findOffsetByName(j, "FeAxialEdgeBend_t", "te");
FeAxialEdgeBend_t.tv = findOffsetByName(j, "FeAxialEdgeBend_t", "tv");
FeAxialEdgeBend_t.flDist = findOffsetByName(j, "FeAxialEdgeBend_t", "flDist");
FeAxialEdgeBend_t.flWeight = findOffsetByName(j, "FeAxialEdgeBend_t", "flWeight");
FeAxialEdgeBend_t.nNode = findOffsetByName(j, "FeAxialEdgeBend_t", "nNode");

// Atribuições para FourCovMatrices3
// FourCovMatrices3 Offsets
FourCovMatrices3.m_vDiag = findOffsetByName(j, "FourCovMatrices3", "m_vDiag");
FourCovMatrices3.m_flXY = findOffsetByName(j, "FourCovMatrices3", "m_flXY");
FourCovMatrices3.m_flXZ = findOffsetByName(j, "FourCovMatrices3", "m_flXZ");
FourCovMatrices3.m_flYZ = findOffsetByName(j, "FourCovMatrices3", "m_flYZ");

// Atribuições para constraint_breakableparams_t
// constraint_breakableparams_t Offsets
constraint_breakableparams_t.strength = findOffsetByName(j, "constraint_breakableparams_t", "strength");
constraint_breakableparams_t.forceLimit = findOffsetByName(j, "constraint_breakableparams_t", "forceLimit");
constraint_breakableparams_t.torqueLimit = findOffsetByName(j, "constraint_breakableparams_t", "torqueLimit");
constraint_breakableparams_t.bodyMassScale = findOffsetByName(j, "constraint_breakableparams_t", "bodyMassScale");
constraint_breakableparams_t.isActive = findOffsetByName(j, "constraint_breakableparams_t", "isActive");

// Atribuições para FeSphereRigid_t
// FeSphereRigid_t Offsets
FeSphereRigid_t.vSphere = findOffsetByName(j, "FeSphereRigid_t", "vSphere");
FeSphereRigid_t.nNode = findOffsetByName(j, "FeSphereRigid_t", "nNode");
FeSphereRigid_t.nCollisionMask = findOffsetByName(j, "FeSphereRigid_t", "nCollisionMask");
FeSphereRigid_t.nVertexMapIndex = findOffsetByName(j, "FeSphereRigid_t", "nVertexMapIndex");
FeSphereRigid_t.nFlags = findOffsetByName(j, "FeSphereRigid_t", "nFlags");

// Atribuições para FeBuildTaperedCapsuleRigid_t
// FeBuildTaperedCapsuleRigid_t Offsets
FeBuildTaperedCapsuleRigid_t.m_nPriority = findOffsetByName(j, "FeBuildTaperedCapsuleRigid_t", "m_nPriority");
FeBuildTaperedCapsuleRigid_t.m_nVertexMapHash = findOffsetByName(j, "FeBuildTaperedCapsuleRigid_t", "m_nVertexMapHash");

// Atribuições para FeSoftParent_t
// FeSoftParent_t Offsets
FeSoftParent_t.nParent = findOffsetByName(j, "FeSoftParent_t", "nParent");
FeSoftParent_t.flAlpha = findOffsetByName(j, "FeSoftParent_t", "flAlpha");

// Atribuições para RnShapeDesc_t
// RnShapeDesc_t Offsets
RnShapeDesc_t.m_nCollisionAttributeIndex = findOffsetByName(j, "RnShapeDesc_t", "m_nCollisionAttributeIndex");
RnShapeDesc_t.m_nSurfacePropertyIndex = findOffsetByName(j, "RnShapeDesc_t", "m_nSurfacePropertyIndex");
RnShapeDesc_t.m_UserFriendlyName = findOffsetByName(j, "RnShapeDesc_t", "m_UserFriendlyName");
RnShapeDesc_t.m_bUserFriendlyNameSealed = findOffsetByName(j, "RnShapeDesc_t", "m_bUserFriendlyNameSealed");
RnShapeDesc_t.m_bUserFriendlyNameLong = findOffsetByName(j, "RnShapeDesc_t", "m_bUserFriendlyNameLong");
RnShapeDesc_t.m_nToolMaterialHash = findOffsetByName(j, "RnShapeDesc_t", "m_nToolMaterialHash");

// Atribuições para FeTreeChildren_t
// FeTreeChildren_t Offsets
FeTreeChildren_t.nChild = findOffsetByName(j, "FeTreeChildren_t", "nChild");

// Atribuições para FeRodConstraint_t
// FeRodConstraint_t Offsets
FeRodConstraint_t.nNode = findOffsetByName(j, "FeRodConstraint_t", "nNode");
FeRodConstraint_t.flMaxDist = findOffsetByName(j, "FeRodConstraint_t", "flMaxDist");
FeRodConstraint_t.flMinDist = findOffsetByName(j, "FeRodConstraint_t", "flMinDist");
FeRodConstraint_t.flWeight0 = findOffsetByName(j, "FeRodConstraint_t", "flWeight0");
FeRodConstraint_t.flRelaxationFactor = findOffsetByName(j, "FeRodConstraint_t", "flRelaxationFactor");

// Atribuições para FeFitWeight_t
// FeFitWeight_t Offsets
FeFitWeight_t.flWeight = findOffsetByName(j, "FeFitWeight_t", "flWeight");
FeFitWeight_t.nNode = findOffsetByName(j, "FeFitWeight_t", "nNode");
FeFitWeight_t.nDummy = findOffsetByName(j, "FeFitWeight_t", "nDummy");

// Atribuições para RnHalfEdge_t
// RnHalfEdge_t Offsets
RnHalfEdge_t.m_nNext = findOffsetByName(j, "RnHalfEdge_t", "m_nNext");
RnHalfEdge_t.m_nTwin = findOffsetByName(j, "RnHalfEdge_t", "m_nTwin");
RnHalfEdge_t.m_nOrigin = findOffsetByName(j, "RnHalfEdge_t", "m_nOrigin");
RnHalfEdge_t.m_nFace = findOffsetByName(j, "RnHalfEdge_t", "m_nFace");

// Atribuições para FeSimdTri_t
// FeSimdTri_t Offsets
FeSimdTri_t.nNode = findOffsetByName(j, "FeSimdTri_t", "nNode");
FeSimdTri_t.w1 = findOffsetByName(j, "FeSimdTri_t", "w1");
FeSimdTri_t.w2 = findOffsetByName(j, "FeSimdTri_t", "w2");
FeSimdTri_t.v1x = findOffsetByName(j, "FeSimdTri_t", "v1x");
FeSimdTri_t.v2 = findOffsetByName(j, "FeSimdTri_t", "v2");

// Atribuições para VertexPositionColor_t
// VertexPositionColor_t Offsets
VertexPositionColor_t.m_vPosition = findOffsetByName(j, "VertexPositionColor_t", "m_vPosition");

// Atribuições para FeFitInfluence_t
// FeFitInfluence_t Offsets
FeFitInfluence_t.nVertexNode = findOffsetByName(j, "FeFitInfluence_t", "nVertexNode");
FeFitInfluence_t.flWeight = findOffsetByName(j, "FeFitInfluence_t", "flWeight");
FeFitInfluence_t.nMatrixNode = findOffsetByName(j, "FeFitInfluence_t", "nMatrixNode");

// Atribuições para FeHingeLimitBuild_t
// FeHingeLimitBuild_t Offsets
FeHingeLimitBuild_t.nNode = findOffsetByName(j, "FeHingeLimitBuild_t", "nNode");
FeHingeLimitBuild_t.nFlags = findOffsetByName(j, "FeHingeLimitBuild_t", "nFlags");
FeHingeLimitBuild_t.flLimitCW = findOffsetByName(j, "FeHingeLimitBuild_t", "flLimitCW");
FeHingeLimitBuild_t.flLimitCCW = findOffsetByName(j, "FeHingeLimitBuild_t", "flLimitCCW");

// Atribuições para SceneObject_t
// SceneObject_t Offsets
SceneObject_t.m_nObjectID = findOffsetByName(j, "SceneObject_t", "m_nObjectID");
SceneObject_t.m_vTransform = findOffsetByName(j, "SceneObject_t", "m_vTransform");
SceneObject_t.m_flFadeStartDistance = findOffsetByName(j, "SceneObject_t", "m_flFadeStartDistance");
SceneObject_t.m_flFadeEndDistance = findOffsetByName(j, "SceneObject_t", "m_flFadeEndDistance");
SceneObject_t.m_vTintColor = findOffsetByName(j, "SceneObject_t", "m_vTintColor");
SceneObject_t.m_skin = findOffsetByName(j, "SceneObject_t", "m_skin");
SceneObject_t.m_nObjectTypeFlags = findOffsetByName(j, "SceneObject_t", "m_nObjectTypeFlags");
SceneObject_t.m_vLightingOrigin = findOffsetByName(j, "SceneObject_t", "m_vLightingOrigin");
SceneObject_t.m_nOverlayRenderOrder = findOffsetByName(j, "SceneObject_t", "m_nOverlayRenderOrder");
SceneObject_t.m_nLODOverride = findOffsetByName(j, "SceneObject_t", "m_nLODOverride");
SceneObject_t.m_nCubeMapPrecomputedHandshake = findOffsetByName(j, "SceneObject_t", "m_nCubeMapPrecomputedHandshake");
SceneObject_t.m_nLightProbeVolumePrecomputedHandshake = findOffsetByName(j, "SceneObject_t", "m_nLightProbeVolumePrecomputedHandshake");
SceneObject_t.m_renderableModel = findOffsetByName(j, "SceneObject_t", "m_renderableModel");
SceneObject_t.m_renderable = findOffsetByName(j, "SceneObject_t", "m_renderable");

// Atribuições para AggregateLODSetup_t
// AggregateLODSetup_t Offsets
AggregateLODSetup_t.m_vLODOrigin = findOffsetByName(j, "AggregateLODSetup_t", "m_vLODOrigin");
AggregateLODSetup_t.m_fMaxObjectScale = findOffsetByName(j, "AggregateLODSetup_t", "m_fMaxObjectScale");
AggregateLODSetup_t.m_fSwitchDistances = findOffsetByName(j, "AggregateLODSetup_t", "m_fSwitchDistances");

// Atribuições para ExtraVertexStreamOverride_t
// ExtraVertexStreamOverride_t Offsets
ExtraVertexStreamOverride_t.m_nSubSceneObject = findOffsetByName(j, "ExtraVertexStreamOverride_t", "m_nSubSceneObject");
ExtraVertexStreamOverride_t.m_nDrawCallIndex = findOffsetByName(j, "ExtraVertexStreamOverride_t", "m_nDrawCallIndex");
ExtraVertexStreamOverride_t.m_nAdditionalMeshDrawPrimitiveFlags = findOffsetByName(j, "ExtraVertexStreamOverride_t", "m_nAdditionalMeshDrawPrimitiveFlags");
ExtraVertexStreamOverride_t.m_extraBufferBinding = findOffsetByName(j, "ExtraVertexStreamOverride_t", "m_extraBufferBinding");

// Atribuições para ClutterTile_t
// ClutterTile_t Offsets
ClutterTile_t.m_nFirstInstance = findOffsetByName(j, "ClutterTile_t", "m_nFirstInstance");
ClutterTile_t.m_nLastInstance = findOffsetByName(j, "ClutterTile_t", "m_nLastInstance");
ClutterTile_t.m_BoundsWs = findOffsetByName(j, "ClutterTile_t", "m_BoundsWs");

// Atribuições para AggregateSceneObject_t
// AggregateSceneObject_t Offsets
AggregateSceneObject_t.m_allFlags = findOffsetByName(j, "AggregateSceneObject_t", "m_allFlags");
AggregateSceneObject_t.m_anyFlags = findOffsetByName(j, "AggregateSceneObject_t", "m_anyFlags");
AggregateSceneObject_t.m_nLayer = findOffsetByName(j, "AggregateSceneObject_t", "m_nLayer");
AggregateSceneObject_t.m_aggregateMeshes = findOffsetByName(j, "AggregateSceneObject_t", "m_aggregateMeshes");
AggregateSceneObject_t.m_lodSetups = findOffsetByName(j, "AggregateSceneObject_t", "m_lodSetups");
AggregateSceneObject_t.m_visClusterMembership = findOffsetByName(j, "AggregateSceneObject_t", "m_visClusterMembership");
AggregateSceneObject_t.m_fragmentTransforms = findOffsetByName(j, "AggregateSceneObject_t", "m_fragmentTransforms");
AggregateSceneObject_t.m_renderableModel = findOffsetByName(j, "AggregateSceneObject_t", "m_renderableModel");

// Atribuições para NodeData_t
// NodeData_t Offsets
NodeData_t.m_nParent = findOffsetByName(j, "NodeData_t", "m_nParent");
NodeData_t.m_vOrigin = findOffsetByName(j, "NodeData_t", "m_vOrigin");
NodeData_t.m_vMinBounds = findOffsetByName(j, "NodeData_t", "m_vMinBounds");
NodeData_t.m_vMaxBounds = findOffsetByName(j, "NodeData_t", "m_vMaxBounds");
NodeData_t.m_flMinimumDistance = findOffsetByName(j, "NodeData_t", "m_flMinimumDistance");
NodeData_t.m_ChildNodeIndices = findOffsetByName(j, "NodeData_t", "m_ChildNodeIndices");
NodeData_t.m_worldNodePrefix = findOffsetByName(j, "NodeData_t", "m_worldNodePrefix");

// Atribuições para ClutterSceneObject_t
// ClutterSceneObject_t Offsets
ClutterSceneObject_t.m_Bounds = findOffsetByName(j, "ClutterSceneObject_t", "m_Bounds");
ClutterSceneObject_t.m_flags = findOffsetByName(j, "ClutterSceneObject_t", "m_flags");
ClutterSceneObject_t.m_nLayer = findOffsetByName(j, "ClutterSceneObject_t", "m_nLayer");
ClutterSceneObject_t.m_instancePositions = findOffsetByName(j, "ClutterSceneObject_t", "m_instancePositions");
ClutterSceneObject_t.m_instanceScales = findOffsetByName(j, "ClutterSceneObject_t", "m_instanceScales");
ClutterSceneObject_t.m_instanceTintSrgb = findOffsetByName(j, "ClutterSceneObject_t", "m_instanceTintSrgb");
ClutterSceneObject_t.m_tiles = findOffsetByName(j, "ClutterSceneObject_t", "m_tiles");
ClutterSceneObject_t.m_renderableModel = findOffsetByName(j, "ClutterSceneObject_t", "m_renderableModel");

// Atribuições para WorldBuilderParams_t
// WorldBuilderParams_t Offsets
WorldBuilderParams_t.m_flMinDrawVolumeSize = findOffsetByName(j, "WorldBuilderParams_t", "m_flMinDrawVolumeSize");
WorldBuilderParams_t.m_bBuildBakedLighting = findOffsetByName(j, "WorldBuilderParams_t", "m_bBuildBakedLighting");
WorldBuilderParams_t.m_bakedLightingInfo = findOffsetByName(j, "WorldBuilderParams_t", "m_bakedLightingInfo");
WorldBuilderParams_t.m_nCompileTimestamp = findOffsetByName(j, "WorldBuilderParams_t", "m_nCompileTimestamp");
WorldBuilderParams_t.m_nCompileFingerprint = findOffsetByName(j, "WorldBuilderParams_t", "m_nCompileFingerprint");

// Atribuições para PermEntityLumpData_t
// PermEntityLumpData_t Offsets
PermEntityLumpData_t.m_name = findOffsetByName(j, "PermEntityLumpData_t", "m_name");
PermEntityLumpData_t.m_childLumps = findOffsetByName(j, "PermEntityLumpData_t", "m_childLumps");
PermEntityLumpData_t.m_entityKeyValues = findOffsetByName(j, "PermEntityLumpData_t", "m_entityKeyValues");

// Atribuições para WorldNode_t
// WorldNode_t Offsets
WorldNode_t.m_sceneObjects = findOffsetByName(j, "WorldNode_t", "m_sceneObjects");
WorldNode_t.m_infoOverlays = findOffsetByName(j, "WorldNode_t", "m_infoOverlays");
WorldNode_t.m_visClusterMembership = findOffsetByName(j, "WorldNode_t", "m_visClusterMembership");
WorldNode_t.m_aggregateSceneObjects = findOffsetByName(j, "WorldNode_t", "m_aggregateSceneObjects");
WorldNode_t.m_clutterSceneObjects = findOffsetByName(j, "WorldNode_t", "m_clutterSceneObjects");
WorldNode_t.m_extraVertexStreamOverrides = findOffsetByName(j, "WorldNode_t", "m_extraVertexStreamOverrides");
WorldNode_t.m_materialOverrides = findOffsetByName(j, "WorldNode_t", "m_materialOverrides");
WorldNode_t.m_extraVertexStreams = findOffsetByName(j, "WorldNode_t", "m_extraVertexStreams");
WorldNode_t.m_layerNames = findOffsetByName(j, "WorldNode_t", "m_layerNames");
WorldNode_t.m_sceneObjectLayerIndices = findOffsetByName(j, "WorldNode_t", "m_sceneObjectLayerIndices");
WorldNode_t.m_overlayLayerIndices = findOffsetByName(j, "WorldNode_t", "m_overlayLayerIndices");
WorldNode_t.m_grassFileName = findOffsetByName(j, "WorldNode_t", "m_grassFileName");
WorldNode_t.m_nodeLightingInfo = findOffsetByName(j, "WorldNode_t", "m_nodeLightingInfo");
WorldNode_t.m_bHasBakedGeometryFlag = findOffsetByName(j, "WorldNode_t", "m_bHasBakedGeometryFlag");

// Atribuições para BaseSceneObjectOverride_t
// BaseSceneObjectOverride_t Offsets
BaseSceneObjectOverride_t.m_nSceneObjectIndex = findOffsetByName(j, "BaseSceneObjectOverride_t", "m_nSceneObjectIndex");

// Atribuições para EntityIOConnectionData_t
// EntityIOConnectionData_t Offsets
EntityIOConnectionData_t.m_outputName = findOffsetByName(j, "EntityIOConnectionData_t", "m_outputName");
EntityIOConnectionData_t.m_targetType = findOffsetByName(j, "EntityIOConnectionData_t", "m_targetType");
EntityIOConnectionData_t.m_targetName = findOffsetByName(j, "EntityIOConnectionData_t", "m_targetName");
EntityIOConnectionData_t.m_inputName = findOffsetByName(j, "EntityIOConnectionData_t", "m_inputName");
EntityIOConnectionData_t.m_overrideParam = findOffsetByName(j, "EntityIOConnectionData_t", "m_overrideParam");
EntityIOConnectionData_t.m_flDelay = findOffsetByName(j, "EntityIOConnectionData_t", "m_flDelay");
EntityIOConnectionData_t.m_nTimesToFire = findOffsetByName(j, "EntityIOConnectionData_t", "m_nTimesToFire");

// Atribuições para BakedLightingInfo_t
// BakedLightingInfo_t Offsets
BakedLightingInfo_t.m_nLightmapVersionNumber = findOffsetByName(j, "BakedLightingInfo_t", "m_nLightmapVersionNumber");
BakedLightingInfo_t.m_nLightmapGameVersionNumber = findOffsetByName(j, "BakedLightingInfo_t", "m_nLightmapGameVersionNumber");
BakedLightingInfo_t.m_vLightmapUvScale = findOffsetByName(j, "BakedLightingInfo_t", "m_vLightmapUvScale");
BakedLightingInfo_t.m_bHasLightmaps = findOffsetByName(j, "BakedLightingInfo_t", "m_bHasLightmaps");
BakedLightingInfo_t.m_bBakedShadowsGamma20 = findOffsetByName(j, "BakedLightingInfo_t", "m_bBakedShadowsGamma20");
BakedLightingInfo_t.m_bCompressionEnabled = findOffsetByName(j, "BakedLightingInfo_t", "m_bCompressionEnabled");
BakedLightingInfo_t.m_nChartPackIterations = findOffsetByName(j, "BakedLightingInfo_t", "m_nChartPackIterations");
BakedLightingInfo_t.m_nVradQuality = findOffsetByName(j, "BakedLightingInfo_t", "m_nVradQuality");
BakedLightingInfo_t.m_lightMaps = findOffsetByName(j, "BakedLightingInfo_t", "m_lightMaps");

// Atribuições para VoxelVisBlockOffset_t
// VoxelVisBlockOffset_t Offsets
VoxelVisBlockOffset_t.m_nOffset = findOffsetByName(j, "VoxelVisBlockOffset_t", "m_nOffset");
VoxelVisBlockOffset_t.m_nElementCount = findOffsetByName(j, "VoxelVisBlockOffset_t", "m_nElementCount");

// Atribuições para WorldNodeOnDiskBufferData_t
// WorldNodeOnDiskBufferData_t Offsets
WorldNodeOnDiskBufferData_t.m_nElementCount = findOffsetByName(j, "WorldNodeOnDiskBufferData_t", "m_nElementCount");
WorldNodeOnDiskBufferData_t.m_nElementSizeInBytes = findOffsetByName(j, "WorldNodeOnDiskBufferData_t", "m_nElementSizeInBytes");
WorldNodeOnDiskBufferData_t.m_inputLayoutFields = findOffsetByName(j, "WorldNodeOnDiskBufferData_t", "m_inputLayoutFields");
WorldNodeOnDiskBufferData_t.m_pData = findOffsetByName(j, "WorldNodeOnDiskBufferData_t", "m_pData");

// Atribuições para AggregateMeshInfo_t
// AggregateMeshInfo_t Offsets
AggregateMeshInfo_t.m_nVisClusterMemberOffset = findOffsetByName(j, "AggregateMeshInfo_t", "m_nVisClusterMemberOffset");
AggregateMeshInfo_t.m_nVisClusterMemberCount = findOffsetByName(j, "AggregateMeshInfo_t", "m_nVisClusterMemberCount");
AggregateMeshInfo_t.m_bHasTransform = findOffsetByName(j, "AggregateMeshInfo_t", "m_bHasTransform");
AggregateMeshInfo_t.m_nDrawCallIndex = findOffsetByName(j, "AggregateMeshInfo_t", "m_nDrawCallIndex");
AggregateMeshInfo_t.m_nLODSetupIndex = findOffsetByName(j, "AggregateMeshInfo_t", "m_nLODSetupIndex");
AggregateMeshInfo_t.m_nLODGroupMask = findOffsetByName(j, "AggregateMeshInfo_t", "m_nLODGroupMask");
AggregateMeshInfo_t.m_vTintColor = findOffsetByName(j, "AggregateMeshInfo_t", "m_vTintColor");
AggregateMeshInfo_t.m_objectFlags = findOffsetByName(j, "AggregateMeshInfo_t", "m_objectFlags");
AggregateMeshInfo_t.m_nLightProbeVolumePrecomputedHandshake = findOffsetByName(j, "AggregateMeshInfo_t", "m_nLightProbeVolumePrecomputedHandshake");

// Atribuições para World_t
// World_t Offsets
World_t.m_builderParams = findOffsetByName(j, "World_t", "m_builderParams");
World_t.m_worldNodes = findOffsetByName(j, "World_t", "m_worldNodes");
World_t.m_worldLightingInfo = findOffsetByName(j, "World_t", "m_worldLightingInfo");
World_t.m_entityLumps = findOffsetByName(j, "World_t", "m_entityLumps");

// Atribuições para InfoOverlayData_t
// InfoOverlayData_t Offsets
InfoOverlayData_t.m_transform = findOffsetByName(j, "InfoOverlayData_t", "m_transform");
InfoOverlayData_t.m_flWidth = findOffsetByName(j, "InfoOverlayData_t", "m_flWidth");
InfoOverlayData_t.m_flHeight = findOffsetByName(j, "InfoOverlayData_t", "m_flHeight");
InfoOverlayData_t.m_flDepth = findOffsetByName(j, "InfoOverlayData_t", "m_flDepth");
InfoOverlayData_t.m_vUVStart = findOffsetByName(j, "InfoOverlayData_t", "m_vUVStart");
InfoOverlayData_t.m_vUVEnd = findOffsetByName(j, "InfoOverlayData_t", "m_vUVEnd");
InfoOverlayData_t.m_pMaterial = findOffsetByName(j, "InfoOverlayData_t", "m_pMaterial");
InfoOverlayData_t.m_nRenderOrder = findOffsetByName(j, "InfoOverlayData_t", "m_nRenderOrder");
InfoOverlayData_t.m_vTintColor = findOffsetByName(j, "InfoOverlayData_t", "m_vTintColor");
InfoOverlayData_t.m_nSequenceOverride = findOffsetByName(j, "InfoOverlayData_t", "m_nSequenceOverride");

// Atribuições para MaterialOverride_t
// MaterialOverride_t Offsets
MaterialOverride_t.m_nSubSceneObject = findOffsetByName(j, "MaterialOverride_t", "m_nSubSceneObject");
MaterialOverride_t.m_nDrawCallIndex = findOffsetByName(j, "MaterialOverride_t", "m_nDrawCallIndex");
MaterialOverride_t.m_pMaterial = findOffsetByName(j, "MaterialOverride_t", "m_pMaterial");

// Atribuições para EntityKeyValueData_t
// EntityKeyValueData_t Offsets
EntityKeyValueData_t.m_connections = findOffsetByName(j, "EntityKeyValueData_t", "m_connections");
EntityKeyValueData_t.m_keyValuesData = findOffsetByName(j, "EntityKeyValueData_t", "m_keyValuesData");

// Atribuições para CVoxelVisibility
// CVoxelVisibility Offsets
CVoxelVisibility.m_nBaseClusterCount = findOffsetByName(j, "CVoxelVisibility", "m_nBaseClusterCount");
CVoxelVisibility.m_nPVSBytesPerCluster = findOffsetByName(j, "CVoxelVisibility", "m_nPVSBytesPerCluster");
CVoxelVisibility.m_vMinBounds = findOffsetByName(j, "CVoxelVisibility", "m_vMinBounds");
CVoxelVisibility.m_vMaxBounds = findOffsetByName(j, "CVoxelVisibility", "m_vMaxBounds");
CVoxelVisibility.m_flGridSize = findOffsetByName(j, "CVoxelVisibility", "m_flGridSize");
CVoxelVisibility.m_nSkyVisibilityCluster = findOffsetByName(j, "CVoxelVisibility", "m_nSkyVisibilityCluster");
CVoxelVisibility.m_nSunVisibilityCluster = findOffsetByName(j, "CVoxelVisibility", "m_nSunVisibilityCluster");
CVoxelVisibility.m_NodeBlock = findOffsetByName(j, "CVoxelVisibility", "m_NodeBlock");
CVoxelVisibility.m_RegionBlock = findOffsetByName(j, "CVoxelVisibility", "m_RegionBlock");
CVoxelVisibility.m_EnclosedClusterListBlock = findOffsetByName(j, "CVoxelVisibility", "m_EnclosedClusterListBlock");
CVoxelVisibility.m_EnclosedClustersBlock = findOffsetByName(j, "CVoxelVisibility", "m_EnclosedClustersBlock");
CVoxelVisibility.m_MasksBlock = findOffsetByName(j, "CVoxelVisibility", "m_MasksBlock");
CVoxelVisibility.m_nVisBlocks = findOffsetByName(j, "CVoxelVisibility", "m_nVisBlocks");
